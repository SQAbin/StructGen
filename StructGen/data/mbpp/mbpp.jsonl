{"task_id": "1", "prompt": "def min_cost(cost, m, n):\n\"\"\"\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nYour code should satisfy these tests:\nmin_cost([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 2) == 15\nmin_cost([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, 1) == 6\nmin_cost([[1, 2], [3, 4]], 1, 1) == 5\nmin_cost([[10, 20, 30], [40, 50, 60]], 1, 2) == 90\nmin_cost([[2, 3], [4, 5]], 1, 1) == 7\n\"\"\"\n", "entry_point": "min_cost", "test": "def check(candidate):\n\n    assert candidate([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\n    assert candidate([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\n    assert candidate([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16\n"}
{"task_id": "2", "prompt": "def similar_elements(test_tup1, test_tup2):\n\"\"\"\nWrite a function to find the similar elements from the given two tuple lists.\nYour code should satisfy these tests:\nsimilar_elements((1, 2, 3), (3, 4, 5)) == (3,)\nsimilar_elements(('a', 'b', 'c'), ('c', 'd', 'e')) == ('c',)\nsimilar_elements((10, 20, 30), (40, 50, 60)) == ()\n\"\"\"\n", "entry_point": "similar_elements", "test": "def check(candidate):\n\n    assert candidate((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n    assert candidate((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\n    assert candidate((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)\n"}
{"task_id": "3", "prompt": "def is_not_prime(n):\n\"\"\"\nWrite a python function to identify non-prime numbers.\nYour code should satisfy these tests:\nis_not_prime(4) == True\nis_not_prime(17) == False\nis_not_prime(1) == False\n\"\"\"\n", "entry_point": "is_not_prime", "test": "def check(candidate):\n\n    assert candidate(2) == False\n    assert candidate(10) == True\n    assert candidate(35) == True\n"}
{"task_id": "4", "prompt": "def heap_queue_largest(nums,n):\n\"\"\"\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nYour code should satisfy these tests:\nheap_queue_largest([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]\nheap_queue_largest([10, 20, 4, 45, 99], 2) == [99, 45]\nheap_queue_largest([-1, -2, -3, -4, -5], 4) == [-1, -2, -3, -4]\n\"\"\"\n", "entry_point": "heap_queue_largest", "test": "def check(candidate):\n\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n"}
{"task_id": "5", "prompt": "def count_ways(n):\n\"\"\"\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nYour code should satisfy these tests:\ncount_ways(2) == 3\ncount_ways(3) == 0\ncount_ways(4) == 11\n\"\"\"\n", "entry_point": "count_ways", "test": "def check(candidate):\n\n    assert candidate(2) == 3\n    assert candidate(8) == 153\n    assert candidate(12) == 2131\n"}
{"task_id": "6", "prompt": "def is_Power_Of_Two(x):\n\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nYour code should satisfy these tests:\nis_Power_Of_Two(1) == True\nis_Power_Of_Two(2) == True\nis_Power_Of_Two(3) == False\nis_Power_Of_Two(16) == True\nis_Power_Of_Two(0) == False\n\"\"\"\n", "entry_point": "is_Power_Of_Two", "test": "def check(candidate):\n\n    assert differ_At_One_Bit_Pos(13,9) == True\n    assert differ_At_One_Bit_Pos(15,8) == False\n    assert differ_At_One_Bit_Pos(2,4) == False\n"}
{"task_id": "7", "prompt": "def find_char_long(text):\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\nYour code should satisfy these tests:\nfind_char_long(\"This is a simple test\") == ['This', 'simple', 'test']\nfind_char_long(\"Python programming is fun\") == ['Python', 'programming']\nfind_char_long(\"Find words longer than four\") == ['Find', 'words', 'longer', 'than', 'four']\n\"\"\"\n", "entry_point": "find_char_long", "test": "def check(candidate):\n\n    assert candidate('Please move back to stream') == ['Please', 'move', 'back', 'stream']\n    assert candidate('Jing Eco and Tech') == ['Jing', 'Tech']\n    assert candidate('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']\n"}
{"task_id": "8", "prompt": "def square_nums(nums):\n\"\"\"\nWrite a function to find squares of individual elements in a list using lambda function.\nYour code should satisfy these tests:\nsquare_nums([1, 2, 3, 4]) == [1, 4, 9, 16]\nsquare_nums([-1, -2, -3, -4]) == [1, 4, 9, 16]\nsquare_nums([0, 5, 10]) == [0, 25, 100]\n\"\"\"\n", "entry_point": "square_nums", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10,20,30])==([100,400,900])\n    assert candidate([12,15])==([144,225])\n"}
{"task_id": "9", "prompt": "def find_Rotations(str):\n\"\"\"\nWrite a python function to find the minimum number of rotations required to get the same string.\nYour code should satisfy these tests:\nfind_Rotations(\"abcabc\") == 3\nfind_Rotations(\"abcd\") == 4\nfind_Rotations(\"aabb\") == 4\n\"\"\"\n", "entry_point": "find_Rotations", "test": "def check(candidate):\n\n    assert candidate(\"aaaa\") == 1\n    assert candidate(\"ab\") == 2\n    assert candidate(\"abc\") == 3\n"}
{"task_id": "10", "prompt": "def small_nnum(list1,n):\n\"\"\"\nWrite a function to get the n smallest items from a dataset.\nYour code should satisfy these tests:\nsmall_nnum([5, 7, 2, 3, 1], 3) == [1, 2, 3]\nsmall_nnum([10, 22, 5, 75, 65, 80], 4) == [5, 10, 22, 65]\nsmall_nnum([1, 1, 1, 1, 1], 2) == [1, 1]\n\"\"\"\n", "entry_point": "small_nnum", "test": "def check(candidate):\n\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]\n"}
{"task_id": "11", "prompt": "def remove_Occ(s,ch):\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nYour code should satisfy these tests:\nremove_Occ(\"hello\", \"l\") == 'heo'\nremove_Occ(\"banana\", \"n\") == 'baaa'\nremove_Occ(\"programming\", \"g\") == 'prorammin'\n\"\"\"\n", "entry_point": "remove_Occ", "test": "def check(candidate):\n\n    assert candidate(\"hello\",\"l\") == \"heo\"\n    assert candidate(\"abcda\",\"a\") == \"bcd\"\n    assert candidate(\"PHP\",\"P\") == \"H\"\n"}
{"task_id": "12", "prompt": "def sort_matrix(M):\n\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nYour code should satisfy these tests:\nsort_matrix([[3, 2, 1], [1, 2, 3], [2, 1, 3]]) == [[3, 2, 1], [1, 2, 3], [2, 1, 3]]\nsort_matrix([[5, 5, 5], [1, 1, 1], [3, 3, 3]]) == [[1, 1, 1], [3, 3, 3], [5, 5, 5]]\nsort_matrix([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n\"\"\"\n", "entry_point": "sort_matrix", "test": "def check(candidate):\n\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert candidate([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n"}
{"task_id": "13", "prompt": "def count_common(words):\n\"\"\"\nWrite a function to count the most common words in a dictionary.\n\"\"\"\n", "entry_point": "count_common", "test": "def check(candidate):\n\n    assert candidate(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    assert candidate(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\n    assert candidate(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\n"}
{"task_id": "14", "prompt": "def find_Volume(l,b,h):\n\"\"\"\nWrite a python function to find the volume of a triangular prism.\nYour code should satisfy these tests:\nfind_Volume(2, 3, 4) == 12.0\nfind_Volume(5, 5, 5) == 62.5\nfind_Volume(10, 2, 1) == 10.0\n\"\"\"\n", "entry_point": "find_Volume", "test": "def check(candidate):\n\n    assert candidate(10,8,6) == 240\n    assert candidate(3,2,2) == 6\n    assert candidate(1,2,1) == 1\n"}
{"task_id": "15", "prompt": "def split_lowerstring(text):\n\"\"\"\nWrite a function to split a string at lowercase letters.\nYour code should satisfy these tests:\nsplit_lowerstring(\"helloWorld\") == ['h', 'e', 'l', 'l', 'oW', 'o', 'r', 'l', 'd']\nsplit_lowerstring(\"pythonProgramming\") == ['p', 'y', 't', 'h', 'o', 'nP', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']\nsplit_lowerstring(\"splitThisString\") == ['s', 'p', 'l', 'i', 'tT', 'h', 'i', 'sS', 't', 'r', 'i', 'n', 'g']\nsplit_lowerstring(\"lowercaseUPPERCASE\") == ['l', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'eUPPERCASE']\nsplit_lowerstring(\"aBcDeFg\") == ['aB', 'cD', 'eF', 'g']\n\"\"\"\n", "entry_point": "split_lowerstring", "test": "def check(candidate):\n\n    assert candidate(\"AbCd\")==['bC','d']\n    assert candidate(\"Python\")==['y', 't', 'h', 'o', 'n']\n    assert candidate(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']\n"}
{"task_id": "16", "prompt": "def text_lowercase_underscore(text):\n\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nYour code should satisfy these tests:\ntext_lowercase_underscore(\"hello_world\") == 'Found a match!'\ntext_lowercase_underscore(\"test_case\") == 'Found a match!'\ntext_lowercase_underscore(\"example_test_case\") == 'Not matched!'\n\"\"\"\n", "entry_point": "text_lowercase_underscore", "test": "def check(candidate):\n\n    assert candidate(\"aab_cbbbc\")==('Found a match!')\n    assert candidate(\"aab_Abbbc\")==('Not matched!')\n    assert candidate(\"Aaab_abbbc\")==('Not matched!')\n"}
{"task_id": "17", "prompt": "def square_perimeter(a):\n\"\"\"\nWrite a function to find the perimeter of a square.\nYour code should satisfy these tests:\nsquare_perimeter(1) == 4\nsquare_perimeter(5) == 20\nsquare_perimeter(10) == 40\n\"\"\"\n", "entry_point": "square_perimeter", "test": "def check(candidate):\n\n    assert candidate(10)==40\n    assert candidate(5)==20\n    assert candidate(4)==16\n"}
{"task_id": "18", "prompt": "def str_to_list(string):\n\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nYour code should satisfy these tests:\nstr_to_list(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nstr_to_list(\"python\") == ['p', 'y', 't', 'h', 'o', 'n']\nstr_to_list(\"12345\") == ['1', '2', '3', '4', '5']\nstr_to_list(\"\") == []\nstr_to_list(\"a b c\") == ['a', ' ', 'b', ' ', 'c']\n\"\"\"\n", "entry_point": "str_to_list", "test": "def check(candidate):\n\n    assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n    assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\n    assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'\n"}
{"task_id": "19", "prompt": "def test_duplicate(arraynums):\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nYour code should satisfy these tests:\ntest_duplicate([1, 2, 3, 4, 5]) == False\ntest_duplicate([1, 2, 2, 3, 4]) == True\ntest_duplicate(['a', 'b', 'c', 'a']) == True\n\"\"\"\n", "entry_point": "test_duplicate", "test": "def check(candidate):\n\n    assert candidate(([1,2,3,4,5]))==False\n    assert candidate(([1,2,3,4, 4]))==True\n    assert candidate([1,1,2,2,3,3,4,4,5])==True\n"}
{"task_id": "20", "prompt": "def is_woodall(x):\n\"\"\"\nWrite a function to check if the given number is woodball or not.\nYour code should satisfy these tests:\nis_woodall(7) == True\nis_woodall(23) == True\nis_woodall(31) == False\n\"\"\"\n", "entry_point": "is_woodall", "test": "def check(candidate):\n\n    assert candidate(383) == True\n    assert candidate(254) == False\n    assert candidate(200) == False\n"}
{"task_id": "21", "prompt": "def multiples_of_num(m,n):\n\"\"\"\nWrite a function to find m number of multiples of n.\nYour code should satisfy these tests:\nmultiples_of_num(5, 2) == [2, 4, 6, 8, 10]\nmultiples_of_num(3, 7) == [7, 14, 21]\nmultiples_of_num(4, 1) == [1, 2, 3, 4]\n\"\"\"\n", "entry_point": "multiples_of_num", "test": "def check(candidate):\n\n    assert candidate(4,3)== [3,6,9,12]\n    assert candidate(2,5)== [5,10]\n    assert candidate(9,2)== [2,4,6,8,10,12,14,16,18]\n"}
{"task_id": "22", "prompt": "def find_first_duplicate(nums):\n\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nYour code should satisfy these tests:\nfind_first_duplicate([1, 2, 3, 4, 2]) == 2\nfind_first_duplicate([5, 3, 8, 3, 5]) == 3\nfind_first_duplicate([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == -1\nfind_first_duplicate([7, 7, 7, 7, 7]) == 7\nfind_first_duplicate([1, 3, 5, 7, 9, 1, 3, 5]) == 1\n\"\"\"\n", "entry_point": "find_first_duplicate", "test": "def check(candidate):\n\n    assert candidate(([1, 2, 3, 4, 4, 5]))==4\n    assert candidate([1, 2, 3, 4])==-1\n    assert candidate([1, 1, 2, 3, 3, 2, 2])==1\n"}
{"task_id": "23", "prompt": "def maximum_Sum(list1):\n\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nYour code should satisfy these tests:\nmaximum_Sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 24\nmaximum_Sum([[0, -1, -2], [-3, -4, -5], [-6, -7, -8]]) == -3\nmaximum_Sum([[100], [200, 300], [10, 20, 30, 40]]) == 500\n\"\"\"\n", "entry_point": "maximum_Sum", "test": "def check(candidate):\n\n    assert candidate([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n    assert candidate([[0,1,1],[1,1,2],[3,2,1]]) == 6\n    assert candidate([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19\n"}
{"task_id": "24", "prompt": "def binary_to_decimal(binary):\n\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nYour code should satisfy these tests:\nbinary_to_decimal(1010) == 10\nbinary_to_decimal(1101) == 13\nbinary_to_decimal(111) == 7\nbinary_to_decimal(10000) == 16\nbinary_to_decimal(1001) == 9\n\"\"\"\n", "entry_point": "binary_to_decimal", "test": "def check(candidate):\n\n    assert candidate(100) == 4\n    assert candidate(1011) == 11\n    assert candidate(1101101) == 109\n"}
{"task_id": "25", "prompt": "def find_Product(arr,n):\n\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nYour code should satisfy these tests:\nfind_Product([1, 2, 3, 4, 5], 5) == 120\nfind_Product([2, 2, 3, 3, 4], 5) == 24\nfind_Product([1, 1, 1, 1, 1], 5) == 1\n\"\"\"\n", "entry_point": "find_Product", "test": "def check(candidate):\n\n    assert candidate([1,1,2,3],4) == 6\n    assert candidate([1,2,3,1,1],5) == 6\n    assert candidate([1,1,4,5,6],5) == 120\n"}
{"task_id": "26", "prompt": "def check_k_elements(test_list, K):\n\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nYour code should satisfy these tests:\ncheck_k_elements([(5, 5), (5, 5)], 5) == True\ncheck_k_elements([(1, 2), (3, 4)], 5) == False\ncheck_k_elements([(7, 7, 7), (7, 7)], 7) == True\n\"\"\"\n", "entry_point": "check_k_elements", "test": "def check(candidate):\n\n    assert candidate([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n    assert candidate([(7, 7, 7), (7, 7)], 7) == True\n    assert candidate([(9, 9), (9, 9, 9, 9)], 7) == False\n"}
{"task_id": "27", "prompt": "def remove(list):\n\"\"\"\nWrite a python function to remove all digits from a list of strings.\nYour code should satisfy these tests:\nremove(['abc123', 'def456', 'ghi789']) == ['abc', 'def', 'ghi']\nremove(['123abc', '456def', '789ghi']) == ['abc', 'def', 'ghi']\nremove(['no1numbers2here', '3just4digits5']) == ['nonumbershere', 'justdigits']\n\"\"\"\n", "entry_point": "remove", "test": "def check(candidate):\n\n    assert candidate(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n    assert candidate(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\n    assert candidate(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']\n"}
{"task_id": "28", "prompt": "def binomial_Coeff(n,k):\n\"\"\"\nWrite a python function to find binomial co-efficient.\nYour code should satisfy these tests:\nbinomial_Coeff(5, 2) == 10\nbinomial_Coeff(6, 3) == 20\nbinomial_Coeff(10, 0) == 1\n\"\"\"\n", "entry_point": "binomial_Coeff", "test": "def check(candidate):\n\n    assert candidate(5,2) == 10\n    assert candidate(4,3) == 4\n    assert candidate(3,2) == 3\n"}
{"task_id": "29", "prompt": "def get_Odd_Occurrence(arr,arr_size):\n\"\"\"\nWrite a python function to find the element occurring odd number of times.\nYour code should satisfy these tests:\nget_Odd_Occurrence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nget_Odd_Occurrence([4, 1, 2, 2, 5, 1, 4, 5, 4], 9) == 4\nget_Odd_Occurrence([10, 10, 10, 10, 10], 5) == 10\n\"\"\"\n", "entry_point": "get_Odd_Occurrence", "test": "def check(candidate):\n\n    assert candidate([1,2,3,1,2,3,1],7) == 1\n    assert candidate([1,2,3,2,3,1,3],7) == 3\n    assert candidate([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5\n"}
{"task_id": "30", "prompt": "def check_Equality(s):\n\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nYour code should satisfy these tests:\ncheck_Equality(\"a\") == True\ncheck_Equality(\"ab\") == False\ncheck_Equality(\"aba\") == True\ncheck_Equality(\"abcba\") == True\ncheck_Equality(\"xyz\") == False\n\"\"\"\n", "entry_point": "check_Equality", "test": "def check(candidate):\n\n    assert count_Substring_With_Equal_Ends(\"abc\") == 3\n    assert count_Substring_With_Equal_Ends(\"abcda\") == 6\n    assert count_Substring_With_Equal_Ends(\"ab\") == 2\n"}
{"task_id": "31", "prompt": "def func(nums, k):\n\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nYour code should satisfy these tests:\nfunc([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 2) == [2, 3]\nfunc([[1, 1, 1], [2, 2, 2], [3, 3, 3]], 1) == [1]\nfunc([[10, 20], [10, 30], [20, 30]], 3) == [10, 20, 30]\nfunc([[5, 5, 5], [5, 5, 5], [5, 5, 5]], 1) == [5]\nfunc([[1, 2], [3, 4], [5, 6]], 6) == [1, 2, 3, 4, 5, 6]\n\"\"\"\n", "entry_point": "func", "test": "def check(candidate):\n\n    assert candidate([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n    assert candidate([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\n    assert candidate([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]\n"}
{"task_id": "32", "prompt": "def max_Prime_Factors(n):\n\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nYour code should satisfy these tests:\nmax_Prime_Factors(10) == 5\nmax_Prime_Factors(15) == 5\nmax_Prime_Factors(21) == 7\n\"\"\"\n", "entry_point": "max_Prime_Factors", "test": "def check(candidate):\n\n    assert candidate(15) == 5\n    assert candidate(6) == 3\n    assert candidate(2) == 2\n"}
{"task_id": "33", "prompt": "def decimal_To_Binary(N):\n\"\"\"\nWrite a python function to convert a decimal number to binary number.\nYour code should satisfy these tests:\ndecimal_To_Binary(0) == 0\ndecimal_To_Binary(1) == 1\ndecimal_To_Binary(2) == 10\ndecimal_To_Binary(5) == 101\ndecimal_To_Binary(10) == 1010\n\"\"\"\n", "entry_point": "decimal_To_Binary", "test": "def check(candidate):\n\n    assert candidate(10) == 1010\n    assert candidate(1) == 1\n    assert candidate(20) == 10100\n"}
{"task_id": "34", "prompt": "def find_missing(ar,N):\n\"\"\"\nWrite a python function to find the missing number in a sorted array.\nYour code should satisfy these tests:\nfind_missing([1, 2, 3, 5, 6], 5) == 4\nfind_missing([1, 2, 4, 5, 6, 7], 6) == 3\nfind_missing([1, 3, 4, 5, 6, 7, 8], 7) == 2\n\"\"\"\n", "entry_point": "find_missing", "test": "def check(candidate):\n\n    assert candidate([1,2,3,5],4) == 4\n    assert candidate([1,3,4,5],4) == 2\n    assert candidate([1,2,3,5,6,7],5) == 4\n"}
{"task_id": "35", "prompt": "def find_rect_num(n):\n\"\"\"\nWrite a function to find the n-th rectangular number.\nYour code should satisfy these tests:\nfind_rect_num(1) == 2\nfind_rect_num(5) == 30\nfind_rect_num(10) == 110\n\"\"\"\n", "entry_point": "find_rect_num", "test": "def check(candidate):\n\n    assert candidate(4) == 20\n    assert candidate(5) == 30\n    assert candidate(6) == 42\n"}
{"task_id": "36", "prompt": "def find_Nth_Digit(p,q,N):\n\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nYour code should satisfy these tests:\nfind_Nth_Digit(1, 3, 1) == 3\nfind_Nth_Digit(2, 5, 2) == 0\nfind_Nth_Digit(3, 7, 3) == 8\n\"\"\"\n", "entry_point": "find_Nth_Digit", "test": "def check(candidate):\n\n    assert candidate(1,2,1) == 5\n    assert candidate(3,5,1) == 6\n    assert candidate(5,6,5) == 3\n"}
{"task_id": "37", "prompt": "def sort_mixed_list(mixed_list):\n\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nYour code should satisfy these tests:\nsort_mixed_list([3, 'banana', 1, 'apple']) == [1, 3, 'apple', 'banana']\nsort_mixed_list(['zebra', 2, 'dog', 1]) == [1, 2, 'dog', 'zebra']\nsort_mixed_list([5, 'cat', 'bat', 4, 2]) == [2, 4, 5, 'bat', 'cat']\n\"\"\"\n", "entry_point": "sort_mixed_list", "test": "def check(candidate):\n\n    assert candidate([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    assert candidate([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    assert candidate([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n"}
{"task_id": "38", "prompt": "def div_even_odd(list1):\n\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nYour code should satisfy these tests:\ndiv_even_odd([2, 4, 6, 8, 10]) == -2.0\ndiv_even_odd([1, 3, 5, 7, 2]) == 2.0\ndiv_even_odd([-2, -3, -4, -5, -6]) == 0.6666666666666666\n\"\"\"\n", "entry_point": "div_even_odd", "test": "def check(candidate):\n\n    assert candidate([1,3,5,7,4,1,6,8])==4\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==2\n    assert candidate([1,5,7,9,10])==10\n"}
{"task_id": "39", "prompt": "def rearange_string(S):\n\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nYour code should satisfy these tests:\nrearange_string(\"aabbcc\") == 'abcabc'\nrearange_string(\"abccba\") == 'abcabc'\nrearange_string(\"aaaabbbcc\") == 'ababacabc'\nrearange_string(\"abcdef\") == 'abcdef'\nrearange_string(\"aabbccddeeff\") == 'abcdefabcdef'\n\"\"\"\n", "entry_point": "rearange_string", "test": "def check(candidate):\n\n    assert candidate(\"aab\")==('aba')\n    assert candidate(\"aabb\")==('abab')\n    assert candidate(\"abccdd\")==('cdabcd')\n"}
{"task_id": "40", "prompt": "def freq_element(nums):\n\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nYour code should satisfy these tests:\nfreq_element([[1, 2, 2], [2, 3, 4], [4, 4, 4]]) == {1: 1, 2: 3, 3: 1, 4: 4}\nfreq_element([[5, 5, 6], [6, 7], [8, 8, 8, 8]]) == {5: 2, 6: 2, 7: 1, 8: 4}\nfreq_element([[9], [10, 10], [11, 11, 11]]) == {9: 1, 10: 2, 11: 3}\n\"\"\"\n", "entry_point": "freq_element", "test": "def check(candidate):\n\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n    assert candidate([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\n    assert candidate([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})\n"}
{"task_id": "41", "prompt": "def filter_evennumbers(nums):\n\"\"\"\nWrite a function to filter even numbers using lambda function.\nYour code should satisfy these tests:\nfilter_evennumbers([1, 2, 3, 4, 5, 6]) == [2, 4, 6]\nfilter_evennumbers([10, 15, 20, 25, 30]) == [10, 20, 30]\nfilter_evennumbers([-2, -3, -4, -5, -6]) == [-2, -4, -6]\n\"\"\"\n", "entry_point": "filter_evennumbers", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n    assert candidate([10,20,45,67,84,93])==[10,20,84]\n    assert candidate([5,7,9,8,6,4,3])==[8,6,4]\n"}
{"task_id": "42", "prompt": "def find_Sum(arr,n):\n\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nYour code should satisfy these tests:\nfind_Sum([1, 2, 3, 2, 4, 5, 6, 3, 3], 9) == 13\nfind_Sum([10, 20, 10, 20, 30, 40, 50], 7) == 60\nfind_Sum([7, 8, 9, 10, 11, 12], 6) == 0\n\"\"\"\n", "entry_point": "find_Sum", "test": "def check(candidate):\n\n    assert candidate([1,2,3,1,1,4,5,6],8) == 3\n    assert candidate([1,2,3,1,1],5) == 3\n    assert candidate([1,1,2],3) == 2\n"}
{"task_id": "43", "prompt": "def text_match(text):\n\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nYour code should satisfy these tests:\ntext_match(\"hello_world\") == 'Found a match!'\ntext_match(\"Hello_world\") == 'Not matched!'\ntext_match(\"hello_world_123\") == 'Not matched!'\n\"\"\"\n", "entry_point": "text_match", "test": "def check(candidate):\n\n    assert candidate(\"aab_cbbbc\") == 'Found a match!'\n    assert candidate(\"aab_Abbbc\") == 'Not matched!'\n    assert candidate(\"Aaab_abbbc\") == 'Not matched!'\n"}
{"task_id": "44", "prompt": "def text_match_string(text):\n\"\"\"\nWrite a function that matches a word at the beginning of a string.\nYour code should satisfy these tests:\ntext_match_string(\"HelloWorld\") == 'Found a match!'\ntext_match_string(\"123Start\") == 'Found a match!'\ntext_match_string(\"!InvalidStart\") == 'Not matched!'\n\"\"\"\n", "entry_point": "text_match_string", "test": "def check(candidate):\n\n    assert candidate(\" python\")==('Not matched!')\n    assert candidate(\"python\")==('Found a match!')\n    assert candidate(\"  lang\")==('Not matched!')\n"}
{"task_id": "45", "prompt": "def find_gcd(x, y):\n\"\"\"\nWrite a function to find the gcd of the given array elements.\nYour code should satisfy these tests:\nget_gcd([12, 18, 24]) == 6\nget_gcd([45, 60, 75]) == 15\nget_gcd([14, 28, 56]) == 14\nget_gcd([100, 200, 300]) == 100\nget_gcd([17, 34, 51]) == 17\n\"\"\"\n", "entry_point": "find_gcd", "test": "def check(candidate):\n\n    assert get_gcd([2, 4, 6, 8, 16]) == 2\n    assert get_gcd([1, 2, 3]) == 1\n    assert get_gcd([2, 4, 6, 8]) == 2\n"}
{"task_id": "46", "prompt": "def test_distinct(data):\n\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nYour code should satisfy these tests:\ntest_distinct([1, 2, 3, 4, 5]) == True\ntest_distinct([1, 2, 2, 3, 4]) == False\ntest_distinct(['a', 'b', 'c', 'a']) == False\n\"\"\"\n", "entry_point": "test_distinct", "test": "def check(candidate):\n\n    assert candidate([1,5,7,9]) == True\n    assert candidate([2,4,5,5,7,9]) == False\n    assert candidate([1,2,3]) == True\n"}
{"task_id": "47", "prompt": "def compute_Last_Digit(A,B):\n\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nYour code should satisfy these tests:\ncompute_Last_Digit(2, 6) == 0\ncompute_Last_Digit(3, 3) == 1\ncompute_Last_Digit(4, 8) == 0\n\"\"\"\n", "entry_point": "compute_Last_Digit", "test": "def check(candidate):\n\n    assert candidate(2,4) == 2\n    assert candidate(6,8) == 6\n    assert candidate(1,2) == 2\n"}
{"task_id": "48", "prompt": "def odd_bit_set_number(n):\n\"\"\"\nWrite a python function to set all odd bits of a given number.\nYour code should satisfy these tests:\nodd_bit_set_number(5) == 5\nodd_bit_set_number(10) == 15\nodd_bit_set_number(23) == 23\nodd_bit_set_number(42) == 63\nodd_bit_set_number(17) == 21\n\"\"\"\n", "entry_point": "odd_bit_set_number", "test": "def check(candidate):\n\n    assert candidate(10) == 15\n    assert candidate(20) == 21\n    assert candidate(30) == 31\n"}
{"task_id": "49", "prompt": "def specified_element(nums, N):\n\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nYour code should satisfy these tests:\nspecified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\nspecified_element([[10, 20], [30, 40], [50, 60]], 0) == [10, 30, 50]\nspecified_element([[100, 200, 300], [400, 500, 600]], 2) == [300, 600]\n\"\"\"\n", "entry_point": "specified_element", "test": "def check(candidate):\n\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]\n"}
{"task_id": "50", "prompt": "def min_length_list(input_list):\n\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nYour code should satisfy these tests:\nmin_length_list([['a', 'b'], ['c'], ['d', 'e', 'f']]) == (1, ['c'])\nmin_length_list([['hello'], ['world', 'is'], ['big']]) == (1, ['hello'])\nmin_length_list([['python'], ['java'], ['c++']]) == (1, ['python'])\n\"\"\"\n", "entry_point": "min_length_list", "test": "def check(candidate):\n\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n    assert candidate([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\n    assert candidate([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])\n"}
{"task_id": "51", "prompt": "def check_equilateral(x,y,z):\n\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nYour code should satisfy these tests:\ncheck_equilateral(5, 5, 5) == True\ncheck_equilateral(3, 4, 5) == False\ncheck_equilateral(7, 7, 10) == False\n\"\"\"\n", "entry_point": "check_equilateral", "test": "def check(candidate):\n\n    assert candidate(6,8,12)==False\n    assert candidate(6,6,12)==False\n    assert candidate(6,6,6)==True\n"}
{"task_id": "52", "prompt": "def parallelogram_area(b,h):\n\"\"\"\nWrite a function to caluclate area of a parallelogram.\nYour code should satisfy these tests:\nparallelogram_area(5, 10) == 50\nparallelogram_area(7, 3) == 21\nparallelogram_area(12, 8) == 96\n\"\"\"\n", "entry_point": "parallelogram_area", "test": "def check(candidate):\n\n    assert candidate(10,20)==200\n    assert candidate(15,20)==300\n    assert candidate(8,9)==72\n"}
{"task_id": "53", "prompt": "def check_Equality(str):\n\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nYour code should satisfy these tests:\ncheck_Equality(\"radar\") == \"Equal\"\ncheck_Equality(\"hello\") == \"Not Equal\"\ncheck_Equality(\"level\") == \"Equal\"\n\"\"\"\n", "entry_point": "check_Equality", "test": "def check(candidate):\n\n    assert candidate(\"abcda\") == \"Equal\"\n    assert candidate(\"ab\") == \"Not Equal\"\n    assert candidate(\"mad\") == \"Not Equal\"\n"}
{"task_id": "54", "prompt": "def counting_sort(my_list):\n\"\"\"\nWrite a function to sort the given array by using counting sort.\nYour code should satisfy these tests:\ncounting_sort([4, 2, 2, 8, 3, 3, 1]) == [1, 2, 2, 3, 3, 4, 8]\ncounting_sort([7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7]\ncounting_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\"\"\"\n", "entry_point": "counting_sort", "test": "def check(candidate):\n\n    assert candidate([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n    assert candidate([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\n    assert candidate([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]\n"}
{"task_id": "55", "prompt": "def tn_gp(a,n,r):\n\"\"\"\nWrite a function to find t-nth term of geometric series.\nYour code should satisfy these tests:\ntn_gp(2, 3, 4) == 32\ntn_gp(5, 5, 2) == 80\ntn_gp(1, 10, 3) == 19683\n\"\"\"\n", "entry_point": "tn_gp", "test": "def check(candidate):\n\n    assert candidate(1,5,2)==16\n    assert candidate(1,5,4)==256\n    assert candidate(2,6,3)==486\n"}
{"task_id": "56", "prompt": "def rev(num):\n\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nYour code should satisfy these tests:\nrev(123) == 321\nrev(4567) == 7654\nrev(101) == 101\nrev(987654321) == 123456789\nrev(0) == 0\n\"\"\"\n", "entry_point": "rev", "test": "def check(candidate):\n\n    assert check(70) == False\n    assert check(23) == False\n    assert check(73) == True\n"}
{"task_id": "57", "prompt": "def find_Max_Num(arr,n):\n\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nYour code should satisfy these tests:\nfind_Max_Num([1, 2, 3, 4], 4) == 4321\nfind_Max_Num([9, 0, 1, 3], 4) == 9310\nfind_Max_Num([5, 5, 5, 5], 4) == 5555\n\"\"\"\n", "entry_point": "find_Max_Num", "test": "def check(candidate):\n\n    assert candidate([1,2,3],3) == 321\n    assert candidate([4,5,6,1],4) == 6541\n    assert candidate([1,2,3,9],4) == 9321\n"}
{"task_id": "58", "prompt": "def opposite_Signs(x,y):\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nYour code should satisfy these tests:\nopposite_Signs(5, -10) == True\nopposite_Signs(-7, 3) == True\nopposite_Signs(8, 12) == False\n\"\"\"\n", "entry_point": "opposite_Signs", "test": "def check(candidate):\n\n    assert candidate(1,-2) == True\n    assert candidate(3,2) == False\n    assert candidate(-10,-10) == False\n"}
{"task_id": "59", "prompt": "def is_octagonal(n):\n\"\"\"\nWrite a function to find the nth octagonal number.\nYour code should satisfy these tests:\nis_octagonal(1) == 1\nis_octagonal(8) == 176\nis_octagonal(21) == 1281\n\"\"\"\n", "entry_point": "is_octagonal", "test": "def check(candidate):\n\n    assert candidate(5) == 65\n    assert candidate(10) == 280\n    assert candidate(15) == 645\n"}
{"task_id": "60", "prompt": "def max_len_sub( arr, n):\n\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nYour code should satisfy these tests:\nmax_len_sub([1, 2, 3, 4, 5], 5) == 5\nmax_len_sub([1, 1, 1, 1, 1], 5) == 5\nmax_len_sub([1, 3, 5, 7, 9], 5) == 1\nmax_len_sub([1, 2, 2, 3, 3, 4, 4, 5], 8) == 8\nmax_len_sub([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 10) == 10\n\"\"\"\n", "entry_point": "max_len_sub", "test": "def check(candidate):\n\n    assert candidate([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n    assert candidate([-2, -1, 5, -1, 4, 0, 3], 7) == 4\n    assert candidate([9, 11, 13, 15, 18], 5) == 1\n"}
{"task_id": "61", "prompt": "def count_Substrings(s,n):\n\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nYour code should satisfy these tests:\ncount_Substrings(\"1210\", 4) == 4\ncount_Substrings(\"111\", 3) == 6\ncount_Substrings(\"000\", 3) == 0\n\"\"\"\n", "entry_point": "count_Substrings", "test": "def check(candidate):\n\n    assert candidate('112112',6) == 6\n    assert candidate('111',3) == 6\n    assert candidate('1101112',7) == 12\n"}
{"task_id": "62", "prompt": "def smallest_num(xs):\n\"\"\"\nWrite a python function to find smallest number in a list.\nYour code should satisfy these tests:\nsmallest_num([3, 1, 4, 1, 5, 9]) == 1\nsmallest_num([-7, -1, -5, -3]) == -7\nsmallest_num([100, 200, 3, 400, 500]) == 3\n\"\"\"\n", "entry_point": "smallest_num", "test": "def check(candidate):\n\n    assert candidate([10, 20, 1, 45, 99]) == 1\n    assert candidate([1, 2, 3]) == 1\n    assert candidate([45, 46, 50, 60]) == 45\n"}
{"task_id": "63", "prompt": "def max_difference(test_list):\n\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nYour code should satisfy these tests:\nmax_difference([(1, 5), (10, 3), (7, 2)]) == 7\nmax_difference([(0, 0), (1, 1), (2, 2)]) == 0\nmax_difference([(-5, 5), (-10, 10), (-7, 7)]) == 20\n\"\"\"\n", "entry_point": "max_difference", "test": "def check(candidate):\n\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert candidate([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n    assert candidate([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n"}
{"task_id": "64", "prompt": "def subject_marks(subjectmarks):\n\"\"\"\nWrite a function to sort a list of tuples using lambda.\n\"\"\"\n", "entry_point": "subject_marks", "test": "def check(candidate):\n\n    assert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert candidate([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\n    assert candidate([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n"}
{"task_id": "65", "prompt": "def recursive_list_sum(data_list):\n\"\"\"\nWrite a function of recursion list sum.\nYour code should satisfy these tests:\nrecursive_list_sum([1, 2, [3, 4], [5, 6]]) == 21\nrecursive_list_sum([1, [2, [3, [4, [5]]]]]) == 15\nrecursive_list_sum([[1, 2, [3]], 4, [5, 6, [7, 8]]]) == 36\n\"\"\"\n", "entry_point": "recursive_list_sum", "test": "def check(candidate):\n\n    assert candidate(([1, 2, [3,4],[5,6]]))==21\n    assert candidate(([7, 10, [15,14],[19,41]]))==106\n    assert candidate(([10, 20, [30,40],[50,60]]))==210\n"}
{"task_id": "66", "prompt": "def pos_count(list):\n\"\"\"\nWrite a python function to count positive numbers in a list.\nYour code should satisfy these tests:\npos_count([1, -2, 3, 4, -5]) == 3\npos_count([-1, -2, -3, -4, -5]) == 0\npos_count([0, 2, 4, 6, 8]) == 5\n\"\"\"\n", "entry_point": "pos_count", "test": "def check(candidate):\n\n    assert candidate([1,-2,3,-4]) == 2\n    assert candidate([3,4,5,-1]) == 3\n    assert candidate([1,2,3,4]) == 4\n"}
{"task_id": "67", "prompt": "def bell_number(n):\n\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nYour code should satisfy these tests:\nbell_number(0) == 1\nbell_number(1) == 1\nbell_number(5) == 52\n\"\"\"\n", "entry_point": "bell_number", "test": "def check(candidate):\n\n    assert candidate(2)==2\n    assert candidate(10)==115975\n    assert candidate(56)==6775685320645824322581483068371419745979053216268760300\n"}
{"task_id": "68", "prompt": "def is_Monotonic(A):\n\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nYour code should satisfy these tests:\nis_Monotonic([1, 2, 2, 3]) == True\nis_Monotonic([6, 5, 4, 4]) == True\nis_Monotonic([1, 3, 2]) == False\n\"\"\"\n", "entry_point": "is_Monotonic", "test": "def check(candidate):\n\n    assert candidate([6, 5, 4, 4]) == True\n    assert candidate([1, 2, 2, 3]) == True\n    assert candidate([1, 3, 2]) == False\n"}
{"task_id": "69", "prompt": "def is_sublist(l, s):\n\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nYour code should satisfy these tests:\nis_sublist([1, 2, 3, 4, 5], [2, 3]) == True\nis_sublist([10, 20, 30, 40], [10, 20, 30, 40, 50]) == False\nis_sublist(['a', 'b', 'c'], ['b', 'c']) == True\n\"\"\"\n", "entry_point": "is_sublist", "test": "def check(candidate):\n\n    assert candidate([2,4,3,5,7],[3,7])==False\n    assert candidate([2,4,3,5,7],[4,3])==True\n    assert candidate([2,4,3,5,7],[1,6])==False\n"}
{"task_id": "70", "prompt": "def find_equal_tuple(Input, k):\n\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nYour code should satisfy these tests:\nfind_equal_tuple([(1, 2), (3, 4), (5, 6)], 2) == 1\nfind_equal_tuple([(1, 2, 3), (4, 5), (6, 7, 8)], 2) == 0\nfind_equal_tuple([(10,), (20,), (30,)], 1) == 1\nfind_equal_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == 1\nfind_equal_tuple([(1,), (2, 3), (4, 5, 6)], 1) == 0\n\"\"\"\n", "entry_point": "find_equal_tuple", "test": "def check(candidate):\n\n    assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n    assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\n    assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'\n"}
{"task_id": "71", "prompt": "def comb_sort(nums):\n\"\"\"\nWrite a function to sort a list of elements using comb sort.\nYour code should satisfy these tests:\ncomb_sort([5, 3, 4, 2, 1]) == [1, 2, 3, 4, 5]\ncomb_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncomb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\"\"\"\n", "entry_point": "comb_sort", "test": "def check(candidate):\n\n    assert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert candidate([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n    assert candidate([99, 15, 13, 47]) == [13, 15, 47, 99]\n"}
{"task_id": "72", "prompt": "def dif_Square(n):\n\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nYour code should satisfy these tests:\ndif_Square(3) == True\ndif_Square(6) == False\ndif_Square(11) == True\n\"\"\"\n", "entry_point": "dif_Square", "test": "def check(candidate):\n\n    assert candidate(5) == True\n    assert candidate(10) == False\n    assert candidate(15) == True\n"}
{"task_id": "73", "prompt": "def multiple_split(text):\n\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nYour code should satisfy these tests:\nmultiple_split(\"apple; orange, banana*grape\") == ['apple', 'orange', 'banana', 'grape']\nmultiple_split(\"one\\ntwo;three,four*five\") == ['one', 'two;three,four', 'five']\nmultiple_split(\"red*blue,green;yellow\\npurple\") == ['red', 'blue,green;yellow', 'purple']\n\"\"\"\n", "entry_point": "multiple_split", "test": "def check(candidate):\n\n    assert candidate('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n    assert candidate('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\n    assert candidate('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']\n"}
{"task_id": "74", "prompt": "def is_samepatterns(colors, patterns):\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nYour code should satisfy these tests:\nis_samepatterns(['red', 'blue', 'red'], ['a', 'b', 'a']) == True\nis_samepatterns(['red', 'blue', 'green'], ['a', 'b', 'a']) == False\nis_samepatterns(['red', 'red', 'red'], ['a', 'a', 'a']) == True\n\"\"\"\n", "entry_point": "is_samepatterns", "test": "def check(candidate):\n\n    assert candidate([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n    assert candidate([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\n    assert candidate([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False\n"}
{"task_id": "75", "prompt": "def find_tuples(test_list, K):\n\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nYour code should satisfy these tests:\nfind_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 3) == '[(6, 24, 12), (12, 18, 21)]'\nfind_tuples([(10, 20, 30), (15, 25, 35), (40, 50, 60)], 5) == '[(10, 20, 30), (15, 25, 35), (40, 50, 60)]'\nfind_tuples([(8, 16, 24), (9, 18, 27), (10, 20, 30)], 2) == '[(8, 16, 24), (10, 20, 30)]'\nfind_tuples([(3, 6, 9), (4, 8, 12), (5, 10, 15)], 1) == '[(3, 6, 9), (4, 8, 12), (5, 10, 15)]'\nfind_tuples([(14, 28, 42), (21, 35, 49), (56, 70, 84)], 7) == '[(14, 28, 42), (21, 35, 49), (56, 70, 84)]'\n\"\"\"\n", "entry_point": "find_tuples", "test": "def check(candidate):\n\n    assert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    assert candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\n    assert candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'\n"}
{"task_id": "76", "prompt": "def count_Squares(m,n):\n\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nYour code should satisfy these tests:\ncount_Squares(3, 3) == 14.0\ncount_Squares(4, 5) == 40.0\ncount_Squares(1, 10) == 10.0\n\"\"\"\n", "entry_point": "count_Squares", "test": "def check(candidate):\n\n    assert candidate(4,3) == 20\n    assert candidate(2,2) == 5\n    assert candidate(1,1) == 1\n"}
{"task_id": "77", "prompt": "def is_Diff(n):\n\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nYour code should satisfy these tests:\nis_Diff(22) == True\nis_Diff(121) == True\nis_Diff(45) == False\nis_Diff(99) == True\nis_Diff(123) == False\n\"\"\"\n", "entry_point": "is_Diff", "test": "def check(candidate):\n\n    assert candidate (12345) == False\n    assert candidate(1212112) == True\n    assert candidate(1212) == False\n"}
{"task_id": "78", "prompt": "def count_With_Odd_SetBits(n):\n\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nYour code should satisfy these tests:\ncount_With_Odd_SetBits(5) == 3.0\ncount_With_Odd_SetBits(8) == 5.0\ncount_With_Odd_SetBits(15) == 8.0\n\"\"\"\n", "entry_point": "count_With_Odd_SetBits", "test": "def check(candidate):\n\n    assert candidate(5) == 3\n    assert candidate(10) == 5\n    assert candidate(15) == 8\n"}
{"task_id": "79", "prompt": "def word_len(s):\n\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nYour code should satisfy these tests:\nword_len(\"hello world\") == True\nword_len(\"even odd\") == False\nword_len(\"test case\") == False\n\"\"\"\n", "entry_point": "word_len", "test": "def check(candidate):\n\n    assert candidate(\"Hadoop\") == False\n    assert candidate(\"great\") == True\n    assert candidate(\"structure\") == True\n"}
{"task_id": "80", "prompt": "def tetrahedral_number(n):\n\"\"\"\nWrite a function to find the nth tetrahedral number.\nYour code should satisfy these tests:\ntetrahedral_number(1) == 1\ntetrahedral_number(3) == 10\ntetrahedral_number(5) == 35\n\"\"\"\n", "entry_point": "tetrahedral_number", "test": "def check(candidate):\n\n    assert candidate(5) == 35.0\n    assert candidate(6) == 56.0\n    assert candidate(7) == 84.0\n"}
{"task_id": "81", "prompt": "def zip_tuples(test_tup1, test_tup2):\n\"\"\"\nWrite a function to zip the two given tuples.\nYour code should satisfy these tests:\nzip_tuples((1, 2, 3), ('a', 'b')) == [(1, 'a'), (2, 'b'), (3, 'a')]\nzip_tuples(('x', 'y'), (10, 20, 30)) == [('x', 10), ('y', 20)]\nzip_tuples((True, False, True), (1, 0)) == [(True, 1), (False, 0), (True, 1)]\n\"\"\"\n", "entry_point": "zip_tuples", "test": "def check(candidate):\n\n    assert candidate((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    assert candidate((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\n    assert candidate((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]\n"}
{"task_id": "82", "prompt": "def volume_sphere(r):\n\"\"\"\nWrite a function to find the volume of a sphere.\nYour code should satisfy these tests:\nvolume_sphere(1) == 4.1887902047863905\nvolume_sphere(3) == 113.09733552923255\nvolume_sphere(5) == 523.5987755982989\n\"\"\"\n", "entry_point": "volume_sphere", "test": "def check(candidate):\n\n    assert candidate(10)==4188.790204786391\n    assert candidate(25)==65449.84694978735\n    assert candidate(20)==33510.32163829113\n"}
{"task_id": "83", "prompt": "def get_Char(strr):\n\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\n\"\"\"\n", "entry_point": "get_Char", "test": "def check(candidate):\n\n    assert candidate(\"abc\") == \"f\"\n    assert candidate(\"gfg\") == \"t\"\n    assert candidate(\"ab\") == \"c\"\n"}
{"task_id": "84", "prompt": "def sequence(n):\n\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nYour code should satisfy these tests:\nsequence(1) == 1\nsequence(2) == 1\n\"\"\"\n", "entry_point": "sequence", "test": "def check(candidate):\n\n    assert candidate(10) == 6\n    assert candidate(2) == 1\n    assert candidate(3) == 2\n"}
{"task_id": "85", "prompt": "def surfacearea_sphere(r):\n\"\"\"\nWrite a function to find the surface area of a sphere.\nYour code should satisfy these tests:\nsurfacearea_sphere(1) == 12.566370614359172\nsurfacearea_sphere(3) == 113.09733552923255\nsurfacearea_sphere(5) == 314.1592653589793\n\"\"\"\n", "entry_point": "surfacearea_sphere", "test": "def check(candidate):\n\n    assert candidate(10)==1256.6370614359173\n    assert candidate(15)==2827.4333882308138\n    assert candidate(20)==5026.548245743669\n"}
{"task_id": "86", "prompt": "def centered_hexagonal_number(n):\n\"\"\"\nWrite a function to find nth centered hexagonal number.\nYour code should satisfy these tests:\ncentered_hexagonal_number(1) == 1\ncentered_hexagonal_number(2) == 7\ncentered_hexagonal_number(5) == 61\n\"\"\"\n", "entry_point": "centered_hexagonal_number", "test": "def check(candidate):\n\n    assert candidate(10) == 271\n    assert candidate(2) == 7\n    assert candidate(9) == 217\n"}
{"task_id": "87", "prompt": "def merge_dictionaries_three(dict1,dict2, dict3):\n\"\"\"\nWrite a function to merge three dictionaries into a single expression.\n\"\"\"\n", "entry_point": "merge_dictionaries_three", "test": "def check(candidate):\n\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n"}
{"task_id": "88", "prompt": "def freq_count(list1):\n\"\"\"\nWrite a function to get the frequency of the elements in a list.\nYour code should satisfy these tests:\nfreq_count([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}\nfreq_count(['apple', 'banana', 'apple', 'orange']) == {'apple': 2, 'banana': 1, 'orange': 1}\nfreq_count([True, False, True, True, False]) == {True: 3, False: 2}\n\"\"\"\n", "entry_point": "freq_count", "test": "def check(candidate):\n\n    assert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n    assert candidate([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\n    assert candidate([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})\n"}
{"task_id": "89", "prompt": "def closest_num(N):\n\"\"\"\nWrite a function to find the closest smaller number than n.\nYour code should satisfy these tests:\nclosest_num(10) == 9\nclosest_num(1) == 0\nclosest_num(100) == 99\n\"\"\"\n", "entry_point": "closest_num", "test": "def check(candidate):\n\n    assert candidate(11) == 10\n    assert candidate(7) == 6\n    assert candidate(12) == 11\n"}
{"task_id": "90", "prompt": "def len_log(list1):\n\"\"\"\nWrite a python function to find the length of the longest word.\nYour code should satisfy these tests:\nlen_log([\"apple\", \"banana\", \"cherry\"]) == 6\nlen_log([\"dog\", \"elephant\", \"cat\"]) == 8\nlen_log([\"sun\", \"moon\", \"star\"]) == 4\n\"\"\"\n", "entry_point": "len_log", "test": "def check(candidate):\n\n    assert candidate([\"python\",\"PHP\",\"bigdata\"]) == 7\n    assert candidate([\"a\",\"ab\",\"abc\"]) == 3\n    assert candidate([\"small\",\"big\",\"tall\"]) == 5\n"}
{"task_id": "91", "prompt": "def find_substring(str1, sub_str):\n\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nYour code should satisfy these tests:\nfind_substring([\"hello\", \"world\"], \"lo\") == True\nfind_substring([\"python\", \"programming\"], \"java\") == False\nfind_substring([\"test\", \"case\", \"example\"], \"ample\") == True\n\"\"\"\n", "entry_point": "find_substring", "test": "def check(candidate):\n\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True\n"}
{"task_id": "92", "prompt": "def is_undulating(n):\n\"\"\"\nWrite a function to check whether the given number is undulating or not.\nYour code should satisfy these tests:\nis_undulating(\"121212\") == True\nis_undulating(\"112211\") == False\nis_undulating(\"34343434\") == True\n\"\"\"\n", "entry_point": "is_undulating", "test": "def check(candidate):\n\n    assert candidate(\"1212121\") == True\n    assert candidate(\"1991\") == False\n    assert candidate(\"121\") == True\n"}
{"task_id": "93", "prompt": "def power(a,b):\n\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nYour code should satisfy these tests:\npower(2, 3) == 8\npower(5, 0) == 1\npower(0, 5) == 0\n\"\"\"\n", "entry_point": "power", "test": "def check(candidate):\n\n    assert candidate(3,4) == 81\n    assert candidate(2,3) == 8\n    assert candidate(5,5) == 3125\n"}
{"task_id": "94", "prompt": "def index_minimum(test_list):\n\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nYour code should satisfy these tests:\nindex_minimum([(1, 10), (2, 5), (3, 8)]) == 2\nindex_minimum([(4, 20), (5, 15), (6, 25)]) == 5\nindex_minimum([(7, 30), (8, 20), (9, 10)]) == 9\n\"\"\"\n", "entry_point": "index_minimum", "test": "def check(candidate):\n\n    assert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    assert candidate([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n    assert candidate([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n"}
{"task_id": "95", "prompt": "def Find_Min_Length(lst):\n\"\"\"\nWrite a python function to find the minimum length of sublist.\nYour code should satisfy these tests:\nFind_Min_Length([\"apple\", \"banana\", \"pear\"]) == 4\nFind_Min_Length([\"hello\", \"world\", \"hi\", \"bye\"]) == 2\nFind_Min_Length([\"a\", \"ab\", \"abc\", \"abcd\"]) == 1\n\"\"\"\n", "entry_point": "Find_Min_Length", "test": "def check(candidate):\n\n    assert candidate([[1],[1,2]]) == 1\n    assert candidate([[1,2],[1,2,3],[1,2,3,4]]) == 2\n    assert candidate([[3,3,3],[4,4,4,4]]) == 3\n"}
{"task_id": "96", "prompt": "def divisor(n):\n\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nYour code should satisfy these tests:\ndivisor(1) == 1\ndivisor(6) == 4\ndivisor(10) == 4\n\"\"\"\n", "entry_point": "divisor", "test": "def check(candidate):\n\n    assert candidate(15) == 4\n    assert candidate(12) == 6\n    assert candidate(9) == 3\n"}
{"task_id": "97", "prompt": "def frequency_lists(list1):\n\"\"\"\nWrite a function to find frequency count of list of lists.\nYour code should satisfy these tests:\nfrequency_lists([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1}\nfrequency_lists([[7, 8], [9, 10], [7, 8, 9]]) == {7: 2, 8: 2, 9: 2, 10: 1}\nfrequency_lists([[11, 12, 13], [11, 12, 13], [11, 12, 13]]) == {11: 3, 12: 3, 13: 3}\n\"\"\"\n", "entry_point": "frequency_lists", "test": "def check(candidate):\n\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    assert candidate([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n    assert candidate([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n"}
{"task_id": "98", "prompt": "def multiply_num(numbers):\n\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nYour code should satisfy these tests:\nmultiply_num([2, 4, 6]) == 16.0\nmultiply_num([1, 3, 5, 7]) == 26.25\nmultiply_num([10, 20, 30]) == 2000.0\n\"\"\"\n", "entry_point": "multiply_num", "test": "def check(candidate):\n\n    assert candidate((8, 2, 3, -1, 7))==-67.2\n    assert candidate((-10,-20,-30))==-2000.0\n    assert candidate((19,15,18))==1710.0\n"}
{"task_id": "99", "prompt": "def decimal_to_binary(n):\n\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nYour code should satisfy these tests:\ndecimal_to_binary(0) == '0'\ndecimal_to_binary(5) == '101'\ndecimal_to_binary(10) == '1010'\n\"\"\"\n", "entry_point": "decimal_to_binary", "test": "def check(candidate):\n\n    assert candidate(8) == '1000'\n    assert candidate(18) == '10010'\n    assert candidate(7) == '111'\n"}
{"task_id": "100", "prompt": "def next_smallest_palindrome(num):\n\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nYour code should satisfy these tests:\nnext_smallest_palindrome(123) == 131\nnext_smallest_palindrome(531) == 535\nnext_smallest_palindrome(999) == 1001\n\"\"\"\n", "entry_point": "next_smallest_palindrome", "test": "def check(candidate):\n\n    assert candidate(99)==101\n    assert candidate(1221)==1331\n    assert candidate(120)==121\n"}
{"task_id": "101", "prompt": "def kth_element(arr, n, k):\n\"\"\"\nWrite a function to find the kth element in the given array.\nYour code should satisfy these tests:\nkth_element([3, 1, 4, 1, 5, 9, 2, 6, 5], 9, 3) == 4\nkth_element([10, 7, 8, 9, 1, 5], 6, 2) == 7\nkth_element([1, 2, 3, 4, 5], 5, 1) == 1\nkth_element([5, 4, 3, 2, 1], 5, 5) == 1\nkth_element([9, 3, 6, 1, 7], 5, 4) == 1\n\"\"\"\n", "entry_point": "kth_element", "test": "def check(candidate):\n\n    assert candidate([12,3,5,7,19], 5, 2) == 3\n    assert candidate([17,24,8,23], 4, 3) == 8\n    assert candidate([16,21,25,36,4], 5, 4) == 36\n"}
{"task_id": "102", "prompt": "def snake_to_camel(word):\n\"\"\"\nWrite a function to convert snake case string to camel case string.\nYour code should satisfy these tests:\nsnake_to_camel('hello_world') == 'HelloWorld'\nsnake_to_camel('convert_this_string') == 'ConvertThisString'\nsnake_to_camel('python_programming_language') == 'PythonProgrammingLanguage'\n\"\"\"\n", "entry_point": "snake_to_camel", "test": "def check(candidate):\n\n    assert candidate('python_program')=='PythonProgram'\n    assert candidate('python_language')==('PythonLanguage')\n    assert candidate('programming_language')==('ProgrammingLanguage')\n"}
{"task_id": "103", "prompt": "def eulerian_num(n, m):\n\"\"\"\nWrite a function to find eulerian number a(n, m).\nYour code should satisfy these tests:\neulerian_num(3, 1) == 4\neulerian_num(4, 2) == 11\neulerian_num(5, 0) == 1\n\"\"\"\n", "entry_point": "eulerian_num", "test": "def check(candidate):\n\n    assert candidate(3, 1) == 4\n    assert candidate(4, 1) == 11\n    assert candidate(5, 3) == 26\n"}
{"task_id": "104", "prompt": "def sort_sublists(input_list):\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\"\"\"\n", "entry_point": "sort_sublists", "test": "def check(candidate):\n\n    assert candidate(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\n"}
{"task_id": "105", "prompt": "def count(lst):\n\"\"\"\nWrite a python function to count true booleans in the given list.\nYour code should satisfy these tests:\ncount([1, 2, 3, 4]) == 10\ncount([-1, -2, -3, -4]) == -10\ncount([0, 0, 0, 0]) == 0\n\"\"\"\n", "entry_point": "count", "test": "def check(candidate):\n\n    assert candidate([True,False,True]) == 2\n    assert candidate([False,False]) == 0\n    assert candidate([True,True,True]) == 3\n"}
{"task_id": "106", "prompt": "def add_lists(test_list, test_tup):\n\"\"\"\nWrite a function to add the given list to the given tuples.\nYour code should satisfy these tests:\nadd_lists([1, 2, 3], (4, 5)) == (4, 5, 1, 2, 3)\nadd_lists(['a', 'b'], ('x', 'y', 'z')) == ('x', 'y', 'z', 'a', 'b')\nadd_lists([True, False], (None,)) == (None, True, False)\n\"\"\"\n", "entry_point": "add_lists", "test": "def check(candidate):\n\n    assert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert candidate([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert candidate([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n"}
{"task_id": "107", "prompt": "def count_Hexadecimal(L,R):\n\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nYour code should satisfy these tests:\ncount_Hexadecimal(1, 15) == 6\ncount_Hexadecimal(16, 30) == 5\ncount_Hexadecimal(50, 60) == 3\ncount_Hexadecimal(100, 120) == 6\ncount_Hexadecimal(200, 255) == 80\n\"\"\"\n", "entry_point": "count_Hexadecimal", "test": "def check(candidate):\n\n    assert candidate(10,15) == 6\n    assert candidate(2,4) == 0\n    assert candidate(15,16) == 1\n"}
{"task_id": "108", "prompt": "def merge_sorted_list(num1,num2,num3):\n\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nYour code should satisfy these tests:\nmerge_sorted_list([3, 1, 2], [6, 4, 5], [9, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nmerge_sorted_list([], [1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]\nmerge_sorted_list([10, 20, 30], [], [5, 15, 25]) == [5, 10, 15, 20, 25, 30]\n\"\"\"\n", "entry_point": "merge_sorted_list", "test": "def check(candidate):\n\n    assert candidate([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n"}
{"task_id": "109", "prompt": "def odd_Equivalent(s,n):\n\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nYour code should satisfy these tests:\nodd_Equivalent(\"101010\", 6) == 3\nodd_Equivalent(\"111111\", 6) == 6\nodd_Equivalent(\"000000\", 6) == 0\n\"\"\"\n", "entry_point": "odd_Equivalent", "test": "def check(candidate):\n\n    assert candidate(\"011001\",6) == 3\n    assert candidate(\"11011\",5) == 4\n    assert candidate(\"1010\",4) == 2\n"}
{"task_id": "110", "prompt": "def extract_missing(test_list, strt_val, stop_val):\n\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nYour code should satisfy these tests:\nextract_missing([(1, 5), (7, 10)], 0, 12) == [(0, 1), (5, 12), (5, 7), (10, 12)]\nextract_missing([(2, 4), (6, 8)], 1, 10) == [(1, 2), (4, 10), (4, 6), (8, 10)]\nextract_missing([(10, 20), (30, 40)], 5, 50) == [(5, 10), (20, 50), (20, 30), (40, 50)]\nextract_missing([(15, 25), (35, 45)], 10, 50) == [(10, 15), (25, 50), (25, 35), (45, 50)]\nextract_missing([(3, 7), (9, 12)], 1, 15) == [(1, 3), (7, 15), (7, 9), (12, 15)]\n\"\"\"\n", "entry_point": "extract_missing", "test": "def check(candidate):\n\n    assert candidate([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n    assert candidate([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\n    assert candidate([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]\n"}
{"task_id": "111", "prompt": "def common_in_nested_lists(nestedlist):\n\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nYour code should satisfy these tests:\ncommon_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\ncommon_in_nested_lists([[10, 20, 30], [10, 20, 30], [10, 20, 30]]) == [10, 20, 30]\ncommon_in_nested_lists([[1, 2], [3, 4], [5, 6]]) == []\n\"\"\"\n", "entry_point": "common_in_nested_lists", "test": "def check(candidate):\n\n    assert candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n    assert candidate([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\n    assert candidate([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]\n"}
{"task_id": "112", "prompt": "def perimeter(diameter,height):\n\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nYour code should satisfy these tests:\nperimeter(5, 10) == 30\nperimeter(3, 7) == 20\nperimeter(8, 15) == 46\n\"\"\"\n", "entry_point": "perimeter", "test": "def check(candidate):\n\n    assert candidate(2,4) == 12\n    assert candidate(1,2) == 6\n    assert candidate(3,1) == 8\n"}
{"task_id": "113", "prompt": "def check_integer(text):\n\"\"\"\nWrite a function to check if a string represents an integer or not.\nYour code should satisfy these tests:\ncheck_integer(\"12345\") == True\ncheck_integer(\"-9876\") == True\ncheck_integer(\"+4321\") == True\n\"\"\"\n", "entry_point": "check_integer", "test": "def check(candidate):\n\n    assert candidate(\"python\")==False\n    assert candidate(\"1\")==True\n    assert candidate(\"12345\")==True\n"}
{"task_id": "114", "prompt": "def assign_freq(test_list):\n\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\n\"\"\"\n", "entry_point": "assign_freq", "test": "def check(candidate):\n\n    assert candidate([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n    assert candidate([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\n    assert candidate([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'\n"}
{"task_id": "115", "prompt": "def empty_dit(list1):\n\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nYour code should satisfy these tests:\nempty_dit([{}, {}, {}]) == True\nempty_dit([{}, {'key': 'value'}, {}]) == False\nempty_dit([{'a': 1}, {'b': 2}, {'c': 3}]) == False\n\"\"\"\n", "entry_point": "empty_dit", "test": "def check(candidate):\n\n    assert candidate([{},{},{}])==True\n    assert candidate([{1,2},{},{}])==False\n    assert candidate({})==True\n"}
{"task_id": "116", "prompt": "def tuple_to_int(nums):\n\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nYour code should satisfy these tests:\ntuple_to_int((1, 2, 3)) == 123\ntuple_to_int((9, 0, 8, 7)) == 9087\ntuple_to_int((0, 0, 1)) == 1\n\"\"\"\n", "entry_point": "tuple_to_int", "test": "def check(candidate):\n\n    assert candidate((1,2,3))==123\n    assert candidate((4,5,6))==456\n    assert candidate((5,6,7))==567\n"}
{"task_id": "117", "prompt": "def list_to_float(test_list):\n\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nYour code should satisfy these tests:\nlist_to_float([('a', '1.23'), ('b', '4.56')]) == \"[(\\'a\\', 1.23), (\\'b\\', 4.56)]\"\nlist_to_float([('x', '7.89'), ('y', '0.12')]) == \"[(\\'x\\', 7.89), (\\'y\\', 0.12)]\"\nlist_to_float([('m', '3.14'), ('n', '2.71')]) == \"[(\\'m\\', 3.14), (\\'n\\', 2.71)]\"\n\"\"\"\n", "entry_point": "list_to_float", "test": "def check(candidate):\n\n    assert candidate( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n    assert candidate( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\n    assert candidate( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'\n"}
{"task_id": "118", "prompt": "def string_to_list(string):\n\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nYour code should satisfy these tests:\nstring_to_list(\"hello world\") == ['hello', 'world']\nstring_to_list(\"one two three\") == ['one', 'two', 'three']\nstring_to_list(\"Python is fun\") == ['Python', 'is', 'fun']\n\"\"\"\n", "entry_point": "string_to_list", "test": "def check(candidate):\n\n    assert candidate(\"python programming\")==['python','programming']\n    assert candidate(\"lists tuples strings\")==['lists','tuples','strings']\n    assert candidate(\"write a program\")==['write','a','program']\n"}
{"task_id": "119", "prompt": "def search(arr,n):\n\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nYour code should satisfy these tests:\nsearch([1, 2, 3, 4, 5], 5) == 1\nsearch([7, 7, 7, 7, 10], 5) == 10\nsearch([0, 1, 0, 1, 2], 5) == 2\n\"\"\"\n", "entry_point": "search", "test": "def check(candidate):\n\n    assert candidate([1,1,2,2,3],5) == 3\n    assert candidate([1,1,3,3,4,4,5,5,7,7,8],11) == 8\n    assert candidate([1,2,2,3,3,4,4],7) == 1\n"}
{"task_id": "120", "prompt": "def max_product_tuple(list1):\n\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nYour code should satisfy these tests:\nmax_product_tuple([(1, 2), (3, 4), (-5, -6)]) == 30\nmax_product_tuple([(0, 10), (20, -30), (5, 5)]) == 600\nmax_product_tuple([(-1, -1), (100, 100), (-10, 10)]) == 10000\n\"\"\"\n", "entry_point": "max_product_tuple", "test": "def check(candidate):\n\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n    assert candidate([(10,20), (15,2), (5,10)] )==200\n    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==484\n"}
{"task_id": "121", "prompt": "def check_triplet(A, n, sum, count):\n\"\"\"\nWrite a function to find the triplet with sum of the given array\nYour code should satisfy these tests:\ncheck_triplet([1, 2, 3, 4, 5], 5, 6, 0) == True\ncheck_triplet([10, 20, 30, 40], 4, 60, 0) == True\ncheck_triplet([5, 5, 10, 15], 4, 20, 0) == True\n\"\"\"\n", "entry_point": "check_triplet", "test": "def check(candidate):\n\n    assert candidate([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n    assert candidate([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\n    assert candidate([10, 4, 2, 3, 5], 5, 15, 0) == True\n"}
{"task_id": "122", "prompt": "def smartNumber(n):\n\"\"\"\nWrite a function to find n\u2019th smart number.\n\"\"\"\n", "entry_point": "smartNumber", "test": "def check(candidate):\n\n    assert candidate(1) == 30\n    assert candidate(50) == 273\n    assert candidate(1000) == 2664\n"}
{"task_id": "123", "prompt": "def amicable_numbers_sum(limit):\n\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nYour code should satisfy these tests:\namicable_numbers_sum(1000) == 504\namicable_numbers_sum(2000) == 2898\namicable_numbers_sum(5000) == 8442\n\"\"\"\n", "entry_point": "amicable_numbers_sum", "test": "def check(candidate):\n\n    assert candidate(999)==504\n    assert candidate(9999)==31626\n    assert candidate(99)==0\n"}
{"task_id": "124", "prompt": "def angle_complex(a,b):\n\"\"\"\nWrite a function to get the angle of a complex number.\nYour code should satisfy these tests:\nangle_complex(1, 1) == 0.0\nangle_complex(0, 1) == 0.0\nangle_complex(-1, -1) == 3.141592653589793\nangle_complex(1, 0) == 0.0\nangle_complex(0, -1) == 3.141592653589793\n\"\"\"\n", "entry_point": "angle_complex", "test": "def check(candidate):\n\n    assert candidate(0,1j)==1.5707963267948966\n    assert candidate(2,1j)==0.4636476090008061\n    assert candidate(0,2j)==1.5707963267948966\n"}
{"task_id": "125", "prompt": "def find_length(string, n):\n\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nYour code should satisfy these tests:\nfind_length(\"11000010001\", 11) == 6\nfind_length(\"00000000000\", 11) == 11\nfind_length(\"11111111111\", 11) == 0\n\"\"\"\n", "entry_point": "find_length", "test": "def check(candidate):\n\n    assert candidate(\"11000010001\", 11) == 6\n    assert candidate(\"10111\", 5) == 1\n    assert candidate(\"11011101100101\", 14) == 2\n"}
{"task_id": "126", "prompt": "def sum(a,b):\n\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nYour code should satisfy these tests:\nsum(12, 18) == 12\nsum(15, 25) == 6\nsum(20, 30) == 18\nsum(8, 16) == 7\nsum(14, 21) == 8\n\"\"\"\n", "entry_point": "sum", "test": "def check(candidate):\n\n    assert candidate(10,15) == 6\n    assert candidate(100,150) == 93\n    assert candidate(4,6) == 3\n"}
{"task_id": "127", "prompt": "def multiply_int(x, y):\n\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nYour code should satisfy these tests:\nmultiply_int(3, 4) == 12\nmultiply_int(-2, 5) == -10\nmultiply_int(7, -3) == -21\n\"\"\"\n", "entry_point": "multiply_int", "test": "def check(candidate):\n\n    assert candidate(10,20)==200\n    assert candidate(5,10)==50\n    assert candidate(4,8)==32\n"}
{"task_id": "128", "prompt": "def long_words(n, str):\n\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nYour code should satisfy these tests:\nlong_words(3, \"hello world this is a test\") == ['hello', 'world', 'this', 'test']\nlong_words(4, \"python programming is fun\") == ['python', 'programming']\nlong_words(2, \"a quick brown fox\") == ['quick', 'brown', 'fox']\n\"\"\"\n", "entry_point": "long_words", "test": "def check(candidate):\n\n    assert candidate(3,\"python is a programming language\")==['python','programming','language']\n    assert candidate(2,\"writing a program\")==['writing','program']\n    assert candidate(5,\"sorting list\")==['sorting']\n"}
{"task_id": "129", "prompt": "def magic_square_test(my_matrix):\n\"\"\"\nWrite a function to calculate magic square.\nYour code should satisfy these tests:\nmagic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True\nmagic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) == True\nmagic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False\n\"\"\"\n", "entry_point": "magic_square_test", "test": "def check(candidate):\n\n    assert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n"}
{"task_id": "130", "prompt": "def max_occurrences(nums):\n\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nYour code should satisfy these tests:\nmax_occurrences([1, 3, 2, 1, 4, 1, 3, 2, 1]) == (1, 4)\nmax_occurrences(['apple', 'banana', 'apple', 'orange', 'banana', 'apple']) == ('apple', 3)\nmax_occurrences([10, 20, 20, 10, 10, 30, 20, 20]) == (20, 4)\n\"\"\"\n", "entry_point": "max_occurrences", "test": "def check(candidate):\n\n    assert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n    assert candidate([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\n    assert candidate([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)\n"}
{"task_id": "131", "prompt": "def reverse_vowels(str1):\n\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nYour code should satisfy these tests:\nreverse_vowels(\"hello\") == 'holle'\nreverse_vowels(\"leetcode\") == 'leotcede'\nreverse_vowels(\"Python\") == 'Python'\n\"\"\"\n", "entry_point": "reverse_vowels", "test": "def check(candidate):\n\n    assert candidate(\"Python\") == \"Python\"\n    assert candidate(\"USA\") == \"ASU\"\n    assert candidate(\"ab\") == \"ab\"\n"}
{"task_id": "132", "prompt": "def tup_string(tup1):\n\"\"\"\nWrite a function to convert tuple to a string.\nYour code should satisfy these tests:\ntup_string(('a', 'b', 'c')) == 'abc'\ntup_string(('hello', 'world')) == 'helloworld'\ntup_string(('Python', '3', '.', '8')) == 'Python3.8'\n\"\"\"\n", "entry_point": "tup_string", "test": "def check(candidate):\n\n    assert candidate(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n    assert candidate(('p','y','t','h','o','n'))==(\"python\")\n    assert candidate(('p','r','o','g','r','a','m'))==(\"program\")\n"}
{"task_id": "133", "prompt": "def sum_negativenum(nums):\n\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nYour code should satisfy these tests:\nsum_negativenum([1, -2, 3, -4, 5]) == -6\nsum_negativenum([-10, -20, 30, 40, -50]) == -80\nsum_negativenum([0, 0, 0, -1, -1]) == -2\n\"\"\"\n", "entry_point": "sum_negativenum", "test": "def check(candidate):\n\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n    assert candidate([10,15,-14,13,-18,12,-20])==-52\n    assert candidate([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n"}
{"task_id": "134", "prompt": "def check_last(arr,n,p):\n\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nYour code should satisfy these tests:\ncheck_last([1, 2, 3, 4], 4, 1) == 'ODD'\ncheck_last([1, 3, 5, 7], 4, 1) == 'ODD'\ncheck_last([2, 4, 6, 8], 4, 0) == 'EVEN'\ncheck_last([1, 1, 1, 1], 4, 1) == 'ODD'\ncheck_last([0, 0, 0, 0], 4, 1) == 'ODD'\n\"\"\"\n", "entry_point": "check_last", "test": "def check(candidate):\n\n    assert candidate([5,7,10],3,1) == \"ODD\"\n    assert candidate([2,3],2,3) == \"EVEN\"\n    assert candidate([1,2,3],3,1) == \"ODD\"\n"}
{"task_id": "135", "prompt": "def hexagonal_num(n):\n\"\"\"\nWrite a function to find the nth hexagonal number.\nYour code should satisfy these tests:\nhexagonal_num(1) == 1\nhexagonal_num(2) == 6\nhexagonal_num(3) == 15\n\"\"\"\n", "entry_point": "hexagonal_num", "test": "def check(candidate):\n\n    assert candidate(10) == 190\n    assert candidate(5) == 45\n    assert candidate(7) == 91\n"}
{"task_id": "136", "prompt": "def cal_electbill(units):\n\"\"\"\nWrite a function to calculate electricity bill.\nYour code should satisfy these tests:\ncal_electbill(30) == 103.0\ncal_electbill(75) == 246.25\ncal_electbill(150) == 600.5\ncal_electbill(250) == 1316.0\ncal_electbill(0) == 25.0\n\"\"\"\n", "entry_point": "cal_electbill", "test": "def check(candidate):\n\n    assert candidate(75)==246.25\n    assert candidate(265)==1442.75\n    assert candidate(100)==327.5\n"}
{"task_id": "137", "prompt": "def zero_count(nums):\n\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nYour code should satisfy these tests:\nzero_count([1, 0, 0, 1, 0]) == 0.6\nzero_count([0, 0, 0, 0, 0]) == 1.0\nzero_count([1, 1, 1, 1, 1]) == 0.0\nzero_count([0, 1, 2, 3, 4, 5, 0]) == 0.29\nzero_count([0, 0, 1, 1, 1, 0, 0, 0]) == 0.62\n\"\"\"\n", "entry_point": "zero_count", "test": "def check(candidate):\n\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00\n"}
{"task_id": "138", "prompt": "def is_Sum_Of_Powers_Of_Two(n):\n\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nYour code should satisfy these tests:\nis_Sum_Of_Powers_Of_Two(4) == True\nis_Sum_Of_Powers_Of_Two(16) == True\nis_Sum_Of_Powers_Of_Two(7) == False\nis_Sum_Of_Powers_Of_Two(32) == True\nis_Sum_Of_Powers_Of_Two(15) == False\nis_Sum_Of_Powers_Of_Two(64) == True\nis_Sum_Of_Powers_Of_Two(1) == False\nis_Sum_Of_Powers_Of_Two(0) == True\nis_Sum_Of_Powers_Of_Two(1024) == True\n\"\"\"\n", "entry_point": "is_Sum_Of_Powers_Of_Two", "test": "def check(candidate):\n\n    assert candidate(10) == True\n    assert candidate(7) == False\n    assert candidate(14) == True\n"}
{"task_id": "139", "prompt": "def circle_circumference(r):\n\"\"\"\nWrite a function to find the circumference of a circle.\nYour code should satisfy these tests:\ncircle_circumference(1) == 6.283\ncircle_circumference(5) == 31.415000000000003\ncircle_circumference(0) == 0.0\ncircle_circumference(10.5) == 65.9715\ncircle_circumference(2.25) == 14.136750000000001\n\"\"\"\n", "entry_point": "circle_circumference", "test": "def check(candidate):\n\n    assert candidate(10)==62.830000000000005\n    assert candidate(5)==31.415000000000003\n    assert candidate(4)==25.132\n"}
{"task_id": "140", "prompt": "def extract_singly(test_list):\n\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nYour code should satisfy these tests:\nextract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nextract_singly([[1, 2], [2, 3], [3, 4]]) == [1, 2, 3, 4]\nextract_singly([[10, 20, 30], [30, 40, 50], [50, 60, 70]]) == [10, 20, 30, 40, 50, 60, 70]\n\"\"\"\n", "entry_point": "extract_singly", "test": "def check(candidate):\n\n    assert candidate([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n    assert candidate([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\n    assert candidate([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]\n"}
{"task_id": "141", "prompt": "def pancake_sort(nums):\n\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nYour code should satisfy these tests:\npancake_sort([3, 6, 1, 3, 8, 4, 5]) == [1, 3, 3, 4, 5, 6, 8]\npancake_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\npancake_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\"\"\"\n", "entry_point": "pancake_sort", "test": "def check(candidate):\n\n    assert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert candidate([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert candidate([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n"}
{"task_id": "142", "prompt": "def count_samepair(list1,list2,list3):\n\"\"\"\nWrite a function to count the same pair in three given lists.\nYour code should satisfy these tests:\ncount_samepair([1, 2, 3], [1, 2, 4], [1, 2, 3]) == 2\ncount_samepair(['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'd', 'c']) == 2\ncount_samepair([True, False, True], [True, True, True], [True, False, False]) == 1\n\"\"\"\n", "entry_point": "count_samepair", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\n    assert candidate([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n"}
{"task_id": "143", "prompt": "def find_lists(Input):\n\"\"\"\nWrite a function to find number of lists present in the given tuple.\nYour code should satisfy these tests:\nfind_lists([1, 2, 3]) == 1\nfind_lists(\"hello\") == 5\nfind_lists((1, 2, 3)) == 3\n\"\"\"\n", "entry_point": "find_lists", "test": "def check(candidate):\n\n    assert candidate(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n    assert candidate(([1, 2], [3, 4], [5, 6]))  == 3\n    assert candidate(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1\n"}
{"task_id": "144", "prompt": "def sum_Pairs(arr,n):\n\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nYour code should satisfy these tests:\nsum_Pairs([1, 2, 3, 4], 4) == 10\nsum_Pairs([5, 10, 15], 3) == 20\nsum_Pairs([0, 0, 0, 0], 4) == 0\n\"\"\"\n", "entry_point": "sum_Pairs", "test": "def check(candidate):\n\n    assert candidate([1,8,9,15,16],5) == 74\n    assert candidate([1,2,3,4],4) == 10\n    assert candidate([1,2,3,4,5,7,9,11,14],9) == 188\n"}
{"task_id": "145", "prompt": "def max_Abs_Diff(arr,n):\n\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nYour code should satisfy these tests:\nmax_Abs_Diff([1, 2, 3, 4, 5], 5) == 4\nmax_Abs_Diff([-10, -20, -30, -40, -50], 5) == 40\nmax_Abs_Diff([100, 0, 50, 20, 30], 5) == 100\n\"\"\"\n", "entry_point": "max_Abs_Diff", "test": "def check(candidate):\n\n    assert candidate((2,1,5,3),4) == 4\n    assert candidate((9,3,2,5,1),5) == 8\n    assert candidate((3,2,1),3) == 2\n"}
{"task_id": "146", "prompt": "def ascii_value_string(str1):\n\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nYour code should satisfy these tests:\nascii_value_string(\"hello\") == 104\nascii_value_string(\"Python\") == 80\nascii_value_string(\"12345\") == 49\nascii_value_string(\"test case\") == 116\nascii_value_string(\"programming\") == 112\n\"\"\"\n", "entry_point": "ascii_value_string", "test": "def check(candidate):\n\n    assert candidate(\"python\")==112\n    assert candidate(\"Program\")==80\n    assert candidate(\"Language\")==76\n"}
{"task_id": "147", "prompt": "def max_path_sum(tri, m, n):\n\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nYour code should satisfy these tests:\nmax_path_sum([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]], 3, 3) == 23\nmax_path_sum([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 3, 3) == 20\nmax_path_sum([[1], [2, 3], [4, 1, 1], [1, 1, 1, 1]], 3, 3) == 8\nmax_path_sum([[1], [1, 1], [1, 1, 1], [1, 1, 1, 1]], 3, 3) == 4\nmax_path_sum([[3], [4, 5], [6, 7, 8], [9, 10, 11, 12]], 3, 3) == 28\n\"\"\"\n", "entry_point": "max_path_sum", "test": "def check(candidate):\n\n    assert candidate([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n    assert candidate([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24\n    assert candidate([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53\n"}
{"task_id": "148", "prompt": "def sum_digits_single(x):\n\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nYour code should satisfy these tests:\nsum_digits_single(123) == 6\nsum_digits_single(999) == 27\nsum_digits_single(1001) == 2\nsum_digits_single(0) == 0\nsum_digits_single(987654321) == 45\n\"\"\"\n", "entry_point": "sum_digits_single", "test": "def check(candidate):\n\n    assert sum_digits_twoparts(35)==17\n    assert sum_digits_twoparts(7)==7\n    assert sum_digits_twoparts(100)==19\n"}
{"task_id": "149", "prompt": "def longest_subseq_with_diff_one(arr, n):\n\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nYour code should satisfy these tests:\nlongest_subseq_with_diff_one([1, 2, 3, 4, 5], 5) == 5\nlongest_subseq_with_diff_one([1, 3, 5, 7, 9], 5) == 1\nlongest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\n\"\"\"\n", "entry_point": "longest_subseq_with_diff_one", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 5, 3, 2], 7) == 6\n    assert candidate([10, 9, 4, 5, 4, 8, 6], 7) == 3\n    assert candidate([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7\n"}
{"task_id": "150", "prompt": "def does_Contain_B(a,b,c):\n\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nYour code should satisfy these tests:\ndoes_Contain_B(1, 1, 2) == True\ndoes_Contain_B(2, 5, 3) == True\ndoes_Contain_B(10, 2, 4) == False\n\"\"\"\n", "entry_point": "does_Contain_B", "test": "def check(candidate):\n\n    assert candidate(1,7,3) == True\n    assert candidate(1,-3,5) == False\n    assert candidate(3,2,5) == False\n"}
{"task_id": "151", "prompt": "def gcd(p,q):\n\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nYour code should satisfy these tests:\ngcd(48, 18) == 6\ngcd(56, 98) == 14\ngcd(17, 23) == 1\ngcd(100, 75) == 25\ngcd(81, 27) == 27\n\"\"\"\n", "entry_point": "gcd", "test": "def check(candidate):\n\n    assert is_coprime(17,13) == True\n    assert is_coprime(15,21) == False\n    assert is_coprime(25,45) == False\n"}
{"task_id": "152", "prompt": "def merge(a,b):\n\"\"\"\nWrite a function to sort the given array by using merge sort.\nYour code should satisfy these tests:\nmerge_sort([38, 27, 43, 3, 9, 82, 10]) == [3, 9, 10, 27, 38, 43, 82]\nmerge_sort([5, 1, 4, 2, 8]) == [1, 2, 4, 5, 8]\nmerge_sort([12, 11, 13, 5, 6, 7]) == [5, 6, 7, 11, 12, 13]\nmerge_sort([64, 34, 25, 12, 22, 11, 90]) == [11, 12, 22, 25, 34, 64, 90]\nmerge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\"\"\"\n", "entry_point": "merge", "test": "def check(candidate):\n\n    assert candidate_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n    assert candidate_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\n    assert candidate_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]\n"}
{"task_id": "153", "prompt": "def parabola_vertex(a, b, c):\n\"\"\"\nWrite a function to find the vertex of a parabola.\nYour code should satisfy these tests:\nparabola_vertex(1, -4, 4) == (2.0, 0.0)\nparabola_vertex(2, 3, -2) == (-0.75, -3.125)\nparabola_vertex(-1, 2, 1) == (1.0, 2.0)\n\"\"\"\n", "entry_point": "parabola_vertex", "test": "def check(candidate):\n\n    assert candidate(5,3,2)==(-0.3, 1.55)\n    assert candidate(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\n    assert candidate(2,4,6)==(-1.0, 4.0)\n"}
{"task_id": "154", "prompt": "def specified_element(nums, N):\n\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nYour code should satisfy these tests:\nspecified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\nspecified_element([[10, 20], [30, 40], [50, 60]], 0) == [10, 30, 50]\nspecified_element([[100, 200, 300], [400, 500, 600]], 2) == [300, 600]\n\"\"\"\n", "entry_point": "specified_element", "test": "def check(candidate):\n\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]\n"}
{"task_id": "155", "prompt": "def even_bit_toggle_number(n):\n\"\"\"\nWrite a python function to toggle all even bits of a given number.\nYour code should satisfy these tests:\neven_bit_toggle_number(5) == 7\neven_bit_toggle_number(8) == 2\neven_bit_toggle_number(15) == 5\neven_bit_toggle_number(10) == 0\neven_bit_toggle_number(3) == 1\n\"\"\"\n", "entry_point": "even_bit_toggle_number", "test": "def check(candidate):\n\n    assert candidate(10) == 0\n    assert candidate(20) == 30\n    assert candidate(30) == 20\n"}
{"task_id": "156", "prompt": "def tuple_int_str(tuple_str):\n\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nYour code should satisfy these tests:\ntuple_int_str((('1', '2'), ('3', '4'), ('5', '6'))) == ((1, 2), (3, 4), (5, 6))\ntuple_int_str((('7', '8'), ('9', '10'))) == ((7, 8), (9, 10))\ntuple_int_str((('11', '12'), ('13', '14'), ('15', '16'), ('17', '18'))) == ((11, 12), (13, 14), (15, 16), (17, 18))\n\"\"\"\n", "entry_point": "tuple_int_str", "test": "def check(candidate):\n\n    assert candidate((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n    assert candidate((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\n    assert candidate((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))\n"}
{"task_id": "157", "prompt": "def encode_list(list1):\n\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nYour code should satisfy these tests:\nencode_list([1, 1, 2, 2, 2, 3]) == [[2, 1], [3, 2], [1, 3]]\nencode_list(['a', 'a', 'b', 'b', 'c', 'c', 'c']) == [[2, 'a'], [2, 'b'], [3, 'c']]\nencode_list([4, 5, 5, 5, 6, 6, 7]) == [[1, 4], [3, 5], [2, 6], [1, 7]]\n\"\"\"\n", "entry_point": "encode_list", "test": "def check(candidate):\n\n    assert candidate([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    assert candidate('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\n    assert candidate('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]\n"}
{"task_id": "158", "prompt": "def min_Ops(arr,n,k):\n\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nYour code should satisfy these tests:\nmin_Ops([4, 7, 10], 3, 3) == 3\nmin_Ops([1, 5, 9], 3, 2) == 6\nmin_Ops([10, 10, 10], 3, 5) == 0\nmin_Ops([3, 6, 9, 12], 4, 3) == 6\nmin_Ops([2, 4, 6, 8, 10], 5, 2) == 10\n\"\"\"\n", "entry_point": "min_Ops", "test": "def check(candidate):\n\n    assert candidate([2,2,2,2],4,3) == 0\n    assert candidate([4,2,6,8],4,3) == -1\n    assert candidate([21,33,9,45,63],5,6) == 24\n"}
{"task_id": "159", "prompt": "def month_season(month,days):\n\"\"\"\nWrite a function to print the season for the given month and day.\nYour code should satisfy these tests:\nmonth_season('March', 20) == 'spring'\nmonth_season('June', 21) == 'summer'\nmonth_season('October', 22) == 'autumn'\nmonth_season('December', 21) == 'winter'\nmonth_season('April', 15) == 'spring'\n\"\"\"\n", "entry_point": "month_season", "test": "def check(candidate):\n\n    assert candidate('January',4)==('winter')\n    assert candidate('October',28)==('autumn')\n    assert candidate('June',6)==('spring')\n"}
{"task_id": "160", "prompt": "def solution(a, b, n):\n\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nYour code should satisfy these tests:\nsolution(3, 5, 14) == ('x = ', 3, ', y = ', 1)\nsolution(2, 7, 20) == ('x = ', 3, ', y = ', 2)\nsolution(4, 6, 18) == ('x = ', 0, ', y = ', 3)\nsolution(5, 10, 25) == ('x = ', 1, ', y = ', 2)\nsolution(6, 8, 30) == ('x = ', 1, ', y = ', 3)\n\"\"\"\n", "entry_point": "solution", "test": "def check(candidate):\n\n    assert candidate(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n    assert candidate(4, 2, 7) == 'No candidate'\n    assert candidate(1, 13, 17) == ('x = ', 4, ', y = ', 1)\n"}
{"task_id": "161", "prompt": "def remove_elements(list1, list2):\n\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nYour code should satisfy these tests:\nremove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\nremove_elements(['apple', 'banana', 'cherry'], ['banana']) == ['apple', 'cherry']\nremove_elements([10, 20, 30, 40], [50, 60]) == [10, 20, 30, 40]\n\"\"\"\n", "entry_point": "remove_elements", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]\n"}
{"task_id": "162", "prompt": "def sum_series(n):\n\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nYour code should satisfy these tests:\nsum_series(5) == 9\nsum_series(10) == 30\nsum_series(0) == 0\n\"\"\"\n", "entry_point": "sum_series", "test": "def check(candidate):\n\n    assert candidate(6)==12\n    assert candidate(10)==30\n    assert candidate(9)==25\n"}
{"task_id": "163", "prompt": "def area_polygon(s,l):\n\"\"\"\nWrite a function to calculate the area of a regular polygon.\nYour code should satisfy these tests:\narea_polygon(3, 5) == 10.825317547305486\narea_polygon(4, 10) == 100.00000000000001\narea_polygon(6, 2) == 10.392304845413264\n\"\"\"\n", "entry_point": "area_polygon", "test": "def check(candidate):\n\n    assert candidate(4,20)==400.00000000000006\n    assert candidate(10,15)==1731.1969896610804\n    assert candidate(9,7)==302.90938549487214\n"}
{"task_id": "164", "prompt": "def divSum(n):\n\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nYour code should satisfy these tests:\ndivSum(6) == 6\ndivSum(28) == 28\ndivSum(12) == 16\ndivSum(9) == 7\ndivSum(25) == 11\n\"\"\"\n", "entry_point": "divSum", "test": "def check(candidate):\n\n    assert areEquivalent(36,57) == False\n    assert areEquivalent(2,4) == False\n    assert areEquivalent(23,47) == True\n"}
{"task_id": "165", "prompt": "def count_char_position(str1):\n\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nYour code should satisfy these tests:\ncount_char_position(\"AbCdEf\") == 6\ncount_char_position(\"abcdef\") == 6\ncount_char_position(\"GHIJKL\") == 0\n\"\"\"\n", "entry_point": "count_char_position", "test": "def check(candidate):\n\n    assert candidate(\"xbcefg\") == 2\n    assert candidate(\"ABcED\") == 3\n    assert candidate(\"AbgdeF\") == 5\n"}
{"task_id": "166", "prompt": "def find_even_Pair(A,N):\n\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nYour code should satisfy these tests:\nfind_even_Pair([1, 2, 3, 4], 4) == 2\nfind_even_Pair([5, 5, 5, 5], 4) == 6\nfind_even_Pair([10, 20, 30, 40, 50], 5) == 10\n\"\"\"\n", "entry_point": "find_even_Pair", "test": "def check(candidate):\n\n    assert candidate([5,4,7,2,1],5) == 4\n    assert candidate([7,2,8,1,0,5,11],7) == 9\n    assert candidate([1,2,3],3) == 1\n"}
{"task_id": "167", "prompt": "def next_Power_Of_2(n):\n\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nYour code should satisfy these tests:\nnext_Power_Of_2(5) == 8\nnext_Power_Of_2(17) == 32\nnext_Power_Of_2(31) == 32\n\"\"\"\n", "entry_point": "next_Power_Of_2", "test": "def check(candidate):\n\n    assert candidate(0) == 1\n    assert candidate(5) == 8\n    assert candidate(17) == 32\n"}
{"task_id": "168", "prompt": "def frequency(a,x):\n\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nYour code should satisfy these tests:\nfrequency([1, 2, 3, 4, 5, 1, 1], 1) == 3\nfrequency(['a', 'b', 'c', 'a', 'd', 'a'], 'a') == 3\nfrequency([10, 20, 30, 40, 50], 60) == 0\n\"\"\"\n", "entry_point": "frequency", "test": "def check(candidate):\n\n    assert candidate([1,2,3],4) == 0\n    assert candidate([1,2,2,3,3,3,4],3) == 3\n    assert candidate([0,1,2,3,1,2],1) == 2\n"}
{"task_id": "169", "prompt": "def get_pell(n):\n\"\"\"\nWrite a function to calculate the nth pell number.\nYour code should satisfy these tests:\nget_pell(1) == 1\nget_pell(5) == 29\nget_pell(10) == 2378\n\"\"\"\n", "entry_point": "get_pell", "test": "def check(candidate):\n\n    assert candidate(4) == 12\n    assert candidate(7) == 169\n    assert candidate(8) == 408\n"}
{"task_id": "170", "prompt": "def sum_range_list(list1, m, n):\n\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nYour code should satisfy these tests:\nsum_range_list([1, 2, 3, 4, 5], 1, 3) == 9\nsum_range_list([10, 20, 30, 40, 50], 0, 2) == 60\nsum_range_list([5, 15, 25, 35, 45], 2, 4) == 105\n\"\"\"\n", "entry_point": "sum_range_list", "test": "def check(candidate):\n\n    assert candidate( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n    assert candidate( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\n    assert candidate( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38\n"}
{"task_id": "171", "prompt": "def perimeter_pentagon(a):\n\"\"\"\nWrite a function to find the perimeter of a pentagon.\nYour code should satisfy these tests:\nperimeter_pentagon(3) == 15\nperimeter_pentagon(7) == 35\nperimeter_pentagon(10) == 50\n\"\"\"\n", "entry_point": "perimeter_pentagon", "test": "def check(candidate):\n\n    assert candidate(5)==25\n    assert candidate(10)==50\n    assert candidate(15)==75\n"}
{"task_id": "172", "prompt": "def count_occurance(s):\n\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nYour code should satisfy these tests:\ncount_occurance(\"standard\") == 0\ncount_occurance(\"this is a test string with std\") == 1\n\"\"\"\n", "entry_point": "count_occurance", "test": "def check(candidate):\n\n    assert candidate(\"letstdlenstdporstd\") == 3\n    assert candidate(\"truststdsolensporsd\") == 1\n    assert candidate(\"makestdsostdworthit\") == 2\n"}
{"task_id": "173", "prompt": "def remove_splchar(text):\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nYour code should satisfy these tests:\nremove_splchar(\"Hello, World!\") == \"HelloWorld\"\nremove_splchar(\"Python@3.8\") == \"Python38\"\nremove_splchar(\"No#Special$Chars&Here\") == \"NoSpecialCharsHere\"\n\"\"\"\n", "entry_point": "remove_splchar", "test": "def check(candidate):\n\n    assert candidate('python  @#&^%$*program123')==('pythonprogram123')\n    assert candidate('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\n    assert candidate('python   ^%&^()(+_)(_^&67)                  program')==('python67program')\n"}
{"task_id": "174", "prompt": "def group_keyvalue(l):\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nYour code should satisfy these tests:\ngroup_keyvalue([('a', 1), ('b', 2), ('a', 3)]) == {'a': [1, 3], 'b': [2]}\ngroup_keyvalue([('x', 10), ('y', 20), ('x', 30), ('y', 40)]) == {'x': [10, 30], 'y': [20, 40]}\ngroup_keyvalue([('key1', 'value1'), ('key2', 'value2'), ('key1', 'value3')]) == {'key1': ['value1', 'value3'], 'key2': ['value2']}\n\"\"\"\n", "entry_point": "group_keyvalue", "test": "def check(candidate):\n\n    assert candidate([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    assert candidate([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\n    assert candidate([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}\n"}
{"task_id": "175", "prompt": "def is_valid_parenthese( str1):\n\"\"\"\nWrite a function to verify validity of a string of parentheses.\nYour code should satisfy these tests:\nis_valid_parenthese(\"()[]{}\") == True\nis_valid_parenthese(\"(]\") == False\nis_valid_parenthese(\"([)]\") == False\n\"\"\"\n", "entry_point": "is_valid_parenthese", "test": "def check(candidate):\n\n    assert candidate(\"(){}[]\")==True\n    assert candidate(\"()[{)}\")==False\n    assert candidate(\"()\")==True\n"}
{"task_id": "176", "prompt": "def perimeter_triangle(a,b,c):\n\"\"\"\nWrite a function to find the perimeter of a triangle.\nYour code should satisfy these tests:\nperimeter_triangle(3, 4, 5) == 12\nperimeter_triangle(10, 10, 10) == 30\nperimeter_triangle(7, 24, 25) == 56\n\"\"\"\n", "entry_point": "perimeter_triangle", "test": "def check(candidate):\n\n    assert candidate(10,20,30)==60\n    assert candidate(3,4,5)==12\n    assert candidate(25,35,45)==105\n"}
{"task_id": "177", "prompt": "def answer(L,R):\n\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nYour code should satisfy these tests:\nanswer(2, 5) == (2, 4)\nanswer(3, 9) == (3, 6)\nanswer(4, 10) == (4, 8)\nanswer(6, 13) == (6, 12)\nanswer(1, 3) == (1, 2)\n\"\"\"\n", "entry_point": "answer", "test": "def check(candidate):\n\n    assert candidate(3,8) == (3,6)\n    assert candidate(2,6) == (2,4)\n    assert candidate(1,3) == (1,2)\n"}
{"task_id": "178", "prompt": "def string_literals(patterns,text):\n\"\"\"\nWrite a function to search some literals strings in a string.\nYour code should satisfy these tests:\nstring_literals(['hello'], 'hello world') == 'Matched!'\nstring_literals(['world'], 'hello there') == 'Not Matched!'\nstring_literals(['test'], 'this is a test string') == 'Matched!'\n\"\"\"\n", "entry_point": "string_literals", "test": "def check(candidate):\n\n    assert candidate(['language'],'python language')==('Matched!')\n    assert candidate(['program'],'python language')==('Not Matched!')\n    assert candidate(['python'],'programming language')==('Not Matched!')\n"}
{"task_id": "179", "prompt": "def is_num_keith(x):\n\"\"\"\nWrite a function to find if the given number is a keith number or not.\nYour code should satisfy these tests:\nis_num_keith(197) == True\nis_num_keith(145) == False\nis_num_keith(742) == True\n\"\"\"\n", "entry_point": "is_num_keith", "test": "def check(candidate):\n\n    assert candidate(14) == True\n    assert candidate(12) == False\n    assert candidate(197) == True\n"}
{"task_id": "180", "prompt": "def distance_lat_long(slat,slon,elat,elon):\n\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\n\"\"\"\n", "entry_point": "distance_lat_long", "test": "def check(candidate):\n\n    assert candidate(23.5,67.5,25.5,69.5)==12179.372041317429\n    assert candidate(10.5,20.5,30.5,40.5)==6069.397933300514\n    assert candidate(10,20,30,40)==6783.751974994595\n"}
{"task_id": "181", "prompt": "def common_prefix_util(str1, str2):\n\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nYour code should satisfy these tests:\ncommon_prefix_util(\"hello\", \"heaven\") == \"he\"\ncommon_prefix_util(\"python\", \"pytorch\") == \"pyt\"\ncommon_prefix_util(\"abcdef\", \"abcxyz\") == \"abc\"\ncommon_prefix_util(\"programming\", \"prologue\") == \"pro\"\ncommon_prefix_util(\"test\", \"testing\") == \"test\"\n\"\"\"\n", "entry_point": "common_prefix_util", "test": "def check(candidate):\n\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n    assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\n    assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'\n"}
{"task_id": "182", "prompt": "def find_character(string):\n\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\"\"\"\n", "entry_point": "find_character", "test": "def check(candidate):\n\n    assert candidate(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n    assert candidate(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\n    assert candidate(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])\n"}
{"task_id": "183", "prompt": "def count_pairs(arr, n, k):\n\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nYour code should satisfy these tests:\ncount_pairs([1, 5, 3, 4, 2], 5, 2) == 3\ncount_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\ncount_pairs([10, 20, 30, 40, 50], 5, 10) == 4\n\"\"\"\n", "entry_point": "count_pairs", "test": "def check(candidate):\n\n    assert candidate([1, 5, 3, 4, 2], 5, 3) == 2\n    assert candidate([8, 12, 16, 4, 0, 20], 6, 4) == 5\n    assert candidate([2, 4, 1, 3, 4], 5, 2) == 3\n"}
{"task_id": "184", "prompt": "def greater_specificnum(list,num):\n\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nYour code should satisfy these tests:\ngreater_specificnum([10, 20, 30, 40], 10) == True\ngreater_specificnum([5, 15, 25, 35], 20) == False\ngreater_specificnum([100, 200, 300], 50) == True\ngreater_specificnum([1, 2, 3, 4, 5], 0) == True\ngreater_specificnum([7, 8, 9, 10], 10) == False\n\"\"\"\n", "entry_point": "greater_specificnum", "test": "def check(candidate):\n\n    assert candidate([220, 330, 500],200)==True\n    assert candidate([12, 17, 21],20)==False\n    assert candidate([1,2,3,4],10)==False\n"}
{"task_id": "185", "prompt": "def parabola_focus(a, b, c):\n\"\"\"\nWrite a function to find the focus of a parabola.\nYour code should satisfy these tests:\nparabola_focus(1, -2, 1) == (1.0, 0.25)\nparabola_focus(2, 4, -6) == (-1.0, -7.875)\nparabola_focus(3, 0, 2) == (0.0, 2.0833333333333335)\n\"\"\"\n", "entry_point": "parabola_focus", "test": "def check(candidate):\n\n    assert candidate(5,3,2)==(-0.3, 1.6)\n    assert candidate(9,8,4)==(-0.4444444444444444, 2.25)\n    assert candidate(2,4,6)==(-1.0, 4.125)\n"}
{"task_id": "186", "prompt": "def check_literals(text, patterns):\n\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nYour code should satisfy these tests:\ncheck_literals(\"hello world\", [\"world\"]) == 'Matched!'\ncheck_literals(\"sample text\", [\"example\"]) == 'Not Matched!'\ncheck_literals(\"12345\", [\"\\d{5}\"]) == 'Matched!'\n\"\"\"\n", "entry_point": "check_literals", "test": "def check(candidate):\n\n    assert candidate('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n    assert candidate('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\n    assert candidate('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'\n"}
{"task_id": "187", "prompt": "def longest_common_subsequence(X, Y, m, n):\n\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nYour code should satisfy these tests:\nlongest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 4\nlongest_common_subsequence(\"ABC\", \"AC\", 3, 2) == 2\nlongest_common_subsequence(\"12345\", \"54321\", 5, 5) == 1\n\"\"\"\n", "entry_point": "longest_common_subsequence", "test": "def check(candidate):\n\n    assert candidate(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n    assert candidate(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\n    assert candidate(\"AXYT\" , \"AYZX\", 4, 4) == 2\n"}
{"task_id": "188", "prompt": "def prod_Square(n):\n\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nYour code should satisfy these tests:\nprod_Square(16) == True\nprod_Square(36) == True\nprod_Square(64) == True\nprod_Square(100) == True\nprod_Square(144) == True\n\"\"\"\n", "entry_point": "prod_Square", "test": "def check(candidate):\n\n    assert candidate(25) == False\n    assert candidate(30) == False\n    assert candidate(16) == True\n"}
{"task_id": "189", "prompt": "def first_Missing_Positive(arr,n):\n\"\"\"\nWrite a python function to find the first missing positive number.\nYour code should satisfy these tests:\nfirst_Missing_Positive([3, 4, -1, 1], 4) == 2\nfirst_Missing_Positive([1, 2, 0], 3) == 3\nfirst_Missing_Positive([7, 8, 9, 11, 12], 5) == 1\n\"\"\"\n", "entry_point": "first_Missing_Positive", "test": "def check(candidate):\n\n    assert candidate([1,2,3,-1,5],5) == 4\n    assert candidate([0,-1,-2,1,5,8],6) == 2\n    assert candidate([0,1,2,5,-8],5) == 3\n"}
{"task_id": "190", "prompt": "def count_Intgral_Points(x1,y1,x2,y2):\n\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nYour code should satisfy these tests:\ncount_Intgral_Points(0, 0, 5, 5) == 16\ncount_Intgral_Points(2, 3, 8, 10) == 30\ncount_Intgral_Points(-3, -4, 2, 8) == 44\ncount_Intgral_Points(1, 1, 3, 3) == 1\ncount_Intgral_Points(10, 10, 15, 15) == 16\n\"\"\"\n", "entry_point": "count_Intgral_Points", "test": "def check(candidate):\n\n    assert candidate(1,1,4,4) == 4\n    assert candidate(1,2,1,2) == 1\n    assert candidate(4,2,6,4) == 1\n"}
{"task_id": "191", "prompt": "def check_monthnumber(monthname3):\n\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nYour code should satisfy these tests:\ncheck_monthnumber(\"April\") == True\ncheck_monthnumber(\"February\") == False\ncheck_monthnumber(\"November\") == True\n\"\"\"\n", "entry_point": "check_monthnumber", "test": "def check(candidate):\n\n    assert candidate(\"February\")==False\n    assert candidate(\"June\")==True\n    assert candidate(\"April\")==True\n"}
{"task_id": "192", "prompt": "def check_String(str):\n\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nYour code should satisfy these tests:\ncheck_String(\"abc123\") == True\ncheck_String(\"abcdef\") == False\ncheck_String(\"123456\") == False\n\"\"\"\n", "entry_point": "check_String", "test": "def check(candidate):\n\n    assert candidate('thishasboth29') == True\n    assert candidate('python') == False\n    assert candidate ('string') == False\n"}
{"task_id": "193", "prompt": "def remove_tuple(test_tup):\n\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nYour code should satisfy these tests:\nremove_tuple((1, 2, 3, 1, 2)) == (1, 2, 3)\nremove_tuple(('a', 'b', 'a', 'c', 'c')) == ('b', 'c', 'a')\nremove_tuple(('apple', 'banana', 'apple', 'orange')) == ('orange', 'banana', 'apple')\nremove_tuple((4, 4, 4, 4, 4)) == (4,)\nremove_tuple(('hello', 'world')) == ('world', 'hello')\n\"\"\"\n", "entry_point": "remove_tuple", "test": "def check(candidate):\n\n    assert candidate((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n    assert candidate((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\n    assert candidate((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)\n"}
{"task_id": "194", "prompt": "def octal_To_Decimal(n):\n\"\"\"\nWrite a python function to convert octal number to decimal number.\nYour code should satisfy these tests:\noctal_To_Decimal(10) == 8\noctal_To_Decimal(77) == 63\noctal_To_Decimal(123) == 83\n\"\"\"\n", "entry_point": "octal_To_Decimal", "test": "def check(candidate):\n\n    assert candidate(25) == 21\n    assert candidate(30) == 24\n    assert candidate(40) == 32\n"}
{"task_id": "195", "prompt": "def first(arr,x,n):\n\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nYour code should satisfy these tests:\nfirst([1, 2, 2, 2, 3, 4, 5], 2, 7) == 1\nfirst([1, 1, 1, 1, 1, 1, 1], 1, 7) == 0\nfirst([1, 3, 5, 7, 9, 11, 13], 10, 7) == -1\n\"\"\"\n", "entry_point": "first", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4,5,6,6],6,6) == 5\n    assert candidate([1,2,2,2,3,2,2,4,2],2,9) == 1\n    assert candidate([1,2,3],1,3) == 0\n"}
{"task_id": "196", "prompt": "def remove_tuples(test_list, K):\n\"\"\"\nWrite a function to remove all the tuples with length k.\nYour code should satisfy these tests:\nremove_tuples([(1, 2), (3, 4, 5), (6, 7, 8, 9)], 2) == [(3, 4, 5), (6, 7, 8, 9)]\nremove_tuples([(10, 20), (30,), (40, 50, 60)], 1) == [(10, 20), (40, 50, 60)]\nremove_tuples([(1, 2, 3), (4, 5), (6,)], 3) == [(4, 5), (6,)]\n\"\"\"\n", "entry_point": "remove_tuples", "test": "def check(candidate):\n\n    assert candidate([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    assert candidate([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\n    assert candidate([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]\n"}
{"task_id": "197", "prompt": "def find_exponentio(test_tup1, test_tup2):\n\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nYour code should satisfy these tests:\nfind_exponentio((2, 3, 4), (3, 2, 1)) == (8, 9, 4)\nfind_exponentio((5, 6), (0, 1)) == (1, 6)\nfind_exponentio((1, 10, 100), (1, 1, 1)) == (1, 10, 100)\n\"\"\"\n", "entry_point": "find_exponentio", "test": "def check(candidate):\n\n    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)\n"}
{"task_id": "198", "prompt": "def largest_triangle(a,b):\n\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nYour code should satisfy these tests:\nlargest_triangle(5, 10) == 3.247595264191645\nlargest_triangle(3, 6) == 1.948557158514987\nlargest_triangle(7, 14) == 4.546633369868303\nlargest_triangle(0, 5) == 0.0\nlargest_triangle(-1, 10) == -1\n\"\"\"\n", "entry_point": "largest_triangle", "test": "def check(candidate):\n\n    assert candidate(4,2)==10.392304845413264\n    assert candidate(5,7)==4.639421805988064\n    assert candidate(9,1)==105.2220865598093\n"}
{"task_id": "199", "prompt": "def highest_Power_of_2(n):\n\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nYour code should satisfy these tests:\nhighest_Power_of_2(10) == 8\nhighest_Power_of_2(18) == 16\nhighest_Power_of_2(33) == 32\n\"\"\"\n", "entry_point": "highest_Power_of_2", "test": "def check(candidate):\n\n    assert candidate(10) == 8\n    assert candidate(19) == 16\n    assert candidate(32) == 32\n"}
{"task_id": "200", "prompt": "def position_max(list1):\n\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nYour code should satisfy these tests:\nposition_max([1, 3, 7, 7, 2, 5]) == [2, 3]\nposition_max([10, 20, 20, 10, 30, 30, 30]) == [4, 5, 6]\nposition_max([-5, -1, -3, -1, -4]) == [1, 3]\n\"\"\"\n", "entry_point": "position_max", "test": "def check(candidate):\n\n    assert candidate([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n    assert candidate([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12])==[11]\n"}
{"task_id": "201", "prompt": "def chkList(lst):\n\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nYour code should satisfy these tests:\nchkList([1, 1, 1, 1]) == True\nchkList([2, 2, 3, 2]) == False\nchkList(['a', 'a', 'a']) == True\n\"\"\"\n", "entry_point": "chkList", "test": "def check(candidate):\n\n    assert candidate(['one','one','one']) == True\n    assert candidate(['one','Two','Three']) == False\n    assert candidate(['bigdata','python','Django']) == False\n"}
{"task_id": "202", "prompt": "def remove_even(str1):\n\"\"\"\nWrite a function to remove even characters in a string.\nYour code should satisfy these tests:\nremove_even(\"abcdef\") == \"ace\"\nremove_even(\"123456789\") == \"13579\"\nremove_even(\"Python\") == \"Pto\"\n\"\"\"\n", "entry_point": "remove_even", "test": "def check(candidate):\n\n    assert candidate(\"python\")==(\"pto\")\n    assert candidate(\"program\")==(\"porm\")\n    assert candidate(\"language\")==(\"lnug\")\n"}
{"task_id": "203", "prompt": "def hamming_Distance(n1,n2):\n\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nYour code should satisfy these tests:\nhamming_Distance(1, 4) == 2\nhamming_Distance(255, 0) == 8\nhamming_Distance(17, 34) == 4\n\"\"\"\n", "entry_point": "hamming_Distance", "test": "def check(candidate):\n\n    assert candidate(4,8) == 2\n    assert candidate(2,4) == 2\n    assert candidate(1,2) == 2\n"}
{"task_id": "204", "prompt": "def count(s,c):\n\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nYour code should satisfy these tests:\ncount(\"hello world\", \"o\") == 2\ncount(\"programming\", \"m\") == 2\ncount(\"python\", \"y\") == 1\n\"\"\"\n", "entry_point": "count", "test": "def check(candidate):\n\n    assert candidate(\"abcc\",\"c\") == 2\n    assert candidate(\"ababca\",\"a\") == 3\n    assert candidate(\"mnmm0pm\",\"m\") == 4\n"}
{"task_id": "205", "prompt": "def inversion_elements(test_tup):\n\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nYour code should satisfy these tests:\ninversion_elements((1, 2, 3)) == (-2, -3, -4)\ninversion_elements((0, -1, -2)) == (-1, 0, 1)\ninversion_elements((10, 20, 30)) == (-11, -21, -31)\n\"\"\"\n", "entry_point": "inversion_elements", "test": "def check(candidate):\n\n    assert candidate((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n    assert candidate((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\n    assert candidate((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)\n"}
{"task_id": "206", "prompt": "def concatenate_elements(test_tup):\n\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nYour code should satisfy these tests:\nconcatenate_elements(('a', 'b', 'c')) == ('ab', 'bc')\nconcatenate_elements(('hello', 'world', 'python')) == ('helloworld', 'worldpython')\nconcatenate_elements(('123', '456', '789')) == ('123456', '456789')\n\"\"\"\n", "entry_point": "concatenate_elements", "test": "def check(candidate):\n\n    assert candidate((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    assert candidate((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\n    assert candidate((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')\n"}
{"task_id": "207", "prompt": "def find_longest_repeating_subseq(str):\n\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nYour code should satisfy these tests:\nfind_longest_repeating_subseq(\"aabb\") == 2\nfind_longest_repeating_subseq(\"abc\") == 0\nfind_longest_repeating_subseq(\"aabebcdd\") == 3\n\"\"\"\n", "entry_point": "find_longest_repeating_subseq", "test": "def check(candidate):\n\n    assert candidate(\"AABEBCDD\") == 3\n    assert candidate(\"aabb\") == 2\n    assert candidate(\"aab\") == 1\n"}
{"task_id": "208", "prompt": "def is_decimal(num):\n\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nYour code should satisfy these tests:\nis_decimal(\"123\") == True\nis_decimal(\"123.45\") == True\nis_decimal(\"123.4\") == True\n\"\"\"\n", "entry_point": "is_decimal", "test": "def check(candidate):\n\n    assert candidate('123.11') == True\n    assert candidate('0.21') == True\n    assert candidate('123.1214') == False\n"}
{"task_id": "209", "prompt": "def heap_replace(heap,a):\n\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nYour code should satisfy these tests:\nheap_replace([3, 1, 4, 1, 5], 2) == [1, 2, 4, 3, 5]\nheap_replace([10, 20, 15, 40, 50], 5) == [5, 20, 15, 40, 50]\nheap_replace([7, 8, 9, 10], 6) == [6, 8, 9, 10]\nheap_replace([1, 2, 3, 4, 5], 0) == [0, 2, 3, 4, 5]\nheap_replace([5, 7, 9, 1, 3], 4) == [3, 4, 9, 7, 5]\n\"\"\"\n", "entry_point": "heap_replace", "test": "def check(candidate):\n\n    assert candidate( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n    assert candidate([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\n    assert candidate([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]\n"}
{"task_id": "210", "prompt": "def is_allowed_specific_char(string):\n\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nYour code should satisfy these tests:\nis_allowed_specific_char(\"HelloWorld123\") == True\nis_allowed_specific_char(\"Hello_World!\") == False\nis_allowed_specific_char(\"Valid.String123\") == True\n\"\"\"\n", "entry_point": "is_allowed_specific_char", "test": "def check(candidate):\n\n    assert candidate(\"ABCDEFabcdef123450\") == True\n    assert candidate(\"*&%@#!}{\") == False\n    assert candidate(\"HELLOhowareyou98765\") == True\n"}
{"task_id": "211", "prompt": "def count_Num(n):\n\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nYour code should satisfy these tests:\ncount_Num(1) == 1\ncount_Num(2) == 1\ncount_Num(3) == 2\ncount_Num(4) == 4\ncount_Num(5) == 8\ncount_Num(6) == 16\ncount_Num(10) == 256\ncount_Num(15) == 8192\ncount_Num(20) == 262144\n\"\"\"\n", "entry_point": "count_Num", "test": "def check(candidate):\n\n    assert candidate(2) == 1\n    assert candidate(3) == 2\n    assert candidate(1) == 1\n"}
{"task_id": "212", "prompt": "def fourth_Power_Sum(n):\n\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nYour code should satisfy these tests:\nfourth_Power_Sum(1) == 1\nfourth_Power_Sum(2) == 17\nfourth_Power_Sum(3) == 98\n\"\"\"\n", "entry_point": "fourth_Power_Sum", "test": "def check(candidate):\n\n    assert candidate(2) == 17\n    assert candidate(4) == 354\n    assert candidate(6) == 2275\n"}
{"task_id": "213", "prompt": "def concatenate_strings(test_tup1, test_tup2):\n\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nYour code should satisfy these tests:\nconcatenate_strings(('a', 'b', 'c'), ('1', '2', '3')) == ('a1', 'b2', 'c3')\nconcatenate_strings(('hello', 'world'), ('!', '?')) == ('hello!', 'world?')\nconcatenate_strings(('python', 'programming'), ('is', 'fun')) == ('pythonis', 'programmingfun')\n\"\"\"\n", "entry_point": "concatenate_strings", "test": "def check(candidate):\n\n    assert candidate((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n    assert candidate((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\n    assert candidate((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')\n"}
{"task_id": "214", "prompt": "def degree_radian(radian):\n\"\"\"\nWrite a function to convert radians to degrees.\nYour code should satisfy these tests:\ndegree_radian(0) == 0.0\ndegree_radian(math.pi) == 180.0\ndegree_radian(math.pi / 2) == 90.0\n\"\"\"\n", "entry_point": "degree_radian", "test": "def check(candidate):\n\n    assert candidate(90)==5156.620156177409\n    assert candidate(60)==3437.746770784939\n    assert candidate(120)==6875.493541569878\n"}
{"task_id": "215", "prompt": "def decode_list(alist):\n\"\"\"\nWrite a function to decode a run-length encoded given list.\nYour code should satisfy these tests:\ndecode_list([[3, 'a'], [2, 'b'], [1, 'c']]) == ['a', 'a', 'a', 'b', 'b', 'c']\ndecode_list(['x', [4, 'y'], 'z']) == ['x', 'y', 'y', 'y', 'y', 'z']\ndecode_list([[1, 'hello'], [3, 'world']]) == ['hello', 'world', 'world', 'world']\n\"\"\"\n", "entry_point": "decode_list", "test": "def check(candidate):\n\n    assert candidate([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n    assert candidate(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']\n"}
{"task_id": "216", "prompt": "def check_subset_list(list1, list2):\n\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nYour code should satisfy these tests:\ncheck_subset_list([[1, 2, 3]], [[1, 2]]) == False\ncheck_subset_list([[4, 5, 6]], [[4, 7]]) == False\ncheck_subset_list([[7, 8, 9, 10]], [[8, 9]]) == False\n\"\"\"\n", "entry_point": "check_subset_list", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n    assert candidate([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\n    assert candidate([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False\n"}
{"task_id": "217", "prompt": "def first_Repeated_Char(str):\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\nYour code should satisfy these tests:\nfirst_Repeated_Char(\"swiss\") == 's'\nfirst_Repeated_Char(\"programming\") == 'r'\nfirst_Repeated_Char(\"abcdefg\") == '\\0'\n\"\"\"\n", "entry_point": "first_Repeated_Char", "test": "def check(candidate):\n\n    assert candidate(\"Google\") == \"o\"\n    assert candidate(\"data\") == \"a\"\n    assert candidate(\"python\") == '\\0'\n"}
{"task_id": "218", "prompt": "def min_Operations(A,B):\n\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nYour code should satisfy these tests:\nmin_Operations(2, 4) == 1\nmin_Operations(3, 9) == 2\nmin_Operations(5, 25) == 4\nmin_Operations(7, 14) == 1\nmin_Operations(10, 100) == 9\n\"\"\"\n", "entry_point": "min_Operations", "test": "def check(candidate):\n\n    assert candidate(2,4) == 1\n    assert candidate(4,10) == 4\n    assert candidate(1,4) == 3\n"}
{"task_id": "219", "prompt": "def extract_min_max(test_tup, K):\n\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nYour code should satisfy these tests:\nextract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nextract_min_max((10, 4, 12, 9, 2, 15), 1) == (2, 15)\nextract_min_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3) == (1, 2, 3, 8, 9, 10)\nextract_min_max((100, 200, 300, 400, 500), 0) == ()\nextract_min_max((9, 1, 8, 2, 7, 3, 6, 4, 5), 4) == (1, 2, 3, 4, 6, 7, 8, 9)\n\"\"\"\n", "entry_point": "extract_min_max", "test": "def check(candidate):\n\n    assert candidate((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n    assert candidate((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\n    assert candidate((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)\n"}
{"task_id": "220", "prompt": "def replace_max_specialchar(text,n):\n\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nYour code should satisfy these tests:\nreplace_max_specialchar(\"Hello, world. This is a test.\", 2) == 'Hello::world. This is a test.'\nreplace_max_specialchar(\"Python, programming, language.\", 3) == 'Python::programming: language.'\nreplace_max_specialchar(\"No special chars here!\", 1) == 'No:special chars here!'\n\"\"\"\n", "entry_point": "replace_max_specialchar", "test": "def check(candidate):\n\n    assert candidate('Python language, Programming language.',2)==('Python:language: Programming language.')\n    assert candidate('a b c,d e f',3)==('a:b:c:d e f')\n    assert candidate('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')\n"}
{"task_id": "221", "prompt": "def first_even(nums):\n\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nYour code should satisfy these tests:\nfirst_even([1, 3, 5, 8, 10]) == 8\nfirst_even([2, 4, 6, 8, 10]) == 2\nfirst_even([11, 13, 17, 19]) == -1\n\"\"\"\n", "entry_point": "first_even", "test": "def check(candidate):\n\n    assert candidate ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n    assert candidate([2, 3, 4]) == 2\n    assert candidate([5, 6, 7]) == 6\n"}
{"task_id": "222", "prompt": "def check_type(test_tuple):\n\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nYour code should satisfy these tests:\ncheck_type((1, 2, 3)) == True\ncheck_type((1, '2', 3)) == False\ncheck_type(('a', 'b', 'c')) == True\n\"\"\"\n", "entry_point": "check_type", "test": "def check(candidate):\n\n    assert candidate((5, 6, 7, 3, 5, 6) ) == True\n    assert candidate((1, 2, \"4\") ) == False\n    assert candidate((3, 2, 1, 4, 5) ) == True\n"}
{"task_id": "223", "prompt": "def is_majority(arr, n, x):\n\"\"\"\nWrite a function to check for majority element in the given sorted array.\nYour code should satisfy these tests:\nis_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nis_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nis_majority([2, 2, 2, 2, 2, 2, 2, 2], 8, 2) == True\n\"\"\"\n", "entry_point": "is_majority", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n"}
{"task_id": "224", "prompt": "def count_Set_Bits(n):\n\"\"\"\nWrite a python function to count set bits of a given number.\nYour code should satisfy these tests:\ncount_Set_Bits(5) == 2\ncount_Set_Bits(7) == 3\ncount_Set_Bits(15) == 4\n\"\"\"\n", "entry_point": "count_Set_Bits", "test": "def check(candidate):\n\n    assert candidate(2) == 1\n    assert candidate(4) == 1\n    assert candidate(6) == 2\n"}
{"task_id": "225", "prompt": "def find_Min(arr,low,high):\n\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nYour code should satisfy these tests:\nfind_Min([4, 5, 6, 7, 0, 1, 2], 0, 6) == 0\nfind_Min([11, 13, 15, 17], 0, 3) == 11\nfind_Min([2, 2, 2, 0, 1], 0, 4) == 0\n\"\"\"\n", "entry_point": "find_Min", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4,5],0,4) == 1\n    assert candidate([4,6,8],0,2) == 4\n    assert candidate([2,3,5,7,9],0,4) == 2\n"}
{"task_id": "226", "prompt": "def odd_values_string(str):\n\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nYour code should satisfy these tests:\nodd_values_string(\"abcdef\") == \"ace\"\nodd_values_string(\"123456789\") == \"13579\"\nodd_values_string(\"Python\") == \"Pto\"\n\"\"\"\n", "entry_point": "odd_values_string", "test": "def check(candidate):\n\n    assert candidate('abcdef') == 'ace'\n    assert candidate('python') == 'pto'\n    assert candidate('data') == 'dt'\n"}
{"task_id": "227", "prompt": "def min_of_three(a,b,c):\n\"\"\"\nWrite a function to find minimum of three numbers.\nYour code should satisfy these tests:\nmin_of_three(10, 20, 30) == 10\nmin_of_three(-5, -10, 0) == -10\nmin_of_three(7, 7, 7) == 7\n\"\"\"\n", "entry_point": "min_of_three", "test": "def check(candidate):\n\n    assert candidate(10,20,0)==0\n    assert candidate(19,15,18)==15\n    assert candidate(-10,-20,-30)==-30\n"}
{"task_id": "228", "prompt": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nYour code should satisfy these tests:\nall_Bits_Set_In_The_Given_Range(15, 2, 4) == False\nall_Bits_Set_In_The_Given_Range(7, 1, 2) == False\nall_Bits_Set_In_The_Given_Range(8, 3, 5) == False\nall_Bits_Set_In_The_Given_Range(10, 1, 3) == False\nall_Bits_Set_In_The_Given_Range(31, 2, 5) == False\n\"\"\"\n", "entry_point": "all_Bits_Set_In_The_Given_Range", "test": "def check(candidate):\n\n    assert candidate(4,1,2) == True\n    assert candidate(17,2,4) == True\n    assert candidate(39,4,6) == False\n"}
{"task_id": "229", "prompt": "def re_arrange_array(arr, n):\n\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nYour code should satisfy these tests:\nre_arrange_array([-1, 2, -3, 4, 5, -6], 6) == [-1, -3, -6, 4, 5, 2]\nre_arrange_array([-5, 7, -8, 9, -10], 5) == [-5, -8, -10, 9, 7]\nre_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nre_arrange_array([-1, -2, -3, -4, -5], 5) == [-1, -2, -3, -4, -5]\nre_arrange_array([0, -1, 2, -3, 4], 5) == [-1, -3, 2, 0, 4]\n\"\"\"\n", "entry_point": "re_arrange_array", "test": "def check(candidate):\n\n    assert candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n    assert candidate([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\n    assert candidate([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]\n"}
{"task_id": "230", "prompt": "def replace_blank(str1,char):\n\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nYour code should satisfy these tests:\nreplace_blank(\"hello world\", \"-\") == \"hello-world\"\nreplace_blank(\"python programming\", \"_\") == \"python_programming\"\nreplace_blank(\"test case 123\", \"*\") == \"test*case*123\"\n\"\"\"\n", "entry_point": "replace_blank", "test": "def check(candidate):\n\n    assert candidate(\"hello people\",'@')==(\"hello@people\")\n    assert candidate(\"python program language\",'$')==(\"python$program$language\")\n    assert candidate(\"blank space\",\"-\")==(\"blank-space\")\n"}
{"task_id": "231", "prompt": "def max_sum(tri, n):\n\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nYour code should satisfy these tests:\nmax_sum([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]], 4) == 23\nmax_sum([[1], [2, 3], [4, 5, 6]], 3) == 10\nmax_sum([[10], [1, 2], [3, 4, 5], [6, 7, 8, 9]], 4) == 26\n\"\"\"\n", "entry_point": "max_sum", "test": "def check(candidate):\n\n    assert candidate([[1], [2,1], [3,3,2]], 3) == 6\n    assert candidate([[1], [1, 2], [4, 1, 12]], 3) == 15\n    assert candidate([[2], [3,2], [13,23,12]], 3) == 28\n"}
{"task_id": "232", "prompt": "def larg_nnum(list1,n):\n\"\"\"\nWrite a function to get the n largest items from a dataset.\nYour code should satisfy these tests:\nlarg_nnum([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]\nlarg_nnum([10, 20, 30, 40, 50], 2) == [50, 40]\nlarg_nnum([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\n\"\"\"\n", "entry_point": "larg_nnum", "test": "def check(candidate):\n\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]\n"}
{"task_id": "233", "prompt": "def lateralsuface_cylinder(r,h):\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nYour code should satisfy these tests:\nlateralsuface_cylinder(5, 10) == 314.15000000000003\nlateralsuface_cylinder(3, 7) == 131.943\nlateralsuface_cylinder(0, 5) == 0.0\nlateralsuface_cylinder(2.5, 4) == 62.830000000000005\nlateralsuface_cylinder(1, 1) == 6.283\n\"\"\"\n", "entry_point": "lateralsuface_cylinder", "test": "def check(candidate):\n\n    assert candidate(10,5)==314.15000000000003\n    assert candidate(4,5)==125.66000000000001\n    assert candidate(4,10)==251.32000000000002\n"}
{"task_id": "234", "prompt": "def volume_cube(l):\n\"\"\"\nWrite a function to find the volume of a cube.\nYour code should satisfy these tests:\nvolume_cube(2) == 8\nvolume_cube(5) == 125\nvolume_cube(10) == 1000\n\"\"\"\n", "entry_point": "volume_cube", "test": "def check(candidate):\n\n    assert candidate(3)==27\n    assert candidate(2)==8\n    assert candidate(5)==125\n"}
{"task_id": "235", "prompt": "def even_bit_set_number(n):\n\"\"\"\nWrite a python function to set all even bits of a given number.\nYour code should satisfy these tests:\neven_bit_set_number(5) == 7\neven_bit_set_number(10) == 10\neven_bit_set_number(3) == 3\neven_bit_set_number(7) == 7\neven_bit_set_number(12) == 14\n\"\"\"\n", "entry_point": "even_bit_set_number", "test": "def check(candidate):\n\n    assert candidate(10) == 10\n    assert candidate(20) == 30\n    assert candidate(30) == 30\n"}
{"task_id": "236", "prompt": "def No_of_Triangle(N,K):\n\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nYour code should satisfy these tests:\nNo_of_Triangle(5, 2) == 13\nNo_of_Triangle(10, 3) == 51\nNo_of_Triangle(7, 4) == 10\nNo_of_Triangle(8, 1) == 64\nNo_of_Triangle(6, 5) == 6\n\"\"\"\n", "entry_point": "No_of_Triangle", "test": "def check(candidate):\n\n    assert candidate(4,2) == 7\n    assert candidate(4,3) == 3\n    assert candidate(1,3) == -1\n"}
{"task_id": "237", "prompt": "def check_occurences(test_list):\n\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nYour code should satisfy these tests:\ncheck_occurences([['a', 'b'], ['b', 'a'], ['c', 'd']]) == {('a', 'b'): 2, ('c', 'd'): 1}\ncheck_occurences([['x', 'y', 'z'], ['z', 'y', 'x'], ['x', 'z', 'y']]) == {('x', 'y', 'z'): 3}\ncheck_occurences([['m', 'n'], ['n', 'm'], ['p', 'q'], ['q', 'p'], ['r', 's']]) == {('m', 'n'): 2, ('p', 'q'): 2, ('r', 's'): 1}\n\"\"\"\n", "entry_point": "check_occurences", "test": "def check(candidate):\n\n    assert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    assert candidate([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\n    assert candidate([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n"}
{"task_id": "238", "prompt": "def number_of_substrings(str):\n\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nYour code should satisfy these tests:\nnumber_of_substrings(\"abc\") == 6\nnumber_of_substrings(\"abcd\") == 10\nnumber_of_substrings(\"a\") == 1\n\"\"\"\n", "entry_point": "number_of_substrings", "test": "def check(candidate):\n\n    assert candidate(\"abc\") == 6\n    assert candidate(\"abcd\") == 10\n    assert candidate(\"abcde\") == 15\n"}
{"task_id": "239", "prompt": "def get_total_number_of_sequences(m,n):\n\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nYour code should satisfy these tests:\nget_total_number_of_sequences(5, 2) == 6\nget_total_number_of_sequences(3, 3) == 0\nget_total_number_of_sequences(4, 1) == 4\nget_total_number_of_sequences(0, 5) == 0\nget_total_number_of_sequences(10, 3) == 20\n\"\"\"\n", "entry_point": "get_total_number_of_sequences", "test": "def check(candidate):\n\n    assert candidate(10, 4) == 4\n    assert candidate(5, 2) == 6\n    assert candidate(16, 3) == 84\n"}
{"task_id": "240", "prompt": "def replace_list(list1,list2):\n\"\"\"\nWrite a function to replace the last element of the list with another list.\nYour code should satisfy these tests:\nreplace_list([1, 2, 3], [4, 5]) == [1, 2, 4, 5]\nreplace_list(['a', 'b'], ['c', 'd', 'e']) == ['a', 'c', 'd', 'e']\nreplace_list([10, 20], [30]) == [10, 30]\n\"\"\"\n", "entry_point": "replace_list", "test": "def check(candidate):\n\n    assert candidate([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n    assert candidate([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\n    assert candidate([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\n"}
{"task_id": "241", "prompt": "def array_3d(m,n,o):\n\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\n\"\"\"\n", "entry_point": "array_3d", "test": "def check(candidate):\n\n    assert candidate(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n    assert candidate(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\n    assert candidate(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]\n"}
{"task_id": "242", "prompt": "def count_charac(str1):\n\"\"\"\nWrite a function to count total characters in a string.\nYour code should satisfy these tests:\ncount_charac(\"hello\") == 5\ncount_charac(\"\") == 0\ncount_charac(\"Python Programming\") == 18\n\"\"\"\n", "entry_point": "count_charac", "test": "def check(candidate):\n\n    assert candidate(\"python programming\")==18\n    assert candidate(\"language\")==8\n    assert candidate(\"words\")==5\n"}
{"task_id": "243", "prompt": "def sort_on_occurence(lst):\n\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\n\"\"\"\n", "entry_point": "sort_on_occurence", "test": "def check(candidate):\n\n    assert candidate([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n    assert candidate([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\n    assert candidate([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]\n"}
{"task_id": "244", "prompt": "def next_Perfect_Square(N):\n\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nYour code should satisfy these tests:\nnext_Perfect_Square(16) == 25\nnext_Perfect_Square(24) == 25\nnext_Perfect_Square(100) == 121\n\"\"\"\n", "entry_point": "next_Perfect_Square", "test": "def check(candidate):\n\n    assert candidate(35) == 36\n    assert candidate(6) == 9\n    assert candidate(9) == 16\n"}
{"task_id": "245", "prompt": "def max_sum(arr, n):\n\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nYour code should satisfy these tests:\nmax_sum([1, 101, 2, 3, 100, 4, 5], 7) == 207\nmax_sum([3, 4, 5, 10], 4) == 22\nmax_sum([10, 5, 4, 3], 4) == 22\n\"\"\"\n", "entry_point": "max_sum", "test": "def check(candidate):\n\n    assert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n    assert candidate([80, 60, 30, 40, 20, 10], 6) == 210\n    assert candidate([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138\n"}
{"task_id": "246", "prompt": "def babylonian_squareroot(number):\n\"\"\"\nWrite a function for computing square roots using the babylonian method.\nYour code should satisfy these tests:\nbabylonian_squareroot(16) == 4\nbabylonian_squareroot(25) == 5\nbabylonian_squareroot(9) == 3\nbabylonian_squareroot(100) == 10\nbabylonian_squareroot(144) == 12\n\"\"\"\n", "entry_point": "babylonian_squareroot", "test": "def check(candidate):\n\n    assert candidate(10)==3.162277660168379\n    assert candidate(2)==1.414213562373095\n    assert candidate(9)==3.0\n"}
{"task_id": "247", "prompt": "def lps(str):\n\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nYour code should satisfy these tests:\nlps(\"bbbab\") == 4\nlps(\"cbbd\") == 2\nlps(\"a\") == 1\n\"\"\"\n", "entry_point": "lps", "test": "def check(candidate):\n\n    assert candidate(\"TENS FOR TENS\") == 5\n    assert candidate(\"CARDIO FOR CARDS\") == 7\n    assert candidate(\"PART OF THE JOURNEY IS PART\") == 9\n"}
{"task_id": "248", "prompt": "def harmonic_sum(n):\n\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nYour code should satisfy these tests:\nharmonic_sum(1) == 1\nharmonic_sum(5) == 2.283333333333333\nharmonic_sum(10) == 2.9289682539682538\n\"\"\"\n", "entry_point": "harmonic_sum", "test": "def check(candidate):\n\n    assert candidate(7) == 2.5928571428571425\n    assert candidate(4) == 2.083333333333333\n    assert candidate(19) == 3.547739657143682\n"}
{"task_id": "249", "prompt": "def intersection_array(array_nums1,array_nums2):\n\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nYour code should satisfy these tests:\nintersection_array([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]\nintersection_array([7, 8, 9], [10, 11, 7]) == [7]\nintersection_array([12, 13, 14], [15, 16, 17]) == []\n\"\"\"\n", "entry_point": "intersection_array", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]\n"}
{"task_id": "250", "prompt": "def count_X(tup, x):\n\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nYour code should satisfy these tests:\ncount_X((1, 2, 3, 4, 5, 1, 1), 1) == 3\ncount_X(('a', 'b', 'c', 'a', 'd', 'a'), 'a') == 3\ncount_X((True, False, True, True, False), True) == 3\n\"\"\"\n", "entry_point": "count_X", "test": "def check(candidate):\n\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n"}
{"task_id": "251", "prompt": "def insert_element(list,element):\n\"\"\"\nWrite a function to insert an element before each element of a list.\nYour code should satisfy these tests:\ninsert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]\ninsert_element(['a', 'b'], 'x') == ['x', 'a', 'x', 'b']\ninsert_element([True, False], None) == [None, True, None, False]\n\"\"\"\n", "entry_point": "insert_element", "test": "def check(candidate):\n\n    assert candidate(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n    assert candidate(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\n    assert candidate(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']\n"}
{"task_id": "252", "prompt": "def convert(numbers):\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nYour code should satisfy these tests:\nconvert(1+1j) == (1.4142135623730951, 0.7853981633974483)\nconvert(-1-1j) == (1.4142135623730951, -2.356194490192345)\nconvert(3+4j) == (5.0, 0.9272952180016122)\n\"\"\"\n", "entry_point": "convert", "test": "def check(candidate):\n\n    assert candidate(1) == (1.0, 0.0)\n    assert candidate(4) == (4.0,0.0)\n    assert candidate(5) == (5.0,0.0)\n"}
{"task_id": "253", "prompt": "def count_integer(list1):\n\"\"\"\nWrite a python function to count integers from a given list.\nYour code should satisfy these tests:\ncount_integer([1, 2, 'a', 3.5, 4]) == 3\ncount_integer(['hello', 100, 200, 300, 'world']) == 3\ncount_integer([True, False, 1, 2, 3]) == 5\n\"\"\"\n", "entry_point": "count_integer", "test": "def check(candidate):\n\n    assert candidate([1,2,'abc',1.2]) == 2\n    assert candidate([1,2,3]) == 3\n    assert candidate([1,1.2,4,5.1]) == 2\n"}
{"task_id": "254", "prompt": "def words_ae(text):\n\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nYour code should satisfy these tests:\nwords_ae(\"apple eagle banana\") == ['apple', 'eagle', 'anana']\nwords_ae(\"example adventure elephant\") == ['example', 'adventure', 'elephant']\nwords_ae(\"cat dog egg\") == ['at', 'egg']\nwords_ae(\"energy active\") == ['energy', 'active']\nwords_ae(\"zebra antelope\") == ['ebra', 'antelope']\n\"\"\"\n", "entry_point": "words_ae", "test": "def check(candidate):\n\n    assert candidate(\"python programe\")==['ame']\n    assert candidate(\"python programe language\")==['ame','anguage']\n    assert candidate(\"assert statement\")==['assert', 'atement']\n"}
{"task_id": "255", "prompt": "def combinations_colors(l, n):\n\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nYour code should satisfy these tests:\ncombinations_colors([1, 2], 2) == [(1, 1), (1, 2), (2, 2)]\ncombinations_colors(['red', 'blue', 'green'], 3) == [('red', 'red', 'red'), ('red', 'red', 'blue'), ('red', 'red', 'green'), ('red', 'blue', 'blue'), ('red', 'blue', 'green'), ('red', 'green', 'green'), ('blue', 'blue', 'blue'), ('blue', 'blue', 'green'), ('blue', 'green', 'green'), ('green', 'green', 'green')]\ncombinations_colors([4, 5, 6], 2) == [(4, 4), (4, 5), (4, 6), (5, 5), (5, 6), (6, 6)]\ncombinations_colors(['A', 'B', 'C', 'D'], 2) == [('A', 'A'), ('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'B'), ('B', 'C'), ('B', 'D'), ('C', 'C'), ('C', 'D'), ('D', 'D')]\ncombinations_colors(['x', 'y', 'z'], 1) == [('x',), ('y',), ('z',)]\n\"\"\"\n", "entry_point": "combinations_colors", "test": "def check(candidate):\n\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n"}
{"task_id": "256", "prompt": "def count_Primes_nums(n):\n\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nYour code should satisfy these tests:\ncount_Primes_nums(10) == 4\ncount_Primes_nums(20) == 8\ncount_Primes_nums(2) == 0\n\"\"\"\n", "entry_point": "count_Primes_nums", "test": "def check(candidate):\n\n    assert candidate(5) == 2\n    assert candidate(10) == 4\n    assert candidate(100) == 25\n"}
{"task_id": "257", "prompt": "def swap_numbers(a,b):\n\"\"\"\nWrite a function to swap two numbers.\nYour code should satisfy these tests:\nswap_numbers(5, 10) == (10, 5)\nswap_numbers(-1, 1) == (1, -1)\nswap_numbers(0, 0) == (0, 0)\n\"\"\"\n", "entry_point": "swap_numbers", "test": "def check(candidate):\n\n    assert candidate(10,20)==(20,10)\n    assert candidate(15,17)==(17,15)\n    assert candidate(100,200)==(200,100)\n"}
{"task_id": "258", "prompt": "def count_odd(array_nums):\n\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nYour code should satisfy these tests:\ncount_odd([1, 2, 3, 4, 5]) == 3\ncount_odd([10, 22, 35, 47, 53]) == 3\ncount_odd([0, 2, 4, 6, 8]) == 0\n\"\"\"\n", "entry_point": "count_odd", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 5, 7, 8, 10])==4\n    assert candidate([10,15,14,13,-18,12,-20])==2\n    assert candidate([1, 2, 4, 8, 9])==2\n"}
{"task_id": "259", "prompt": "def maximize_elements(test_tup1, test_tup2):\n\"\"\"\nWrite a function to maximize the given two tuples.\nYour code should satisfy these tests:\nmaximize_elements(((1, 2), (3, 4)), ((2, 1), (4, 3))) == ((2, 2), (4, 4))\nmaximize_elements(((5, 6), (7, 8)), ((3, 9), (1, 2))) == ((5, 9), (7, 8))\nmaximize_elements(((0, 0), (0, 0)), ((0, 0), (0, 0))) == ((0, 0), (0, 0))\n\"\"\"\n", "entry_point": "maximize_elements", "test": "def check(candidate):\n\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\n"}
{"task_id": "260", "prompt": "def newman_prime(n):\n\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nYour code should satisfy these tests:\nnewman_prime(2) == 3\nnewman_prime(3) == 7\nnewman_prime(4) == 17\nnewman_prime(5) == 41\nnewman_prime(6) == 99\n\"\"\"\n", "entry_point": "newman_prime", "test": "def check(candidate):\n\n    assert candidate(3) == 7\n    assert candidate(4) == 17\n    assert candidate(5) == 41\n"}
{"task_id": "261", "prompt": "def division_elements(test_tup1, test_tup2):\n\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nYour code should satisfy these tests:\ndivision_elements((10, 20, 30), (2, 4, 5)) == (5, 5, 6)\ndivision_elements((100, 50, 25), (10, 5, 5)) == (10, 10, 5)\ndivision_elements((8, 16, 24), (2, 4, 6)) == (4, 4, 4)\n\"\"\"\n", "entry_point": "division_elements", "test": "def check(candidate):\n\n    assert candidate((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n    assert candidate((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\n    assert candidate((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n"}
{"task_id": "262", "prompt": "def split_two_parts(list1, L):\n\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nYour code should satisfy these tests:\nsplit_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nsplit_two_parts(['a', 'b', 'c', 'd'], 3) == (['a', 'b', 'c'], ['d'])\nsplit_two_parts([10, 20, 30], 0) == ([], [10, 20, 30])\n\"\"\"\n", "entry_point": "split_two_parts", "test": "def check(candidate):\n\n    assert candidate([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert candidate(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n"}
{"task_id": "263", "prompt": "def merge_dict(d1,d2):\n\"\"\"\nWrite a function to merge two dictionaries.\nYour code should satisfy these tests:\nmerge_dict({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'a': 1, 'b': 3, 'c': 4}\nmerge_dict({}, {'x': 10, 'y': 20}) == {'x': 10, 'y': 20}\nmerge_dict({'key1': 'value1'}, {}) == {'key1': 'value1'}\n\"\"\"\n", "entry_point": "merge_dict", "test": "def check(candidate):\n\n    assert candidate({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n    assert candidate({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\n    assert candidate({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}\n"}
{"task_id": "264", "prompt": "def dog_age(h_age):\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nYour code should satisfy these tests:\ndog_age(1) == 10.5\ndog_age(5) == 33\ndog_age(10) == 53\n\"\"\"\n", "entry_point": "dog_age", "test": "def check(candidate):\n\n    assert candidate(12)==61\n    assert candidate(15)==73\n    assert candidate(24)==109\n"}
{"task_id": "265", "prompt": "def list_split(S, step):\n\"\"\"\nWrite a function to split a list for every nth element.\nYour code should satisfy these tests:\nlist_split([1, 2, 3, 4, 5, 6], 2) == [[1, 3, 5], [2, 4, 6]]\nlist_split(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 3) == [['a', 'd', 'g'], ['b', 'e'], ['c', 'f']]\nlist_split([10, 20, 30, 40, 50], 1) == [[10, 20, 30, 40, 50]]\n\"\"\"\n", "entry_point": "list_split", "test": "def check(candidate):\n\n    assert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\n    assert candidate(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n"}
{"task_id": "266", "prompt": "def lateralsurface_cube(l):\n\"\"\"\nWrite a function to find the lateral surface area of a cube.\nYour code should satisfy these tests:\nlateralsurface_cube(3) == 36\nlateralsurface_cube(5) == 100\nlateralsurface_cube(7) == 196\n\"\"\"\n", "entry_point": "lateralsurface_cube", "test": "def check(candidate):\n\n    assert candidate(5)==100\n    assert candidate(9)==324\n    assert candidate(10)==400\n"}
{"task_id": "267", "prompt": "def square_Sum(n):\n\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nYour code should satisfy these tests:\nsquare_Sum(1) == 1\nsquare_Sum(2) == 10\nsquare_Sum(3) == 35\n\"\"\"\n", "entry_point": "square_Sum", "test": "def check(candidate):\n\n    assert candidate(2) == 10\n    assert candidate(3) == 35\n    assert candidate(4) == 84\n"}
{"task_id": "268", "prompt": "def find_star_num(n):\n\"\"\"\nWrite a function to find the n'th star number.\nYour code should satisfy these tests:\nfind_star_num(1) == 1\nfind_star_num(2) == 13\nfind_star_num(3) == 37\n\"\"\"\n", "entry_point": "find_star_num", "test": "def check(candidate):\n\n    assert candidate(3) == 37\n    assert candidate(4) == 73\n    assert candidate(5) == 121\n"}
{"task_id": "269", "prompt": "def ascii_value(k):\n\"\"\"\nWrite a function to find the ascii value of a character.\nYour code should satisfy these tests:\nascii_value('A') == 65\nascii_value('z') == 122\nascii_value('0') == 48\n\"\"\"\n", "entry_point": "ascii_value", "test": "def check(candidate):\n\n    assert candidate('A')==65\n    assert candidate('R')==82\n    assert candidate('S')==83\n"}
{"task_id": "270", "prompt": "def sum_even_and_even_index(arr,n):\n\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nYour code should satisfy these tests:\nsum_even_and_even_index([2, 3, 4, 5, 6], 5) == 12\nsum_even_and_even_index([1, 2, 3, 4, 5, 6], 6) == 0\nsum_even_and_even_index([10, 15, 20, 25, 30, 35], 6) == 60\n\"\"\"\n", "entry_point": "sum_even_and_even_index", "test": "def check(candidate):\n\n    assert candidate([5, 6, 12, 1, 18, 8],6) == 30\n    assert candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\n    assert candidate([5, 6, 12, 1],4) == 12\n"}
{"task_id": "271", "prompt": "def even_Power_Sum(n):\n\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nYour code should satisfy these tests:\neven_Power_Sum(1) == 32\neven_Power_Sum(2) == 1056\neven_Power_Sum(3) == 8832\n\"\"\"\n", "entry_point": "even_Power_Sum", "test": "def check(candidate):\n\n    assert candidate(2) == 1056\n    assert candidate(3) == 8832\n    assert candidate(1) == 32\n"}
{"task_id": "272", "prompt": "def rear_extract(test_list):\n\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nYour code should satisfy these tests:\nrear_extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [3, 6, 9]\nrear_extract([[10], [20, 30], [40, 50, 60]]) == [10, 30, 60]\nrear_extract([['a', 'b'], ['c', 'd', 'e'], ['f']]) == ['b', 'e', 'f']\n\"\"\"\n", "entry_point": "rear_extract", "test": "def check(candidate):\n\n    assert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n"}
{"task_id": "273", "prompt": "def substract_elements(test_tup1, test_tup2):\n\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nYour code should satisfy these tests:\nsubstract_elements((10, 20, 30), (1, 2, 3)) == (9, 18, 27)\nsubstract_elements((5, 15, 25), (5, 15, 25)) == (0, 0, 0)\nsubstract_elements((100, 200, 300), (50, 100, 150)) == (50, 100, 150)\n\"\"\"\n", "entry_point": "substract_elements", "test": "def check(candidate):\n\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n"}
{"task_id": "274", "prompt": "def even_binomial_Coeff_Sum( n):\n\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nYour code should satisfy these tests:\neven_binomial_Coeff_Sum(1) == 1\neven_binomial_Coeff_Sum(2) == 2\neven_binomial_Coeff_Sum(5) == 16\n\"\"\"\n", "entry_point": "even_binomial_Coeff_Sum", "test": "def check(candidate):\n\n    assert candidate(4) == 8\n    assert candidate(6) == 32\n    assert candidate(2) == 2\n"}
{"task_id": "275", "prompt": "def get_Position(a,n,m):\n\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nYour code should satisfy these tests:\nget_Position([10, 20, 30], 3, 10) == 3\nget_Position([5, 15, 25], 3, 5) == 3\nget_Position([7, 14, 21], 3, 7) == 3\nget_Position([12, 24, 36], 3, 12) == 3\nget_Position([9, 18, 27], 3, 9) == 3\n\"\"\"\n", "entry_point": "get_Position", "test": "def check(candidate):\n\n    assert candidate([2,5,4],3,2) == 2\n    assert candidate([4,3],2,2) == 2\n    assert candidate([1,2,3,4],4,1) == 4\n"}
{"task_id": "276", "prompt": "def volume_cylinder(r,h):\n\"\"\"\nWrite a function to find the volume of a cylinder.\nYour code should satisfy these tests:\nvolume_cylinder(2, 5) == 62.830000000000005\nvolume_cylinder(3, 7) == 197.91449999999998\nvolume_cylinder(1, 10) == 31.415000000000003\nvolume_cylinder(4, 2) == 100.528\nvolume_cylinder(0.5, 8) == 6.283\n\"\"\"\n", "entry_point": "volume_cylinder", "test": "def check(candidate):\n\n    assert candidate(10,5)==1570.7500000000002\n    assert candidate(4,5)==251.32000000000002\n    assert candidate(4,10)==502.64000000000004\n"}
{"task_id": "277", "prompt": "def dict_filter(dict,n):\n\"\"\"\nWrite a function to filter a dictionary based on values.\nYour code should satisfy these tests:\ndict_filter({'a': 10, 'b': 5, 'c': 15}, 10) == {'a': 10, 'c': 15}\ndict_filter({'x': 3, 'y': 7, 'z': 2}, 5) == {'y': 7}\ndict_filter({'m': 20, 'n': 20, 'o': 19}, 20) == {'m': 20, 'n': 20}\n\"\"\"\n", "entry_point": "dict_filter", "test": "def check(candidate):\n\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n"}
{"task_id": "278", "prompt": "def count_first_elements(test_tup):\n\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nYour code should satisfy these tests:\ncount_first_elements((1, 2, (3, 4), 5)) == 2\ncount_first_elements((10, 20, 30, (40, 50, 60), 70)) == 3\ncount_first_elements((100, 200, 300, 400, (500,))) == 4\n\"\"\"\n", "entry_point": "count_first_elements", "test": "def check(candidate):\n\n    assert candidate((1, 5, 7, (4, 6), 10) ) == 3\n    assert candidate((2, 9, (5, 7), 11) ) == 2\n    assert candidate((11, 15, 5, 8, (2, 3), 8) ) == 4\n"}
{"task_id": "279", "prompt": "def is_num_decagonal(n):\n\"\"\"\nWrite a function to find the nth decagonal number.\nYour code should satisfy these tests:\nis_num_decagonal(1) == 1\nis_num_decagonal(10) == 370\nis_num_decagonal(38) == 5662\n\"\"\"\n", "entry_point": "is_num_decagonal", "test": "def check(candidate):\n\n    assert candidate(3) == 27\n    assert candidate(7) == 175\n    assert candidate(10) == 370\n"}
{"task_id": "280", "prompt": "def sequential_search(dlist, item):\n\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nYour code should satisfy these tests:\nsequential_search([1, 2, 3, 4, 5], 3) == (True, 2)\nsequential_search(['a', 'b', 'c', 'd'], 'd') == (True, 3)\nsequential_search([10, 20, 30, 40, 50], 25) == (False, 5)\n\"\"\"\n", "entry_point": "sequential_search", "test": "def check(candidate):\n\n    assert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n    assert candidate([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\n    assert candidate([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n"}
{"task_id": "281", "prompt": "def all_unique(test_list):\n\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nYour code should satisfy these tests:\nall_unique([1, 2, 3, 4, 5]) == True\nall_unique(['a', 'b', 'c', 'a']) == False\nall_unique([True, False, True]) == False\n\"\"\"\n", "entry_point": "all_unique", "test": "def check(candidate):\n\n    assert candidate([1,2,3]) == True\n    assert candidate([1,2,1,2]) == False\n    assert candidate([1,2,3,4,5]) == True\n"}
{"task_id": "282", "prompt": "def sub_list(nums1,nums2):\n\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nYour code should satisfy these tests:\nsub_list([10, 20, 30], [1, 2, 3]) == [9, 18, 27]\nsub_list([5, 15, 25], [5, 15, 25]) == [0, 0, 0]\nsub_list([100, 200, 300], [50, 100, 150]) == [50, 100, 150]\n\"\"\"\n", "entry_point": "sub_list", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3],[4,5,6])==[-3,-3,-3]\n    assert candidate([1,2],[3,4])==[-2,-2]\n    assert candidate([90,120],[50,70])==[40,50]\n"}
{"task_id": "283", "prompt": "def validate(n):\n\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nYour code should satisfy these tests:\nvalidate(1234567890) == False\nvalidate(1122334455) == False\nvalidate(9876543210) == False\n\"\"\"\n", "entry_point": "validate", "test": "def check(candidate):\n\n    assert candidate(1234) == True\n    assert candidate(51241) == False\n    assert candidate(321) == True\n"}
{"task_id": "284", "prompt": "def check_element(list,element):\n\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nYour code should satisfy these tests:\ncheck_element([1, 1, 1], 1) == True\ncheck_element([2, 2, 3], 2) == False\ncheck_element(['a', 'a', 'a'], 'a') == True\n\"\"\"\n", "entry_point": "check_element", "test": "def check(candidate):\n\n    assert candidate([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n    assert candidate([1,2,3,4],7)==False\n    assert candidate([\"green\", \"green\", \"green\", \"green\"],'green')==True\n"}
{"task_id": "285", "prompt": "def text_match_two_three(text):\n\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nYour code should satisfy these tests:\ntext_match_two_three(\"cab\") == 'Not matched!'\ntext_match_two_three(\"abbb\") == 'Found a match!'\ntext_match_two_three(\"aabbb\") == 'Found a match!'\n\"\"\"\n", "entry_point": "text_match_two_three", "test": "def check(candidate):\n\n    assert candidate(\"ac\")==('Not matched!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abbbba\")==('Found a match!')\n"}
{"task_id": "286", "prompt": "def max_sub_array_sum_repeated(a, n, k):\n\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nYour code should satisfy these tests:\nmax_sub_array_sum_repeated([1, -2, 3, 4, -1, 2], 6, 2) == 15\nmax_sub_array_sum_repeated([-1, -2, -3, -4], 4, 3) == -1\nmax_sub_array_sum_repeated([5, -1, 5], 3, 3) == 27\n\"\"\"\n", "entry_point": "max_sub_array_sum_repeated", "test": "def check(candidate):\n\n    assert candidate([10, 20, -30, -1], 4, 3) == 30\n    assert candidate([-1, 10, 20], 3, 2) == 59\n    assert candidate([-1, -2, -3], 3, 3) == -1\n"}
{"task_id": "287", "prompt": "def square_Sum(n):\n\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nYour code should satisfy these tests:\nsquare_Sum(1) == 4\nsquare_Sum(2) == 20\nsquare_Sum(3) == 56\n\"\"\"\n", "entry_point": "square_Sum", "test": "def check(candidate):\n\n    assert candidate(2) == 20\n    assert candidate(3) == 56\n    assert candidate(4) == 120\n"}
{"task_id": "288", "prompt": "def modular_inverse(arr, N, P):\n\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nYour code should satisfy these tests:\nmodular_inverse([1, 2, 3, 4], 4, 5) == 2\nmodular_inverse([7, 8, 9, 10], 4, 11) == 1\nmodular_inverse([2, 4, 6, 8], 4, 7) == 2\nmodular_inverse([3, 5, 7, 9], 4, 10) == 1\nmodular_inverse([1, 3, 5, 7, 9], 5, 8) == 5\n\"\"\"\n", "entry_point": "modular_inverse", "test": "def check(candidate):\n\n    assert candidate([ 1, 6, 4, 5 ], 4, 7) == 2\n    assert candidate([1, 3, 8, 12, 12], 5, 13) == 3\n    assert candidate([2, 3, 4, 5], 4, 6) == 1\n"}
{"task_id": "289", "prompt": "def odd_Days(N):\n\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nYour code should satisfy these tests:\nodd_Days(2021) == 5\nodd_Days(1996) == 2\nodd_Days(2100) == 5\nodd_Days(1800) == 3\nodd_Days(1776) == 2\n\"\"\"\n", "entry_point": "odd_Days", "test": "def check(candidate):\n\n    assert candidate(100) == 5\n    assert candidate(50) ==6\n    assert candidate(75) == 2\n"}
{"task_id": "290", "prompt": "def max_length(list1):\n\"\"\"\nWrite a function to find the list of lists with maximum length.\nYour code should satisfy these tests:\nmax_length([\"apple\", \"banana\", \"cherry\"]) == (6, 'cherry')\nmax_length([\"dog\", \"elephant\", \"cat\"]) == (8, 'elephant')\nmax_length([\"sun\", \"moon\", \"star\"]) == (4, 'sun')\n\"\"\"\n", "entry_point": "max_length", "test": "def check(candidate):\n\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert candidate([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\n    assert candidate([[5], [15,20,25]])==(3, [15,20,25])\n"}
{"task_id": "291", "prompt": "def count_no_of_ways(n, k):\n\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nYour code should satisfy these tests:\ncount_no_of_ways(3, 2) == 6\ncount_no_of_ways(4, 3) == 66\ncount_no_of_ways(5, 4) == 864\n\"\"\"\n", "entry_point": "count_no_of_ways", "test": "def check(candidate):\n\n    assert candidate(2, 4) == 16\n    assert candidate(3, 2) == 6\n    assert candidate(4, 4) == 228\n"}
{"task_id": "292", "prompt": "def find(n,m):\n\"\"\"\nWrite a python function to find quotient of two numbers.\nYour code should satisfy these tests:\nfind(10, 2) == 5\nfind(20, 3) == 6\nfind(15, 5) == 3\n\"\"\"\n", "entry_point": "find", "test": "def check(candidate):\n\n    assert candidate(10,3) == 3\n    assert candidate(4,2) == 2\n    assert candidate(20,5) == 4\n"}
{"task_id": "293", "prompt": "def otherside_rightangle(w,h):\n\"\"\"\nWrite a function to find the third side of a right angled triangle.\nYour code should satisfy these tests:\notherside_rightangle(3, 4) == 5.0\notherside_rightangle(5, 12) == 13.0\notherside_rightangle(8, 15) == 17.0\n\"\"\"\n", "entry_point": "otherside_rightangle", "test": "def check(candidate):\n\n    assert candidate(7,8)==10.63014581273465\n    assert candidate(3,4)==5\n    assert candidate(7,15)==16.55294535724685\n"}
{"task_id": "294", "prompt": "def max_val(listval):\n\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nYour code should satisfy these tests:\nmax_val([3, 'a', 5, 8, 'b']) == 8\nmax_val([10, 20, 30, 40]) == 40\nmax_val([0, -5, 7, -10, 3]) == 7\nmax_val([-1, -2, -3, -4]) == -1\nmax_val([1, 2, 3, 4, 5]) == 5\n\"\"\"\n", "entry_point": "max_val", "test": "def check(candidate):\n\n    assert candidate(['Python', 3, 2, 4, 5, 'version'])==5\n    assert candidate(['Python', 15, 20, 25])==25\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==50\n"}
{"task_id": "295", "prompt": "def sum_div(number):\n\"\"\"\nWrite a function to return the sum of all divisors of a number.\nYour code should satisfy these tests:\nsum_div(10) == 8\nsum_div(15) == 9\nsum_div(28) == 28\n\"\"\"\n", "entry_point": "sum_div", "test": "def check(candidate):\n\n    assert candidate(8)==7\n    assert candidate(12)==16\n    assert candidate(7)==1\n"}
{"task_id": "296", "prompt": "def get_Inv_Count(arr,n):\n\"\"\"\nWrite a python function to count inversions in an array.\nYour code should satisfy these tests:\nget_Inv_Count([1, 20, 6, 4, 5], 5) == 5\nget_Inv_Count([10, 20, 30, 40, 50], 5) == 0\nget_Inv_Count([50, 40, 30, 20, 10], 5) == 10\n\"\"\"\n", "entry_point": "get_Inv_Count", "test": "def check(candidate):\n\n    assert candidate([1,20,6,4,5],5) == 5\n    assert candidate([1,2,1],3) == 1\n    assert candidate([1,2,5,6,1],5) == 3\n"}
{"task_id": "297", "prompt": "def flatten_list(list1):\n\"\"\"\nWrite a function to flatten a given nested list structure.\nYour code should satisfy these tests:\nflatten_list([1, [2, [3, 4], 5], 6]) == [1, 2, 3, 4, 5, 6]\nflatten_list([[1, 2, [3]], 4, [5, 6]]) == [1, 2, 3, 4, 5, 6]\nflatten_list([[[[1]]], 2, [3, [4, [5]]]]) == [1, 2, 3, 4, 5]\n\"\"\"\n", "entry_point": "flatten_list", "test": "def check(candidate):\n\n    assert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n"}
{"task_id": "298", "prompt": "def intersection_nested_lists(l1, l2):\n\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nYour code should satisfy these tests:\nintersection_nested_lists([1, 2, 3], [[1, 2], [2, 3], [3, 4]]) == [[1, 2], [2, 3], [3]]\nintersection_nested_lists([4, 5], [[4], [5], [6]]) == [[4], [5], []]\nintersection_nested_lists([7, 8], [[], [8, 9], [7, 9]]) == [[], [8], [7]]\nintersection_nested_lists([10], [[10], [10, 11], [12]]) == [[10], [10], []]\nintersection_nested_lists([13, 14], [[15], [16], [17]]) == [[], [], []]\n\"\"\"\n", "entry_point": "intersection_nested_lists", "test": "def check(candidate):\n\n    assert candidate( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n    assert candidate([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\n    assert candidate(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]\n"}
{"task_id": "299", "prompt": "def max_aggregate(stdata):\n\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nYour code should satisfy these tests:\nmax_aggregate([('Alice', 88), ('Bob', 75), ('Alice', 12), ('Bob', 25)]) == ('Alice', 100)\nmax_aggregate([('Charlie', 90), ('David', 90), ('Charlie', 10)]) == ('Charlie', 100)\nmax_aggregate([('Eve', 50), ('Frank', 60), ('Eve', 40), ('Frank', 30)]) == ('Eve', 90)\n\"\"\"\n", "entry_point": "max_aggregate", "test": "def check(candidate):\n\n    assert candidate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    assert candidate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\n    assert candidate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n"}
{"task_id": "300", "prompt": "def count_binary_seq(n):\n\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nYour code should satisfy these tests:\ncount_binary_seq(1) == 2.0\ncount_binary_seq(2) == 6.0\ncount_binary_seq(3) == 20.0\n\"\"\"\n", "entry_point": "count_binary_seq", "test": "def check(candidate):\n\n    assert candidate(1) == 2.0\n    assert candidate(2) == 6.0\n    assert candidate(3) == 20.0\n"}
{"task_id": "301", "prompt": "def dict_depth(d):\n\"\"\"\nWrite a function to find the depth of a dictionary.\nYour code should satisfy these tests:\ndict_depth({}) == 1\ndict_depth({'a': 1, 'b': 2}) == 1\ndict_depth({'a': {'b': {'c': {}}}}) == 4\n\"\"\"\n", "entry_point": "dict_depth", "test": "def check(candidate):\n\n    assert candidate({'a':1, 'b': {'c': {'d': {}}}})==4\n    assert candidate({'a':1, 'b': {'c':'python'}})==2\n    assert candidate({1: 'Sun', 2: {3: {4:'Mon'}}})==3\n"}
{"task_id": "302", "prompt": "def set_Bit_Number(n):\n\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nYour code should satisfy these tests:\nset_Bit_Number(1) == 1\nset_Bit_Number(5) == 4\nset_Bit_Number(17) == 16\n\"\"\"\n", "entry_point": "set_Bit_Number", "test": "def check(candidate):\n\n    assert candidate(6) == 4\n    assert candidate(10) == 8\n    assert candidate(18) == 16\n"}
{"task_id": "303", "prompt": "def solve(a,n):\n\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nYour code should satisfy these tests:\nsolve([1, 2, 3, 4, 5], 5) == True\nsolve([5, 4, 3, 2, 1], 5) == False\nsolve([1, 3, 2, 4, 5], 5) == True\nsolve([10], 1) == True\nsolve([1, 1, 1, 1, 1], 5) == True\n\"\"\"\n", "entry_point": "solve", "test": "def check(candidate):\n\n    assert candidate([1,0,2],3) == True\n    assert candidate([1,2,0],3) == False\n    assert candidate([1,2,1],3) == True\n"}
{"task_id": "304", "prompt": "def find_Element(arr,ranges,rotations,index):\n\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nYour code should satisfy these tests:\nfind_Element([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 1) == 4\nfind_Element([10, 20, 30, 40, 50], [(0, 4), (1, 3)], 2, 2) == 10\nfind_Element([5, 6, 7, 8, 9], [(1, 3), (0, 2)], 2, 0) == 6\nfind_Element([100, 200, 300, 400, 500], [(0, 1), (2, 4)], 2, 3) == 300\nfind_Element([1, 2, 3, 4, 5, 6], [(0, 3), (2, 5)], 2, 4) == 3\n\"\"\"\n", "entry_point": "find_Element", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n    assert candidate([1,2,3,4],[[0,1],[0,2]],1,2) == 3\n    assert candidate([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1\n"}
{"task_id": "305", "prompt": "def start_withp(words):\n\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nYour code should satisfy these tests:\nstart_withp([\"Python Programming\", \"Java Coding\"]) == ('Python', 'Programming')\nstart_withp([\"Physics Problem\", \"Chemistry Quiz\"]) == ('Physics', 'Problem')\nstart_withp([\"Pandas Dataframe\", \"Numpy Array\"]) == None\nstart_withp([\"Prolog Logic\", \"Pascal Programming\"]) == ('Pascal', 'Programming')\nstart_withp([\"Perl Scripting\", \"PHP Development\"]) == None\n\"\"\"\n", "entry_point": "start_withp", "test": "def check(candidate):\n\n    assert candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n    assert candidate([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\n    assert candidate([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')\n"}
{"task_id": "306", "prompt": "def max_sum_increasing_subseq(a, n, index, k):\n\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nYour code should satisfy these tests:\nmax_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11\nmax_sum_increasing_subseq([10, 20, 30, 40, 50], 5, 2, 4) == 110\nmax_sum_increasing_subseq([5, 4, 3, 2, 1], 5, 3, 4) == 1\nmax_sum_increasing_subseq([10, 5, 20, 6, 50, 7, 80], 7, 5, 6) == 160\nmax_sum_increasing_subseq([3, 4, 5, 10], 4, 2, 3) == 22\n\"\"\"\n", "entry_point": "max_sum_increasing_subseq", "test": "def check(candidate):\n\n    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\n    assert candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n"}
{"task_id": "307", "prompt": "def colon_tuplex(tuplex,m,n):\n\"\"\"\nWrite a function to get a colon of a tuple.\nYour code should satisfy these tests:\ncolon_tuplex((['a', 'b'], ['c', 'd']), 0, 'x') == (['a', 'b', 'x'], ['c', 'd'])\ncolon_tuplex((['hello'], ['world']), 1, '!') == (['hello'], ['world', '!'])\ncolon_tuplex(([], [1, 2, 3]), 0, 0) == ([0], [1, 2, 3])\n\"\"\"\n", "entry_point": "colon_tuplex", "test": "def check(candidate):\n\n    assert candidate((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\n    assert candidate((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\n    assert candidate((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)\n"}
{"task_id": "308", "prompt": "def large_product(nums1, nums2, N):\n\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nYour code should satisfy these tests:\nlarge_product([1, 2, 3], [4, 5, 6], 2) == [18, 15]\nlarge_product([-1, -2, -3], [1, 2, 3], 3) == [-1, -2, -2]\nlarge_product([0, 10, 20], [0, 5, 15], 4) == [300, 150, 100, 50]\n\"\"\"\n", "entry_point": "large_product", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n"}
{"task_id": "309", "prompt": "def maximum(a,b):\n\"\"\"\nWrite a python function to find the maximum of two numbers.\nYour code should satisfy these tests:\nmaximum(10, 20) == 20\nmaximum(-5, -10) == -5\nmaximum(0, 0) == 0\n\"\"\"\n", "entry_point": "maximum", "test": "def check(candidate):\n\n    assert candidate(5,10) == 10\n    assert candidate(-1,-2) == -1\n    assert candidate(9,7) == 9\n"}
{"task_id": "310", "prompt": "def string_to_tuple(str1):\n\"\"\"\nWrite a function to convert a given string to a tuple.\nYour code should satisfy these tests:\nstring_to_tuple(\"hello world\") == ('h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd')\nstring_to_tuple(\"python programming\") == ('p', 'y', 't', 'h', 'o', 'n', 'p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g')\nstring_to_tuple(\"  spaces  everywhere  \") == ('s', 'p', 'a', 'c', 'e', 's', 'e', 'v', 'e', 'r', 'y', 'w', 'h', 'e', 'r', 'e')\n\"\"\"\n", "entry_point": "string_to_tuple", "test": "def check(candidate):\n\n    assert candidate(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert candidate(\"item1\")==('i', 't', 'e', 'm', '1')\n    assert candidate(\"15.10\")==('1', '5', '.', '1', '0')\n"}
{"task_id": "311", "prompt": "def set_left_most_unset_bit(n):\n\"\"\"\nWrite a python function to set the left most unset bit.\nYour code should satisfy these tests:\nset_left_most_unset_bit(0b1010) == 14\nset_left_most_unset_bit(0b1101) == 15\nset_left_most_unset_bit(0b1000) == 12\nset_left_most_unset_bit(0b111) == 7\nset_left_most_unset_bit(0b101101) == 61\n\"\"\"\n", "entry_point": "set_left_most_unset_bit", "test": "def check(candidate):\n\n    assert candidate(10) == 14\n    assert candidate(12) == 14\n    assert candidate(15) == 15\n"}
{"task_id": "312", "prompt": "def volume_cone(r,h):\n\"\"\"\nWrite a function to find the volume of a cone.\nYour code should satisfy these tests:\nvolume_cone(3, 5) == 47.12388980384689\nvolume_cone(7, 10) == 513.1268000863329\nvolume_cone(1, 1) == 1.0471975511965976\nvolume_cone(0, 5) == 0.0\nvolume_cone(4, 8) == 134.0412865531645\n\"\"\"\n", "entry_point": "volume_cone", "test": "def check(candidate):\n\n    assert candidate(5,12)==314.15926535897927\n    assert candidate(10,15)==1570.7963267948965\n    assert candidate(19,17)==6426.651371693521\n"}
{"task_id": "313", "prompt": "def pos_nos(list1):\n\"\"\"\nWrite a python function to print positive numbers in a list.\nYour code should satisfy these tests:\npos_nos([-1, -2, 3, -4, 5]) == 3\npos_nos([0, -1, -2, -3]) == 0\npos_nos([10, 20, 30, 40]) == 10\npos_nos([-5, -10, -15, 20]) == 20\npos_nos([-1, -2, -3, -4]) == None\n\"\"\"\n", "entry_point": "pos_nos", "test": "def check(candidate):\n\n    assert candidate([-1,-2,1,2]) == 1,2\n    assert candidate([3,4,-5]) == 3,4\n    assert candidate([-2,-3,1]) == 1\n"}
{"task_id": "314", "prompt": "def max_sum_rectangular_grid(grid, n):\n\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nYour code should satisfy these tests:\nmax_sum_rectangular_grid([[1, 2, 3], [0, 6, 4]], 3) == 6\nmax_sum_rectangular_grid([[5, 1, 1], [4, 2, 1]], 3) == 6\nmax_sum_rectangular_grid([[1, 3, 1, 5], [2, 2, 4, 1]], 4) == 8\n\"\"\"\n", "entry_point": "max_sum_rectangular_grid", "test": "def check(candidate):\n\n    assert candidate([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n    assert candidate([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\n    assert candidate([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81\n"}
{"task_id": "315", "prompt": "def find_Max_Len_Even(str):\n\"\"\"\nWrite a python function to find the first maximum length of even word.\nYour code should satisfy these tests:\nfind_Max_Len_Even(\"this is a test string\") == 'string'\nfind_Max_Len_Even(\"even length words here\") == 'length'\nfind_Max_Len_Even(\"odd one out\") == '-1'\n\"\"\"\n", "entry_point": "find_Max_Len_Even", "test": "def check(candidate):\n\n    assert candidate(\"python language\") == \"language\"\n    assert candidate(\"maximum even length\") == \"length\"\n    assert candidate(\"eve\") == \"-1\"\n"}
{"task_id": "316", "prompt": "def find_last_occurrence(A, x):\n\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nYour code should satisfy these tests:\nfind_last_occurrence([1, 2, 2, 2, 3, 4, 5], 2) == 3\nfind_last_occurrence([1, 1, 1, 1, 1, 1, 1], 1) == 6\nfind_last_occurrence([1, 3, 5, 7, 9], 10) == -1\n\"\"\"\n", "entry_point": "find_last_occurrence", "test": "def check(candidate):\n\n    assert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n    assert candidate([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\n    assert candidate([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6\n"}
{"task_id": "317", "prompt": "def modified_encode(alist):\n\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nYour code should satisfy these tests:\nmodified_encode([1, 1, 2, 2, 2, 3, 3, 1]) == [[2, 1], [3, 2], [2, 3], 1]\nmodified_encode(['a', 'a', 'a', 'b', 'c', 'c', 'a', 'a', 'd']) == [[3, 'a'], 'b', [2, 'c'], [2, 'a'], 'd']\nmodified_encode([7, 8, 9, 9, 10, 10, 10, 11]) == [7, 8, [2, 9], [3, 10], 11]\n\"\"\"\n", "entry_point": "modified_encode", "test": "def check(candidate):\n\n    assert candidate([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n    assert candidate('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\n    assert candidate('python')==['p', 'y', 't', 'h', 'o', 'n']\n"}
{"task_id": "318", "prompt": "def max_volume(s):\n\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nYour code should satisfy these tests:\nmax_volume(6) == 8\nmax_volume(10) == 36\nmax_volume(15) == 125\n\"\"\"\n", "entry_point": "max_volume", "test": "def check(candidate):\n\n    assert candidate(8) == 18\n    assert candidate(4) == 2\n    assert candidate(1) == 0\n"}
{"task_id": "319", "prompt": "def find_long_word(text):\n\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nYour code should satisfy these tests:\nfind_long_word(\"hello world\") == ['hello', 'world']\nfind_long_word(\"python programming\") == []\nfind_long_word(\"quick brown fox\") == ['quick', 'brown']\n\"\"\"\n", "entry_point": "find_long_word", "test": "def check(candidate):\n\n    assert candidate('Please move back to strem') == ['strem']\n    assert candidate('4K Ultra HD streaming player') == ['Ultra']\n    assert candidate('Streaming Media Player') == ['Media']\n"}
{"task_id": "320", "prompt": "def sum_difference(n):\n\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nYour code should satisfy these tests:\nsum_difference(10) == 2640\nsum_difference(5) == 170\nsum_difference(1) == 0\n\"\"\"\n", "entry_point": "sum_difference", "test": "def check(candidate):\n\n    assert candidate(12)==5434\n    assert candidate(20)==41230\n    assert candidate(54)==2151270\n"}
{"task_id": "321", "prompt": "def find_demlo(s):\n\"\"\"\nWrite a function to find the demlo number for the given number.\nYour code should satisfy these tests:\nfind_demlo(\"abc\") == \"12321\"\nfind_demlo(\"hello\") == \"123454321\"\nfind_demlo(\"python\") == \"12345654321\"\n\"\"\"\n", "entry_point": "find_demlo", "test": "def check(candidate):\n\n    assert candidate(\"111111\") == '12345654321'\n    assert candidate(\"1111\") == '1234321'\n    assert candidate(\"13333122222\") == '123456789101110987654321'\n"}
{"task_id": "322", "prompt": "def position_min(list1):\n\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nYour code should satisfy these tests:\nposition_min([4, 2, 1, 3, 1]) == [2, 4]\nposition_min([10, 20, 30, 40, 50]) == [0]\nposition_min([5, 5, 5, 5, 5]) == [0, 1, 2, 3, 4]\n\"\"\"\n", "entry_point": "position_min", "test": "def check(candidate):\n\n    assert candidate([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n    assert candidate([1,2,2,2,4,4,4,5,5,5,5])==[0]\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12])==[1]\n"}
{"task_id": "323", "prompt": "def right_rotate(arr, n, out_of_place, cur):\n\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nYour code should satisfy these tests:\nright_rotate([1, -2, 3, -4, 5, -6], 6, 1, 2) == [1, 3, -2, -4, 5, -6]\nright_rotate([-1, 2, -3, 4, -5, 6], 6, 0, 1) == [2, -1, -3, 4, -5, 6]\nright_rotate([10, -1, 20, -2, 30, -3], 6, 1, 2) == [10, 20, -1, -2, 30, -3]\nright_rotate([-7, 8, -9, 10, -11, 12], 6, 0, 1) == [8, -7, -9, 10, -11, 12]\nright_rotate([5, -5, 5, -5, 5, -5], 6, 1, 2) == [5, 5, -5, -5, 5, -5]\n\"\"\"\n", "entry_point": "right_rotate", "test": "def check(candidate):\n\n    assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n    assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\n    assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]\n"}
{"task_id": "324", "prompt": "def sum_of_alternates(test_tuple):\n\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nYour code should satisfy these tests:\nsum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nsum_of_alternates((10, 20, 30, 40, 50, 60)) == (120, 90)\nsum_of_alternates((0, 0, 0, 0, 0, 0, 0)) == (0, 0)\nsum_of_alternates((7,)) == (0, 7)\nsum_of_alternates((100, 200, 300, 400, 500, 600, 700, 800)) == (2000, 1600)\n\"\"\"\n", "entry_point": "sum_of_alternates", "test": "def check(candidate):\n\n    assert candidate((5, 6, 3, 6, 10, 34)) == (46, 18)\n    assert candidate((1, 2, 3, 4, 5)) == (6, 9)\n    assert candidate((6, 7, 8, 9, 4, 5)) == (21, 18)\n"}
{"task_id": "325", "prompt": "def get_Min_Squares(n):\n\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nYour code should satisfy these tests:\nget_Min_Squares(12) == 3\nget_Min_Squares(13) == 2\nget_Min_Squares(25) == 1\n\"\"\"\n", "entry_point": "get_Min_Squares", "test": "def check(candidate):\n\n    assert candidate(6) == 3\n    assert candidate(2) == 2\n    assert candidate(4) == 1\n"}
{"task_id": "326", "prompt": "def most_occurrences(test_list):\n\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nYour code should satisfy these tests:\nmost_occurrences([\"hello world\", \"hello there\", \"hello again\"]) == \"hello\"\nmost_occurrences([\"apple banana\", \"banana orange\", \"banana apple\"]) == \"banana\"\nmost_occurrences([\"cat dog\", \"dog cat\", \"cat dog cat\"]) == \"cat\"\n\"\"\"\n", "entry_point": "most_occurrences", "test": "def check(candidate):\n\n    assert candidate([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n    assert candidate([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\n    assert candidate([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'\n"}
{"task_id": "327", "prompt": "def check_isosceles(x,y,z):\n\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nYour code should satisfy these tests:\ncheck_isosceles(5, 5, 8) == True\ncheck_isosceles(7, 3, 7) == True\ncheck_isosceles(4, 6, 4) == True\n\"\"\"\n", "entry_point": "check_isosceles", "test": "def check(candidate):\n\n    assert candidate(6,8,12)==False\n    assert candidate(6,6,12)==True\n    assert candidate(6,16,20)==False\n"}
{"task_id": "328", "prompt": "def rotate_left(list1,m,n):\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nYour code should satisfy these tests:\nrotate_left([1, 2, 3, 4, 5], 2, 4) == [3, 4, 5, 1, 2, 3, 4]\nrotate_left([5, 6, 7, 8, 9], 1, 3) == [6, 7, 8, 9, 5, 6, 7]\nrotate_left([10, 20, 30, 40, 50], 0, 3) == [10, 20, 30, 40, 50, 10, 20, 30]\nrotate_left([100, 200, 300, 400, 500], 1, 2) == [200, 300, 400, 500, 100, 200]\nrotate_left(['a', 'b', 'c', 'd', 'e'], 3, 5) == ['d', 'e', 'a', 'b', 'c', 'd', 'e']\n\"\"\"\n", "entry_point": "rotate_left", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]\n"}
{"task_id": "329", "prompt": "def neg_count(list):\n\"\"\"\nWrite a python function to count negative numbers in a list.\nYour code should satisfy these tests:\nneg_count([1, -2, 3, -4, 5]) == 2\nneg_count([-1, -2, -3, -4, -5]) == 5\nneg_count([0, 2, 4, 6, 8]) == 1\n\"\"\"\n", "entry_point": "neg_count", "test": "def check(candidate):\n\n    assert candidate([-1,-2,3,-4,-5]) == 4\n    assert candidate([1,2,3]) == 0\n    assert candidate([1,2,-3,-10,20]) == 2\n"}
{"task_id": "330", "prompt": "def find_char(text):\n\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\n\"\"\"\n", "entry_point": "find_char", "test": "def check(candidate):\n\n    assert candidate('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n    assert candidate('Certain service are subject to change MSR') == ['are', 'MSR']\n    assert candidate('Third party legal desclaimers') == ['Third', 'party', 'legal']\n"}
{"task_id": "331", "prompt": "def count_unset_bits(n):\n\"\"\"\nWrite a python function to count unset bits of a given number.\nYour code should satisfy these tests:\ncount_unset_bits(5) == 1\ncount_unset_bits(8) == 3\ncount_unset_bits(15) == 0\n\"\"\"\n", "entry_point": "count_unset_bits", "test": "def check(candidate):\n\n    assert candidate(2) == 1\n    assert candidate(4) == 2\n    assert candidate(6) == 1\n"}
{"task_id": "332", "prompt": "def char_frequency(str1):\n\"\"\"\nWrite a function to count character frequency of a given string.\nYour code should satisfy these tests:\nchar_frequency(\"hello\") == {'h': 1, 'e': 1, 'l': 2, 'o': 1}\nchar_frequency(\"testcase\") == {'t': 2, 'e': 2, 's': 2, 'c': 1, 'a': 1}\nchar_frequency(\"123321\") == {'1': 2, '2': 2, '3': 2}\n\"\"\"\n", "entry_point": "char_frequency", "test": "def check(candidate):\n\n    assert candidate('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    assert candidate('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\n    assert candidate('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}\n"}
{"task_id": "333", "prompt": "def Sort(sub_li):\n\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nYour code should satisfy these tests:\nSort([(1, 3), (4, 1), (5, 2)]) == [(4, 1), (5, 2), (1, 3)]\nSort([(2, 5), (3, 2), (1, 4)]) == [(3, 2), (1, 4), (2, 5)]\nSort([(7, 0), (6, 1), (5, 3)]) == [(7, 0), (6, 1), (5, 3)]\n\"\"\"\n", "entry_point": "Sort", "test": "def check(candidate):\n\n    assert candidate([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n    assert candidate([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\n    assert candidate([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]\n"}
{"task_id": "334", "prompt": "def check_Validity(a,b,c):\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nYour code should satisfy these tests:\ncheck_Validity(3, 4, 5) == True\ncheck_Validity(1, 1, 2) == False\ncheck_Validity(5, 5, 5) == True\n\"\"\"\n", "entry_point": "check_Validity", "test": "def check(candidate):\n\n    assert candidate(1,2,3) == False\n    assert candidate(2,3,5) == False\n    assert candidate(7,10,5) == True\n"}
{"task_id": "335", "prompt": "def ap_sum(a,n,d):\n\"\"\"\nWrite a function to find the sum of arithmetic progression.\nYour code should satisfy these tests:\nap_sum(1, 5, 2) == 25\nap_sum(3, 4, 3) == 30\nap_sum(0, 6, 5) == 75\n\"\"\"\n", "entry_point": "ap_sum", "test": "def check(candidate):\n\n    assert candidate(1,5,2)==25\n    assert candidate(2,6,4)==72\n    assert candidate(1,4,5)==34\n"}
{"task_id": "336", "prompt": "def check_monthnum(monthname1):\n\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nYour code should satisfy these tests:\ncheck_monthnum(\"February\") == True\ncheck_monthnum(\"January\") == False\ncheck_monthnum(\"December\") == False\n\"\"\"\n", "entry_point": "check_monthnum", "test": "def check(candidate):\n\n    assert candidate(\"February\")==True\n    assert candidate(\"January\")==False\n    assert candidate(\"March\")==False\n"}
{"task_id": "337", "prompt": "def text_match_word(text):\n\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nYour code should satisfy these tests:\ntext_match_word(\"Hello World!\") == 'Found a match!'\ntext_match_word(\"Python3\") == 'Found a match!'\ntext_match_word(\"123abc\") == 'Found a match!'\ntext_match_word(\"This is a test.\") == 'Found a match!'\ntext_match_word(\"NoMatch@\") == 'Found a match!'\n\"\"\"\n", "entry_point": "text_match_word", "test": "def check(candidate):\n\n    assert candidate(\"python.\")==('Found a match!')\n    assert candidate(\"python.\")==('Found a match!')\n    assert candidate(\"  lang  .\")==('Not matched!')\n"}
{"task_id": "338", "prompt": "def check_Equality(s):\n\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nYour code should satisfy these tests:\ncheck_Equality(\"a\") == True\ncheck_Equality(\"ab\") == False\ncheck_Equality(\"aba\") == True\ncheck_Equality(\"abcba\") == True\ncheck_Equality(\"xyz\") == False\n\"\"\"\n", "entry_point": "check_Equality", "test": "def check(candidate):\n\n    assert count_Substring_With_Equal_Ends('aba') == 4\n    assert count_Substring_With_Equal_Ends('abcab') == 7\n    assert count_Substring_With_Equal_Ends('abc') == 3\n"}
{"task_id": "339", "prompt": "def find_Divisor(x,y):\n\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nYour code should satisfy these tests:\nfind_Divisor(5, 5) == 5\nfind_Divisor(10, 20) == 2\nfind_Divisor(7, 3) == 2\n\"\"\"\n", "entry_point": "find_Divisor", "test": "def check(candidate):\n\n    assert candidate(2,2) == 2\n    assert candidate(2,5) == 2\n    assert candidate(5,10) == 2\n"}
{"task_id": "340", "prompt": "def sum_three_smallest_nums(lst):\n\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nYour code should satisfy these tests:\nsum_three_smallest_nums([1, 2, 3, 4, 5]) == 6\nsum_three_smallest_nums([10, 20, 30, 5, 15]) == 30\nsum_three_smallest_nums([0, -1, 3, 2, 1]) == 6\n\"\"\"\n", "entry_point": "sum_three_smallest_nums", "test": "def check(candidate):\n\n    assert candidate([10,20,30,40,50,60,7]) == 37\n    assert candidate([1,2,3,4,5]) == 6\n    assert candidate([0,1,2,3,4,5]) == 6\n"}
{"task_id": "341", "prompt": "def set_to_tuple(s):\n\"\"\"\nWrite a function to convert the given set into ordered tuples.\nYour code should satisfy these tests:\nset_to_tuple({3, 1, 2}) == (1, 2, 3)\nset_to_tuple({'a', 'c', 'b'}) == ('a', 'b', 'c')\nset_to_tuple({10, 5, 15}) == (5, 10, 15)\n\"\"\"\n", "entry_point": "set_to_tuple", "test": "def check(candidate):\n\n    assert candidate({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n    assert candidate({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\n    assert candidate({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)\n"}
{"task_id": "342", "prompt": "def __init__(self, value, list_num, index):\n\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nYour code should satisfy these tests:\nfind_minimum_range([[1, 3, 5], [2, 4, 6], [7, 8, 9]]) == (5, 7)\nfind_minimum_range([[10, 20, 30], [15, 25, 35], [40, 50, 60]]) == (30, 40)\nfind_minimum_range([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (3, 7)\nfind_minimum_range([[5, 10, 15], [20, 25, 30], [35, 40, 45]]) == (15, 35)\nfind_minimum_range([[100, 200], [150, 250], [300, 400]]) == (200, 300)\n\"\"\"\n", "entry_point": "__init__", "test": "def check(candidate):\n\n    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n    assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\n    assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)\n"}
{"task_id": "343", "prompt": "def dig_let(s):\n\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nYour code should satisfy these tests:\ndig_let(\"Hello123\") == (5, 3)\ndig_let(\"Python3.9\") == (6, 2)\ndig_let(\"123456\") == (0, 6)\ndig_let(\"abcABC123\") == (6, 3)\ndig_let(\"$$$###\") == (0, 0)\n\"\"\"\n", "entry_point": "dig_let", "test": "def check(candidate):\n\n    assert candidate(\"python\")==(6,0)\n    assert candidate(\"program\")==(7,0)\n    assert candidate(\"python3.0\")==(6,2)\n"}
{"task_id": "344", "prompt": "def count_Odd_Squares(n,m):\n\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nYour code should satisfy these tests:\ncount_Odd_Squares(1, 10) == 3\ncount_Odd_Squares(5, 25) == 3\ncount_Odd_Squares(16, 49) == 4\n\"\"\"\n", "entry_point": "count_Odd_Squares", "test": "def check(candidate):\n\n    assert candidate(5,100) == 8\n    assert candidate(8,65) == 6\n    assert candidate(2,5) == 1\n"}
{"task_id": "345", "prompt": "def diff_consecutivenums(nums):\n\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nYour code should satisfy these tests:\ndiff_consecutivenums([1, 3, 6, 10]) == [2, 3, 4]\ndiff_consecutivenums([5, 5, 5, 5]) == [0, 0, 0]\ndiff_consecutivenums([10, 20, 30, 40, 50]) == [10, 10, 10, 10]\n\"\"\"\n", "entry_point": "diff_consecutivenums", "test": "def check(candidate):\n\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n    assert candidate([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\n    assert candidate([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]\n"}
{"task_id": "346", "prompt": "def zigzag(n, k):\n\"\"\"\nWrite a function to find entringer number e(n, k).\nYour code should satisfy these tests:\nzigzag(0, 0) == 1\nzigzag(2, 1) == 1\nzigzag(3, 2) == 2\nzigzag(4, 1) == 2\nzigzag(5, 3) == 14\n\"\"\"\n", "entry_point": "zigzag", "test": "def check(candidate):\n\n    assert candidate(4, 3) == 5\n    assert candidate(4, 2) == 4\n    assert candidate(3, 1) == 1\n"}
{"task_id": "347", "prompt": "def count_Squares(m,n):\n\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nYour code should satisfy these tests:\ncount_Squares(4, 3) == 20\ncount_Squares(1, 1) == 1\ncount_Squares(5, 5) == 55\n\"\"\"\n", "entry_point": "count_Squares", "test": "def check(candidate):\n\n    assert candidate(4,3) == 20\n    assert candidate(1,2) == 2\n    assert candidate(2,2) == 5\n"}
{"task_id": "348", "prompt": "def bin_coff(n, r):\n\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nYour code should satisfy these tests:\nbin_coff(4, 2) == 6\nbin_coff(5, 3) == 10\nbin_coff(6, 1) == 6\nbin_coff(7, 4) == 35\nbin_coff(8, 0) == 1\n\"\"\"\n", "entry_point": "bin_coff", "test": "def check(candidate):\n\n    assert find_ways(4) == 2\n    assert find_ways(6) == 5\n    assert find_ways(8) == 14\n"}
{"task_id": "349", "prompt": "def check(string):\n\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nYour code should satisfy these tests:\ncheck(\"101010\") == \"Yes\"\ncheck(\"00000\") == \"Yes\"\ncheck(\"11111\") == \"Yes\"\ncheck(\"10201\") == \"No\"\ncheck(\"\") == \"No\"\n\"\"\"\n", "entry_point": "check", "test": "def check(candidate):\n\n    assert candidate(\"01010101010\") == \"Yes\"\n    assert candidate(\"name0\") == \"No\"\n    assert candidate(\"101\") == \"Yes\"\n"}
{"task_id": "350", "prompt": "def minimum_Length(s):\n\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nYour code should satisfy these tests:\nminimum_Length(\"aabbc\") == 3\nminimum_Length(\"abcde\") == 4\nminimum_Length(\"zzzzz\") == 0\n\"\"\"\n", "entry_point": "minimum_Length", "test": "def check(candidate):\n\n    assert candidate(\"mnm\") == 1\n    assert candidate(\"abcda\") == 3\n    assert candidate(\"abcb\") == 2\n"}
{"task_id": "351", "prompt": "def first_Element(arr,n,k):\n\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nYour code should satisfy these tests:\nfirst_Element([1, 7, 4, 3, 4, 8, 7], 7, 2) == 7\nfirst_Element([4, 1, 6, 1, 6, 4, 8], 7, 2) == 4\nfirst_Element([5, 5, 5, 5, 5, 5, 5], 7, 3) == -1\n\"\"\"\n", "entry_point": "first_Element", "test": "def check(candidate):\n\n    assert candidate([0,1,2,3,4,5],6,1) == 0\n    assert candidate([1,2,1,3,4],5,2) == 1\n    assert candidate([2,3,4,3,5,7,1,2,3,5],10,2) == 2\n"}
{"task_id": "352", "prompt": "def unique_Characters(str):\n\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nYour code should satisfy these tests:\nunique_Characters(\"abcdef\") == True\nunique_Characters(\"hello\") == False\nunique_Characters(\"1234567890\") == True\n\"\"\"\n", "entry_point": "unique_Characters", "test": "def check(candidate):\n\n    assert candidate('aba') == False\n    assert candidate('abc') == True\n    assert candidate('abab') == False\n"}
{"task_id": "353", "prompt": "def remove_column(list1, n):\n\"\"\"\nWrite a function to remove a specified column from a given nested list.\nYour code should satisfy these tests:\nremove_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [[1, 3], [4, 6], [7, 9]]\nremove_column([[10, 20], [30, 40], [50, 60]], 0) == [[20], [40], [60]]\nremove_column([[100, 200, 300], [400, 500, 600]], 2) == [[100, 200], [400, 500]]\n\"\"\"\n", "entry_point": "remove_column", "test": "def check(candidate):\n\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]\n"}
{"task_id": "354", "prompt": "def tn_ap(a,n,d):\n\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nYour code should satisfy these tests:\ntn_ap(2, 5, 3) == 14\ntn_ap(1, 10, 2) == 19\ntn_ap(0, 7, 4) == 24\n\"\"\"\n", "entry_point": "tn_ap", "test": "def check(candidate):\n\n    assert candidate(1,5,2)==9\n    assert candidate(2,6,4)==22\n    assert candidate(1,4,5)==16\n"}
{"task_id": "355", "prompt": "def count_Rectangles(radius):\n\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nYour code should satisfy these tests:\ncount_Rectangles(1) == 1\ncount_Rectangles(2) == 8\ncount_Rectangles(3) == 22\n\"\"\"\n", "entry_point": "count_Rectangles", "test": "def check(candidate):\n\n    assert candidate(2) == 8\n    assert candidate(1) == 1\n    assert candidate(0) == 0\n"}
{"task_id": "356", "prompt": "def find_angle(a,b):\n\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nYour code should satisfy these tests:\nfind_angle(30, 60) == 90\nfind_angle(45, 45) == 90\nfind_angle(80, 50) == 50\n\"\"\"\n", "entry_point": "find_angle", "test": "def check(candidate):\n\n    assert candidate(47,89)==44\n    assert candidate(45,95)==40\n    assert candidate(50,40)==90\n"}
{"task_id": "357", "prompt": "def find_max(test_list):\n\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nYour code should satisfy these tests:\nfind_max(['123', '456', '789']) == 9\nfind_max(['10', '20', '30', '40']) == 4\nfind_max(['111', '222', '333', '444']) == 4\n\"\"\"\n", "entry_point": "find_max", "test": "def check(candidate):\n\n    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\n    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12\n"}
{"task_id": "358", "prompt": "def moddiv_list(nums1,nums2):\n\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nYour code should satisfy these tests:\nmoddiv_list([10, 20, 30], [3, 5, 7]) == [1, 0, 2]\nmoddiv_list([15, 25, 35], [4, 6, 8]) == [3, 1, 3]\nmoddiv_list([100, 200, 300], [9, 11, 13]) == [1, 2, 1]\n\"\"\"\n", "entry_point": "moddiv_list", "test": "def check(candidate):\n\n    assert candidate([4,5,6],[1, 2, 3])==[0, 1, 0]\n    assert candidate([3,2],[1,4])==[0, 2]\n    assert candidate([90,120],[50,70])==[40, 50]\n"}
{"task_id": "359", "prompt": "def Check_Solution(a,b,c):\n\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nYour code should satisfy these tests:\nCheck_Solution(1, 3, 2) == \"Yes\"\nCheck_Solution(2, 4, 1) == \"No\"\nCheck_Solution(0, 0, 0) == \"Yes\"\n\"\"\"\n", "entry_point": "Check_Solution", "test": "def check(candidate):\n\n    assert candidate(1,3,2) == \"Yes\"\n    assert candidate(1,2,3) == \"No\"\n    assert candidate(1,-5,6) == \"No\"\n"}
{"task_id": "360", "prompt": "def get_carol(n):\n\"\"\"\nWrite a function to find the n\u2019th carol number.\nYour code should satisfy these tests:\nget_carol(3) == 47\nget_carol(4) == 223\nget_carol(5) == 959\n\"\"\"\n", "entry_point": "get_carol", "test": "def check(candidate):\n\n    assert candidate(2) == 7\n    assert candidate(4) == 223\n    assert candidate(5) == 959\n"}
{"task_id": "361", "prompt": "def remove_empty(list1):\n\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nYour code should satisfy these tests:\nremove_empty([1, 2, '', 3, None, 4, [], {}, False]) == [1, 2, 3, 4]\nremove_empty(['a', '', 'b', 'c', None, 'd', {}, [], False]) == ['a', 'b', 'c', 'd']\nremove_empty([[], {}, (), '', 0, False, None, 'hello']) == ['hello']\n\"\"\"\n", "entry_point": "remove_empty", "test": "def check(candidate):\n\n    assert candidate([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n    assert candidate([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\n    assert candidate([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']\n"}
{"task_id": "362", "prompt": "def max_occurrences(nums):\n\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nYour code should satisfy these tests:\nmax_occurrences([1, 2, 2, 3, 3, 3]) == 3\nmax_occurrences([4, 4, 4, 4, 5, 5, 5]) == 4\nmax_occurrences([7, 8, 9, 9, 8, 7, 7]) == 7\n\"\"\"\n", "entry_point": "max_occurrences", "test": "def check(candidate):\n\n    assert candidate([1,2,3,1,2,3,12,4,2]) ==  2\n    assert candidate([1,2,6,7,0,1,0,1,0]) == 1,0\n    assert candidate([1,2,3,1,2,4,1]) == 1\n"}
{"task_id": "363", "prompt": "def add_K_element(test_list, K):\n\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nYour code should satisfy these tests:\nadd_K_element([(1, 2), (3, 4)], 5) == [(6, 7), (8, 9)]\nadd_K_element([(0, 0), (-1, -2)], 3) == [(3, 3), (2, 1)]\nadd_K_element([(10, 20), (30, 40), (50, 60)], 10) == [(20, 30), (40, 50), (60, 70)]\n\"\"\"\n", "entry_point": "add_K_element", "test": "def check(candidate):\n\n    assert candidate([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n    assert candidate([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\n    assert candidate([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]\n"}
{"task_id": "364", "prompt": "def make_flip(ch):\n\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nYour code should satisfy these tests:\nmake_flip('0') == '1'\nmake_flip('1') == '0'\nmake_flip('0') == '1'\nmake_flip('1') == '0'\nmake_flip('0') == '1'\n\"\"\"\n", "entry_point": "make_flip", "test": "def check(candidate):\n\n    assert min_flip_to_make_string_alternate(\"0001010111\") == 2\n    assert min_flip_to_make_string_alternate(\"001\") == 1\n    assert min_flip_to_make_string_alternate(\"010111011\") == 2\n"}
{"task_id": "365", "prompt": "def count_Digit(n):\n\"\"\"\nWrite a python function to count the number of digits of a given number.\nYour code should satisfy these tests:\ncount_Digit(12345) == 5\ncount_Digit(0) == 0\ncount_Digit(987654321) == 9\n\"\"\"\n", "entry_point": "count_Digit", "test": "def check(candidate):\n\n    assert candidate(12345) == 5\n    assert candidate(11223305) == 8\n    assert candidate(4123459) == 7\n"}
{"task_id": "366", "prompt": "def adjacent_num_product(list_nums):\n\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nYour code should satisfy these tests:\nadjacent_num_product([3, 6, -2, -5, 7, 3]) == 21\nadjacent_num_product([9, 5, 10, 2, 24, -1, -48]) == 50\nadjacent_num_product([-1, -2, -3, -4]) == 12\n\"\"\"\n", "entry_point": "adjacent_num_product", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4,5,6]) == 30\n    assert candidate([1,2,3,4,5]) == 20\n    assert candidate([2,3]) == 6\n"}
{"task_id": "367", "prompt": "def __init__(self, data):\n\"\"\"\nWrite a function to check if a binary tree is balanced or not.\n\"\"\"\n", "entry_point": "__init__", "test": "def check(candidate):\n\n    assert is_tree_balanced(root) == False\n    assert is_tree_balanced(root1) == True\n    assert is_tree_balanced(root2) == False\n"}
{"task_id": "368", "prompt": "def repeat_tuples(test_tup, N):\n\"\"\"\nWrite a function to repeat the given tuple n times.\nYour code should satisfy these tests:\nrepeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nrepeat_tuples(('a', 'b', 'c'), 2) == (('a', 'b', 'c'), ('a', 'b', 'c'))\nrepeat_tuples((True, False), 4) == ((True, False), (True, False), (True, False), (True, False))\n\"\"\"\n", "entry_point": "repeat_tuples", "test": "def check(candidate):\n\n    assert candidate((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n    assert candidate((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\n    assert candidate((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))\n"}
{"task_id": "369", "prompt": "def lateralsurface_cuboid(l,w,h):\n\"\"\"\nWrite a function to find the lateral surface area of cuboid\nYour code should satisfy these tests:\nlateralsurface_cuboid(3, 4, 5) == 70\nlateralsurface_cuboid(7, 2, 9) == 162\nlateralsurface_cuboid(1, 1, 1) == 4\n\"\"\"\n", "entry_point": "lateralsurface_cuboid", "test": "def check(candidate):\n\n    assert candidate(8,5,6)==156\n    assert candidate(7,9,10)==320\n    assert candidate(10,20,30)==1800\n"}
{"task_id": "370", "prompt": "def float_sort(price):\n\"\"\"\nWrite a function to sort a tuple by its float element.\n\"\"\"\n", "entry_point": "float_sort", "test": "def check(candidate):\n\n    assert candidate([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\n    assert candidate([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')]\n    assert candidate([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')]\n"}
{"task_id": "371", "prompt": "def smallest_missing(A, left_element, right_element):\n\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nYour code should satisfy these tests:\nsmallest_missing([0, 1, 2, 4, 5, 6], 0, 5) == 3\nsmallest_missing([1, 2, 3, 4, 5, 6], 0, 5) == 0\nsmallest_missing([0, 1, 2, 3, 4, 6], 0, 5) == 5\n\"\"\"\n", "entry_point": "smallest_missing", "test": "def check(candidate):\n\n    assert candidate([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert candidate([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\n    assert candidate([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0\n"}
{"task_id": "372", "prompt": "def heap_assending(nums):\n\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nYour code should satisfy these tests:\nheap_assending([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]\nheap_assending([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]\nheap_assending([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n\"\"\"\n", "entry_point": "heap_assending", "test": "def check(candidate):\n\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"}
{"task_id": "373", "prompt": "def volume_cuboid(l,w,h):\n\"\"\"\nWrite a function to find the volume of a cuboid.\nYour code should satisfy these tests:\nvolume_cuboid(2, 3, 4) == 24\nvolume_cuboid(5, 5, 5) == 125\nvolume_cuboid(10, 2, 3) == 60\n\"\"\"\n", "entry_point": "volume_cuboid", "test": "def check(candidate):\n\n    assert candidate(1,2,3)==6\n    assert candidate(5,7,9)==315\n    assert candidate(10,15,21)==3150\n"}
{"task_id": "374", "prompt": "def permute_string(str):\n\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nYour code should satisfy these tests:\npermute_string(\"a\") == ['a']\npermute_string(\"ab\") == ['ab', 'ba']\npermute_string(\"abc\") == ['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\npermute_string(\"aab\") == ['aab', 'aba', 'baa']\npermute_string(\"xyz\") == ['xyz', 'yxz', 'yzx', 'xzy', 'zxy', 'zyx']\n\"\"\"\n", "entry_point": "permute_string", "test": "def check(candidate):\n\n    assert candidate('ab')==['ab', 'ba']\n    assert candidate('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\n    assert candidate('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']\n"}
{"task_id": "375", "prompt": "def round_num(n,m):\n\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nYour code should satisfy these tests:\nround_num(14, 5) == 15\nround_num(23, 10) == 20\nround_num(7, 3) == 6\n\"\"\"\n", "entry_point": "round_num", "test": "def check(candidate):\n\n    assert candidate(4722,10)==4720\n    assert candidate(1111,5)==1110\n    assert candidate(219,2)==218\n"}
{"task_id": "376", "prompt": "def remove_replica(test_tup):\n\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nYour code should satisfy these tests:\nremove_replica((1, 2, 3, 2, 4)) == (1, 2, 3, 'MSP', 4)\nremove_replica(('a', 'b', 'a', 'c', 'b')) == ('a', 'b', 'MSP', 'c', 'MSP')\nremove_replica((5, 5, 5, 5, 5)) == (5, 'MSP', 'MSP', 'MSP', 'MSP')\n\"\"\"\n", "entry_point": "remove_replica", "test": "def check(candidate):\n\n    assert candidate((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n    assert candidate((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\n    assert candidate((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')\n"}
{"task_id": "377", "prompt": "def remove_Char(s,c):\n\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nYour code should satisfy these tests:\nremove_Char(\"hello\", \"l\") == \"heo\"\nremove_Char(\"banana\", \"a\") == \"bnn\"\nremove_Char(\"programming\", \"m\") == \"prograing\"\n\"\"\"\n", "entry_point": "remove_Char", "test": "def check(candidate):\n\n    assert candidate(\"aba\",'a') == \"b\"\n    assert candidate(\"toggle\",'g') == \"tole\"\n    assert candidate(\"aabbc\",'b') == \"aac\"\n"}
{"task_id": "378", "prompt": "def move_first(test_list):\n\"\"\"\nWrite a python function to shift last element to first position in the given list.\nYour code should satisfy these tests:\nmove_first([1, 2, 3, 4]) == [4, 1, 2, 3]\nmove_first(['a', 'b', 'c']) == ['c', 'a', 'b']\nmove_first([True, False, True]) == [True, True, False]\n\"\"\"\n", "entry_point": "move_first", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4]) == [4,1,2,3]\n    assert candidate([0,1,2,3]) == [3,0,1,2]\n    assert candidate([9,8,7,1]) == [1,9,8,7]\n"}
{"task_id": "379", "prompt": "def surfacearea_cuboid(l,w,h):\n\"\"\"\nWrite a function to find the surface area of a cuboid.\nYour code should satisfy these tests:\nsurfacearea_cuboid(2, 3, 4) == 52\nsurfacearea_cuboid(5, 5, 5) == 150\nsurfacearea_cuboid(1, 1, 1) == 6\n\"\"\"\n", "entry_point": "surfacearea_cuboid", "test": "def check(candidate):\n\n    assert candidate(1,2,3)==22\n    assert candidate(5,7,9)==286\n    assert candidate(10,15,21)==1350\n"}
{"task_id": "380", "prompt": "def multi_list(rownum,colnum):\n\"\"\"\nWrite a function to generate a two-dimensional array.\nYour code should satisfy these tests:\nmulti_list(3, 4) == [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\nmulti_list(5, 2) == [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4]]\nmulti_list(2, 5) == [[0, 0, 0, 0, 0], [0, 1, 2, 3, 4]]\n\"\"\"\n", "entry_point": "multi_list", "test": "def check(candidate):\n\n    assert candidate(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n    assert candidate(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n    assert candidate(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\n"}
{"task_id": "381", "prompt": "def index_on_inner_list(list_data, index_no):\n\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nYour code should satisfy these tests:\nindex_on_inner_list([[3, 2], [1, 4], [5, 0]], 1) == [[5, 0], [3, 2], [1, 4]]\nindex_on_inner_list([[10, 20], [5, 15], [1, 25]], 0) == [[1, 25], [5, 15], [10, 20]]\nindex_on_inner_list([[7, 1], [2, 3], [9, 0]], 1) == [[9, 0], [7, 1], [2, 3]]\n\"\"\"\n", "entry_point": "index_on_inner_list", "test": "def check(candidate):\n\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]\n"}
{"task_id": "382", "prompt": "def find_rotation_count(A):\n\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nYour code should satisfy these tests:\nfind_rotation_count([15, 18, 2, 3, 6, 12]) == 2\nfind_rotation_count([7, 9, 11, 12, 5]) == 4\nfind_rotation_count([1, 2, 3, 4, 5]) == 0\n\"\"\"\n", "entry_point": "find_rotation_count", "test": "def check(candidate):\n\n    assert candidate([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n    assert candidate([8, 9, 10,2, 5, 6]) == 3\n    assert candidate([2, 5, 6, 8, 9, 10]) == 0\n"}
{"task_id": "383", "prompt": "def even_bit_toggle_number(n):\n\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nYour code should satisfy these tests:\neven_bit_toggle_number(0) == 0\neven_bit_toggle_number(1) == 0\neven_bit_toggle_number(10) == 15\neven_bit_toggle_number(255) == 170\neven_bit_toggle_number(123) == 46\n\"\"\"\n", "entry_point": "even_bit_toggle_number", "test": "def check(candidate):\n\n    assert candidate(10) == 15\n    assert candidate(20) == 1\n    assert candidate(30) == 11\n"}
{"task_id": "384", "prompt": "def frequency_Of_Smallest(n,arr):\n\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nYour code should satisfy these tests:\nfrequency_Of_Smallest(5, [3, 1, 4, 1, 5]) == 2\nfrequency_Of_Smallest(3, [7, 7, 7]) == 3\nfrequency_Of_Smallest(6, [10, 20, 10, 30, 10, 40]) == 3\n\"\"\"\n", "entry_point": "frequency_Of_Smallest", "test": "def check(candidate):\n\n    assert candidate(5,[1,2,3,4,3]) == 1\n    assert candidate(7,[3,1,2,5,6,2,3]) == 1\n    assert candidate(7,[3,3,6,3,7,4,9]) == 3\n"}
{"task_id": "385", "prompt": "def get_perrin(n):\n\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nYour code should satisfy these tests:\nget_perrin(3) == 3\nget_perrin(4) == 2\nget_perrin(5) == 5\n\"\"\"\n", "entry_point": "get_perrin", "test": "def check(candidate):\n\n    assert candidate(9) == 12\n    assert candidate(4) == 2\n    assert candidate(6) == 5\n"}
{"task_id": "386", "prompt": "def swap_count(s):\n\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nYour code should satisfy these tests:\nswap_count(\"[[][]]\") == 0\nswap_count(\"]][[\") == 3\nswap_count(\"[]][[]\") == 1\nswap_count(\"[[[]]]\") == 0\nswap_count(\"][][][\") == 3\n\"\"\"\n", "entry_point": "swap_count", "test": "def check(candidate):\n\n    assert candidate(\"[]][][\") == 2\n    assert candidate(\"[[][]]\") == 0\n    assert candidate(\"[[][]]][\") == 1\n"}
{"task_id": "387", "prompt": "def even_or_odd(N):\n\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nYour code should satisfy these tests:\neven_or_odd(\"1234\") == \"Even\"\neven_or_odd(\"1235\") == \"Odd\"\neven_or_odd(\"ABC\") == \"Even\"\n\"\"\"\n", "entry_point": "even_or_odd", "test": "def check(candidate):\n\n    assert candidate(\"AB3454D\") ==\"Odd\"\n    assert candidate(\"ABC\") == \"Even\"\n    assert candidate(\"AAD\") == \"Odd\"\n"}
{"task_id": "388", "prompt": "def highest_Power_of_2(n):\n\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nYour code should satisfy these tests:\nhighest_Power_of_2(10) == 8\nhighest_Power_of_2(18) == 16\nhighest_Power_of_2(33) == 32\n\"\"\"\n", "entry_point": "highest_Power_of_2", "test": "def check(candidate):\n\n    assert candidate(10) == 8\n    assert candidate(19) == 16\n    assert candidate(32) == 32\n"}
{"task_id": "389", "prompt": "def find_lucas(n):\n\"\"\"\nWrite a function to find the n'th lucas number.\nYour code should satisfy these tests:\nfind_lucas(0) == 2\nfind_lucas(5) == 11\nfind_lucas(10) == 123\n\"\"\"\n", "entry_point": "find_lucas", "test": "def check(candidate):\n\n    assert candidate(9) == 76\n    assert candidate(4) == 7\n    assert candidate(3) == 4\n"}
{"task_id": "390", "prompt": "def add_string(list,string):\n\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nYour code should satisfy these tests:\nadd_string([1, 2, 3], \"Number: {}\") == [\"Number: 1\", \"Number: 2\", \"Number: 3\"]\nadd_string(['a', 'b', 'c'], \"Letter: {}\") == [\"Letter: a\", \"Letter: b\", \"Letter: c\"]\nadd_string([10, 20, 30], \"Value: {}\") == [\"Value: 10\", \"Value: 20\", \"Value: 30\"]\n\"\"\"\n", "entry_point": "add_string", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    assert candidate(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\n    assert candidate([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n"}
{"task_id": "391", "prompt": "def convert_list_dictionary(l1, l2, l3):\n\"\"\"\nWrite a function to convert more than one list to nested dictionary.\n\"\"\"\n", "entry_point": "convert_list_dictionary", "test": "def check(candidate):\n\n    assert candidate([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    assert candidate([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n    assert candidate([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n"}
{"task_id": "392", "prompt": "def get_max_sum(n):\n\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nYour code should satisfy these tests:\nget_max_sum(2) == 2\nget_max_sum(10) == 12\nget_max_sum(12) == 16\n\"\"\"\n", "entry_point": "get_max_sum", "test": "def check(candidate):\n\n    assert candidate(60) == 106\n    assert candidate(10) == 12\n    assert candidate(2) == 2\n"}
{"task_id": "393", "prompt": "def max_length_list(input_list):\n\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nYour code should satisfy these tests:\nmax_length_list([[], [1], [1, 2], [1, 2, 3]]) == (3, [1, 2, 3])\nmax_length_list(['a', 'ab', 'abc', 'abcd']) == (4, 'abcd')\nmax_length_list([[1, 2, 3], [4, 5], [6]]) == (3, [1, 2, 3])\n\"\"\"\n", "entry_point": "max_length_list", "test": "def check(candidate):\n\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert candidate([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\n    assert candidate([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])\n"}
{"task_id": "394", "prompt": "def check_distinct(test_tup):\n\"\"\"\nWrite a function to check if given tuple is distinct or not.\nYour code should satisfy these tests:\ncheck_distinct((1, 2, 3, 4, 5)) == True\ncheck_distinct((1, 2, 2, 4, 5)) == False\ncheck_distinct(('a', 'b', 'c', 'a')) == False\n\"\"\"\n", "entry_point": "check_distinct", "test": "def check(candidate):\n\n    assert candidate((1, 4, 5, 6, 1, 4)) == False\n    assert candidate((1, 4, 5, 6)) == True\n    assert candidate((2, 3, 4, 5, 6)) == True\n"}
{"task_id": "395", "prompt": "def first_non_repeating_character(str1):\n\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nYour code should satisfy these tests:\nfirst_non_repeating_character(\"swiss\") == 'w'\nfirst_non_repeating_character(\"repetition\") == 'r'\nfirst_non_repeating_character(\"aabbcc\") == None\n\"\"\"\n", "entry_point": "first_non_repeating_character", "test": "def check(candidate):\n\n    assert candidate(\"abcabc\") == None\n    assert candidate(\"abc\") == \"a\"\n    assert candidate(\"ababc\") == \"c\"\n"}
{"task_id": "396", "prompt": "def check_char(string):\n\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nYour code should satisfy these tests:\ncheck_char('a') == 'Valid'\ncheck_char('abcda') == 'Valid'\ncheck_char('xyz') == 'Invalid'\n\"\"\"\n", "entry_point": "check_char", "test": "def check(candidate):\n\n    assert candidate(\"abba\") == \"Valid\"\n    assert candidate(\"a\") == \"Valid\"\n    assert candidate(\"abcd\") == \"Invalid\"\n"}
{"task_id": "397", "prompt": "def median_numbers(a,b,c):\n\"\"\"\nWrite a function to find the median of three specific numbers.\nYour code should satisfy these tests:\nmedian_numbers(3, 1, 2) == 2\nmedian_numbers(10, 20, 15) == 15\nmedian_numbers(7, 7, 7) == 7\n\"\"\"\n", "entry_point": "median_numbers", "test": "def check(candidate):\n\n    assert candidate(25,55,65)==55.0\n    assert candidate(20,10,30)==20.0\n    assert candidate(15,45,75)==45.0\n"}
{"task_id": "398", "prompt": "def sum_of_digits(nums):\n\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nYour code should satisfy these tests:\nsum_of_digits([123, 456]) == 21\nsum_of_digits([789, 321]) == 30\nsum_of_digits([111, 222, 333]) == 18\nsum_of_digits([9999, 8888, 7777]) == 96\nsum_of_digits([555, 666, 777, 888]) == 78\n\"\"\"\n", "entry_point": "sum_of_digits", "test": "def check(candidate):\n\n    assert candidate([10,2,56])==14\n    assert candidate([[10,20,4,5,'b',70,'a']])==19\n    assert candidate([10,20,-4,5,-70])==19\n"}
{"task_id": "399", "prompt": "def bitwise_xor(test_tup1, test_tup2):\n\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nYour code should satisfy these tests:\nbitwise_xor((1, 2, 3), (4, 5, 6)) == (5, 7, 5)\nbitwise_xor((255, 128, 64), (32, 16, 8)) == (223, 144, 72)\nbitwise_xor((0, 0, 0), (1, 1, 1)) == (1, 1, 1)\n\"\"\"\n", "entry_point": "bitwise_xor", "test": "def check(candidate):\n\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    assert candidate((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n    assert candidate((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)\n"}
{"task_id": "400", "prompt": "def extract_freq(test_list):\n\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nYour code should satisfy these tests:\nextract_freq([[1, 2], [2, 1], [3, 4]]) == 2\nextract_freq([[5, 6, 7], [7, 6, 5], [8, 9]]) == 2\nextract_freq([[10, 11], [11, 10], [10, 11], [12, 13]]) == 2\n\"\"\"\n", "entry_point": "extract_freq", "test": "def check(candidate):\n\n    assert candidate([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n    assert candidate([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\n    assert candidate([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4\n"}
{"task_id": "401", "prompt": "def add_nested_tuples(test_tup1, test_tup2):\n\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nYour code should satisfy these tests:\nadd_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))\nadd_nested_tuples(((0, 0), (0, 0)), ((1, 1), (1, 1))) == ((1, 1), (1, 1))\nadd_nested_tuples(((-1, -2), (-3, -4)), ((1, 2), (3, 4))) == ((0, 0), (0, 0))\n\"\"\"\n", "entry_point": "add_nested_tuples", "test": "def check(candidate):\n\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n"}
{"task_id": "402", "prompt": "def ncr_modp(n, r, p):\n\"\"\"\nWrite a function to compute the value of ncr%p.\nYour code should satisfy these tests:\nncr_modp(5, 2, 13) == 10\nncr_modp(10, 3, 7) == 1\nncr_modp(6, 4, 17) == 15\n\"\"\"\n", "entry_point": "ncr_modp", "test": "def check(candidate):\n\n    assert candidate(10,2,13)==6\n    assert candidate(15,12,43)==25\n    assert candidate(17,9,18)==10\n"}
{"task_id": "403", "prompt": "def is_valid_URL(str):\n\"\"\"\nWrite a function to check if a url is valid or not using regex.\nYour code should satisfy these tests:\nis_valid_URL(\"https://www.example.com\") == True\nis_valid_URL(\"http://example.co.uk\") == True\nis_valid_URL(\"ftp://example.com\") == False\n\"\"\"\n", "entry_point": "is_valid_URL", "test": "def check(candidate):\n\n    assert candidate(\"https://www.google.com\") == True\n    assert candidate(\"https:/www.gmail.com\") == False\n    assert candidate(\"https:// www.redit.com\") == False\n"}
{"task_id": "404", "prompt": "def minimum(a,b):\n\"\"\"\nWrite a python function to find the minimum of two numbers.\nYour code should satisfy these tests:\nminimum(5, 10) == 5\nminimum(-3, -7) == -7\nminimum(0, 0) == 0\n\"\"\"\n", "entry_point": "minimum", "test": "def check(candidate):\n\n    assert candidate(1,2) == 1\n    assert candidate(-5,-4) == -5\n    assert candidate(0,0) == 0\n"}
{"task_id": "405", "prompt": "def check_tuplex(tuplex,tuple1):\n\"\"\"\nWrite a function to check whether an element exists within a tuple.\nYour code should satisfy these tests:\ncheck_tuplex((1, 2, 3), (2, 3)) == False\ncheck_tuplex((1, 2, 3), (1, 2)) == False\ncheck_tuplex(((1, 2), 3), (1, 2)) == True\n\"\"\"\n", "entry_point": "check_tuplex", "test": "def check(candidate):\n\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n"}
{"task_id": "406", "prompt": "def find_Parity(x):\n\"\"\"\nWrite a python function to find the parity of a given number.\nYour code should satisfy these tests:\nfind_Parity(0) == \"Even Parity\"\nfind_Parity(7) == \"Odd Parity\"\nfind_Parity(255) == \"Even Parity\"\n\"\"\"\n", "entry_point": "find_Parity", "test": "def check(candidate):\n\n    assert candidate(12) == \"Even Parity\"\n    assert candidate(7) == \"Odd Parity\"\n    assert candidate(10) == \"Even Parity\"\n"}
{"task_id": "407", "prompt": "def rearrange_bigger(n):\n\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nYour code should satisfy these tests:\nrearrange_bigger(123) == 132\nrearrange_bigger(321) == False\nrearrange_bigger(534976) == 536479\n\"\"\"\n", "entry_point": "rearrange_bigger", "test": "def check(candidate):\n\n    assert candidate(12)==21\n    assert candidate(10)==False\n    assert candidate(102)==120\n"}
{"task_id": "408", "prompt": "def k_smallest_pairs(nums1, nums2, k):\n\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nYour code should satisfy these tests:\nk_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nk_smallest_pairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nk_smallest_pairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\n\"\"\"\n", "entry_point": "k_smallest_pairs", "test": "def check(candidate):\n\n    assert candidate([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n    assert candidate([1,3,7],[2,4,6],1)==[[1, 2]]\n    assert candidate([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n"}
{"task_id": "409", "prompt": "def min_product_tuple(list1):\n\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nYour code should satisfy these tests:\nmin_product_tuple([(1, 2), (-3, 4), (5, -6)]) == 2\nmin_product_tuple([(0, 10), (20, -30), (40, 50)]) == 0\nmin_product_tuple([(-1, -1), (2, 3), (-4, 5)]) == 1\n\"\"\"\n", "entry_point": "min_product_tuple", "test": "def check(candidate):\n\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert candidate([(10,20), (15,2), (5,10)] )==30\n    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==100\n"}
{"task_id": "410", "prompt": "def min_val(listval):\n\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nYour code should satisfy these tests:\nmin_val([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 1\nmin_val([10, 'a', 20, 'b', 30, 'c']) == 10\nmin_val([100, 200, 3, 400, 500]) == 3\n\"\"\"\n", "entry_point": "min_val", "test": "def check(candidate):\n\n    assert candidate(['Python', 3, 2, 4, 5, 'version'])==2\n    assert candidate(['Python', 15, 20, 25])==15\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==20\n"}
{"task_id": "411", "prompt": "def snake_to_camel(word):\n\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nYour code should satisfy these tests:\nsnake_to_camel('hello_world') == 'HelloWorld'\nsnake_to_camel('convert_this_string') == 'ConvertThisString'\nsnake_to_camel('python_programming_language') == 'PythonProgrammingLanguage'\n\"\"\"\n", "entry_point": "snake_to_camel", "test": "def check(candidate):\n\n    assert candidate('android_tv') == 'AndroidTv'\n    assert candidate('google_pixel') == 'GooglePixel'\n    assert candidate('apple_watch') == 'AppleWatch'\n"}
{"task_id": "412", "prompt": "def remove_odd(l):\n\"\"\"\nWrite a python function to remove odd numbers from a given list.\nYour code should satisfy these tests:\nremove_odd([1, 2, 3, 4, 5]) == [2, 4]\nremove_odd([10, 15, 20, 25, 30]) == [10, 20, 30]\nremove_odd([7, 11, 13, 17]) == [11, 17]\n\"\"\"\n", "entry_point": "remove_odd", "test": "def check(candidate):\n\n    assert candidate([1,2,3]) == [2]\n    assert candidate([2,4,6]) == [2,4,6]\n    assert candidate([10,20,3]) == [10,20]\n"}
{"task_id": "413", "prompt": "def extract_nth_element(list1, n):\n\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nYour code should satisfy these tests:\nextract_nth_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\nextract_nth_element([['a', 'b'], ['c', 'd'], ['e', 'f']], 0) == ['a', 'c', 'e']\nextract_nth_element([[True, False], [False, True], [True, True]], 1) == [False, True, True]\n\"\"\"\n", "entry_point": "extract_nth_element", "test": "def check(candidate):\n\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n"}
{"task_id": "414", "prompt": "def overlapping(list1,list2):\n\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nYour code should satisfy these tests:\noverlapping([1, 2, 3], [3, 4, 5]) == 1\noverlapping(['a', 'b', 'c'], ['x', 'y', 'z']) == 0\noverlapping([10, 20, 30, 40], [40, 50, 60]) == 1\n\"\"\"\n", "entry_point": "overlapping", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4,5],[6,7,8,9]) == False\n    assert candidate([1,2,3],[4,5,6]) == False\n    assert candidate([1,4,5],[1,4,5]) == True\n"}
{"task_id": "415", "prompt": "def max_Product(arr):\n\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nYour code should satisfy these tests:\nmax_Product([1, 2, 3, 4, 5]) == (4, 5)\nmax_Product([-10, -20, 1, 3]) == (-10, -20)\nmax_Product([0, 2, 3, -1]) == (2, 3)\n\"\"\"\n", "entry_point": "max_Product", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4,7,0,8,4]) == (7,8)\n    assert candidate([0,-1,-2,-4,5,0,-6]) == (-4,-6)\n    assert candidate([1,2,3]) == (2,3)\n"}
{"task_id": "416", "prompt": "def breakSum(n):\n\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nYour code should satisfy these tests:\nbreakSum(2) == 2\nbreakSum(10) == 10\nbreakSum(12) == 13\n\"\"\"\n", "entry_point": "breakSum", "test": "def check(candidate):\n\n    assert candidate(12) == 13\n    assert candidate(24) == 27\n    assert candidate(23) == 23\n"}
{"task_id": "417", "prompt": "def group_tuples(Input):\n\"\"\"\nWrite a function to find common first element in given list of tuple.\nYour code should satisfy these tests:\ngroup_tuples([(1, 2), (1, 3), (2, 4)]) == [(1, 2, 3), (2, 4)]\ngroup_tuples([(3, 5), (3, 6, 7), (4, 8)]) == [(3, 5, 6, 7), (4, 8)]\ngroup_tuples([(5, 9), (6, 10), (5, 11)]) == [(5, 9, 11), (6, 10)]\n\"\"\"\n", "entry_point": "group_tuples", "test": "def check(candidate):\n\n    assert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    assert candidate([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n    assert candidate([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\n"}
{"task_id": "418", "prompt": "def Find_Max(lst):\n\"\"\"\nWrite a python function to find the sublist having maximum length.\nYour code should satisfy these tests:\nFind_Max([1, 2, 3, 4, 5]) == 5\nFind_Max([-10, -20, -3, -4, -5]) == -3\nFind_Max([100, 200, 300, 400, 500]) == 500\n\"\"\"\n", "entry_point": "Find_Max", "test": "def check(candidate):\n\n    assert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    assert candidate([[1],[1,2],[1,2,3]]) == [1,2,3]\n    assert candidate([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n"}
{"task_id": "419", "prompt": "def round_and_sum(list1):\n\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nYour code should satisfy these tests:\nround_and_sum([1.2, 2.5, 3.7]) == 21\nround_and_sum([0.1, 0.4, 0.6, 0.9]) == 8\nround_and_sum([-1.5, 2.3, -3.8]) == -12\n\"\"\"\n", "entry_point": "round_and_sum", "test": "def check(candidate):\n\n    assert candidate([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n    assert candidate([5,2,9,24.3,29])==345\n    assert candidate([25.0,56.7,89.2])==513\n"}
{"task_id": "420", "prompt": "def cube_Sum(n):\n\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nYour code should satisfy these tests:\ncube_Sum(1) == 8\ncube_Sum(2) == 72\ncube_Sum(3) == 288\n\"\"\"\n", "entry_point": "cube_Sum", "test": "def check(candidate):\n\n    assert candidate(2) == 72\n    assert candidate(3) == 288\n    assert candidate(4) == 800\n"}
{"task_id": "421", "prompt": "def concatenate_tuple(test_tup):\n\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nYour code should satisfy these tests:\nconcatenate_tuple((1, 2, 3)) == '1-2-3'\nconcatenate_tuple(('a', 'b', 'c')) == 'a-b-c'\nconcatenate_tuple((True, False, True)) == 'True-False-True'\n\"\"\"\n", "entry_point": "concatenate_tuple", "test": "def check(candidate):\n\n    assert candidate((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n    assert candidate((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\n    assert candidate((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'\n"}
{"task_id": "422", "prompt": "def find_Average_Of_Cube(n):\n\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nYour code should satisfy these tests:\nfind_Average_Of_Cube(3) == 12.0\nfind_Average_Of_Cube(5) == 45.0\nfind_Average_Of_Cube(10) == 302.5\n\"\"\"\n", "entry_point": "find_Average_Of_Cube", "test": "def check(candidate):\n\n    assert candidate(2) == 4.5\n    assert candidate(3) == 12\n    assert candidate(1) == 1\n"}
{"task_id": "423", "prompt": "def get_maxgold(gold, m, n):\n\"\"\"\nWrite a function to solve gold mine problem.\nYour code should satisfy these tests:\nget_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4) == 16\nget_maxgold([[10, 33, 13, 15], [22, 21, 4, 1], [5, 0, 2, 3], [0, 6, 14, 2]], 4, 4) == 83\nget_maxgold([[1, 3, 3], [2, 1, 4], [0, 6, 4]], 3, 3) == 12\n\"\"\"\n", "entry_point": "get_maxgold", "test": "def check(candidate):\n\n    assert candidate([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n    assert candidate([[10,20],[30,40]],2,2)==70\n    assert candidate([[4,9],[3,7]],2,2)==13\n"}
{"task_id": "424", "prompt": "def extract_rear(test_tuple):\n\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\n\"\"\"\n", "entry_point": "extract_rear", "test": "def check(candidate):\n\n    assert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n    assert candidate(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\n    assert candidate(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n"}
{"task_id": "425", "prompt": "def count_element_in_list(list1, x):\n\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nYour code should satisfy these tests:\ncount_element_in_list([['a', 'b', 'c'], ['a', 'd', 'e'], ['f', 'g', 'a']], 'a') == 3\ncount_element_in_list([['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z']], 'x') == 3\ncount_element_in_list([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']], '5') == 1\ncount_element_in_list([['apple', 'banana'], ['apple', 'cherry'], ['banana', 'cherry']], 'apple') == 2\ncount_element_in_list([['cat', 'dog'], ['fish', 'bird'], ['cat', 'fish']], 'fish') == 2\n\"\"\"\n", "entry_point": "count_element_in_list", "test": "def check(candidate):\n\n    assert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n"}
{"task_id": "426", "prompt": "def filter_oddnumbers(nums):\n\"\"\"\nWrite a function to filter odd numbers using lambda function.\nYour code should satisfy these tests:\nfilter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]\nfilter_oddnumbers([10, 21, 32, 43, 54]) == [21, 43]\nfilter_oddnumbers([0, -1, -2, -3, -4]) == [-1, -3]\n\"\"\"\n", "entry_point": "filter_oddnumbers", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n    assert candidate([10,20,45,67,84,93])==[45,67,93]\n    assert candidate([5,7,9,8,6,4,3])==[5,7,9,3]\n"}
{"task_id": "427", "prompt": "def change_date_format(dt):\n\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nYour code should satisfy these tests:\nchange_date_format(\"2023-10-05\") == \"05-10-2023\"\nchange_date_format(\"1999-1-1\") == \"1-1-1999\"\nchange_date_format(\"2000-12-31\") == \"31-12-2000\"\n\"\"\"\n", "entry_point": "change_date_format", "test": "def check(candidate):\n\n    assert candidate(\"2026-01-02\") == '02-01-2026'\n    assert candidate(\"2020-11-13\") == '13-11-2020'\n    assert candidate(\"2021-04-26\") == '26-04-2021'\n"}
{"task_id": "428", "prompt": "def shell_sort(my_list):\n\"\"\"\nWrite a function to sort the given array by using shell sort.\nYour code should satisfy these tests:\nshell_sort([23, 12, 1, 8, 34, 54, 2, 3]) == [1, 2, 3, 8, 12, 23, 34, 54]\nshell_sort([5, 3, 8, 4, 2]) == [2, 3, 4, 5, 8]\nshell_sort([9, 7, 5, 11, 12, 2, 14, 3, 10, 6]) == [2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\n\"\"\"\n", "entry_point": "shell_sort", "test": "def check(candidate):\n\n    assert candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert candidate([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\n    assert candidate([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n"}
{"task_id": "429", "prompt": "def and_tuples(test_tup1, test_tup2):\n\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nYour code should satisfy these tests:\nand_tuples((1, 2, 3), (4, 5, 6)) == (0, 0, 2)\nand_tuples((255, 128, 64), (1, 2, 3)) == (1, 0, 0)\nand_tuples((15, 30, 45), (15, 30, 45)) == (15, 30, 45)\n\"\"\"\n", "entry_point": "and_tuples", "test": "def check(candidate):\n\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert candidate((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert candidate((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n"}
{"task_id": "430", "prompt": "def parabola_directrix(a, b, c):\n\"\"\"\nWrite a function to find the directrix of a parabola.\nYour code should satisfy these tests:\nparabola_directrix(1, 2, 3) == -17\nparabola_directrix(2, 3, 4) == -76\nparabola_directrix(0, 0, 0) == 0\nparabola_directrix(-1, -2, -3) == 17\nparabola_directrix(5, 10, 15) == -2005\n\"\"\"\n", "entry_point": "parabola_directrix", "test": "def check(candidate):\n\n    assert candidate(5,3,2)==-198\n    assert candidate(9,8,4)==-2336\n    assert candidate(2,4,6)==-130\n"}
{"task_id": "431", "prompt": "def common_element(list1, list2):\n\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nYour code should satisfy these tests:\ncommon_element([1, 2, 3], [3, 4, 5]) == True\ncommon_element(['apple', 'banana'], ['cherry', 'date']) == None\ncommon_element([10, 20, 30], [40, 50, 60, 10]) == True\n\"\"\"\n", "entry_point": "common_element", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4,5], [5,6,7,8,9])==True\n    assert candidate([1,2,3,4,5], [6,7,8,9])==None\n    assert candidate(['a','b','c'], ['d','b','e'])==True\n"}
{"task_id": "432", "prompt": "def median_trapezium(base1,base2,height):\n\"\"\"\nWrite a function to find the median of a trapezium.\nYour code should satisfy these tests:\nmedian_trapezium(10, 20, 15) == 15.0\nmedian_trapezium(5, 5, 10) == 5.0\nmedian_trapezium(8, 12, 7) == 10.0\n\"\"\"\n", "entry_point": "median_trapezium", "test": "def check(candidate):\n\n    assert candidate(15,25,35)==20\n    assert candidate(10,20,30)==15\n    assert candidate(6,9,4)==7.5\n"}
{"task_id": "433", "prompt": "def check_greater(arr, number):\n\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nYour code should satisfy these tests:\ncheck_greater([1, 2, 3, 4, 5], 6) == 'Yes, the entered number is greater than those in the array'\ncheck_greater([10, 20, 30], 25) == 'No, entered number is less than those in the array'\ncheck_greater([-5, -10, -15], -3) == 'Yes, the entered number is greater than those in the array'\n\"\"\"\n", "entry_point": "check_greater", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n    assert candidate([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\n    assert candidate([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'\n"}
{"task_id": "434", "prompt": "def text_match_one(text):\n\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nYour code should satisfy these tests:\ntext_match_one(\"ab\") == 'Found a match!'\ntext_match_one(\"aabbb\") == 'Found a match!'\ntext_match_one(\"ac\") == 'Not matched!'\n\"\"\"\n", "entry_point": "text_match_one", "test": "def check(candidate):\n\n    assert candidate(\"ac\")==('Not matched!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abba\")==('Found a match!')\n"}
{"task_id": "435", "prompt": "def last_Digit(n):\n\"\"\"\nWrite a python function to find the last digit of a given number.\nYour code should satisfy these tests:\nlast_Digit(123) == 3\nlast_Digit(4567) == 7\nlast_Digit(890) == 0\n\"\"\"\n", "entry_point": "last_Digit", "test": "def check(candidate):\n\n    assert candidate(123) == 3\n    assert candidate(25) == 5\n    assert candidate(30) == 0\n"}
{"task_id": "436", "prompt": "def neg_nos(list1):\n\"\"\"\nWrite a python function to print negative numbers in a list.\nYour code should satisfy these tests:\nneg_nos([3, -1, 4, -5, 9]) == -1\nneg_nos([0, 2, -3, 7, -8]) == -3\nneg_nos([10, 20, 30, -40, 50]) == -40\n\"\"\"\n", "entry_point": "neg_nos", "test": "def check(candidate):\n\n    assert candidate([-1,4,5,-6]) == -1,-6\n    assert candidate([-1,-2,3,4]) == -1,-2\n    assert candidate([-7,-6,8,9]) == -7,-6\n"}
{"task_id": "437", "prompt": "def remove_odd(str1):\n\"\"\"\nWrite a function to remove odd characters in a string.\nYour code should satisfy these tests:\nremove_odd(\"abcdef\") == \"bdf\"\nremove_odd(\"123456789\") == \"2468\"\nremove_odd(\"Python\") == \"yhn\"\n\"\"\"\n", "entry_point": "remove_odd", "test": "def check(candidate):\n\n    assert candidate(\"python\")==(\"yhn\")\n    assert candidate(\"program\")==(\"rga\")\n    assert candidate(\"language\")==(\"agae\")\n"}
{"task_id": "438", "prompt": "def count_bidirectional(test_list):\n\"\"\"\nWrite a function to count bidirectional tuple pairs.\nYour code should satisfy these tests:\ncount_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3)]) == '2'\ncount_bidirectional([(5, 6), (6, 5), (7, 8), (8, 7), (9, 10)]) == '2'\ncount_bidirectional([(1, 1), (2, 2), (3, 3)]) == '0'\ncount_bidirectional([(10, 20), (20, 10), (30, 40), (40, 30), (50, 60)]) == '2'\ncount_bidirectional([(1, 2), (3, 4), (5, 6), (7, 8)]) == '0'\n\"\"\"\n", "entry_point": "count_bidirectional", "test": "def check(candidate):\n\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n    assert candidate([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'\n"}
{"task_id": "439", "prompt": "def multiple_to_single(L):\n\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nYour code should satisfy these tests:\nmultiple_to_single([1, 2, 3]) == 123\nmultiple_to_single([9, 8, 7, 6]) == 9876\nmultiple_to_single([5, 0, 2, 1]) == 5021\nmultiple_to_single([4, 5, 6, 7, 8]) == 45678\nmultiple_to_single([0, 0, 0, 0]) == 0\n\"\"\"\n", "entry_point": "multiple_to_single", "test": "def check(candidate):\n\n    assert candidate([11, 33, 50])==113350\n    assert candidate([-1,2,3,4,5,6])==-123456\n    assert candidate([10,15,20,25])==10152025\n"}
{"task_id": "440", "prompt": "def find_adverb_position(text):\n\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nYour code should satisfy these tests:\nfind_adverb_position(\"She runs quickly\") == (9, 16, 'quickly')\nfind_adverb_position(\"He sings beautifully\") == (9, 20, 'beautifully')\nfind_adverb_position(\"They work tirelessly\") == (10, 20, 'tirelessly')\nfind_adverb_position(\"The cat jumps lazily\") == (14, 20, 'lazily')\nfind_adverb_position(\"The dog barks loudly\") == (14, 20, 'loudly')\n\"\"\"\n", "entry_point": "find_adverb_position", "test": "def check(candidate):\n\n    assert candidate(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n    assert candidate(\"seriously!! there are many roses\")==(0, 9, 'seriously')\n    assert candidate(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n"}
{"task_id": "441", "prompt": "def surfacearea_cube(l):\n\"\"\"\nWrite a function to find the surface area of a cube.\nYour code should satisfy these tests:\nsurfacearea_cube(1) == 6\nsurfacearea_cube(3) == 54\nsurfacearea_cube(5) == 150\n\"\"\"\n", "entry_point": "surfacearea_cube", "test": "def check(candidate):\n\n    assert candidate(5)==150\n    assert candidate(3)==54\n    assert candidate(10)==600\n"}
{"task_id": "442", "prompt": "def positive_count(nums):\n\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nYour code should satisfy these tests:\npositive_count(array('i', [1, 2, 3, 4, 5])) == 1.0\npositive_count(array('i', [-1, -2, -3, -4, -5])) == 0.0\npositive_count(array('i', [0, 0, 0, 0, 0])) == 0.0\npositive_count(array('i', [1, -1, 2, -2, 3])) == 0.6\npositive_count(array('i', [10, -5, 0, 7, -3])) == 0.4\n\"\"\"\n", "entry_point": "positive_count", "test": "def check(candidate):\n\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56\n"}
{"task_id": "443", "prompt": "def largest_neg(list1):\n\"\"\"\nWrite a python function to find the largest negative number from the given list.\nYour code should satisfy these tests:\nlargest_neg([-10, -20, -30, -5]) == -30\nlargest_neg([0, -1, -2, -3, -4]) == -4\nlargest_neg([-100, -200, -300, -50]) == -300\n\"\"\"\n", "entry_point": "largest_neg", "test": "def check(candidate):\n\n    assert candidate([1,2,3,-4,-6]) == -6\n    assert candidate([1,2,3,-8,-9]) == -9\n    assert candidate([1,2,3,4,-1]) == -1\n"}
{"task_id": "444", "prompt": "def trim_tuple(test_list, K):\n\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nYour code should satisfy these tests:\ntrim_tuple([(1, 2, 3, 4, 5)], 1) == '[(2, 3, 4)]'\ntrim_tuple([(1, 2, 3, 4, 5, 6, 7)], 2) == '[(3, 4, 5)]'\ntrim_tuple([(10, 20, 30, 40, 50, 60)], 2) == '[(30, 40)]'\ntrim_tuple([(5, 4, 3, 2, 1)], 1) == '[(4, 3, 2)]'\ntrim_tuple([(8, 6, 4, 2)], 1) == '[(6, 4)]'\n\"\"\"\n", "entry_point": "trim_tuple", "test": "def check(candidate):\n\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n    assert candidate([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'\n"}
{"task_id": "445", "prompt": "def index_multiplication(test_tup1, test_tup2):\n\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nYour code should satisfy these tests:\nindex_multiplication(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((5, 12), (21, 32))\nindex_multiplication(((0, 1), (2, 3)), ((4, 5), (6, 7))) == ((0, 5), (12, 21))\nindex_multiplication(((10, 20), (30, 40)), ((1, 2), (3, 4))) == ((10, 40), (90, 160))\n\"\"\"\n", "entry_point": "index_multiplication", "test": "def check(candidate):\n\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n"}
{"task_id": "446", "prompt": "def count_Occurrence(tup, lst):\n\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nYour code should satisfy these tests:\ncount_Occurrence((1, 2, 3), [1, 2, 3, 4, 5]) == 3\ncount_Occurrence((1, 1, 2, 3), [1, 3, 4, 5]) == 3\ncount_Occurrence((1, 2, 3, 4), [2, 4, 6, 8]) == 2\ncount_Occurrence((), []) == 0\ncount_Occurrence(('a', 'b', 'c'), ['x', 'y', 'z']) == 0\n\"\"\"\n", "entry_point": "count_Occurrence", "test": "def check(candidate):\n\n    assert candidate(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n    assert candidate((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\n    assert candidate((1,2,3,4,5,6),[1,2]) == 2\n"}
{"task_id": "447", "prompt": "def cube_nums(nums):\n\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nYour code should satisfy these tests:\ncube_nums([1, 2, 3]) == [1, 8, 27]\ncube_nums([4, 5, 6]) == [64, 125, 216]\ncube_nums([-1, -2, -3]) == [-1, -8, -27]\n\"\"\"\n", "entry_point": "cube_nums", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert candidate([10,20,30])==([1000, 8000, 27000])\n    assert candidate([12,15])==([1728, 3375])\n"}
{"task_id": "448", "prompt": "def cal_sum(n):\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nYour code should satisfy these tests:\ncal_sum(0) == 3\ncal_sum(1) == 3\ncal_sum(5) == 15\n\"\"\"\n", "entry_point": "cal_sum", "test": "def check(candidate):\n\n    assert candidate(9) == 49\n    assert candidate(10) == 66\n    assert candidate(11) == 88\n"}
{"task_id": "449", "prompt": "def check_Triangle(x1,y1,x2,y2,x3,y3):\n\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nYour code should satisfy these tests:\ncheck_Triangle(0, 0, 1, 1, 2, 2) == 'No'\ncheck_Triangle(0, 0, 0, 1, 1, 0) == 'Yes'\ncheck_Triangle(1, 1, 4, 5, 7, 8) == 'Yes'\n\"\"\"\n", "entry_point": "check_Triangle", "test": "def check(candidate):\n\n    assert candidate(1,5,2,5,4,6) == 'Yes'\n    assert candidate(1,1,1,4,1,5) == 'No'\n    assert candidate(1,1,1,1,1,1) == 'No'\n"}
{"task_id": "450", "prompt": "def extract_string(str, l):\n\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nYour code should satisfy these tests:\nextract_string([\"hello\", \"world\", \"python\", \"code\"], 5) == [\"hello\", \"world\"]\nextract_string([\"apple\", \"banana\", \"cherry\", \"date\"], 6) == [\"banana\", \"cherry\"]\nextract_string([\"cat\", \"dog\", \"elephant\", \"fox\"], 3) == [\"cat\", \"dog\", \"fox\"]\n\"\"\"\n", "entry_point": "extract_string", "test": "def check(candidate):\n\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\n"}
{"task_id": "451", "prompt": "def remove_whitespaces(text1):\n\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nYour code should satisfy these tests:\nremove_whitespaces(\"Hello World\") == \"HelloWorld\"\nremove_whitespaces(\"  Leading and trailing  \") == \"Leadingandtrailing\"\nremove_whitespaces(\"Multiple   spaces   here\") == \"Multiplespaceshere\"\n\"\"\"\n", "entry_point": "remove_whitespaces", "test": "def check(candidate):\n\n    assert candidate(' Google    Flutter ') == 'GoogleFlutter'\n    assert candidate(' Google    Dart ') == 'GoogleDart'\n    assert candidate(' iOS    Swift ') == 'iOSSwift'\n"}
{"task_id": "452", "prompt": "def loss_amount(actual_cost,sale_amount):\n\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nYour code should satisfy these tests:\nloss_amount(100, 150) == 50\nloss_amount(50, 70) == 20\nloss_amount(80, 80) == None\nloss_amount(120, 130) == 10\nloss_amount(90, 95) == 5\n\"\"\"\n", "entry_point": "loss_amount", "test": "def check(candidate):\n\n    assert candidate(1500,1200)==None\n    assert candidate(100,200)==100\n    assert candidate(2000,5000)==3000\n"}
{"task_id": "453", "prompt": "def sumofFactors(n):\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nYour code should satisfy these tests:\nsumofFactors(12) == 24\nsumofFactors(18) == 26\nsumofFactors(28) == 48\n\"\"\"\n", "entry_point": "sumofFactors", "test": "def check(candidate):\n\n    assert candidate(18) == 26\n    assert candidate(30) == 48\n    assert candidate(6) == 8\n"}
{"task_id": "454", "prompt": "def text_match_wordz(text):\n\"\"\"\nWrite a function that matches a word containing 'z'.\nYour code should satisfy these tests:\ntext_match_wordz(\"fizzbuzz\") == 'Found a match!'\ntext_match_wordz(\"amazing\") == 'Found a match!'\ntext_match_wordz(\"hello\") == 'Not matched!'\n\"\"\"\n", "entry_point": "text_match_wordz", "test": "def check(candidate):\n\n    assert candidate(\"pythonz.\")==('Found a match!')\n    assert candidate(\"xyz.\")==('Found a match!')\n    assert candidate(\"  lang  .\")==('Not matched!')\n"}
{"task_id": "455", "prompt": "def check_monthnumb_number(monthnum2):\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nYour code should satisfy these tests:\ncheck_monthnumb_number(1) == True\ncheck_monthnumb_number(4) == False\ncheck_monthnumb_number(11) == False\n\"\"\"\n", "entry_point": "check_monthnumb_number", "test": "def check(candidate):\n\n    assert candidate(5)==True\n    assert candidate(2)==False\n    assert candidate(6)==False\n"}
{"task_id": "456", "prompt": "def reverse_string_list(stringlist):\n\"\"\"\nWrite a function to reverse strings in a given list of string values.\nYour code should satisfy these tests:\nreverse_string_list([\"hello\", \"world\"]) == [\"olleh\", \"dlrow\"]\nreverse_string_list([\"Python\", \"is\", \"fun\"]) == [\"nohtyP\", \"si\", \"nuf\"]\nreverse_string_list([\"test\", \"case\", \"three\"]) == [\"tset\", \"esac\", \"eerht\"]\n\"\"\"\n", "entry_point": "reverse_string_list", "test": "def check(candidate):\n\n    assert candidate(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    assert candidate(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\n    assert candidate(['jack','john','mary'])==['kcaj','nhoj','yram']\n"}
{"task_id": "457", "prompt": "def Find_Min(lst):\n\"\"\"\nWrite a python function to find the sublist having minimum length.\nYour code should satisfy these tests:\nFind_Min([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 1\nFind_Min([-7, -1, -5, -3]) == -7\nFind_Min([100, 200, 3, 400, 500]) == 3\n\"\"\"\n", "entry_point": "Find_Min", "test": "def check(candidate):\n\n    assert candidate([[1],[1,2],[1,2,3]]) == [1]\n    assert candidate([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\n    assert candidate([['x'],['x','y'],['x','y','z']]) == ['x']\n"}
{"task_id": "458", "prompt": "def rectangle_area(l,b):\n\"\"\"\nWrite a function to find the area of a rectangle.\nYour code should satisfy these tests:\nrectangle_area(5, 10) == 50\nrectangle_area(3, 7) == 21\nrectangle_area(8, 2) == 16\n\"\"\"\n", "entry_point": "rectangle_area", "test": "def check(candidate):\n\n    assert candidate(10,20)==200\n    assert candidate(10,5)==50\n    assert candidate(4,2)==8\n"}
{"task_id": "459", "prompt": "def remove_uppercase(str1):\n\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nYour code should satisfy these tests:\nremove_uppercase(\"HelloWorld\") == \"elloorld\"\nremove_uppercase(\"Python3.8\") == \"ython3.8\"\nremove_uppercase(\"123ABCdef\") == \"123def\"\n\"\"\"\n", "entry_point": "remove_uppercase", "test": "def check(candidate):\n\n    assert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert candidate('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n    assert candidate('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n"}
{"task_id": "460", "prompt": "def Extract(lst):\n\"\"\"\nWrite a python function to get the first element of each sublist.\nYour code should satisfy these tests:\nExtract([['apple', 1], ['banana', 2], ['cherry', 3]]) == ['apple', 'banana', 'cherry']\nExtract([['dog', 5], ['cat', 4]]) == ['dog', 'cat']\nExtract([['red', 10], ['blue', 20], ['green', 30], ['yellow', 40]]) == ['red', 'blue', 'green', 'yellow']\n\"\"\"\n", "entry_point": "Extract", "test": "def check(candidate):\n\n    assert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert candidate([[1,2,3],[4, 5]]) == [1,4]\n    assert candidate([[9,8,1],[1,2]]) == [9,1]\n"}
{"task_id": "461", "prompt": "def upper_ctr(str):\n\"\"\"\nWrite a python function to count the upper case characters in a given string.\nYour code should satisfy these tests:\nupper_ctr(\"Hello World\") == 1\nupper_ctr(\"PYTHON\") == 1\nupper_ctr(\"lowercase\") == 0\nupper_ctr(\"MixedCase123\") == 1\nupper_ctr(\"12345!@#$%\") == 0\n\"\"\"\n", "entry_point": "upper_ctr", "test": "def check(candidate):\n\n    assert candidate('PYthon') == 1\n    assert candidate('BigData') == 1\n    assert candidate('program') == 0\n"}
{"task_id": "462", "prompt": "def combinations_list(list1):\n\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nYour code should satisfy these tests:\ncombinations_list([1, 2]) == [[], [1], [2], [2, 1]]\ncombinations_list([1]) == [[], [1]]\ncombinations_list([]) == [[]]\ncombinations_list([1, 2, 3]) == [[], [1], [2], [2, 1], [3], [3, 1], [3, 2], [3, 2, 1]]\ncombinations_list([1, 2, 3, 4]) == [[], [1], [2], [2, 1], [3], [3, 1], [3, 2], [3, 2, 1], [4], [4, 1], [4, 2], [4, 2, 1], [4, 3], [4, 3, 1], [4, 3, 2], [4, 3, 2, 1]]\n\"\"\"\n", "entry_point": "combinations_list", "test": "def check(candidate):\n\n    assert candidate(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    assert candidate(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n"}
{"task_id": "463", "prompt": "def max_subarray_product(arr):\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nYour code should satisfy these tests:\nmax_subarray_product([2, 3, -2, 4]) == 6\nmax_subarray_product([-2, 0, -1]) == 1\nmax_subarray_product([-2, 3, -4]) == 24\n\"\"\"\n", "entry_point": "max_subarray_product", "test": "def check(candidate):\n\n    assert candidate([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert candidate([6, -3, -10, 0, 2]) == 180\n    assert candidate([-2, -40, 0, -2, -3]) == 80\n"}
{"task_id": "464", "prompt": "def check_value(dict, n):\n\"\"\"\nWrite a function to check if all values are same in a dictionary.\nYour code should satisfy these tests:\ncheck_value({'a': 5, 'b': 5, 'c': 5}, 5) == True\ncheck_value({'x': 1, 'y': 2, 'z': 1}, 1) == False\ncheck_value({'key1': 10, 'key2': 10}, 10) == True\n\"\"\"\n", "entry_point": "check_value", "test": "def check(candidate):\n\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False\n"}
{"task_id": "465", "prompt": "def drop_empty(dict1):\n\"\"\"\nWrite a function to drop empty items from a given dictionary.\nYour code should satisfy these tests:\ndrop_empty({'a': 1, 'b': None, 'c': 2}) == {'a': 1, 'c': 2}\ndrop_empty({'x': None, 'y': None, 'z': 3}) == {'z': 3}\ndrop_empty({'key1': 'value1', 'key2': '', 'key3': 'value3'}) == {'key1': 'value1', 'key2': '', 'key3': 'value3'}\n\"\"\"\n", "entry_point": "drop_empty", "test": "def check(candidate):\n\n    assert candidate({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    assert candidate({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\n    assert candidate({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n"}
{"task_id": "466", "prompt": "def find_peak_util(arr, low, high, n):\n\"\"\"\nWrite a function to find the peak element in the given array.\nYour code should satisfy these tests:\nfind_peak_util([1, 3, 20, 4, 1, 0], 0, 5, 6) == 2\nfind_peak_util([10, 20, 15, 2, 23, 90, 67], 0, 6, 7) == 1\nfind_peak_util([5, 10, 20, 15], 0, 3, 4) == 2\nfind_peak_util([1, 2, 3, 4, 5], 0, 4, 5) == 4\nfind_peak_util([100, 80, 60, 50, 20], 0, 4, 5) == 0\n\"\"\"\n", "entry_point": "find_peak_util", "test": "def check(candidate):\n\n    assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n    assert find_peak([2, 3, 4, 5, 6], 5) == 4\n    assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5\n"}
{"task_id": "467", "prompt": "def decimal_to_Octal(deciNum):\n\"\"\"\nWrite a python function to convert decimal number to octal number.\nYour code should satisfy these tests:\ndecimal_to_Octal(8) == 10\ndecimal_to_Octal(64) == 100\ndecimal_to_Octal(234) == 352\n\"\"\"\n", "entry_point": "decimal_to_Octal", "test": "def check(candidate):\n\n    assert candidate(10) == 12\n    assert candidate(2) == 2\n    assert candidate(33) == 41\n"}
{"task_id": "468", "prompt": "def max_product(arr, n ):\n\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nYour code should satisfy these tests:\nmax_product([1, 2, 3, 4, 5], 5) == 120\nmax_product([5, 4, 3, 2, 1], 5) == 5\nmax_product([10, 3, 2, 5, 7, 8], 6) == 840\nmax_product([6, 7, 10, 9, 8], 5) == 420\nmax_product([1, 3, 5, 7, 9, 11], 6) == 10395\n\"\"\"\n", "entry_point": "max_product", "test": "def check(candidate):\n\n    assert candidate([3, 100, 4, 5, 150, 6], 6) == 45000\n    assert candidate([4, 42, 55, 68, 80], 5) == 50265600\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000\n"}
{"task_id": "469", "prompt": "def max_profit(price, k):\n\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nYour code should satisfy these tests:\nmax_profit([10, 22, 5, 75, 65, 80], 2) == 87\nmax_profit([12, 14, 17, 10, 14, 13, 12, 15], 3) == 12\nmax_profit([3, 3, 5, 0, 0, 3, 1, 4], 2) == 6\n\"\"\"\n", "entry_point": "max_profit", "test": "def check(candidate):\n\n    assert candidate([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n    assert candidate([2, 4, 7, 5, 4, 3, 5], 2) == 7\n    assert candidate([10, 6, 8, 4, 2], 2) == 2\n"}
{"task_id": "470", "prompt": "def add_pairwise(test_tup):\n\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nYour code should satisfy these tests:\nadd_pairwise((1, 2, 3, 4)) == (3, 5, 7)\nadd_pairwise((10, 20, 30)) == (30, 50)\nadd_pairwise((5, 5, 5, 5, 5)) == (10, 10, 10, 10)\n\"\"\"\n", "entry_point": "add_pairwise", "test": "def check(candidate):\n\n    assert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert candidate((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert candidate((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n"}
{"task_id": "471", "prompt": "def find_remainder(arr, lens, n):\n\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nYour code should satisfy these tests:\nfind_remainder([2, 3, 5], 3, 7) == 2\nfind_remainder([10, 20, 30], 3, 11) == 5\nfind_remainder([1, 2, 3, 4, 5], 5, 13) == 3\n\"\"\"\n", "entry_point": "find_remainder", "test": "def check(candidate):\n\n    assert candidate([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n    assert candidate([1,1,1],3,1) == 0\n    assert candidate([1,2,1],3,2) == 0\n"}
{"task_id": "472", "prompt": "def check_Consecutive(l):\n\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nYour code should satisfy these tests:\ncheck_Consecutive([1, 2, 3, 4, 5]) == True\ncheck_Consecutive([5, 3, 4, 1, 2]) == True\ncheck_Consecutive([1, 2, 4, 5]) == False\n\"\"\"\n", "entry_point": "check_Consecutive", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4,5]) == True\n    assert candidate([1,2,3,5,6]) == False\n    assert candidate([1,2,1]) == False\n"}
{"task_id": "473", "prompt": "def tuple_intersection(test_list1, test_list2):\n\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nYour code should satisfy these tests:\ntuple_intersection([(1, 2), (3, 4)], [(2, 1), (5, 6)]) == {(1, 2)}\ntuple_intersection([(7, 8), (9, 10)], [(10, 9), (11, 12)]) == {(9, 10)}\ntuple_intersection([(13, 14), (15, 16)], [(17, 18), (19, 20)]) == set()\n\"\"\"\n", "entry_point": "tuple_intersection", "test": "def check(candidate):\n\n    assert candidate([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n    assert candidate([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\n    assert candidate([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n"}
{"task_id": "474", "prompt": "def replace_char(str1,ch,newch):\n\"\"\"\nWrite a function to replace characters in a string.\nYour code should satisfy these tests:\nreplace_char(\"hello world\", \"o\", \"a\") == \"hella warld\"\nreplace_char(\"python programming\", \"p\", \"t\") == \"tython trogramming\"\nreplace_char(\"123456789\", \"5\", \"0\") == \"123406789\"\n\"\"\"\n", "entry_point": "replace_char", "test": "def check(candidate):\n\n    assert candidate(\"polygon\",'y','l')==(\"pollgon\")\n    assert candidate(\"character\",'c','a')==(\"aharaater\")\n    assert candidate(\"python\",'l','a')==(\"python\")\n"}
{"task_id": "475", "prompt": "def sort_counter(dict1):\n\"\"\"\nWrite a function to sort counter by value.\n\"\"\"\n", "entry_point": "sort_counter", "test": "def check(candidate):\n\n    assert candidate({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    assert candidate({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert candidate({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n"}
{"task_id": "476", "prompt": "def big_sum(nums):\n\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nYour code should satisfy these tests:\nbig_sum([1, 2, 3, 4, 5]) == 6\nbig_sum([-10, 0, 10]) == 0\nbig_sum([100, 200, 300, 400, 500]) == 600\n\"\"\"\n", "entry_point": "big_sum", "test": "def check(candidate):\n\n    assert candidate([1,2,3]) == 4\n    assert candidate([-1,2,3,4]) == 3\n    assert candidate([2,3,6]) == 8\n"}
{"task_id": "477", "prompt": "def is_lower(string):\n\"\"\"\nWrite a python function to convert the given string to lower case.\nYour code should satisfy these tests:\nis_lower(\"hello\") == 'hello'\nis_lower(\"HELLO\") == 'hello'\nis_lower(\"HelloWorld\") == 'helloworld'\n\"\"\"\n", "entry_point": "is_lower", "test": "def check(candidate):\n\n    assert candidate(\"InValid\") == \"invalid\"\n    assert candidate(\"TruE\") == \"true\"\n    assert candidate(\"SenTenCE\") == \"sentence\"\n"}
{"task_id": "478", "prompt": "def remove_lowercase(str1):\n\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nYour code should satisfy these tests:\nremove_lowercase(\"HelloWorld123\") == \"HW123\"\nremove_lowercase(\"Python3.8\") == \"P3.8\"\nremove_lowercase(\"123abcXYZ\") == \"123XYZ\"\n\"\"\"\n", "entry_point": "remove_lowercase", "test": "def check(candidate):\n\n    assert candidate(\"PYTHon\")==('PYTH')\n    assert candidate(\"FInD\")==('FID')\n    assert candidate(\"STRinG\")==('STRG')\n"}
{"task_id": "479", "prompt": "def first_Digit(n):\n\"\"\"\nWrite a python function to find the first digit of a given number.\nYour code should satisfy these tests:\nfirst_Digit(12345) == 1\nfirst_Digit(987654) == 9\nfirst_Digit(5) == 5\n\"\"\"\n", "entry_point": "first_Digit", "test": "def check(candidate):\n\n    assert candidate(123) == 1\n    assert candidate(456) == 4\n    assert candidate(12) == 1\n"}
{"task_id": "480", "prompt": "def get_max_occuring_char(str1):\n\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nYour code should satisfy these tests:\nget_max_occuring_char(\"teststring\") == 't'\nget_max_occuring_char(\"aabbccddeeffgg\") == 'a'\nget_max_occuring_char(\"zyxwvutsrqponmlkjihgfedcba\") == 'z'\n\"\"\"\n", "entry_point": "get_max_occuring_char", "test": "def check(candidate):\n\n    assert candidate(\"data\") == \"a\"\n    assert candidate(\"create\") == \"e\"\n    assert candidate(\"brilliant girl\") == \"i\"\n"}
{"task_id": "481", "prompt": "def is_subset_sum(set, n, sum):\n\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nYour code should satisfy these tests:\nis_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nis_subset_sum([1, 2, 3, 4, 5], 5, 11) == True\nis_subset_sum([10, 20, 30], 3, 50) == True\n\"\"\"\n", "entry_point": "is_subset_sum", "test": "def check(candidate):\n\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 9) == True\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 30) == False\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 15) == True\n"}
{"task_id": "482", "prompt": "def match(text):\n\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nYour code should satisfy these tests:\nmatch(\"HelloWorld\") == 'Yes'\nmatch(\"PYTHON\") == 'No'\nmatch(\"javaSCRIPT\") == 'No'\n\"\"\"\n", "entry_point": "match", "test": "def check(candidate):\n\n    assert candidate(\"Geeks\") == 'Yes'\n    assert candidate(\"geeksforGeeks\") == 'Yes'\n    assert candidate(\"geeks\") == 'No'\n"}
{"task_id": "483", "prompt": "def first_Factorial_Divisible_Number(x):\n\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nYour code should satisfy these tests:\nfirst_Factorial_Divisible_Number(1) == 1\nfirst_Factorial_Divisible_Number(2) == 1\nfirst_Factorial_Divisible_Number(3) == 2\nfirst_Factorial_Divisible_Number(4) == 3\nfirst_Factorial_Divisible_Number(5) == 4\n\"\"\"\n", "entry_point": "first_Factorial_Divisible_Number", "test": "def check(candidate):\n\n    assert candidate(10) == 5\n    assert candidate(15) == 5\n    assert candidate(5) == 4\n"}
{"task_id": "484", "prompt": "def remove_matching_tuple(test_list1, test_list2):\n\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nYour code should satisfy these tests:\nremove_matching_tuple([(1, 2), (3, 4)], [(3, 4), (5, 6)]) == [(1, 2)]\nremove_matching_tuple([(7, 8), (9, 10), (11, 12)], [(9, 10)]) == [(7, 8), (11, 12)]\nremove_matching_tuple([(13, 14)], [(13, 14), (15, 16)]) == []\n\"\"\"\n", "entry_point": "remove_matching_tuple", "test": "def check(candidate):\n\n    assert candidate([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n    assert candidate([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n    assert candidate([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]\n"}
{"task_id": "485", "prompt": "def is_palindrome(n):\n\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nYour code should satisfy these tests:\nis_palindrome(121) == True\nis_palindrome(12321) == True\nis_palindrome(12345) == False\nis_palindrome(1) == True\nis_palindrome(1234321) == True\n\"\"\"\n", "entry_point": "is_palindrome", "test": "def check(candidate):\n\n    assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n    assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\n    assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9\n"}
{"task_id": "486", "prompt": "def nCr(n, r):\n\"\"\"\nWrite a function to compute binomial probability for the given number.\nYour code should satisfy these tests:\nnCr(5, 2) == 10\nnCr(10, 3) == 120\nnCr(7, 4) == 35\nnCr(8, 0) == 1\nnCr(6, 6) == 1\n\"\"\"\n", "entry_point": "nCr", "test": "def check(candidate):\n\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n    assert binomial_probability(11, 6, 2.0/4) == 0.2255859375\n    assert binomial_probability(12, 7, 3.0/5) == 0.227030335488\n"}
{"task_id": "487", "prompt": "def sort_tuple(tup):\n\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nYour code should satisfy these tests:\nsort_tuple([(1, 2, 3), (4, 5, 1), (7, 8, 2)]) == [(4, 5, 1), (7, 8, 2), (1, 2, 3)]\nsort_tuple([(10, 20, 5), (30, 40, 1), (50, 60, 2), (70, 80, 3)]) == [(30, 40, 1), (50, 60, 2), (70, 80, 3), (10, 20, 5)]\nsort_tuple([(5, 10, 3), (15, 20, 2), (25, 30, 1)]) == [(25, 30, 1), (15, 20, 2), (5, 10, 3)]\nsort_tuple([(1,), (3,), (2,)]) == [(1,), (2,), (3,)]\nsort_tuple([(4, 7), (1, 2), (3, 5)]) == [(1, 2), (3, 5), (4, 7)]\n\"\"\"\n", "entry_point": "sort_tuple", "test": "def check(candidate):\n\n    assert candidate([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n    assert candidate([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\n    assert candidate([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]\n"}
{"task_id": "488", "prompt": "def area_pentagon(a):\n\"\"\"\nWrite a function to find the area of a pentagon.\nYour code should satisfy these tests:\narea_pentagon(1) == 1.720477400588967\narea_pentagon(2) == 6.881909602355868\narea_pentagon(3) == 15.484296605300703\n\"\"\"\n", "entry_point": "area_pentagon", "test": "def check(candidate):\n\n    assert candidate(5)==43.01193501472417\n    assert candidate(10)==172.0477400588967\n    assert candidate(15)==387.10741513251753\n"}
{"task_id": "489", "prompt": "def frequency_Of_Largest(n,arr):\n\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nYour code should satisfy these tests:\nfrequency_Of_Largest(5, [1, 3, 3, 2, 3]) == 3\nfrequency_Of_Largest(4, [10, 10, 10, 10]) == 4\nfrequency_Of_Largest(6, [5, 4, 3, 2, 1, 5]) == 2\n\"\"\"\n", "entry_point": "frequency_Of_Largest", "test": "def check(candidate):\n\n    assert candidate(5,[1,2,3,4,4]) == 2\n    assert candidate(3,[5,6,5]) == 1\n    assert candidate(4,[2,7,7,7]) == 3\n"}
{"task_id": "490", "prompt": "def extract_symmetric(test_list):\n\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nYour code should satisfy these tests:\nextract_symmetric([(1, 2), (2, 1), (2, 3), (4, 5)]) == {(1, 2)}\nextract_symmetric([(3, 2), (2, 3), (5, 4), (6, 7), (7, 6)]) == {(2, 3), (6, 7)}\nextract_symmetric([(9, 8), (7, 6), (6, 7), (10, 11)]) == {(6, 7)}\nextract_symmetric([(1, 2), (3, 4), (5, 6), (2, 1)]) == {(1, 2)}\nextract_symmetric([(5, 6), (7, 8), (9, 10), (11, 12)]) == set()\n\"\"\"\n", "entry_point": "extract_symmetric", "test": "def check(candidate):\n\n    assert candidate([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n    assert candidate([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\n    assert candidate([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}\n"}
{"task_id": "491", "prompt": "def sum_gp(a,n,r):\n\"\"\"\nWrite a function to find the sum of geometric progression series.\nYour code should satisfy these tests:\nsum_gp(2, 3, 2) == 14.0\nsum_gp(1, 5, 3) == 121.0\nsum_gp(5, 4, 0.5) == 9.375\n\"\"\"\n", "entry_point": "sum_gp", "test": "def check(candidate):\n\n    assert candidate(1,5,2)==31\n    assert candidate(1,5,4)==341\n    assert candidate(2,6,3)==728\n"}
{"task_id": "492", "prompt": "def binary_search(item_list,item):\n\"\"\"\nWrite a function to search an element in the given array by using binary search.\nYour code should satisfy these tests:\nbinary_search([1, 2, 3, 4, 5], 3) == True\nbinary_search([10, 20, 30, 40, 50], 25) == False\nbinary_search([5, 15, 25, 35, 45, 55], 55) == True\n\"\"\"\n", "entry_point": "binary_search", "test": "def check(candidate):\n\n    assert candidate([1,2,3,5,8], 6) == False\n    assert candidate([7, 8, 9, 10, 13], 10) == True\n    assert candidate([11, 13, 14, 19, 22, 36], 23) == False\n"}
{"task_id": "493", "prompt": "def calculate_polygons(startx, starty, endx, endy, radius):\n\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\"\"\"\n", "entry_point": "calculate_polygons", "test": "def check(candidate):\n\n    assert candidate(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n    assert candidate(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\n    assert candidate(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]\n"}
{"task_id": "494", "prompt": "def binary_to_integer(test_tup):\n\"\"\"\nWrite a function to convert the given binary tuple to integer.\nYour code should satisfy these tests:\nbinary_to_integer((1, 0, 1)) == '5'\nbinary_to_integer((1, 1, 1, 1)) == '15'\nbinary_to_integer((0, 0, 0, 1)) == '1'\n\"\"\"\n", "entry_point": "binary_to_integer", "test": "def check(candidate):\n\n    assert candidate((1, 1, 0, 1, 0, 0, 1)) == '105'\n    assert candidate((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\n    assert candidate((1, 1, 0, 1, 0, 1)) == '53'\n"}
{"task_id": "495", "prompt": "def remove_lowercase(str1):\n\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nYour code should satisfy these tests:\nremove_lowercase(\"HelloWorld123\") == 'HW123'\nremove_lowercase(\"Python3.8\") == 'P3.8'\nremove_lowercase(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ\") == 'BDFHJLNPRTVXZ'\n\"\"\"\n", "entry_point": "remove_lowercase", "test": "def check(candidate):\n\n    assert candidate('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    assert candidate('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\n    assert candidate('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'\n"}
{"task_id": "496", "prompt": "def heap_queue_smallest(nums,n):\n\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nYour code should satisfy these tests:\nheap_queue_smallest([5, 7, 2, 3, 1], 3) == [1, 2, 3]\nheap_queue_smallest([10, 22, 5, 75, 65, 80], 4) == [5, 10, 22, 65]\nheap_queue_smallest([-1, -3, -2, 0, 2], 2) == [-3, -2]\n\"\"\"\n", "entry_point": "heap_queue_smallest", "test": "def check(candidate):\n\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25]\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]\n"}
{"task_id": "497", "prompt": "def surfacearea_cone(r,h):\n\"\"\"\nWrite a function to find the surface area of a cone.\nYour code should satisfy these tests:\nsurfacearea_cone(3, 4) == 75.39822368615503\nsurfacearea_cone(5, 12) == 282.7433388230814\nsurfacearea_cone(7, 24) == 703.7167544041137\n\"\"\"\n", "entry_point": "surfacearea_cone", "test": "def check(candidate):\n\n    assert candidate(5,12)==282.7433388230814\n    assert candidate(10,15)==880.5179353159282\n    assert candidate(19,17)==2655.923961165254\n"}
{"task_id": "498", "prompt": "def gcd(x, y):\n\"\"\"\nWrite a python function to find gcd of two positive integers.\nYour code should satisfy these tests:\ngcd(48, 18) == 6\ngcd(101, 10) == 1\ngcd(56, 98) == 14\n\"\"\"\n", "entry_point": "gcd", "test": "def check(candidate):\n\n    assert candidate(12, 17) == 1\n    assert candidate(4,6) == 2\n    assert candidate(2,9) == 1\n"}
{"task_id": "499", "prompt": "def diameter_circle(r):\n\"\"\"\nWrite a function to find the diameter of a circle.\nYour code should satisfy these tests:\ndiameter_circle(5) == 10\ndiameter_circle(0) == 0\ndiameter_circle(12.5) == 25.0\n\"\"\"\n", "entry_point": "diameter_circle", "test": "def check(candidate):\n\n    assert candidate(10)==20\n    assert candidate(40)==80\n    assert candidate(15)==30\n"}
{"task_id": "500", "prompt": "def concatenate_elements(list):\n\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nYour code should satisfy these tests:\nconcatenate_elements(['a', 'b', 'c']) == '  a b c'\nconcatenate_elements(['hello', 'world']) == '  hello world'\nconcatenate_elements(['1', '2', '3', '4']) == '  1 2 3 4'\nconcatenate_elements(['apple', 'banana', 'cherry']) == '  apple banana cherry'\nconcatenate_elements(['Python', 'is', 'awesome']) == '  Python is awesome'\n\"\"\"\n", "entry_point": "concatenate_elements", "test": "def check(candidate):\n\n    assert candidate(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n    assert candidate([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\n    assert candidate([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'\n"}
{"task_id": "501", "prompt": "def ngcd(x,y):\n\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nYour code should satisfy these tests:\nngcd(12, 18) == 6\nngcd(56, 98) == 14\nngcd(17, 23) == 1\nngcd(100, 200) == 100\nngcd(81, 27) == 27\n\"\"\"\n", "entry_point": "ngcd", "test": "def check(candidate):\n\n    assert num_comm_div(2,4) == 2\n    assert num_comm_div(2,8) == 2\n    assert num_comm_div(12,24) == 6\n"}
{"task_id": "502", "prompt": "def find(n,m):\n\"\"\"\nWrite a python function to find remainder of two numbers.\nYour code should satisfy these tests:\nfind(10, 3) == 1\nfind(20, 5) == 0\nfind(17, 4) == 1\n\"\"\"\n", "entry_point": "find", "test": "def check(candidate):\n\n    assert candidate(3,3) == 0\n    assert candidate(10,3) == 1\n    assert candidate(16,5) == 1\n"}
{"task_id": "503", "prompt": "def add_consecutive_nums(nums):\n\"\"\"\nWrite a function to add consecutive numbers of a given list.\nYour code should satisfy these tests:\nadd_consecutive_nums([1, 2, 3, 4]) == [3, 5, 7]\nadd_consecutive_nums([10, 20, 30]) == [30, 50]\nadd_consecutive_nums([5, 5, 5, 5, 5]) == [10, 10, 10, 10]\n\"\"\"\n", "entry_point": "add_consecutive_nums", "test": "def check(candidate):\n\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n    assert candidate([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]\n"}
{"task_id": "504", "prompt": "def sum_Of_Series(n):\n\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nYour code should satisfy these tests:\nsum_Of_Series(1) == 1\nsum_Of_Series(3) == 36\nsum_Of_Series(5) == 225\n\"\"\"\n", "entry_point": "sum_Of_Series", "test": "def check(candidate):\n\n    assert candidate(5) == 225\n    assert candidate(2) == 9\n    assert candidate(3) == 36\n"}
{"task_id": "505", "prompt": "def re_order(A):\n\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nYour code should satisfy these tests:\nre_order([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\nre_order([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nre_order([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\"\"\"\n", "entry_point": "re_order", "test": "def check(candidate):\n\n    assert candidate([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n    assert candidate([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\n    assert candidate([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]\n"}
{"task_id": "506", "prompt": "def permutation_coefficient(n, k):\n\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nYour code should satisfy these tests:\npermutation_coefficient(5, 2) == 20\npermutation_coefficient(10, 3) == 720\npermutation_coefficient(6, 4) == 360\n\"\"\"\n", "entry_point": "permutation_coefficient", "test": "def check(candidate):\n\n    assert candidate(10, 2) == 90\n    assert candidate(10, 3) == 720\n    assert candidate(10, 1) == 10\n"}
{"task_id": "507", "prompt": "def remove_words(list1, removewords):\n\"\"\"\nWrite a function to remove specific words from a given list.\nYour code should satisfy these tests:\nremove_words(['apple', 'banana', 'cherry'], ['banana']) == ['apple', 'cherry']\nremove_words(['dog', 'cat', 'mouse'], ['dog', 'mouse']) == ['cat']\nremove_words(['red', 'blue', 'green'], ['yellow']) == ['red', 'blue', 'green']\n\"\"\"\n", "entry_point": "remove_words", "test": "def check(candidate):\n\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']\n"}
{"task_id": "508", "prompt": "def same_order(l1, l2):\n\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nYour code should satisfy these tests:\nsame_order([1, 2, 3, 4], [4, 3, 2, 1]) == False\nsame_order(['a', 'b', 'c'], ['a', 'b', 'c']) == True\nsame_order([10, 20, 30], [30, 20, 10, 40]) == False\n\"\"\"\n", "entry_point": "same_order", "test": "def check(candidate):\n\n    assert candidate([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n    assert candidate([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\n    assert candidate([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n"}
{"task_id": "509", "prompt": "def average_Odd(n):\n\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nYour code should satisfy these tests:\naverage_Odd(9) == 5\naverage_Odd(15) == 8\naverage_Odd(21) == 11\n\"\"\"\n", "entry_point": "average_Odd", "test": "def check(candidate):\n\n    assert candidate(9) == 5\n    assert candidate(5) == 3\n    assert candidate(11) == 6\n"}
{"task_id": "510", "prompt": "def no_of_subsequences(arr, k):\n\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nYour code should satisfy these tests:\nno_of_subsequences([1, 2, 3], 4) == 5\nno_of_subsequences([2, 4, 6], 8) == 4\nno_of_subsequences([1, 1, 1], 2) == 7\nno_of_subsequences([3, 5, 7], 15) == 4\nno_of_subsequences([1, 3, 9], 9) == 5\n\"\"\"\n", "entry_point": "no_of_subsequences", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4], 10) == 11\n    assert candidate([4,8,7,2], 50) == 9\n    assert candidate([5,6,7,8], 15) == 4\n"}
{"task_id": "511", "prompt": "def find_Min_Sum(num):\n\"\"\"\nWrite a python function to find minimum sum of factors of a given number.\nYour code should satisfy these tests:\nfind_Min_Sum(12) == 7.0\nfind_Min_Sum(28) == 11.0\nfind_Min_Sum(44) == 15.0\n\"\"\"\n", "entry_point": "find_Min_Sum", "test": "def check(candidate):\n\n    assert candidate(12) == 7\n    assert candidate(105) == 15\n    assert candidate(2) == 2\n"}
{"task_id": "512", "prompt": "def flatten(test_tuple):\n\"\"\"\nWrite a function to count the element frequency in the mixed nested tuple.\n\"\"\"\n", "entry_point": "flatten", "test": "def check(candidate):\n\n    assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n    assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\n    assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}\n"}
{"task_id": "513", "prompt": "def add_str(test_tup, K):\n\"\"\"\nWrite a function to convert tuple into list by adding the given string after every element.\nYour code should satisfy these tests:\nadd_str(('apple', 'banana'), 'fruit') == ['apple', 'fruit', 'banana', 'fruit']\nadd_str(('car', 'bike'), 'vehicle') == ['car', 'vehicle', 'bike', 'vehicle']\nadd_str(('red', 'blue'), 'color') == ['red', 'color', 'blue', 'color']\n\"\"\"\n", "entry_point": "add_str", "test": "def check(candidate):\n\n    assert candidate((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\n    assert candidate((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\n    assert candidate((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']\n"}
{"task_id": "514", "prompt": "def sum_elements(test_tup):\n\"\"\"\nWrite a function to find the summation of tuple elements in the given tuple list.\nYour code should satisfy these tests:\nsum_elements((1, 2, 3)) == 6\nsum_elements((10, -2, 3, 4)) == 15\nsum_elements((0, 0, 0, 0)) == 0\n\"\"\"\n", "entry_point": "sum_elements", "test": "def check(candidate):\n\n    assert candidate((7, 8, 9, 1, 10, 7)) == 42\n    assert candidate((1, 2, 3, 4, 5, 6)) == 21\n    assert candidate((11, 12 ,13 ,45, 14)) == 95\n"}
{"task_id": "515", "prompt": "def modular_sum(arr, n, m):\n\"\"\"\nWrite a function to check if there is a subset with sum divisible by m.\nYour code should satisfy these tests:\nmodular_sum([1, 2, 3], 3, 5) == True\nmodular_sum([0, 0, 0], 3, 3) == True\nmodular_sum([4, 6, 8], 3, 10) == True\nmodular_sum([10, 20, 30, 40], 4, 5) == True\nmodular_sum([7, 14, 21], 3, 3) == True\n\"\"\"\n", "entry_point": "modular_sum", "test": "def check(candidate):\n\n    assert candidate([3, 1, 7, 5], 4, 6) == True\n    assert candidate([1, 7], 2, 5) == False\n    assert candidate([1, 6], 2, 5) == False\n"}
{"task_id": "516", "prompt": "def radix_sort(nums):\n\"\"\"\nWrite a function to sort a list of elements using radix sort.\nYour code should satisfy these tests:\nradix_sort([170, 45, 75, 90, 802, 24, 2, 66]) == [2, 24, 45, 66, 75, 90, 170, 802]\nradix_sort([34, 7, 23, 32, 5, 62]) == [5, 7, 23, 32, 34, 62]\nradix_sort([123, 456, 789, 101, 202, 303]) == [101, 123, 202, 303, 456, 789]\n\"\"\"\n", "entry_point": "radix_sort", "test": "def check(candidate):\n\n    assert candidate([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\n    assert candidate([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\n    assert candidate([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]\n"}
{"task_id": "517", "prompt": "def largest_pos(list1):\n\"\"\"\nWrite a python function to find the largest postive number from the given list.\nYour code should satisfy these tests:\nlargest_pos([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 9\nlargest_pos([-7, -1, -5, -3]) == -1\nlargest_pos([0, 0, 0, 0]) == 0\n\"\"\"\n", "entry_point": "largest_pos", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4,-1]) == 4\n    assert candidate([0,1,2,-5,-1,6]) == 6\n    assert candidate([0,0,1,0]) == 1\n"}
{"task_id": "518", "prompt": "def sqrt_root(num):\n\"\"\"\nWrite a function to find the square root of a perfect number.\nYour code should satisfy these tests:\nsqrt_root(4) == 2.0\nsqrt_root(9) == 3.0\nsqrt_root(16) == 4.0\n\"\"\"\n", "entry_point": "sqrt_root", "test": "def check(candidate):\n\n    assert candidate(4)==2\n    assert candidate(16)==4\n    assert candidate(400)==20\n"}
{"task_id": "519", "prompt": "def volume_tetrahedron(num):\n\"\"\"\nWrite a function to calculate volume of a tetrahedron.\nYour code should satisfy these tests:\nvolume_tetrahedron(2) == 0.94\nvolume_tetrahedron(5) == 14.73\nvolume_tetrahedron(10) == 117.85\n\"\"\"\n", "entry_point": "volume_tetrahedron", "test": "def check(candidate):\n\n    assert candidate(10)==117.85\n    assert candidate(15)==397.75\n    assert candidate(20)==942.81\n"}
{"task_id": "520", "prompt": "def find_lcm(num1, num2):\n\"\"\"\nWrite a function to find the lcm of the given array elements.\nYour code should satisfy these tests:\nget_lcm([12, 15]) == 60\nget_lcm([7, 5]) == 35\nget_lcm([24, 36, 48]) == 144\nget_lcm([3, 6, 9, 12]) == 36\nget_lcm([10, 20, 30, 40, 50]) == 600\n\"\"\"\n", "entry_point": "find_lcm", "test": "def check(candidate):\n\n    assert get_lcm([2, 7, 3, 9, 4]) == 252\n    assert get_lcm([1, 2, 8, 3]) == 24\n    assert get_lcm([3, 8, 4, 10, 5]) == 120\n"}
{"task_id": "521", "prompt": "def check_isosceles(x,y,z):\n\"\"\"\nWrite a function to print check if the triangle is scalene or not.\nYour code should satisfy these tests:\ncheck_isosceles(5, 5, 8) == False\ncheck_isosceles(7, 7, 7) == False\ncheck_isosceles(3, 4, 5) == True\n\"\"\"\n", "entry_point": "check_isosceles", "test": "def check(candidate):\n\n    assert candidate(6,8,12)==True\n    assert candidate(6,6,12)==False\n    assert candidate(6,15,20)==True\n"}
{"task_id": "522", "prompt": "def lbs(arr):\n\"\"\"\nWrite a function to find the longest bitonic subsequence for the given array.\nYour code should satisfy these tests:\nlbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nlbs([80, 60, 30, 40, 20, 10]) == 5\nlbs([1, 2, 3, 4, 5]) == 5\n\"\"\"\n", "entry_point": "lbs", "test": "def check(candidate):\n\n    assert candidate([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\n    assert candidate([1, 11, 2, 10, 4, 5, 2, 1]) == 6\n    assert candidate([80, 60, 30, 40, 20, 10]) == 5\n"}
{"task_id": "523", "prompt": "def check_string(str1):\n\"\"\"\nWrite a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\nYour code should satisfy these tests:\ncheck_string(\"Password1\") == ['Valid string.']\ncheck_string(\"password\") == ['String must have 1 upper case character.', 'String must have 1 number.']\ncheck_string(\"PASSWORD\") == ['String must have 1 lower case character.', 'String must have 1 number.']\ncheck_string(\"Pass1\") == ['String length should be atleast 8.']\ncheck_string(\"1234567\") == ['String must have 1 upper case character.', 'String must have 1 lower case character.']\n\"\"\"\n", "entry_point": "check_string", "test": "def check(candidate):\n\n    assert candidate('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\n    assert candidate('123python')==['String must have 1 upper case character.']\n    assert candidate('123Python')==['Valid string.']\n"}
{"task_id": "524", "prompt": "def max_sum_increasing_subsequence(arr, n):\n\"\"\"\nWrite a function to find the sum of maximum increasing subsequence of the given array.\nYour code should satisfy these tests:\nmax_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nmax_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nmax_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10\n\"\"\"\n", "entry_point": "max_sum_increasing_subsequence", "test": "def check(candidate):\n\n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7) == 106\n    assert candidate([3, 4, 5, 10], 4) == 22\n    assert candidate([10, 5, 4, 3], 4) == 10\n"}
{"task_id": "525", "prompt": "def parallel_lines(line1, line2):\n\"\"\"\nWrite a python function to check whether two given lines are parallel or not.\nYour code should satisfy these tests:\nparallel_lines((2, 4), (4, 8)) == True\nparallel_lines((1, 2), (3, 6)) == True\nparallel_lines((5, 10), (10, 20)) == True\n\"\"\"\n", "entry_point": "parallel_lines", "test": "def check(candidate):\n\n    assert candidate([2,3,4], [2,3,8]) == True\n    assert candidate([2,3,4], [4,-3,8]) == False\n    assert candidate([3,3],[5,5]) == True\n"}
{"task_id": "526", "prompt": "def capitalize_first_last_letters(str1):\n\"\"\"\nWrite a python function to capitalize first and last letters of each word of a given string.\nYour code should satisfy these tests:\ncapitalize_first_last_letters(\"hello world\") == \"HellO WorlD\"\ncapitalize_first_last_letters(\"python programming\") == \"PythoN ProgramminG\"\ncapitalize_first_last_letters(\"test case\") == \"TesT CasE\"\n\"\"\"\n", "entry_point": "capitalize_first_last_letters", "test": "def check(candidate):\n\n    assert candidate(\"python\") == \"PythoN\"\n    assert candidate(\"bigdata\") == \"BigdatA\"\n    assert candidate(\"Hadoop\") == \"HadooP\"\n"}
{"task_id": "527", "prompt": "def get_pairs_count(arr, n, sum):\n\"\"\"\nWrite a function to find all pairs in an integer array whose sum is equal to a given number.\nYour code should satisfy these tests:\nget_pairs_count([1, 5, 7, -1], 4, 6) == 2\nget_pairs_count([10, 12, 10, 15, -1, 7, 6, 5, 4, 2, 1, 1, 1], 13, 11) == 9\nget_pairs_count([0, 0, 0, 0], 4, 0) == 6\n\"\"\"\n", "entry_point": "get_pairs_count", "test": "def check(candidate):\n\n    assert candidate([1, 5, 7, -1, 5], 5, 6) == 3\n    assert candidate([1, 5, 7, -1], 4, 6) == 2\n    assert candidate([1, 1, 1, 1], 4, 2) == 6\n"}
{"task_id": "528", "prompt": "def min_length(list1):\n\"\"\"\nWrite a function to find the list of lists with minimum length.\nYour code should satisfy these tests:\nmin_length([\"apple\", \"banana\", \"pear\"]) == (4, 'apple')\nmin_length([\"dog\", \"cat\", \"elephant\"]) == (3, 'cat')\nmin_length([\"sun\", \"moon\", \"star\"]) == (3, 'moon')\n\"\"\"\n", "entry_point": "min_length", "test": "def check(candidate):\n\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n    assert candidate([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\n    assert candidate([[5], [15,20,25]])==(1, [5])\n"}
{"task_id": "529", "prompt": "def jacobsthal_lucas(n):\n\"\"\"\nWrite a function to find the nth jacobsthal-lucas number.\nYour code should satisfy these tests:\njacobsthal_lucas(5) == 31\njacobsthal_lucas(7) == 127\njacobsthal_lucas(10) == 1025\njacobsthal_lucas(3) == 7\njacobsthal_lucas(12) == 4097\n\"\"\"\n", "entry_point": "jacobsthal_lucas", "test": "def check(candidate):\n\n    assert candidate(5) == 31\n    assert candidate(2) == 5\n    assert candidate(4) == 17\n"}
{"task_id": "530", "prompt": "def negative_count(nums):\n\"\"\"\nWrite a function to find the ration of negative numbers in an array of integers.\nYour code should satisfy these tests:\nnegative_count(array('i', [1, 2, 3, -1, -2, -3])) == 0.5\nnegative_count(array('i', [-5, -4, -3, -2, -1])) == 1.0\nnegative_count(array('i', [0, 0, 0, 0, 0])) == 0.0\nnegative_count(array('i', [10, -10, 20, -20, 30, -30])) == 0.5\nnegative_count(array('i', [-1, -2, -3, -4, -5, 6, 7, 8, 9, 10])) == 0.5\n\"\"\"\n", "entry_point": "negative_count", "test": "def check(candidate):\n\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44\n"}
{"task_id": "531", "prompt": "def min_coins(coins, m, V):\n\"\"\"\nWrite a function to find minimum number of coins that make a given value.\nYour code should satisfy these tests:\nmin_coins([1, 2, 5], 3, 11) == 3\nmin_coins([1, 5, 10, 25], 4, 30) == 2\nmin_coins([2, 3, 6, 7], 4, 13) == 2\n\"\"\"\n", "entry_point": "min_coins", "test": "def check(candidate):\n\n    assert candidate([9, 6, 5, 1] ,4,11)==2\n    assert candidate([4,5,6,7,8,9],6,9)==1\n    assert candidate([1, 2, 3],3,4)==2\n"}
{"task_id": "532", "prompt": "def check_permutation(str1, str2):\n\"\"\"\nWrite a function to check if the two given strings are permutations of each other.\nYour code should satisfy these tests:\ncheck_permutation(\"abc\", \"bca\") == True\ncheck_permutation(\"hello\", \"bello\") == False\ncheck_permutation(\"123\", \"321\") == True\n\"\"\"\n", "entry_point": "check_permutation", "test": "def check(candidate):\n\n    assert candidate(\"abc\", \"cba\") == True\n    assert candidate(\"test\", \"ttew\") == False\n    assert candidate(\"xxyz\", \"yxzx\") == True\n"}
{"task_id": "533", "prompt": "def remove_datatype(test_tuple, data_type):\n\"\"\"\nWrite a function to remove particular data type elements from the given tuple.\nYour code should satisfy these tests:\nremove_datatype((1, 'a', 2.5, 'b', 3), int) == ['a', 2.5, 'b']\nremove_datatype(('hello', 100, 200, 'world', 300.5), str) == [100, 200, 300.5]\nremove_datatype((True, False, 'yes', 'no', 1, 2), bool) == ['yes', 'no', 1, 2]\n\"\"\"\n", "entry_point": "remove_datatype", "test": "def check(candidate):\n\n    assert candidate((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\n    assert candidate((7, 8, 9, \"SR\"), str) == [7, 8, 9]\n    assert candidate((7, 1.1, 2, 2.2), float) == [7, 2]\n"}
{"task_id": "534", "prompt": "def search_literal(pattern,text):\n\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\nYour code should satisfy these tests:\nsearch_literal('cat', 'The cat sat on the mat.') == (4, 7)\nsearch_literal('dog', 'A quick brown dog jumps over the lazy dog.') == (14, 17)\nsearch_literal('hello', 'hello world, hello universe') == (0, 5)\n\"\"\"\n", "entry_point": "search_literal", "test": "def check(candidate):\n\n    assert candidate('python','python programming language')==(0,6)\n    assert candidate('programming','python programming language')==(7,18)\n    assert candidate('language','python programming language')==(19,27)\n"}
{"task_id": "535", "prompt": "def topbottom_surfacearea(r):\n\"\"\"\nWrite a function to find the top or bottom surface area of a cylinder.\nYour code should satisfy these tests:\ntopbottom_surfacearea(2) == 12.566\ntopbottom_surfacearea(5) == 78.53750000000001\ntopbottom_surfacearea(0) == 0.0\ntopbottom_surfacearea(10) == 314.15000000000003\ntopbottom_surfacearea(7.5) == 176.70937500000002\n\"\"\"\n", "entry_point": "topbottom_surfacearea", "test": "def check(candidate):\n\n    assert candidate(10)==314.15000000000003\n    assert candidate(5)==78.53750000000001\n    assert candidate(4)==50.264\n"}
{"task_id": "536", "prompt": "def nth_items(list,n):\n\"\"\"\nWrite a function to select the nth items of a list.\nYour code should satisfy these tests:\nnth_items([1, 2, 3, 4, 5, 6], 2) == [1, 3, 5]\nnth_items(['a', 'b', 'c', 'd', 'e', 'f'], 3) == ['a', 'd']\nnth_items([10, 20, 30, 40, 50], 1) == [10, 20, 30, 40, 50]\n\"\"\"\n", "entry_point": "nth_items", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9]\n    assert candidate([10,15,19,17,16,18],3)==[10,17]\n    assert candidate([14,16,19,15,17],4)==[14,17]\n"}
{"task_id": "537", "prompt": "def first_repeated_word(str1):\n\"\"\"\nWrite a python function to find the first repeated word in a given string.\nYour code should satisfy these tests:\nfirst_repeated_word(\"hello world hello\") == \"hello\"\nfirst_repeated_word(\"python is great and python is fun\") == \"python\"\nfirst_repeated_word(\"the quick brown fox jumps over the lazy dog\") == \"the\"\nfirst_repeated_word(\"apple banana cherry apple\") == \"apple\"\nfirst_repeated_word(\"one two three four five six seven eight nine ten one\") == \"one\"\n\"\"\"\n", "entry_point": "first_repeated_word", "test": "def check(candidate):\n\n    assert candidate(\"ab ca bc ab\") == \"ab\"\n    assert candidate(\"ab ca bc\") == 'None'\n    assert candidate(\"ab ca bc ca ab bc\") == \"ca\"\n"}
{"task_id": "538", "prompt": "def string_list_to_tuple(str1):\n\"\"\"\nWrite a python function to convert a given string list to a tuple.\nYour code should satisfy these tests:\nstring_list_to_tuple(\"hello world\") == ('h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd')\nstring_list_to_tuple(\"python programming\") == ('p', 'y', 't', 'h', 'o', 'n', 'p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g')\nstring_list_to_tuple(\"  spaces  everywhere  \") == ('s', 'p', 'a', 'c', 'e', 's', 'e', 'v', 'e', 'r', 'y', 'w', 'h', 'e', 'r', 'e')\n\"\"\"\n", "entry_point": "string_list_to_tuple", "test": "def check(candidate):\n\n    assert candidate((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert candidate((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\n    assert candidate((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')\n"}
{"task_id": "539", "prompt": "def basesnum_coresspondingnum(bases_num,index):\n\"\"\"\nWrite a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\nYour code should satisfy these tests:\nbasesnum_coresspondingnum([2, 3, 4], [1, 2, 3]) == [2, 9, 64]\nbasesnum_coresspondingnum([5, 6, 7], [0, 1, 2]) == [1, 6, 49]\nbasesnum_coresspondingnum([8, 9, 10], [3, 2, 1]) == [512, 81, 10]\n\"\"\"\n", "entry_point": "basesnum_coresspondingnum", "test": "def check(candidate):\n\n    assert candidate([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\n    assert candidate([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\n    assert candidate([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]\n"}
{"task_id": "540", "prompt": "def find_Diff(arr,n):\n\"\"\"\nWrite a python function to find the difference between highest and least frequencies in a given array.\nYour code should satisfy these tests:\nfind_Diff([1, 1, 2, 2, 2, 3, 3, 3, 3], 9) == 1\nfind_Diff([4, 4, 4, 4, 5, 5, 6], 7) == 2\nfind_Diff([7, 8, 9, 10, 10, 10, 11, 11], 8) == 2\n\"\"\"\n", "entry_point": "find_Diff", "test": "def check(candidate):\n\n    assert candidate([1,1,2,2,7,8,4,5,1,4],10) == 2\n    assert candidate([1,7,9,2,3,3,1,3,3],9) == 3\n    assert candidate([1,2,1,2],4) == 0\n"}
{"task_id": "541", "prompt": "def get_sum(n):\n\"\"\"\nWrite a function to find if the given number is abundant or not.\nYour code should satisfy these tests:\nget_sum(12) == 16\nget_sum(18) == 21\nget_sum(20) == 22\nget_sum(24) == 36\nget_sum(30) == 42\n\"\"\"\n", "entry_point": "get_sum", "test": "def check(candidate):\n\n    assert check_abundant(12) == True\n    assert check_abundant(15) == False\n    assert check_abundant(18) == True\n"}
{"task_id": "542", "prompt": "def fill_spaces(text):\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\nYour code should satisfy these tests:\nfill_spaces(\"hello world\") == \"hello:world\"\nfill_spaces(\"this,is,a,test\") == \"this:is:a:test\"\nfill_spaces(\"python,java.c++\") == \"python:java:c++\"\n\"\"\"\n", "entry_point": "fill_spaces", "test": "def check(candidate):\n\n    assert candidate('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\n    assert candidate('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\n    assert candidate('Probass Curve Audio') == 'Probass:Curve:Audio'\n"}
{"task_id": "543", "prompt": "def count_digits(num1,num2):\n\"\"\"\nWrite a function to add two numbers and print number of digits of sum.\nYour code should satisfy these tests:\ncount_digits(123, 456) == 3\ncount_digits(0, 0) == 0\ncount_digits(9999, 1) == 5\n\"\"\"\n", "entry_point": "count_digits", "test": "def check(candidate):\n\n    assert candidate(9875,10)==(4)\n    assert candidate(98759853034,100)==(11)\n    assert candidate(1234567,500)==(7)\n"}
{"task_id": "544", "prompt": "def flatten_tuple(test_list):\n\"\"\"\nWrite a function to flatten the tuple list to a string.\nYour code should satisfy these tests:\nflatten_tuple((('a', 'b'), ('c', 'd'), ('e', 'f'))) == 'a b c d e f'\nflatten_tuple((('1', '2', '3'), ('4', '5'))) == '1 2 3 4 5'\nflatten_tuple((('hello',), ('world', 'python'))) == 'hello world python'\n\"\"\"\n", "entry_point": "flatten_tuple", "test": "def check(candidate):\n\n    assert candidate([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\n    assert candidate([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\n    assert candidate([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'\n"}
{"task_id": "545", "prompt": "def take_L_and_F_set_bits(n):\n\"\"\"\nWrite a python function to toggle only first and last bits of a given number.\nYour code should satisfy these tests:\ntake_L_and_F_set_bits(0b1) == 2\ntake_L_and_F_set_bits(0b101) == 5\ntake_L_and_F_set_bits(0b1000) == 9\ntake_L_and_F_set_bits(0b1111) == 9\ntake_L_and_F_set_bits(0b100000) == 33\n\"\"\"\n", "entry_point": "take_L_and_F_set_bits", "test": "def check(candidate):\n\n    assert toggle_F_and_L_bits(10) == 3\n    assert toggle_F_and_L_bits(15) == 6\n    assert toggle_F_and_L_bits(20) == 5\n"}
{"task_id": "546", "prompt": "def last_occurence_char(string,char):\n\"\"\"\nWrite a function to find the last occurrence of a character in a string.\nYour code should satisfy these tests:\nlast_occurence_char(\"hello world\", \"o\") == 8\nlast_occurence_char(\"programming\", \"m\") == 8\nlast_occurence_char(\"abcdefg\", \"z\") == None\nlast_occurence_char(\"banana\", \"a\") == 6\nlast_occurence_char(\"mississippi\", \"s\") == 7\n\"\"\"\n", "entry_point": "last_occurence_char", "test": "def check(candidate):\n\n    assert candidate(\"hello world\",'l')==10\n    assert candidate(\"language\",'g')==7\n    assert candidate(\"little\",'y')==None\n"}
{"task_id": "547", "prompt": "def Total_Hamming_Distance(n):\n\"\"\"\nWrite a python function to find the sum of hamming distances of all consecutive numbers from o to n.\nYour code should satisfy these tests:\nTotal_Hamming_Distance(8) == 15\nTotal_Hamming_Distance(10) == 18\nTotal_Hamming_Distance(16) == 31\nTotal_Hamming_Distance(256) == 511\nTotal_Hamming_Distance(3) == 4\n\"\"\"\n", "entry_point": "Total_Hamming_Distance", "test": "def check(candidate):\n\n    assert candidate(4) == 7\n    assert candidate(2) == 3\n    assert candidate(5) == 8\n"}
{"task_id": "548", "prompt": "def longest_increasing_subsequence(arr):\n\"\"\"\nWrite a function to find the length of the longest increasing subsequence of the given sequence.\nYour code should satisfy these tests:\nlongest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4\nlongest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4\nlongest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) == 1\n\"\"\"\n", "entry_point": "longest_increasing_subsequence", "test": "def check(candidate):\n\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60]) == 5\n    assert candidate([3, 10, 2, 1, 20]) == 3\n    assert candidate([50, 3, 10, 7, 40, 80]) == 4\n"}
{"task_id": "549", "prompt": "def odd_Num_Sum(n):\n\"\"\"\nWrite a python function to find the sum of fifth power of first n odd natural numbers.\nYour code should satisfy these tests:\nodd_Num_Sum(1) == 1\nodd_Num_Sum(2) == 1 + 3**5\nodd_Num_Sum(3) == 1 + 3**5 + 5**5\n\"\"\"\n", "entry_point": "odd_Num_Sum", "test": "def check(candidate):\n\n    assert candidate(1) == 1\n    assert candidate(2) == 244\n    assert candidate(3) == 3369\n"}
{"task_id": "550", "prompt": "def find_Max(arr,low,high):\n\"\"\"\nWrite a python function to find the maximum element in a sorted and rotated array.\nYour code should satisfy these tests:\nfind_Max([10, 5, 3, 1], 0, 3) == 5\n\"\"\"\n", "entry_point": "find_Max", "test": "def check(candidate):\n\n    assert candidate([2,3,5,6,9],0,4) == 9\n    assert candidate([3,4,5,2,1],0,4) == 5\n    assert candidate([1,2,3],0,2) == 3\n"}
{"task_id": "551", "prompt": "def extract_column(list1, n):\n\"\"\"\nWrite a function to extract a specified column from a given nested list.\nYour code should satisfy these tests:\nextract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 4, 7]\nextract_column([[10, 20], [30, 40], [50, 60]], 1) == [20, 40, 60]\nextract_column([[100, 200, 300], [400, 500, 600]], 2) == [300, 600]\n\"\"\"\n", "entry_point": "extract_column", "test": "def check(candidate):\n\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]\n"}
{"task_id": "552", "prompt": "def Seq_Linear(seq_nums):\n\"\"\"\nWrite a python function to check whether a given sequence is linear or not.\nYour code should satisfy these tests:\nSeq_Linear([2, 4, 6, 8, 10]) == \"Linear Sequence\"\nSeq_Linear([1, 3, 6, 10, 15]) == \"Non Linear Sequence\"\nSeq_Linear([5, 10, 15, 20, 25]) == \"Linear Sequence\"\n\"\"\"\n", "entry_point": "Seq_Linear", "test": "def check(candidate):\n\n    assert candidate([0,2,4,6,8,10]) == \"Linear Sequence\"\n    assert candidate([1,2,3]) == \"Linear Sequence\"\n    assert candidate([1,5,2]) == \"Non Linear Sequence\"\n"}
{"task_id": "553", "prompt": "def tuple_to_float(test_tup):\n\"\"\"\nWrite a function to convert the given tuple to a floating-point number.\nYour code should satisfy these tests:\ntuple_to_float((1, 2)) == 1.2\ntuple_to_float((123, 456)) == 123.456\ntuple_to_float((0, 99)) == 0.99\n\"\"\"\n", "entry_point": "tuple_to_float", "test": "def check(candidate):\n\n    assert candidate((4, 56)) == 4.56\n    assert candidate((7, 256)) == 7.256\n    assert candidate((8, 123)) == 8.123\n"}
{"task_id": "554", "prompt": "def Split(list):\n\"\"\"\nWrite a python function to find odd numbers from a mixed list.\nYour code should satisfy these tests:\nSplit([1, 2, 3, 4, 5]) == [1, 3, 5]\nSplit([10, 21, 32, 43, 54]) == [21, 43]\nSplit([7, 8, 10, 13, 17]) == [7, 13, 17]\n\"\"\"\n", "entry_point": "Split", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4,5,6]) == [1,3,5]\n    assert candidate([10,11,12,13]) == [11,13]\n    assert candidate([7,8,9,1]) == [7,9,1]\n"}
{"task_id": "555", "prompt": "def difference(n):\n\"\"\"\nWrite a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\nYour code should satisfy these tests:\ndifference(1) == 0\ndifference(2) == 6\ndifference(5) == 210\n\"\"\"\n", "entry_point": "difference", "test": "def check(candidate):\n\n    assert candidate(3) == 30\n    assert candidate(5) == 210\n    assert candidate(2) == 6\n"}
{"task_id": "556", "prompt": "def find_Odd_Pair(A,N):\n\"\"\"\nWrite a python function to count the pairs with xor as an odd number.\nYour code should satisfy these tests:\nfind_Odd_Pair([1, 2, 3, 4], 4) == 4\nfind_Odd_Pair([5, 5, 5, 5], 4) == 0\nfind_Odd_Pair([10, 21, 32, 43, 54], 5) == 6\n\"\"\"\n", "entry_point": "find_Odd_Pair", "test": "def check(candidate):\n\n    assert candidate([5,4,7,2,1],5) == 6\n    assert candidate([7,2,8,1,0,5,11],7) == 12\n    assert candidate([1,2,3],3) == 2\n"}
{"task_id": "557", "prompt": "def toggle_string(string):\n\"\"\"\nWrite a function to toggle characters case in a string.\nYour code should satisfy these tests:\ntoggle_string(\"Hello World\") == \"hELLO wORLD\"\ntoggle_string(\"Python3.8\") == \"pYTHON3.8\"\ntoggle_string(\"123abcXYZ\") == \"123ABCxyz\"\n\"\"\"\n", "entry_point": "toggle_string", "test": "def check(candidate):\n\n    assert candidate(\"Python\")==(\"pYTHON\")\n    assert candidate(\"Pangram\")==(\"pANGRAM\")\n    assert candidate(\"LIttLE\")==(\"liTTle\")\n"}
{"task_id": "558", "prompt": "def digit_distance_nums(n1, n2):\n\"\"\"\nWrite a python function to find the digit distance between two integers.\nYour code should satisfy these tests:\ndigit_distance_nums(123, 456) == 9\ndigit_distance_nums(100, 200) == 1\ndigit_distance_nums(999, 111) == 24\n\"\"\"\n", "entry_point": "digit_distance_nums", "test": "def check(candidate):\n\n    assert candidate(1,2) == 1\n    assert candidate(23,56) == 6\n    assert candidate(123,256) == 7\n"}
{"task_id": "559", "prompt": "def max_sub_array_sum(a, size):\n\"\"\"\nWrite a function to find the largest sum of contiguous subarray in the given array.\nYour code should satisfy these tests:\nmax_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6\nmax_sub_array_sum([1], 1) == 1\nmax_sub_array_sum([-1, -2, -3, -4], 4) == 0\n\"\"\"\n", "entry_point": "max_sub_array_sum", "test": "def check(candidate):\n\n    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n    assert candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\n    assert candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n"}
{"task_id": "560", "prompt": "def union_elements(test_tup1, test_tup2):\n\"\"\"\nWrite a function to find the union of elements of the given tuples.\nYour code should satisfy these tests:\nunion_elements((1, 2, 3), (3, 4, 5)) == (1, 2, 3, 4, 5)\nunion_elements(('a', 'b', 'c'), ('c', 'd', 'e')) == ('a', 'e', 'c', 'b', 'd')\nunion_elements((10, 20, 30), (30, 40, 50)) == (40, 10, 50, 20, 30)\n\"\"\"\n", "entry_point": "union_elements", "test": "def check(candidate):\n\n    assert candidate((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n    assert candidate((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\n    assert candidate((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)\n"}
{"task_id": "561", "prompt": "def assign_elements(test_list):\n\"\"\"\nWrite a function to assign with each element, its pair elements from other similar pairs in the given tuple.\nYour code should satisfy these tests:\nassign_elements([('a', 1), ('b', 2), ('a', 3)]) == {1: [], 'a': [1, 3], 2: [], 'b': [2], 3: []}\nassign_elements([('x', 10), ('y', 20), ('x', 30), ('z', 40)]) == {10: [], 'x': [10, 30], 20: [], 'y': [20], 30: [], 40: [], 'z': [40]}\nassign_elements([('m', 100), ('n', 200), ('o', 300)]) == {100: [], 'm': [100], 200: [], 'n': [200], 300: [], 'o': [300]}\n\"\"\"\n", "entry_point": "assign_elements", "test": "def check(candidate):\n\n    assert candidate([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\n    assert candidate([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\n    assert candidate([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}\n"}
{"task_id": "562", "prompt": "def Find_Max_Length(lst):\n\"\"\"\nWrite a python function to find the maximum length of sublist.\nYour code should satisfy these tests:\nFind_Max_Length([\"apple\", \"banana\", \"cherry\"]) == 6\nFind_Max_Length([\"dog\", \"cat\", \"elephant\"]) == 8\nFind_Max_Length([\"\", \"a\", \"ab\"]) == 2\n\"\"\"\n", "entry_point": "Find_Max_Length", "test": "def check(candidate):\n\n    assert candidate([[1],[1,4],[5,6,7,8]]) == 4\n    assert candidate([[0,1],[2,2,],[3,2,1]]) == 3\n    assert candidate([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5\n"}
{"task_id": "563", "prompt": "def extract_values(text):\n\"\"\"\nWrite a function to extract values between quotation marks of a string.\nYour code should satisfy these tests:\nextract_values('The \"quick\" brown \"fox\" jumps over the \"lazy\" dog.') == ['quick', 'fox', 'lazy']\nextract_values('She said, \"Hello, world!\" and then \"Goodbye!\"') == ['Hello, world!', 'Goodbye!']\nextract_values('No quotes here.') == []\n\"\"\"\n", "entry_point": "extract_values", "test": "def check(candidate):\n\n    assert candidate('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n    assert candidate('\"python\",\"program\",\"language\"')==['python','program','language']\n    assert candidate('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']\n"}
{"task_id": "564", "prompt": "def count_Pairs(arr,n):\n\"\"\"\nWrite a python function to count unequal element pairs from the given array.\nYour code should satisfy these tests:\ncount_Pairs([1, 2, 3, 4], 4) == 6\ncount_Pairs([1, 1, 1, 1], 4) == 0\ncount_Pairs([1, 2, 2, 3], 4) == 5\n\"\"\"\n", "entry_point": "count_Pairs", "test": "def check(candidate):\n\n    assert candidate([1,2,1],3) == 2\n    assert candidate([1,1,1,1],4) == 0\n    assert candidate([1,2,3,4,5],5) == 10\n"}
{"task_id": "565", "prompt": "def split(word):\n\"\"\"\nWrite a python function to split a string into characters.\nYour code should satisfy these tests:\nsplit(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nsplit(\"world\") == ['w', 'o', 'r', 'l', 'd']\nsplit(\"python\") == ['p', 'y', 't', 'h', 'o', 'n']\n\"\"\"\n", "entry_point": "split", "test": "def check(candidate):\n\n    assert candidate('python') == ['p','y','t','h','o','n']\n    assert candidate('Name') == ['N','a','m','e']\n    assert candidate('program') == ['p','r','o','g','r','a','m']\n"}
{"task_id": "566", "prompt": "def sum_digits(n):\n\"\"\"\nWrite a function to get the sum of a non-negative integer.\nYour code should satisfy these tests:\nsum_digits(123) == 6\nsum_digits(4567) == 22\nsum_digits(99999) == 45\n\"\"\"\n", "entry_point": "sum_digits", "test": "def check(candidate):\n\n    assert candidate(345)==12\n    assert candidate(12)==3\n    assert candidate(97)==16\n"}
{"task_id": "567", "prompt": "def issort_list(list1):\n\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nYour code should satisfy these tests:\nissort_list([1, 2, 3, 4, 5]) == True\nissort_list([5, 4, 3, 2, 1]) == False\nissort_list([1, 1, 1, 1, 1]) == True\n\"\"\"\n", "entry_point": "issort_list", "test": "def check(candidate):\n\n    assert candidate([1,2,4,6,8,10,12,14,16,17])==True\n    assert candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\n    assert candidate([1, 2, 4, 6, 8, 10,15,14,20])==False\n"}
{"task_id": "568", "prompt": "def empty_list(length):\n\"\"\"\nWrite a function to create a list of empty dictionaries.\nYour code should satisfy these tests:\nempty_list(0) == []\nempty_list(1) == [{}]\nempty_list(3) == [{}, {}, {}]\n\"\"\"\n", "entry_point": "empty_list", "test": "def check(candidate):\n\n    assert candidate(5)==[{},{},{},{},{}]\n    assert candidate(6)==[{},{},{},{},{},{}]\n    assert candidate(7)==[{},{},{},{},{},{},{}]\n"}
{"task_id": "569", "prompt": "def sort_sublists(list1):\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nYour code should satisfy these tests:\nsort_sublists([[3, 1, 2], [9, 7, 8], [6, 5, 4]]) == [[1, 2, 3], [7, 8, 9], [4, 5, 6]]\nsort_sublists([[10, 20], [5, 15], [30, 25]]) == [[10, 20], [5, 15], [25, 30]]\nsort_sublists([[], [1], [2, 3, 1]]) == [[], [1], [1, 2, 3]]\n\"\"\"\n", "entry_point": "sort_sublists", "test": "def check(candidate):\n\n    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    assert candidate([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n"}
{"task_id": "570", "prompt": "def remove_words(list1, charlist):\n\"\"\"\nWrite a function to remove words from a given list of strings containing a character or string.\nYour code should satisfy these tests:\nremove_words([\"hello world\", \"foo bar\"], [\"foo\"]) == [\"hello world\", \"bar\"]\nremove_words([\"python programming\", \"data science\"], [\"data\", \"python\"]) == [\"programming\", \"science\"]\nremove_words([\"remove these words\", \"keep those\"], [\"these\", \"those\"]) == [\"remove words\", \"keep\"]\n\"\"\"\n", "entry_point": "remove_words", "test": "def check(candidate):\n\n    assert candidate(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\n    assert candidate(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\n    assert candidate(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']\n"}
{"task_id": "571", "prompt": "def max_sum_pair_diff_lessthan_K(arr, N, K):\n\"\"\"\nWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\nYour code should satisfy these tests:\nmax_sum_pair_diff_lessthan_K([1, 3, 5, 7, 9], 5, 2) == 0\nmax_sum_pair_diff_lessthan_K([10, 20, 30, 40, 50], 5, 15) == 140\nmax_sum_pair_diff_lessthan_K([5, 8, 12, 15, 16], 5, 4) == 44\n\"\"\"\n", "entry_point": "max_sum_pair_diff_lessthan_K", "test": "def check(candidate):\n\n    assert candidate([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\n    assert candidate([5, 15, 10, 300], 4, 12) == 25\n    assert candidate([1, 2, 3, 4, 5, 6], 6, 6) == 21\n"}
{"task_id": "572", "prompt": "def two_unique_nums(nums):\n\"\"\"\nWrite a python function to remove two duplicate numbers from a given number of lists.\nYour code should satisfy these tests:\ntwo_unique_nums([4, 5, 5, 6, 7, 7, 8]) == [4, 6, 8]\ntwo_unique_nums([1, 2, 2, 3, 3, 4, 5, 5]) == [1, 4]\ntwo_unique_nums([10, 20, 20, 30, 30, 40, 40, 50]) == [10, 50]\n\"\"\"\n", "entry_point": "two_unique_nums", "test": "def check(candidate):\n\n    assert candidate([1,2,3,2,3,4,5]) == [1, 4, 5]\n    assert candidate([1,2,3,2,4,5]) == [1, 3, 4, 5]\n    assert candidate([1,2,3,4,5]) == [1, 2, 3, 4, 5]\n"}
{"task_id": "573", "prompt": "def unique_product(list_data):\n\"\"\"\nWrite a python function to calculate the product of the unique numbers of a given list.\nYour code should satisfy these tests:\nunique_product([2, 3, 5, 3, 2]) == 30\nunique_product([1, 1, 1, 1]) == 1\nunique_product([7, 11, 13, 17]) == 17017\n\"\"\"\n", "entry_point": "unique_product", "test": "def check(candidate):\n\n    assert candidate([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n    assert candidate([1, 2, 3, 1,]) == 6\n    assert candidate([7, 8, 9, 0, 1, 1]) == 0\n"}
{"task_id": "574", "prompt": "def surfacearea_cylinder(r,h):\n\"\"\"\nWrite a function to find the surface area of a cylinder.\nYour code should satisfy these tests:\nsurfacearea_cylinder(3, 5) == 150.792\nsurfacearea_cylinder(0, 10) == 0.0\nsurfacearea_cylinder(7, 2) == 395.829\nsurfacearea_cylinder(1, 1) == 12.566\nsurfacearea_cylinder(10, 10) == 1256.6000000000001\n\"\"\"\n", "entry_point": "surfacearea_cylinder", "test": "def check(candidate):\n\n    assert candidate(10,5)==942.45\n    assert candidate(4,5)==226.18800000000002\n    assert candidate(4,10)==351.848\n"}
{"task_id": "575", "prompt": "def count_no(A,N,L,R):\n\"\"\"\nWrite a python function to find nth number in a sequence which is not a multiple of a given number.\nYour code should satisfy these tests:\ncount_no(3, 2, 1, 10) == 2\ncount_no(5, 3, 5, 20) == 8\ncount_no(7, 4, 1, 50) == 4\n\"\"\"\n", "entry_point": "count_no", "test": "def check(candidate):\n\n    assert candidate(2,3,1,10) == 5\n    assert candidate(3,6,4,20) == 11\n    assert candidate(5,10,4,20) == 16\n"}
{"task_id": "576", "prompt": "def is_Sub_Array(A,B,n,m):\n\"\"\"\nWrite a python function to check whether an array is subarray of another or not.\nYour code should satisfy these tests:\nis_Sub_Array([2, 3, 4, 5], [3, 4], 4, 2) == True\nis_Sub_Array([1, 2, 3, 4, 5], [6, 7], 5, 2) == False\nis_Sub_Array([10, 20, 30, 40, 50], [30, 40, 50], 5, 3) == True\n\"\"\"\n", "entry_point": "is_Sub_Array", "test": "def check(candidate):\n\n    assert candidate([1,4,3,5],[1,2],4,2) == False\n    assert candidate([1,2,1],[1,2,1],3,3) == True\n    assert candidate([1,0,2,2],[2,2,0],4,3) ==False\n"}
{"task_id": "577", "prompt": "def last_Digit_Factorial(n):\n\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nYour code should satisfy these tests:\nlast_Digit_Factorial(5) == 0\nlast_Digit_Factorial(10) == 0\nlast_Digit_Factorial(15) == 0\n\"\"\"\n", "entry_point": "last_Digit_Factorial", "test": "def check(candidate):\n\n    assert candidate(4) == 4\n    assert candidate(21) == 0\n    assert candidate(30) == 0\n"}
{"task_id": "578", "prompt": "def interleave_lists(list1,list2,list3):\n\"\"\"\nWrite a function to interleave lists of the same length.\n\"\"\"\n", "entry_point": "interleave_lists", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    assert candidate([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\n    assert candidate([11,44], [10,15], [20,5])==[11,10,20,44,15,5]\n"}
{"task_id": "579", "prompt": "def find_dissimilar(test_tup1, test_tup2):\n\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nYour code should satisfy these tests:\nfind_dissimilar((1, 2, 3), (2, 3, 4)) == (1, 4)\nfind_dissimilar((5, 6, 7), (7, 8, 9)) == (5, 6, 8, 9)\nfind_dissimilar(('a', 'b', 'c'), ('b', 'c', 'd')) == ('d', 'a')\nfind_dissimilar(('x', 'y'), ('y', 'z')) == ('z', 'x')\nfind_dissimilar(('apple', 'banana'), ('banana', 'cherry')) == ('cherry', 'apple')\n\"\"\"\n", "entry_point": "find_dissimilar", "test": "def check(candidate):\n\n    assert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n    assert candidate((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\n    assert candidate((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)\n"}
{"task_id": "580", "prompt": "def even_ele(test_tuple, even_fnc):\n\"\"\"\nWrite a function to extract the even elements in the nested mixed tuple.\nYour code should satisfy these tests:\nextract_even((1, 2, 3, 4, 5)) == (2, 4)\nextract_even((10, (11, 12), 13, (14, 15))) == (10, (12,), (14,))\nextract_even((1, 3, 5, 7)) == ()\nextract_even((2, 4, 6, (8, 9), 10)) == (2, 4, 6, (8,), 10)\nextract_even((0, (1, 2, (3, 4), 5), 6)) == (0, (2, (4,)), 6)\n\"\"\"\n", "entry_point": "even_ele", "test": "def check(candidate):\n\n    assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n    assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\n    assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)\n"}
{"task_id": "581", "prompt": "def surface_Area(b,s):\n\"\"\"\nWrite a python function to find the surface area of the square pyramid.\nYour code should satisfy these tests:\nsurface_Area(3, 4) == 33\nsurface_Area(5, 6) == 85\nsurface_Area(7, 8) == 161\n\"\"\"\n", "entry_point": "surface_Area", "test": "def check(candidate):\n\n    assert candidate(3,4) == 33\n    assert candidate(4,5) == 56\n    assert candidate(1,2) == 5\n"}
{"task_id": "582", "prompt": "def my_dict(dict1):\n\"\"\"\nWrite a function to check if a dictionary is empty or not.\nYour code should satisfy these tests:\nmy_dict({}) == True\nmy_dict({'key': 'value'}) == False\nmy_dict({'a': 1, 'b': 2}) == False\n\"\"\"\n", "entry_point": "my_dict", "test": "def check(candidate):\n\n    assert candidate({10})==False\n    assert candidate({11})==False\n    assert candidate({})==True\n"}
{"task_id": "583", "prompt": "def catalan_number(num):\n\"\"\"\nWrite a function for nth catalan number.\nYour code should satisfy these tests:\ncatalan_number(0) == 1\ncatalan_number(1) == 1\ncatalan_number(5) == 42\n\"\"\"\n", "entry_point": "catalan_number", "test": "def check(candidate):\n\n    assert candidate(10)==16796\n    assert candidate(9)==4862\n    assert candidate(7)==429\n"}
{"task_id": "584", "prompt": "def find_adverbs(text):\n\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence by using regex.\nYour code should satisfy these tests:\nfind_adverbs(\"She quickly and quietly left the room.\") == '4-11: quickly'\nfind_adverbs(\"He ran smoothly over the bumpy road.\") == '7-15: smoothly'\nfind_adverbs(\"The cat purred contentedly.\") == '15-26: contentedly'\n\"\"\"\n", "entry_point": "find_adverbs", "test": "def check(candidate):\n\n    assert candidate(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\n    assert candidate(\"Please handle the situation carefuly\") == '28-36: carefuly'\n    assert candidate(\"Complete the task quickly\") == '18-25: quickly'\n"}
{"task_id": "585", "prompt": "def expensive_items(items,n):\n\"\"\"\nWrite a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\"\"\"\n", "entry_point": "expensive_items", "test": "def check(candidate):\n\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]\n"}
{"task_id": "586", "prompt": "def split_Arr(a,n,k):\n\"\"\"\nWrite a python function to split the array and add the first part to the end.\nYour code should satisfy these tests:\nsplit_Arr([1, 2, 3, 4, 5], 5, 2) == [3, 4, 5, 1, 2]\nsplit_Arr([10, 20, 30, 40, 50, 60], 6, 3) == [40, 50, 60, 10, 20, 30]\nsplit_Arr(['a', 'b', 'c', 'd', 'e'], 5, 1) == ['b', 'c', 'd', 'e', 'a']\n\"\"\"\n", "entry_point": "split_Arr", "test": "def check(candidate):\n\n    assert candidate([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\n    assert candidate([1,2,3,4],4,1) == [2,3,4,1]\n    assert candidate([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]\n"}
{"task_id": "587", "prompt": "def list_tuple(listx):\n\"\"\"\nWrite a function to convert a list to a tuple.\nYour code should satisfy these tests:\nlist_tuple([1, 2, 3]) == (1, 2, 3)\nlist_tuple(['a', 'b', 'c']) == ('a', 'b', 'c')\nlist_tuple([True, False, True]) == (True, False, True)\n\"\"\"\n", "entry_point": "list_tuple", "test": "def check(candidate):\n\n    assert candidate([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n    assert candidate([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\n    assert candidate([58,44,56])==(58,44,56)\n"}
{"task_id": "588", "prompt": "def big_diff(nums):\n\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given array.\nYour code should satisfy these tests:\nbig_diff([10, 3, 5, 6]) == 7\nbig_diff([1, 2, 3, 4, 5]) == 4\nbig_diff([-10, -20, -30, -40]) == 30\n\"\"\"\n", "entry_point": "big_diff", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4]) == 3\n    assert candidate([4,5,12]) == 8\n    assert candidate([9,2,3]) == 7\n"}
{"task_id": "589", "prompt": "def perfect_squares(a, b):\n\"\"\"\nWrite a function to find perfect squares between two given numbers.\nYour code should satisfy these tests:\nperfect_squares(1, 10) == [1, 4, 9]\nperfect_squares(11, 25) == [16, 25]\nperfect_squares(26, 50) == [36, 49]\n\"\"\"\n", "entry_point": "perfect_squares", "test": "def check(candidate):\n\n    assert candidate(1,30)==[1, 4, 9, 16, 25]\n    assert candidate(50,100)==[64, 81, 100]\n    assert candidate(100,200)==[100, 121, 144, 169, 196]\n"}
{"task_id": "590", "prompt": "def polar_rect(x,y):\n\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nYour code should satisfy these tests:\npolar_rect(1, 1) == ((1.4142135623730951, 0.7853981633974483), (-2+2.4492935982947064e-16j))\npolar_rect(0, 0) == ((0.0, 0.0), (-2+2.4492935982947064e-16j))\npolar_rect(-1, -1) == ((1.4142135623730951, -2.356194490192345), (-2+2.4492935982947064e-16j))\n\"\"\"\n", "entry_point": "polar_rect", "test": "def check(candidate):\n\n    assert candidate(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    assert candidate(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\n    assert candidate(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))\n"}
{"task_id": "591", "prompt": "def swap_List(newList):\n\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nYour code should satisfy these tests:\nswap_List([1, 2, 3, 4]) == [4, 2, 3, 1]\nswap_List(['a', 'b', 'c']) == ['c', 'b', 'a']\nswap_List([True, False, True, False]) == [False, False, True, True]\n\"\"\"\n", "entry_point": "swap_List", "test": "def check(candidate):\n\n    assert candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n    assert candidate([1, 2, 3]) == [3, 2, 1]\n    assert candidate([4, 5, 6]) == [6, 5, 4]\n"}
{"task_id": "592", "prompt": "def binomial_Coeff(n,k):\n\"\"\"\nWrite a python function to find sum of product of binomial co-efficients.\nYour code should satisfy these tests:\nbinomial_Coeff(5, 2) == 10\nbinomial_Coeff(6, 3) == 20\nbinomial_Coeff(7, 4) == 35\nbinomial_Coeff(8, 2) == 28\nbinomial_Coeff(9, 5) == 126\n\"\"\"\n", "entry_point": "binomial_Coeff", "test": "def check(candidate):\n\n    assert sum_Of_product(3) == 15\n    assert sum_Of_product(4) == 56\n    assert sum_Of_product(1) == 1\n"}
{"task_id": "593", "prompt": "def removezero_ip(ip):\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nYour code should satisfy these tests:\nremovezero_ip(\"192.001.000.001\") == '192.1..1'\nremovezero_ip(\"000.000.000.000\") == '000...'\nremovezero_ip(\"10.00.0.001\") == '10...1'\n\"\"\"\n", "entry_point": "removezero_ip", "test": "def check(candidate):\n\n    assert candidate(\"216.08.094.196\")==('216.8.94.196')\n    assert candidate(\"12.01.024\")==('12.1.24')\n    assert candidate(\"216.08.094.0196\")==('216.8.94.196')\n"}
{"task_id": "594", "prompt": "def diff_even_odd(list1):\n\"\"\"\nWrite a function to find the difference of first even and odd number of a given list.\nYour code should satisfy these tests:\ndiff_even_odd([2, 4, 6, 8, 10]) == 3\ndiff_even_odd([1, 3, 5, 7, 9]) == -2\ndiff_even_odd([11, 13, 2, 17, 19]) == -9\n\"\"\"\n", "entry_point": "diff_even_odd", "test": "def check(candidate):\n\n    assert candidate([1,3,5,7,4,1,6,8])==3\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==1\n    assert candidate([1,5,7,9,10])==9\n"}
{"task_id": "595", "prompt": "def min_Swaps(str1,str2):\n\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary string to another.\nYour code should satisfy these tests:\nmin_Swaps(\"1100\", \"1001\") == 1\nmin_Swaps(\"1010\", \"0101\") == 2\nmin_Swaps(\"1111\", \"0000\") == 2\nmin_Swaps(\"1001\", \"1001\") == 0\nmin_Swaps(\"0011\", \"1100\") == 2\n\"\"\"\n", "entry_point": "min_Swaps", "test": "def check(candidate):\n\n    assert candidate(\"1101\",\"1110\") == 1\n    assert candidate(\"111\",\"000\") == \"Not Possible\"\n    assert candidate(\"111\",\"110\") == \"Not Possible\"\n"}
{"task_id": "596", "prompt": "def tuple_size(tuple_list):\n\"\"\"\nWrite a function to find the size of the given tuple.\nYour code should satisfy these tests:\ntuple_size((1, 2, 3)) == 64\ntuple_size(('a', 'b', 'c', 'd')) == 72\ntuple_size((1.1, 2.2, 3.3, 4.4, 5.5)) == 80\n\"\"\"\n", "entry_point": "tuple_size", "test": "def check(candidate):\n\n    assert candidate((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n    assert candidate((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\n    assert candidate(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\n"}
{"task_id": "597", "prompt": "def find_kth(arr1, arr2, m, n, k):\n\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nYour code should satisfy these tests:\nfind_kth([1, 3, 8], [2, 4, 9], 3, 3, 3) == 3\nfind_kth([5, 6, 7], [1, 2, 3], 3, 3, 4) == 5\nfind_kth([10, 20, 30], [5, 15, 25], 3, 3, 5) == 25\n\"\"\"\n", "entry_point": "find_kth", "test": "def check(candidate):\n\n    assert candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\n    assert candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\n    assert candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8\n"}
{"task_id": "598", "prompt": "def armstrong_number(number):\n\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nYour code should satisfy these tests:\narmstrong_number(153) == True\narmstrong_number(370) == True\narmstrong_number(9474) == True\n\"\"\"\n", "entry_point": "armstrong_number", "test": "def check(candidate):\n\n    assert candidate(153)==True\n    assert candidate(259)==False\n    assert candidate(4458)==False\n"}
{"task_id": "599", "prompt": "def sum_average(number):\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nYour code should satisfy these tests:\nsum_average(5) == (15, 3.0)\nsum_average(10) == (55, 5.5)\nsum_average(1) == (1, 1.0)\n\"\"\"\n", "entry_point": "sum_average", "test": "def check(candidate):\n\n    assert candidate(10)==(55, 5.5)\n    assert candidate(15)==(120, 8.0)\n    assert candidate(20)==(210, 10.5)\n"}
{"task_id": "600", "prompt": "def is_Even(n):\n\"\"\"\nWrite a python function to check whether the given number is even or not using bitwise operator.\nYour code should satisfy these tests:\nis_Even(2) == True\nis_Even(3) == False\nis_Even(0) == True\n\"\"\"\n", "entry_point": "is_Even", "test": "def check(candidate):\n\n    assert candidate(1) == False\n    assert candidate(2) == True\n    assert candidate(3) == False\n"}
{"task_id": "601", "prompt": "def __init__(self, a, b):\n\"\"\"\nWrite a function to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\n", "entry_point": "__init__", "test": "def check(candidate):\n\n    assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\n    assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\n    assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5\n"}
{"task_id": "602", "prompt": "def first_repeated_char(str1):\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\nYour code should satisfy these tests:\nfirst_repeated_char(\"programming\") == \"r\"\nfirst_repeated_char(\"abcdefg\") == \"None\"\nfirst_repeated_char(\"aabbcc\") == \"a\"\n\"\"\"\n", "entry_point": "first_repeated_char", "test": "def check(candidate):\n\n    assert candidate(\"abcabc\") == \"a\"\n    assert candidate(\"abc\") == \"None\"\n    assert candidate(\"123123\") == \"1\"\n"}
{"task_id": "603", "prompt": "def get_ludic(n):\n\"\"\"\nWrite a function to get a lucid number smaller than or equal to n.\nYour code should satisfy these tests:\nget_ludic(10) == [1, 2, 3, 5, 7]\nget_ludic(15) == [1, 2, 3, 5, 7, 11, 13]\nget_ludic(20) == [1, 2, 3, 5, 7, 11, 13, 17]\nget_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nget_ludic(30) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29]\n\"\"\"\n", "entry_point": "get_ludic", "test": "def check(candidate):\n\n    assert candidate(10) == [1, 2, 3, 5, 7]\n    assert candidate(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n    assert candidate(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n"}
{"task_id": "604", "prompt": "def reverse_words(s):\n\"\"\"\nWrite a function to reverse words in a given string.\nYour code should satisfy these tests:\nreverse_words(\"hello world\") == \"world hello\"\nreverse_words(\"Python is fun\") == \"fun is Python\"\nreverse_words(\"OpenAI GPT-4\") == \"GPT-4 OpenAI\"\n\"\"\"\n", "entry_point": "reverse_words", "test": "def check(candidate):\n\n    assert candidate(\"python program\")==(\"program python\")\n    assert candidate(\"java language\")==(\"language java\")\n    assert candidate(\"indian man\")==(\"man indian\")\n"}
{"task_id": "605", "prompt": "def prime_num(num):\n\"\"\"\nWrite a function to check if the given integer is a prime number.\nYour code should satisfy these tests:\nprime_num(7) == True\nprime_num(10) == False\nprime_num(17) == True\nprime_num(21) == True\nprime_num(29) == True\n\"\"\"\n", "entry_point": "prime_num", "test": "def check(candidate):\n\n    assert candidate(13)==True\n    assert candidate(7)==True\n    assert candidate(-1010)==False\n"}
{"task_id": "606", "prompt": "def radian_degree(degree):\n\"\"\"\nWrite a function to convert degrees to radians.\nYour code should satisfy these tests:\nradian_degree(0) == 0.0\nradian_degree(180) == 3.141592653589793\nradian_degree(90) == 1.5707963267948966\n\"\"\"\n", "entry_point": "radian_degree", "test": "def check(candidate):\n\n    assert candidate(90)==1.5707963267948966\n    assert candidate(60)==1.0471975511965976\n    assert candidate(120)==2.0943951023931953\n"}
{"task_id": "607", "prompt": "def find_literals(text, pattern):\n\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\nYour code should satisfy these tests:\nfind_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nfind_literals('The quick brown fox jumps over the lazy fox.', 'fox') == ('fox', 16, 19)\nfind_literals('A quick brown fox jumps over the lazy dog.', 'quick') == ('quick', 2, 7)\n\"\"\"\n", "entry_point": "find_literals", "test": "def check(candidate):\n\n    assert candidate('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n    assert candidate('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\n    assert candidate('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n"}
{"task_id": "608", "prompt": "def bell_Number(n):\n\"\"\"\nWrite a python function to find nth bell number.\nYour code should satisfy these tests:\nbell_Number(2) == 2\nbell_Number(3) == 5\nbell_Number(4) == 15\nbell_Number(5) == 52\nbell_Number(6) == 203\n\"\"\"\n", "entry_point": "bell_Number", "test": "def check(candidate):\n\n    assert candidate(2) == 2\n    assert candidate(3) == 5\n    assert candidate(4) == 15\n"}
{"task_id": "609", "prompt": "def floor_Min(A,B,N):\n\"\"\"\nWrite a python function to find minimum possible value for the given periodic function.\nYour code should satisfy these tests:\nfloor_Min(10, 5, 3) == 8\nfloor_Min(7, 3, 10) == 23\nfloor_Min(15, 4, 6) == 22\nfloor_Min(20, 10, 15) == 30\nfloor_Min(12, 7, 8) == 13\n\"\"\"\n", "entry_point": "floor_Min", "test": "def check(candidate):\n\n    assert candidate(10,20,30) == 15\n    assert candidate(1,2,1) == 0\n    assert candidate(11,10,9) == 9\n"}
{"task_id": "610", "prompt": "def remove_kth_element(list1, L):\n\"\"\"\nWrite a python function to remove the k'th element from a given list.\nYour code should satisfy these tests:\nremove_kth_element([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5]\nremove_kth_element(['a', 'b', 'c', 'd'], 1) == ['b', 'c', 'd']\nremove_kth_element([10, 20, 30, 40, 50], 5) == [10, 20, 30, 40]\n\"\"\"\n", "entry_point": "remove_kth_element", "test": "def check(candidate):\n\n    assert candidate([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]\n"}
{"task_id": "611", "prompt": "def max_of_nth(test_list, N):\n\"\"\"\nWrite a function to find the maximum of nth column from the given tuple list.\nYour code should satisfy these tests:\nmax_of_nth([[10, 20, 30], [40, 50, 60], [70, 80, 90]], 1) == 80\nmax_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 9\nmax_of_nth([[5, 15, 25], [35, 45, 55], [65, 75, 85]], 0) == 65\n\"\"\"\n", "entry_point": "max_of_nth", "test": "def check(candidate):\n\n    assert candidate([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\n    assert candidate([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\n    assert candidate([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11\n"}
{"task_id": "612", "prompt": "def merge(lst):\n\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\nYour code should satisfy these tests:\nmerge([[1, 2], [3, 4]]) == [[1, 3], [2, 4]]\nmerge([[5, 6, 7], [8, 9, 10]]) == [[5, 8], [6, 9], [7, 10]]\nmerge([['a', 'b'], ['c', 'd'], ['e', 'f']]) == [['a', 'c', 'e'], ['b', 'd', 'f']]\n\"\"\"\n", "entry_point": "merge", "test": "def check(candidate):\n\n    assert candidate([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n    assert candidate([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\n    assert candidate([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]\n"}
{"task_id": "613", "prompt": "def maximum_value(test_list):\n\"\"\"\nWrite a function to find the maximum value in record list as tuple attribute in the given tuple list.\nYour code should satisfy these tests:\nmaximum_value([('a', [1, 2, 3]), ('b', [4, 5, 6])]) == [('a', 3), ('b', 6)]\nmaximum_value([('x', [10, 20, 30]), ('y', [5, 15, 25])]) == [('x', 30), ('y', 25)]\nmaximum_value([('m', [100]), ('n', [200, 300, 400])]) == [('m', 100), ('n', 400)]\n\"\"\"\n", "entry_point": "maximum_value", "test": "def check(candidate):\n\n    assert candidate([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\n    assert candidate([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\n    assert candidate([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]\n"}
{"task_id": "614", "prompt": "def cummulative_sum(test_list):\n\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nYour code should satisfy these tests:\ncummulative_sum([[1, 2], [3, 4]]) == 10\ncummulative_sum([[5], [10, 15], [20]]) == 50\ncummulative_sum([[0, 0, 0], [0]]) == 0\n\"\"\"\n", "entry_point": "cummulative_sum", "test": "def check(candidate):\n\n    assert candidate([(1, 3), (5, 6, 7), (2, 6)]) == 30\n    assert candidate([(2, 4), (6, 7, 8), (3, 7)]) == 37\n    assert candidate([(3, 5), (7, 8, 9), (4, 8)]) == 44\n"}
{"task_id": "615", "prompt": "def average_tuple(nums):\n\"\"\"\nWrite a function to find average value of the numbers in a given tuple of tuples.\nYour code should satisfy these tests:\naverage_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [4.0, 5.0, 6.0]\naverage_tuple(((10, 20), (30, 40), (50, 60))) == [30.0, 40.0]\naverage_tuple(((1, 1, 1), (2, 2, 2), (3, 3, 3))) == [2.0, 2.0, 2.0]\n\"\"\"\n", "entry_point": "average_tuple", "test": "def check(candidate):\n\n    assert candidate(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n    assert candidate(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\n    assert candidate( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]\n"}
{"task_id": "616", "prompt": "def tuple_modulo(test_tup1, test_tup2):\n\"\"\"\nWrite a function to perfom the modulo of tuple elements in the given two tuples.\nYour code should satisfy these tests:\ntuple_modulo((10, 20, 30), (3, 5, 7)) == (1, 0, 2)\ntuple_modulo((15, 25, 35), (4, 6, 8)) == (3, 1, 3)\ntuple_modulo((100, 200, 300), (9, 11, 13)) == (1, 2, 1)\n\"\"\"\n", "entry_point": "tuple_modulo", "test": "def check(candidate):\n\n    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n"}
{"task_id": "617", "prompt": "def min_Jumps(a, b, d):\n\"\"\"\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\"\"\"\n", "entry_point": "min_Jumps", "test": "def check(candidate):\n\n    assert candidate(3,4,11)==3.5\n    assert candidate(3,4,0)==0\n    assert candidate(11,14,11)==1\n"}
{"task_id": "618", "prompt": "def div_list(nums1,nums2):\n\"\"\"\nWrite a function to divide two lists using map and lambda function.\nYour code should satisfy these tests:\ndiv_list([10, 20, 30], [2, 4, 5]) == [5.0, 5.0, 6.0]\ndiv_list([100, 50, 25], [10, 5, 5]) == [10.0, 10.0, 5.0]\ndiv_list([8, 16, 32], [2, 4, 8]) == [4.0, 4.0, 4.0]\n\"\"\"\n", "entry_point": "div_list", "test": "def check(candidate):\n\n    assert candidate([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n    assert candidate([3,2],[1,4])==[3.0, 0.5]\n    assert candidate([90,120],[50,70])==[1.8, 1.7142857142857142]\n"}
{"task_id": "619", "prompt": "def move_num(test_str):\n\"\"\"\nWrite a function to move all the numbers in it to the given string.\nYour code should satisfy these tests:\nmove_num(\"abc123\") == \"abc123\"\nmove_num(\"123abc\") == \"abc123\"\nmove_num(\"a1b2c3\") == \"abc123\"\n\"\"\"\n", "entry_point": "move_num", "test": "def check(candidate):\n\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n"}
{"task_id": "620", "prompt": "def largest_subset(a, n):\n\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\nYour code should satisfy these tests:\nlargest_subset([1, 2, 3, 4, 5, 6], 6) == 3\nlargest_subset([10, 5, 3, 15, 20], 5) == 3\nlargest_subset([18, 1, 3, 6, 2, 9], 6) == 5\n\"\"\"\n", "entry_point": "largest_subset", "test": "def check(candidate):\n\n    assert candidate([ 1, 3, 6, 13, 17, 18 ], 6) == 4\n    assert candidate([10, 5, 3, 15, 20], 5) == 3\n    assert candidate([18, 1, 3, 6, 13, 17], 6) == 4\n"}
{"task_id": "621", "prompt": "def increment_numerics(test_list, K):\n\"\"\"\nWrite a function to increment the numeric values in the given strings by k.\nYour code should satisfy these tests:\nincrement_numerics(['123', 'abc', '456'], 10) == ['133', 'abc', '466']\nincrement_numerics(['0', '99', 'hello', 'world'], 1) == ['1', '100', 'hello', 'world']\nincrement_numerics(['test', '12', '34', '56'], 5) == ['test', '17', '39', '61']\n\"\"\"\n", "entry_point": "increment_numerics", "test": "def check(candidate):\n\n    assert candidate([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\n    assert candidate([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\n    assert candidate([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']\n"}
{"task_id": "622", "prompt": "def get_median(arr1, arr2, n):\n\"\"\"\nWrite a function to find the median of two sorted arrays of same size.\nYour code should satisfy these tests:\nget_median([1, 3, 8], [7, 9, 10], 3) == 7.5\nget_median([1, 2, 3, 4], [5, 6, 7, 8], 4) == 4.5\nget_median([10, 20, 30, 40, 50], [5, 15, 25, 35, 45], 5) == 27.5\n\"\"\"\n", "entry_point": "get_median", "test": "def check(candidate):\n\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n"}
{"task_id": "623", "prompt": "def nth_nums(nums,n):\n\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\nYour code should satisfy these tests:\nnth_nums([1, 2, 3, 4], 2) == [1, 4, 9, 16]\nnth_nums([5, 6, 7], 3) == [125, 216, 343]\nnth_nums([0, 10, 20], 1) == [0, 10, 20]\n\"\"\"\n", "entry_point": "nth_nums", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10,20,30],3)==([1000, 8000, 27000])\n    assert candidate([12,15],5)==([248832, 759375])\n"}
{"task_id": "624", "prompt": "def is_upper(string):\n\"\"\"\nWrite a python function to convert the given string to upper case.\nYour code should satisfy these tests:\nis_upper(\"HELLO\") == 'HELLO'\nis_upper(\"hello\") == 'HELLO'\nis_upper(\"Hello\") == 'HELLO'\n\"\"\"\n", "entry_point": "is_upper", "test": "def check(candidate):\n\n    assert candidate(\"person\") ==\"PERSON\"\n    assert candidate(\"final\") == \"FINAL\"\n    assert candidate(\"Valid\") == \"VALID\"\n"}
{"task_id": "625", "prompt": "def swap_List(newList):\n\"\"\"\nWrite a python function to interchange first and last elements in a given list.\nYour code should satisfy these tests:\nswap_List([1, 2, 3, 4]) == [4, 2, 3, 1]\nswap_List(['a', 'b', 'c']) == ['c', 'b', 'a']\nswap_List([True, False, True, False]) == [False, False, True, True]\n\"\"\"\n", "entry_point": "swap_List", "test": "def check(candidate):\n\n    assert candidate([1,2,3]) == [3,2,1]\n    assert candidate([1,2,3,4,4]) == [4,2,3,4,1]\n    assert candidate([4,5,6]) == [6,5,4]\n"}
{"task_id": "626", "prompt": "def triangle_area(r):\n\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\nYour code should satisfy these tests:\ntriangle_area(5) == 25\ntriangle_area(0) == 0\ntriangle_area(-3) == -1\n\"\"\"\n", "entry_point": "triangle_area", "test": "def check(candidate):\n\n    assert candidate(0) == 0\n    assert candidate(-1) == -1\n    assert candidate(2) == 4\n"}
{"task_id": "627", "prompt": "def find_First_Missing(array,start,end):\n\"\"\"\nWrite a python function to find the smallest missing number from the given array.\nYour code should satisfy these tests:\nfind_First_Missing([0, 1, 2, 3, 5, 6, 7], 0, 6) == 4\nfind_First_Missing([1, 2, 3, 4, 5, 6, 7], 0, 6) == 0\nfind_First_Missing([0, 1, 2, 4, 5, 6, 7, 8], 0, 7) == 3\n\"\"\"\n", "entry_point": "find_First_Missing", "test": "def check(candidate):\n\n    assert candidate([0,1,2,3],0,3) == 4\n    assert candidate([0,1,2,6,9],0,4) == 3\n    assert candidate([2,3,5,8,9],0,4) == 0\n"}
{"task_id": "628", "prompt": "def replace_spaces(string):\n\"\"\"\nWrite a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\nYour code should satisfy these tests:\nreplace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\nreplace_spaces(\"Hello World  \") == \"Hello%20World\"\nreplace_spaces(\"Python Programming   \") == \"Python%20Programming\"\n\"\"\"\n", "entry_point": "replace_spaces", "test": "def check(candidate):\n\n    assert candidate(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n    assert candidate(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\n    assert candidate(\"I love Coding\") == 'I%20love%20Coding'\n"}
{"task_id": "629", "prompt": "def Split(list):\n\"\"\"\nWrite a python function to find even numbers from a mixed list.\nYour code should satisfy these tests:\nSplit([1, 2, 3, 4, 5, 6]) == [2, 4, 6]\nSplit([11, 22, 33, 44, 55]) == [22, 44]\nSplit([7, 8, 10, 13, 17, 20]) == [8, 10, 20]\n\"\"\"\n", "entry_point": "Split", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4,5]) == [2,4]\n    assert candidate([4,5,6,7,8,0,1]) == [4,6,8,0]\n    assert candidate ([8,12,15,19]) == [8,12]\n"}
{"task_id": "630", "prompt": "def adjac(ele, sub = []):\n\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\n", "entry_point": "adjac", "test": "def check(candidate):\n\n    assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n    assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n"}
{"task_id": "631", "prompt": "def replace_spaces(text):\n\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\nYour code should satisfy these tests:\nreplace_spaces('Hello World') == 'Hello_World'\nreplace_spaces('Python Exercises') == 'Python_Exercises'\nreplace_spaces('Replace   multiple spaces') == 'Replace___multiple_spaces'\n\"\"\"\n", "entry_point": "replace_spaces", "test": "def check(candidate):\n\n    assert candidate('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n    assert candidate('The Avengers') == 'The_Avengers'\n    assert candidate('Fast and Furious') == 'Fast_and_Furious'\n"}
{"task_id": "632", "prompt": "def move_zero(num_list):\n\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nYour code should satisfy these tests:\nmove_zero([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\nmove_zero([0, 0, 1, 0, 4, 5]) == [1, 4, 5, 0, 0, 0]\nmove_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\"\"\"\n", "entry_point": "move_zero", "test": "def check(candidate):\n\n    assert candidate([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n    assert candidate([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\n    assert candidate([0,1,0,1,1]) == [1,1,1,0,0]\n"}
{"task_id": "633", "prompt": "def pair_OR_Sum(arr,n):\n\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given array.\nYour code should satisfy these tests:\npair_OR_Sum([1, 2, 3], 3) == 6\npair_OR_Sum([4, 5, 6, 7], 4) == 12\npair_OR_Sum([0, 1, 1, 0], 4) == 4\n\"\"\"\n", "entry_point": "pair_OR_Sum", "test": "def check(candidate):\n\n    assert candidate([5,9,7,6],4) == 47\n    assert candidate([7,3,5],3) == 12\n    assert candidate([7,3],2) == 4\n"}
{"task_id": "634", "prompt": "def even_Power_Sum(n):\n\"\"\"\nWrite a python function to find the sum of fourth power of first n even natural numbers.\nYour code should satisfy these tests:\neven_Power_Sum(1) == 16\neven_Power_Sum(2) == 272\neven_Power_Sum(3) == 1568\n\"\"\"\n", "entry_point": "even_Power_Sum", "test": "def check(candidate):\n\n    assert candidate(2) == 272\n    assert candidate(3) == 1568\n    assert candidate(4) == 5664\n"}
{"task_id": "635", "prompt": "def heap_sort(iterable):\n\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\nYour code should satisfy these tests:\nheap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]\nheap_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nheap_sort([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]\n\"\"\"\n", "entry_point": "heap_sort", "test": "def check(candidate):\n\n    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate( [7, 1, 9, 5])==[1,5,7,9]\n"}
{"task_id": "636", "prompt": "def Check_Solution(a,b,c):\n\"\"\"\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\nYour code should satisfy these tests:\nCheck_Solution(1, 2, 1) == \"Yes\"\nCheck_Solution(5, 5, 5) == \"Yes\"\nCheck_Solution(10, 20, 30) == \"No\"\nCheck_Solution(0, 0, 0) == \"Yes\"\nCheck_Solution(-1, -2, -1) == \"Yes\"\n\"\"\"\n", "entry_point": "Check_Solution", "test": "def check(candidate):\n\n    assert candidate(2,0,2) == \"Yes\"\n    assert candidate(2,-5,2) == \"Yes\"\n    assert candidate(1,2,3) == \"No\"\n"}
{"task_id": "637", "prompt": "def noprofit_noloss(actual_cost,sale_amount):\n\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nYour code should satisfy these tests:\nnoprofit_noloss(100, 100) == True\nnoprofit_noloss(200, 150) == False\nnoprofit_noloss(150, 200) == False\n\"\"\"\n", "entry_point": "noprofit_noloss", "test": "def check(candidate):\n\n    assert candidate(1500,1200)==False\n    assert candidate(100,100)==True\n    assert candidate(2000,5000)==False\n"}
{"task_id": "638", "prompt": "def wind_chill(v,t):\n\"\"\"\nWrite a function to calculate wind chill index.\nYour code should satisfy these tests:\nwind_chill(5, 30) == 32\nwind_chill(10, 20) == 21\nwind_chill(15, 10) == 8\nwind_chill(20, 0) == -5\nwind_chill(25, -10) == -19\n\"\"\"\n", "entry_point": "wind_chill", "test": "def check(candidate):\n\n    assert candidate(120,35)==40\n    assert candidate(40,70)==86\n    assert candidate(10,100)==116\n"}
{"task_id": "639", "prompt": "def sample_nam(sample_names):\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nYour code should satisfy these tests:\nsample_nam(['Alice', 'bob', 'Charlie']) == 12\nsample_nam(['David', 'Eve', 'Frank']) == 13\nsample_nam(['George', 'hannah', 'Ian']) == 9\n\"\"\"\n", "entry_point": "sample_nam", "test": "def check(candidate):\n\n    assert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n    assert candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\n    assert candidate([\"abcd\", \"Python\", \"abba\", \"aba\"])==6\n"}
{"task_id": "640", "prompt": "def remove_parenthesis(items):\n\"\"\"\nWrite a function to remove the parenthesis area in a string.\nYour code should satisfy these tests:\nremove_parenthesis([\"Hello (World)\"]) == \"Hello\"\nremove_parenthesis([\"This is a test (with parenthesis)\"]) == \"This is a test\"\nremove_parenthesis([\"No parenthesis here\"]) == \"No parenthesis here\"\nremove_parenthesis([\"Multiple (parenthesis) in (one) string\"]) == \"Multiple in string\"\nremove_parenthesis([\"Spaces ( should ) be ( handled ) correctly\"]) == \"Spaces be correctly\"\n\"\"\"\n", "entry_point": "remove_parenthesis", "test": "def check(candidate):\n\n    assert candidate([\"python (chrome)\"])==(\"python\")\n    assert candidate([\"string(.abc)\"])==(\"string\")\n    assert candidate([\"alpha(num)\"])==(\"alpha\")\n"}
{"task_id": "641", "prompt": "def is_nonagonal(n):\n\"\"\"\nWrite a function to find the nth nonagonal number.\nYour code should satisfy these tests:\nis_nonagonal(1) == 1\nis_nonagonal(9) == 261\nis_nonagonal(28) == 2674\n\"\"\"\n", "entry_point": "is_nonagonal", "test": "def check(candidate):\n\n    assert candidate(10) == 325\n    assert candidate(15) == 750\n    assert candidate(18) == 1089\n"}
{"task_id": "642", "prompt": "def remove_similar_row(test_list):\n\"\"\"\nWrite a function to remove similar rows from the given tuple matrix.\nYour code should satisfy these tests:\nremove_similar_row([[1, 2, 3], [3, 2, 1], [4, 5, 6]]) == {(1, 2, 3), (4, 5, 6)}\nremove_similar_row([[7, 8], [8, 7], [9, 10], [10, 9]]) == {(7, 8), (9, 10)}\nremove_similar_row([[1, 1, 1], [1], [2, 2], [2, 2, 2]]) == {(1,), (2,)}\n\"\"\"\n", "entry_point": "remove_similar_row", "test": "def check(candidate):\n\n    assert candidate([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\n    assert candidate([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\n    assert candidate([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}\n"}
{"task_id": "643", "prompt": "def text_match_wordz_middle(text):\n\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\nYour code should satisfy these tests:\ntext_match_wordz_middle(\"apple zebra banana\") == 'Not matched!'\ntext_match_wordz_middle(\"hello world\") == 'Not matched!'\ntext_match_wordz_middle(\"pizza is amazing\") == 'Found a match!'\ntext_match_wordz_middle(\"lazy z dog\") == 'Found a match!'\ntext_match_wordz_middle(\"amazing zoo\") == 'Found a match!'\n\"\"\"\n", "entry_point": "text_match_wordz_middle", "test": "def check(candidate):\n\n    assert candidate(\"pythonzabc.\")==('Found a match!')\n    assert candidate(\"xyzabc.\")==('Found a match!')\n    assert candidate(\"  lang  .\")==('Not matched!')\n"}
{"task_id": "644", "prompt": "def reverse_Array_Upto_K(input, k):\n\"\"\"\nWrite a python function to reverse an array upto a given position.\nYour code should satisfy these tests:\nreverse_Array_Upto_K([1, 2, 3, 4, 5], 3) == [3, 2, 1, 4, 5]\nreverse_Array_Upto_K([10, 20, 30, 40, 50, 60], 4) == [40, 30, 20, 10, 50, 60]\nreverse_Array_Upto_K([7, 8, 9], 1) == [7, 8, 9]\n\"\"\"\n", "entry_point": "reverse_Array_Upto_K", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n    assert candidate([4, 5, 6, 7], 2) == [5, 4, 6, 7]\n    assert candidate([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]\n"}
{"task_id": "645", "prompt": "def get_product(val):\n\"\"\"\nWrite a function to find the product of it\u2019s kth index in the given tuples.\nYour code should satisfy these tests:\nget_product([1, 2, 3, 4]) == 24\nget_product([5, 5, 5, 5]) == 625\nget_product([10, 0, 100]) == 0\nget_product([-1, -2, -3]) == -6\nget_product([2, 3, 5, 7, 11]) == 2310\n\"\"\"\n", "entry_point": "get_product", "test": "def check(candidate):\n\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\n    assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\n    assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210\n"}
{"task_id": "646", "prompt": "def No_of_cubes(N,K):\n\"\"\"\nWrite a python function to count number of cubes of size k in a cube of size n.\nYour code should satisfy these tests:\nNo_of_cubes(5, 2) == 64\nNo_of_cubes(10, 3) == 512\nNo_of_cubes(7, 1) == 343\n\"\"\"\n", "entry_point": "No_of_cubes", "test": "def check(candidate):\n\n    assert candidate(2,1) == 8\n    assert candidate(5,2) == 64\n    assert candidate(1,1) == 1\n"}
{"task_id": "647", "prompt": "def split_upperstring(text):\n\"\"\"\nWrite a function to split a string at uppercase letters.\nYour code should satisfy these tests:\nsplit_upperstring(\"HelloWorld\") == ['Hello', 'World']\nsplit_upperstring(\"PythonIsFun\") == ['Python', 'Is', 'Fun']\nsplit_upperstring(\"SplitCamelCase\") == ['Split', 'Camel', 'Case']\n\"\"\"\n", "entry_point": "split_upperstring", "test": "def check(candidate):\n\n    assert candidate(\"PythonProgramLanguage\")==['Python','Program','Language']\n    assert candidate(\"PythonProgram\")==['Python','Program']\n    assert candidate(\"ProgrammingLanguage\")==['Programming','Language']\n"}
{"task_id": "648", "prompt": "def exchange_elements(lst):\n\"\"\"\nWrite a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\n", "entry_point": "exchange_elements", "test": "def check(candidate):\n\n    assert candidate([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4]\n    assert candidate([5,6,7,8,9,10])==[6,5,8,7,10,9]\n    assert candidate([25,35,45,55,75,95])==[35,25,55,45,95,75]\n"}
{"task_id": "649", "prompt": "def sum_Range_list(nums, m, n):\n\"\"\"\nWrite a python function to calculate the sum of the numbers in a list between the indices of a specified range.\nYour code should satisfy these tests:\nsum_Range_list([1, 2, 3, 4, 5], 1, 3) == 9\nsum_Range_list([10, 20, 30, 40, 50], 0, 2) == 60\nsum_Range_list([5, 5, 5, 5, 5], 2, 4) == 15\n\"\"\"\n", "entry_point": "sum_Range_list", "test": "def check(candidate):\n\n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\n    assert candidate([1,2,3,4,5],1,2) == 5\n    assert candidate([1,0,1,2,5,6],4,5) == 11\n"}
{"task_id": "650", "prompt": "def are_Equal(arr1,arr2,n,m):\n\"\"\"\nWrite a python function to check whether the given two arrays are equal or not.\nYour code should satisfy these tests:\nare_Equal([1, 2, 3], [3, 2, 1], 3, 3) == True\nare_Equal([1, 2, 4], [1, 2, 3], 3, 3) == True\nare_Equal([5, 5, 5], [5, 5, 5], 3, 3) == True\n\"\"\"\n", "entry_point": "are_Equal", "test": "def check(candidate):\n\n    assert candidate([1,2,3],[3,2,1],3,3) == True\n    assert candidate([1,1,1],[2,2,2],3,3) == False\n    assert candidate([8,9],[4,5,6],2,3) == False\n"}
{"task_id": "651", "prompt": "def check_subset(test_tup1, test_tup2):\n\"\"\"\nWrite a function to check if one tuple is a subset of another tuple.\nYour code should satisfy these tests:\ncheck_subset((1, 2, 3, 4), (2, 3)) == True\ncheck_subset(('a', 'b', 'c'), ('a', 'd')) == False\ncheck_subset((5, 6, 7, 8, 9), (5, 6, 7)) == True\n\"\"\"\n", "entry_point": "check_subset", "test": "def check(candidate):\n\n    assert candidate((10, 4, 5, 6), (5, 10)) == True\n    assert candidate((1, 2, 3, 4), (5, 6)) == False\n    assert candidate((7, 8, 9, 10), (10, 8)) == True\n"}
{"task_id": "652", "prompt": "def matrix_to_list(test_list):\n\"\"\"\nWrite a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\nYour code should satisfy these tests:\nmatrix_to_list([[(1, 2), (3, 4)], [(5, 6), (7, 8)]]) == \"[(1, 3, 5, 7), (2, 4, 6, 8)]\"\nmatrix_to_list([[(10, 20)], [(30, 40)]]) == \"[(10, 30), (20, 40)]\"\nmatrix_to_list([[(1,)], [(2,)]]) == \"[(1, 2)]\"\nmatrix_to_list([[(1, 2, 3), (4, 5, 6)], [(7, 8, 9), (10, 11, 12)]]) == \"[(1, 4, 7, 10), (2, 5, 8, 11), (3, 6, 9, 12)]\"\nmatrix_to_list([[(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10), (11, 12)]]) == \"[(1, 3, 5, 7, 9, 11), (2, 4, 6, 8, 10, 12)]\"\n\"\"\"\n", "entry_point": "matrix_to_list", "test": "def check(candidate):\n\n    assert candidate([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\n    assert candidate([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\n    assert candidate([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'\n"}
{"task_id": "653", "prompt": "def grouping_dictionary(l):\n\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\n", "entry_point": "grouping_dictionary", "test": "def check(candidate):\n\n    assert candidate([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\n    assert candidate([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\n    assert candidate([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})\n"}
{"task_id": "654", "prompt": "def rectangle_perimeter(l,b):\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\nYour code should satisfy these tests:\nrectangle_perimeter(3, 4) == 14\nrectangle_perimeter(5, 5) == 20\nrectangle_perimeter(10, 2) == 24\n\"\"\"\n", "entry_point": "rectangle_perimeter", "test": "def check(candidate):\n\n    assert candidate(10,20)==60\n    assert candidate(10,5)==30\n    assert candidate(4,2)==12\n"}
{"task_id": "655", "prompt": "def fifth_Power_Sum(n):\n\"\"\"\nWrite a python function to find the sum of fifth power of n natural numbers.\nYour code should satisfy these tests:\nfifth_Power_Sum(1) == 1\nfifth_Power_Sum(2) == 33\nfifth_Power_Sum(3) == 276\n\"\"\"\n", "entry_point": "fifth_Power_Sum", "test": "def check(candidate):\n\n    assert candidate(2) == 33\n    assert candidate(4) == 1300\n    assert candidate(3) == 276\n"}
{"task_id": "656", "prompt": "def find_Min_Sum(a,b,n):\n\"\"\"\nWrite a python function to find the minimum sum of absolute differences of two arrays.\nYour code should satisfy these tests:\nfind_Min_Sum([1, 2, 3], [4, 5, 6], 3) == 9\nfind_Min_Sum([10, 20, 30], [30, 20, 10], 3) == 0\nfind_Min_Sum([1, 3, 5], [2, 4, 6], 3) == 3\n\"\"\"\n", "entry_point": "find_Min_Sum", "test": "def check(candidate):\n\n    assert candidate([3,2,1],[2,1,3],3) == 0\n    assert candidate([1,2,3],[4,5,6],3) == 9\n    assert candidate([4,1,8,7],[2,3,6,5],4) == 6\n"}
{"task_id": "657", "prompt": "def first_Digit(n):\n\"\"\"\nWrite a python function to find the first digit in factorial of a given number.\nYour code should satisfy these tests:\nfirst_Digit(5) == 1\nfirst_Digit(10) == 3\nfirst_Digit(15) == 1\n\"\"\"\n", "entry_point": "first_Digit", "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(10) == 3\n    assert candidate(7) == 5\n"}
{"task_id": "658", "prompt": "def max_occurrences(list1):\n\"\"\"\nWrite a function to find the item with maximum occurrences in a given list.\nYour code should satisfy these tests:\nmax_occurrences([1, 2, 2, 3, 3, 3]) == 3\nmax_occurrences(['a', 'b', 'a', 'c', 'a', 'b']) == 'a'\nmax_occurrences([10, 10, 20, 20, 30, 30, 30]) == 30\n\"\"\"\n", "entry_point": "max_occurrences", "test": "def check(candidate):\n\n    assert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\n    assert candidate([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\n    assert candidate([1, 2, 3,2, 4, 5,1, 1, 1])==1\n"}
{"task_id": "659", "prompt": "def Repeat(x):\n\"\"\"\nWrite a python function to print duplicants from a list of integers.\nYour code should satisfy these tests:\nRepeat([1, 2, 3, 2, 4, 5, 6, 3]) == [2, 3]\nRepeat(['a', 'b', 'c', 'a', 'd', 'e', 'f', 'b']) == ['a', 'b']\nRepeat([10, 20, 30, 40, 50]) == []\n\"\"\"\n", "entry_point": "Repeat", "test": "def check(candidate):\n\n    assert candidate([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\n    assert candidate([-1, 1, -1, 8]) == [-1]\n    assert candidate([1, 2, 3, 1, 2,]) == [1, 2]\n"}
{"task_id": "660", "prompt": "def find_Points(l1,r1,l2,r2):\n\"\"\"\nWrite a python function to choose points from two ranges such that no point lies in both the ranges.\nYour code should satisfy these tests:\nfind_Points(1, 5, 2, 6) == (1, 6)\nfind_Points(3, 3, 3, 3) == (-1, -1)\nfind_Points(10, 20, 15, 25) == (10, 25)\n\"\"\"\n", "entry_point": "find_Points", "test": "def check(candidate):\n\n    assert candidate(5,10,1,5) == (1,10)\n    assert candidate(3,5,7,9) == (3,9)\n    assert candidate(1,5,2,8) == (1,8)\n"}
{"task_id": "661", "prompt": "def max_sum_of_three_consecutive(arr, n):\n\"\"\"\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\nYour code should satisfy these tests:\nmax_sum_of_three_consecutive([1, 2, 3, 4, 5], 5) == 12\nmax_sum_of_three_consecutive([3, 2, 5, 10, 7], 5) == 22\nmax_sum_of_three_consecutive([1, 20, 3, 1, 2, 4, 5, 6], 8) == 36\n\"\"\"\n", "entry_point": "max_sum_of_three_consecutive", "test": "def check(candidate):\n\n    assert candidate([100, 1000, 100, 1000, 1], 5) == 2101\n    assert candidate([3000, 2000, 1000, 3, 10], 5) == 5013\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27\n"}
{"task_id": "662", "prompt": "def sorted_dict(dict1):\n\"\"\"\nWrite a function to sort a list in a dictionary.\nYour code should satisfy these tests:\nsorted_dict({'a': [3, 1, 2], 'b': [5, 4]}) == {'a': [1, 2, 3], 'b': [4, 5]}\nsorted_dict({'x': [10, 9, 8], 'y': [7, 6, 5], 'z': [4, 3, 2, 1]}) == {'x': [8, 9, 10], 'y': [5, 6, 7], 'z': [1, 2, 3, 4]}\nsorted_dict({'m': [1], 'n': [2, 2], 'o': [3, 3, 3]}) == {'m': [1], 'n': [2, 2], 'o': [3, 3, 3]}\n\"\"\"\n", "entry_point": "sorted_dict", "test": "def check(candidate):\n\n    assert candidate({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\n    assert candidate({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\n    assert candidate({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}\n"}
{"task_id": "663", "prompt": "def find_max_val(n, x, y):\n\"\"\"\nWrite a function to find the largest possible value of k such that k modulo x is y.\nYour code should satisfy these tests:\nfind_max_val(10, 2, 1) == 9\nfind_max_val(15, 3, 0) == 15\nfind_max_val(20, 5, 4) == 19\n\"\"\"\n", "entry_point": "find_max_val", "test": "def check(candidate):\n\n    assert candidate(15, 10, 5) == 15\n    assert candidate(187, 10, 5) == 185\n    assert candidate(16, 11, 1) == 12\n"}
{"task_id": "664", "prompt": "def average_Even(n):\n\"\"\"\nWrite a python function to find the average of even numbers till a given even number.\nYour code should satisfy these tests:\naverage_Even(10) == 6\naverage_Even(12) == 7\naverage_Even(14) == 8\n\"\"\"\n", "entry_point": "average_Even", "test": "def check(candidate):\n\n    assert candidate(2) == 2\n    assert candidate(4) == 3\n    assert candidate(100) == 51\n"}
{"task_id": "665", "prompt": "def move_last(num_list):\n\"\"\"\nWrite a python function to shift first element to the end of given list.\nYour code should satisfy these tests:\nmove_last([1, 2, 3, 1, 4]) == [2, 3, 4, 1, 1]\nmove_last([5, 5, 5, 6, 7]) == [6, 7, 5, 5, 5]\nmove_last([9, 8, 9, 7, 9]) == [8, 7, 9, 9, 9]\n\"\"\"\n", "entry_point": "move_last", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4]) == [2,3,4,1]\n    assert candidate([2,3,4,1,5,0]) == [3,4,1,5,0,2]\n    assert candidate([5,4,3,2,1]) == [4,3,2,1,5]\n"}
{"task_id": "666", "prompt": "def count_char(string,char):\n\"\"\"\nWrite a function to count occurrence of a character in a string.\nYour code should satisfy these tests:\ncount_char(\"hello\", \"l\") == 2\ncount_char(\"world\", \"w\") == 1\ncount_char(\"python\", \"z\") == 0\n\"\"\"\n", "entry_point": "count_char", "test": "def check(candidate):\n\n    assert candidate(\"Python\",'o')==1\n    assert candidate(\"little\",'t')==2\n    assert candidate(\"assert\",'s')==2\n"}
{"task_id": "667", "prompt": "def Check_Vow(string, vowels):\n\"\"\"\nWrite a python function to count number of vowels in the string.\nYour code should satisfy these tests:\nCheck_Vow(\"hello world\", \"aeiou\") == 3\nCheck_Vow(\"python programming\", \"aeiou\") == 4\nCheck_Vow(\"sky\", \"aeiou\") == 0\n\"\"\"\n", "entry_point": "Check_Vow", "test": "def check(candidate):\n\n    assert candidate('corner','AaEeIiOoUu') == 2\n    assert candidate('valid','AaEeIiOoUu') == 2\n    assert candidate('true','AaEeIiOoUu') ==2\n"}
{"task_id": "668", "prompt": "def replace(string, char):\n\"\"\"\nWrite a python function to replace multiple occurence of character by single.\nYour code should satisfy these tests:\nreplace(\"hellooo\", \"o\") == \"hello\"\nreplace(\"baaat\", \"a\") == \"bat\"\nreplace(\"mississippi\", \"i\") == \"mississippi\"\n\"\"\"\n", "entry_point": "replace", "test": "def check(candidate):\n\n    assert candidate('peep','e') == 'pep'\n    assert candidate('Greek','e') == 'Grek'\n    assert candidate('Moon','o') == 'Mon'\n"}
{"task_id": "669", "prompt": "def check_IP(Ip):\n\"\"\"\nWrite a function to check whether the given ip address is valid or not using regex.\nYour code should satisfy these tests:\ncheck_IP(\"192.168.1.1\") == \"Valid IP address\"\ncheck_IP(\"256.256.256.256\") == \"Invalid IP address\"\ncheck_IP(\"0.0.0.0\") == \"Valid IP address\"\n\"\"\"\n", "entry_point": "check_IP", "test": "def check(candidate):\n\n    assert candidate(\"192.168.0.1\") == 'Valid IP address'\n    assert candidate(\"110.234.52.124\") == 'Valid IP address'\n    assert candidate(\"366.1.2.2\") == 'Invalid IP address'\n"}
{"task_id": "670", "prompt": "def decreasing_trend(nums):\n\"\"\"\nWrite a python function to check whether a sequence of numbers has a decreasing trend or not.\nYour code should satisfy these tests:\ndecreasing_trend([5, 4, 3, 2, 1]) == False\ndecreasing_trend([100, 50, 30, 20, 10]) == False\ndecreasing_trend([10, 20, 30, 40, 50]) == True\ndecreasing_trend([3, 1, -1, -3, -5]) == False\ndecreasing_trend([7, 6, 4, 9, 1]) == False\n\"\"\"\n", "entry_point": "decreasing_trend", "test": "def check(candidate):\n\n    assert candidate([-4,-3,-2,-1]) == True\n    assert candidate([1,2,3]) == True\n    assert candidate([3,2,1]) == False\n"}
{"task_id": "671", "prompt": "def get_Pos_Of_Right_most_Set_Bit(n):\n\"\"\"\nWrite a python function to set the right most unset bit.\nYour code should satisfy these tests:\nget_Pos_Of_Right_most_Set_Bit(1) == 1\nget_Pos_Of_Right_most_Set_Bit(2) == 2\nget_Pos_Of_Right_most_Set_Bit(12) == 3\nget_Pos_Of_Right_most_Set_Bit(16) == 5\nget_Pos_Of_Right_most_Set_Bit(255) == 1\n\"\"\"\n", "entry_point": "get_Pos_Of_Right_most_Set_Bit", "test": "def check(candidate):\n\n    assert set_Right_most_Unset_Bit(21) == 23\n    assert set_Right_most_Unset_Bit(11) == 15\n    assert set_Right_most_Unset_Bit(15) == 15\n"}
{"task_id": "672", "prompt": "def max_of_three(num1,num2,num3):\n\"\"\"\nWrite a function to find maximum of three numbers.\nYour code should satisfy these tests:\nmax_of_three(10, 20, 30) == 30\nmax_of_three(-5, -10, -3) == -3\nmax_of_three(0, 0, 0) == 0\n\"\"\"\n", "entry_point": "max_of_three", "test": "def check(candidate):\n\n    assert candidate(10,20,30)==30\n    assert candidate(55,47,39)==55\n    assert candidate(10,49,30)==49\n"}
{"task_id": "673", "prompt": "def convert(list):\n\"\"\"\nWrite a python function to convert a list of multiple integers into a single integer.\nYour code should satisfy these tests:\nconvert([1, 2, 3]) == 123\nconvert([4, 5, 6, 7]) == 4567\nconvert([0, 9, 8, 7]) == 987\n\"\"\"\n", "entry_point": "convert", "test": "def check(candidate):\n\n    assert candidate([1,2,3]) == 123\n    assert candidate([4,5,6]) == 456\n    assert candidate([7,8,9]) == 789\n"}
{"task_id": "674", "prompt": "def remove_duplicate(string):\n\"\"\"\nWrite a function to remove duplicate words from a given string using collections module.\nYour code should satisfy these tests:\nremove_duplicate(\"hello world hello\") == \"hello world\"\nremove_duplicate(\"python is great and python is fun\") == \"python is great and fun\"\nremove_duplicate(\"one two three two one\") == \"one two three\"\n\"\"\"\n", "entry_point": "remove_duplicate", "test": "def check(candidate):\n\n    assert candidate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\n    assert candidate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\n    assert candidate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")\n"}
{"task_id": "675", "prompt": "def sum_nums(x, y,m,n):\n\"\"\"\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\nYour code should satisfy these tests:\nsum_nums(5, 10, 10, 20) == 20\nsum_nums(3, 4, 1, 10) == 20\nsum_nums(7, 2, 15, 25) == 9\n\"\"\"\n", "entry_point": "sum_nums", "test": "def check(candidate):\n\n    assert candidate(2,10,11,20)==20\n    assert candidate(15,17,1,10)==32\n    assert candidate(10,15,5,30)==20\n"}
{"task_id": "676", "prompt": "def remove_extra_char(text1):\n\"\"\"\nWrite a function to remove everything except alphanumeric characters from the given string by using regex.\nYour code should satisfy these tests:\nremove_extra_char(\"Hello, World!\") == \"HelloWorld\"\nremove_extra_char(\"Python_3.8\") == \"Python38\"\nremove_extra_char(\"Test-Case#123\") == \"TestCase123\"\n\"\"\"\n", "entry_point": "remove_extra_char", "test": "def check(candidate):\n\n    assert candidate('**//Google Android// - 12. ') == 'GoogleAndroid12'\n    assert candidate('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\n    assert candidate('**//Google Firebase// - 478. ') == 'GoogleFirebase478'\n"}
{"task_id": "677", "prompt": "def validity_triangle(a,b,c):\n\"\"\"\nWrite a function to check if the triangle is valid or not.\nYour code should satisfy these tests:\nvalidity_triangle(60, 60, 60) == True\nvalidity_triangle(90, 45, 45) == True\nvalidity_triangle(30, 60, 90) == True\nvalidity_triangle(0, 0, 180) == True\nvalidity_triangle(100, 50, 30) == True\n\"\"\"\n", "entry_point": "validity_triangle", "test": "def check(candidate):\n\n    assert candidate(60,50,90)==False\n    assert candidate(45,75,60)==True\n    assert candidate(30,50,100)==True\n"}
{"task_id": "678", "prompt": "def remove_spaces(str1):\n\"\"\"\nWrite a python function to remove spaces from a given string.\nYour code should satisfy these tests:\nremove_spaces(\"hello world\") == \"helloworld\"\nremove_spaces(\"  leading and trailing  \") == \"leadingandtrailing\"\nremove_spaces(\"multiple   spaces   here\") == \"multiplespaceshere\"\n\"\"\"\n", "entry_point": "remove_spaces", "test": "def check(candidate):\n\n    assert candidate(\"a b c\") == \"abc\"\n    assert candidate(\"1 2 3\") == \"123\"\n    assert candidate(\" b c\") == \"bc\"\n"}
{"task_id": "679", "prompt": "def access_key(ditionary,key):\n\"\"\"\nWrite a function to access dictionary key\u2019s element by index.\nYour code should satisfy these tests:\naccess_key({'a': 1, 'b': 2, 'c': 3}, 0) == 'a'\naccess_key({'x': 10, 'y': 20, 'z': 30}, 2) == 'z'\naccess_key({'m': 100, 'n': 200, 'o': 300, 'p': 400}, 1) == 'n'\n\"\"\"\n", "entry_point": "access_key", "test": "def check(candidate):\n\n    assert candidate({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\n    assert candidate({'python':10, 'java': 20, 'C++':30},2)== 'C++'\n    assert candidate({'program':15,'computer':45},1)== 'computer'\n"}
{"task_id": "680", "prompt": "def increasing_trend(nums):\n\"\"\"\nWrite a python function to check whether a sequence of numbers has an increasing trend or not.\nYour code should satisfy these tests:\nincreasing_trend([1, 2, 3, 4, 5]) == True\nincreasing_trend([5, 4, 3, 2, 1]) == False\nincreasing_trend([1, 1, 2, 3, 4]) == True\n\"\"\"\n", "entry_point": "increasing_trend", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4]) == True\n    assert candidate([4,3,2,1]) == False\n    assert candidate([0,1,4,9]) == True\n"}
{"task_id": "681", "prompt": "def smallest_Divisor(n):\n\"\"\"\nWrite a python function to find the smallest prime divisor of a number.\nYour code should satisfy these tests:\nsmallest_Divisor(15) == 3\nsmallest_Divisor(17) == 17\nsmallest_Divisor(100) == 2\n\"\"\"\n", "entry_point": "smallest_Divisor", "test": "def check(candidate):\n\n    assert candidate(10) == 2\n    assert candidate(25) == 5\n    assert candidate(31) == 31\n"}
{"task_id": "682", "prompt": "def mul_list(nums1,nums2):\n\"\"\"\nWrite a function to multiply two lists using map and lambda function.\nYour code should satisfy these tests:\nmul_list([1, 2, 3], [4, 5, 6]) == [4, 10, 18]\nmul_list([0, 0, 0], [1, 2, 3]) == [0, 0, 0]\nmul_list([-1, -2, -3], [1, 2, 3]) == [-1, -4, -9]\n\"\"\"\n", "entry_point": "mul_list", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3],[4,5,6])==[4,10,18]\n    assert candidate([1,2],[3,4])==[3,8]\n    assert candidate([90,120],[50,70])==[4500,8400]\n"}
{"task_id": "683", "prompt": "def sum_Square(n):\n\"\"\"\nWrite a python function to check whether the given number can be represented by sum of two squares or not.\nYour code should satisfy these tests:\nsum_Square(5) == True\nsum_Square(3) == False\nsum_Square(50) == True\n\"\"\"\n", "entry_point": "sum_Square", "test": "def check(candidate):\n\n    assert candidate(25) == True\n    assert candidate(24) == False\n    assert candidate(17) == True\n"}
{"task_id": "684", "prompt": "def count_Char(str,x):\n\"\"\"\nWrite a python function to count occurences of a character in a repeated string.\nYour code should satisfy these tests:\ncount_Char(\"abc\", 'a') == 4\ncount_Char(\"xyz\", 'z') == 3\ncount_Char(\"hello\", 'l') == 4\ncount_Char(\"aaaaa\", 'a') == 10\ncount_Char(\"ababab\", 'b') == 5\n\"\"\"\n", "entry_point": "count_Char", "test": "def check(candidate):\n\n    assert candidate(\"abcac\",'a') == 4\n    assert candidate(\"abca\",'c') == 2\n    assert candidate(\"aba\",'a') == 7\n"}
{"task_id": "685", "prompt": "def sum_Of_Primes(n):\n\"\"\"\nWrite a python function to find sum of prime numbers between 1 to n.\nYour code should satisfy these tests:\nsum_Of_Primes(10) == 17\nsum_Of_Primes(20) == 77\nsum_Of_Primes(30) == 129\n\"\"\"\n", "entry_point": "sum_Of_Primes", "test": "def check(candidate):\n\n    assert candidate(10) == 17\n    assert candidate(20) == 77\n    assert candidate(5) == 10\n"}
{"task_id": "686", "prompt": "def freq_element(test_tup):\n\"\"\"\nWrite a function to find the frequency of each element in the given list.\nYour code should satisfy these tests:\nfreq_element((1, 2, 2, 3, 3, 3)) == \"{1: 1, 2: 2, 3: 3}\"\nfreq_element(('a', 'b', 'a', 'c', 'b', 'a')) == \"{'a': 3, 'b': 2, 'c': 1}\"\nfreq_element((10, 10, 20, 20, 20, 30)) == \"{10: 2, 20: 3, 30: 1}\"\n\"\"\"\n", "entry_point": "freq_element", "test": "def check(candidate):\n\n    assert candidate((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\n    assert candidate((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\n    assert candidate((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'\n"}
{"task_id": "687", "prompt": "def recur_gcd(a, b):\n\"\"\"\nWrite a function to find the greatest common divisor (gcd) of two integers by using recursion.\nYour code should satisfy these tests:\nrecur_gcd(48, 18) == 6\nrecur_gcd(101, 10) == 1\nrecur_gcd(56, 98) == 14\n\"\"\"\n", "entry_point": "recur_gcd", "test": "def check(candidate):\n\n    assert candidate(12,14) == 2\n    assert candidate(13,17) == 1\n    assert candidate(9, 3) == 3\n"}
{"task_id": "688", "prompt": "def len_complex(a,b):\n\"\"\"\nWrite a function to get the length of a complex number.\nYour code should satisfy these tests:\nlen_complex(3, 4) == 5.0\nlen_complex(-1, -1) == 1.4142135623730951\nlen_complex(0, 5) == 5.0\n\"\"\"\n", "entry_point": "len_complex", "test": "def check(candidate):\n\n    assert candidate(3,4)==5.0\n    assert candidate(9,10)==13.45362404707371\n    assert candidate(7,9)==11.40175425099138\n"}
{"task_id": "689", "prompt": "def min_jumps(arr, n):\n\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\nYour code should satisfy these tests:\nmin_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nmin_jumps([2, 3, 1, 1, 4], 5) == 2\nmin_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 10) == 9\n\"\"\"\n", "entry_point": "min_jumps", "test": "def check(candidate):\n\n    assert candidate([1, 3, 6, 1, 0, 9], 6) == 3\n    assert candidate([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10\n"}
{"task_id": "690", "prompt": "def mul_consecutive_nums(nums):\n\"\"\"\nWrite a function to multiply consecutive numbers of a given list.\nYour code should satisfy these tests:\nmul_consecutive_nums([1, 2, 3, 4]) == [2, 6, 12]\nmul_consecutive_nums([5, 10, 15]) == [50, 150]\nmul_consecutive_nums([0, 1, 2, 3]) == [0, 2, 6]\n\"\"\"\n", "entry_point": "mul_consecutive_nums", "test": "def check(candidate):\n\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\n    assert candidate([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]\n"}
{"task_id": "691", "prompt": "def group_element(test_list):\n\"\"\"\nWrite a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\n", "entry_point": "group_element", "test": "def check(candidate):\n\n    assert candidate([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\n    assert candidate([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\n    assert candidate([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}\n"}
{"task_id": "692", "prompt": "def last_Two_Digits(N):\n\"\"\"\nWrite a python function to find the last two digits in factorial of a given number.\nYour code should satisfy these tests:\nlast_Two_Digits(5) == 20\nlast_Two_Digits(9) == 80\nlast_Two_Digits(1) == 1\n\"\"\"\n", "entry_point": "last_Two_Digits", "test": "def check(candidate):\n\n    assert candidate(7) == 40\n    assert candidate(5) == 20\n    assert candidate(2) == 2\n"}
{"task_id": "693", "prompt": "def remove_multiple_spaces(text1):\n\"\"\"\nWrite a function to remove multiple spaces in a string by using regex.\nYour code should satisfy these tests:\nremove_multiple_spaces(\"This  is   a    test\") == \"This is a test\"\nremove_multiple_spaces(\"Python   programming\") == \"Python programming\"\nremove_multiple_spaces(\"  Leading and trailing   \") == \" Leading and trailing \"\n\"\"\"\n", "entry_point": "remove_multiple_spaces", "test": "def check(candidate):\n\n    assert candidate('Google      Assistant') == 'Google Assistant'\n    assert candidate('Quad      Core') == 'Quad Core'\n    assert candidate('ChromeCast      Built-in') == 'ChromeCast Built-in'\n"}
{"task_id": "694", "prompt": "def extract_unique(test_dict):\n\"\"\"\nWrite a function to extract unique values from the given dictionary values.\nYour code should satisfy these tests:\nextract_unique({'a': [1, 2, 3], 'b': [2, 3, 4], 'c': [4, 5]}) == [1, 2, 3, 4, 5]\nextract_unique({'x': [10, 20], 'y': [20, 30, 40], 'z': [50]}) == [10, 20, 30, 40, 50]\nextract_unique({'m': [100], 'n': [100, 200], 'o': [200, 300, 400]}) == [100, 200, 300, 400]\n\"\"\"\n", "entry_point": "extract_unique", "test": "def check(candidate):\n\n    assert candidate({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\n    assert candidate({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\n    assert candidate({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]\n"}
{"task_id": "695", "prompt": "def check_greater(test_tup1, test_tup2):\n\"\"\"\nWrite a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\nYour code should satisfy these tests:\ncheck_greater((1, 2, 3), (2, 3, 4)) == True\ncheck_greater((5, 6, 7), (4, 5, 6)) == False\ncheck_greater((0, 0, 0), (1, 1, 1)) == True\n\"\"\"\n", "entry_point": "check_greater", "test": "def check(candidate):\n\n    assert candidate((10, 4, 5), (13, 5, 18)) == True\n    assert candidate((1, 2, 3), (2, 1, 4)) == False\n    assert candidate((4, 5, 6), (5, 6, 7)) == True\n"}
{"task_id": "696", "prompt": "def zip_list(list1,list2):\n\"\"\"\nWrite a function to zip two given lists of lists.\nYour code should satisfy these tests:\nzip_list([[1],[2]],[[3],[4]]) == [[1, 3], [2, 4]]\nzip_list([['a'],['b']],[['c'],['d']]) == [['a', 'c'], ['b', 'd']]\nzip_list([[True],[False]],[[False],[True]]) == [[True, False], [False, True]]\n\"\"\"\n", "entry_point": "zip_list", "test": "def check(candidate):\n\n    assert candidate([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\n    assert candidate([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\n    assert candidate([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]\n"}
{"task_id": "697", "prompt": "def count_even(array_nums):\n\"\"\"\nWrite a function to find number of even elements in the given list using lambda function.\nYour code should satisfy these tests:\ncount_even([1, 2, 3, 4, 5, 6]) == 3\ncount_even([11, 22, 33, 44, 55]) == 2\ncount_even([0, -2, -4, -5, -6]) == 4\n\"\"\"\n", "entry_point": "count_even", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10])==3\n    assert candidate([10,15,14,13,-18,12,-20])==5\n    assert candidate([1, 2, 4, 8, 9])==3\n"}
{"task_id": "698", "prompt": "def sort_dict_item(test_dict):\n\"\"\"\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\nYour code should satisfy these tests:\nsort_dict_item({(3, 2): 'a', (1, 4): 'b', (2, 3): 'c'}) == {(1, 4): 'b', (3, 2): 'a', (2, 3): 'c'}\nsort_dict_item({(5, 1): 'x', (2, 2): 'y', (4, 3): 'z'}) == {(5, 1): 'x', (2, 2): 'y', (4, 3): 'z'}\nsort_dict_item({(1, 1): 'm', (3, 3): 'n', (2, 2): 'o'}) == {(1, 1): 'm', (2, 2): 'o', (3, 3): 'n'}\n\"\"\"\n", "entry_point": "sort_dict_item", "test": "def check(candidate):\n\n    assert candidate({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\n    assert candidate({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\n    assert candidate({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}\n"}
{"task_id": "699", "prompt": "def min_Swaps(str1,str2):\n\"\"\"\nWrite a python function to find the minimum number of swaps required to convert one binary string to another.\nYour code should satisfy these tests:\nmin_Swaps(\"abcde\", \"abcde\") == 0\nmin_Swaps(\"abc\", \"cab\") == 'Not Possible'\nmin_Swaps(\"12345\", \"54321\") == 2\nmin_Swaps(\"hello\", \"hello\") == 0\nmin_Swaps(\"abcdef\", \"fedcba\") == 3\nmin_Swaps(\"python\", \"ythonp\") == 3\n\"\"\"\n", "entry_point": "min_Swaps", "test": "def check(candidate):\n\n    assert candidate(\"1101\",\"1110\") == 1\n    assert candidate(\"1111\",\"0100\") == \"Not Possible\"\n    assert candidate(\"1110000\",\"0001101\") == 3\n"}
{"task_id": "700", "prompt": "def count_range_in_list(li, min, max):\n\"\"\"\nWrite a function to count the number of elements in a list which are within a specific range.\nYour code should satisfy these tests:\ncount_range_in_list([1, 2, 3, 4, 5], 2, 4) == 3\ncount_range_in_list([10, 20, 30, 40, 50], 15, 45) == 3\ncount_range_in_list([-5, 0, 5, 10], -10, 0) == 2\n\"\"\"\n", "entry_point": "count_range_in_list", "test": "def check(candidate):\n\n    assert candidate([10,20,30,40,40,40,70,80,99],40,100)==6\n    assert candidate(['a','b','c','d','e','f'],'a','e')==5\n    assert candidate([7,8,9,15,17,19,45],15,20)==3\n"}
{"task_id": "701", "prompt": "def equilibrium_index(arr):\n\"\"\"\nWrite a function to find the equilibrium index of the given array.\nYour code should satisfy these tests:\nequilibrium_index([1, 3, 5, 2, 2]) == 2\nequilibrium_index([1, 2, 3, 4, 5]) == -1\nequilibrium_index([-1, 3, -4, 5, 1, -6, 2, 1]) == 1\n\"\"\"\n", "entry_point": "equilibrium_index", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 1, 2, 3]) == 3\n    assert candidate([-7, 1, 5, 2, -4, 3, 0]) == 3\n    assert candidate([1, 2, 3]) == -1\n"}
{"task_id": "702", "prompt": "def removals(arr, n, k):\n\"\"\"\nWrite a function to find the minimum number of elements that should be removed such that amax-amin<=k.\nYour code should satisfy these tests:\nremovals([1, 3, 4, 9, 10], 5, 3) == 2\nremovals([1, 5, 6, 2, 8], 5, 2) == 3\nremovals([10, 12, 20, 30, 23, 24, 25], 7, 4) == 4\n\"\"\"\n", "entry_point": "removals", "test": "def check(candidate):\n\n    assert candidate([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\n    assert candidate([1, 5, 6, 2, 8], 5, 2) == 3\n    assert candidate([1, 2, 3 ,4, 5, 6], 6, 3) == 2\n"}
{"task_id": "703", "prompt": "def is_key_present(d,x):\n\"\"\"\nWrite a function to check whether the given key is present in the dictionary or not.\nYour code should satisfy these tests:\nis_key_present({'a': 1, 'b': 2}, 'a') == True\nis_key_present({'x': 10, 'y': 20}, 'z') == False\nis_key_present({}, 'anything') == False\n\"\"\"\n", "entry_point": "is_key_present", "test": "def check(candidate):\n\n    assert candidate({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\n    assert candidate({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\n    assert candidate({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False\n"}
{"task_id": "704", "prompt": "def harmonic_sum(n):\n\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nYour code should satisfy these tests:\nharmonic_sum(1) == 1\nharmonic_sum(5) == 2.283333333333333\nharmonic_sum(10) == 2.9289682539682538\n\"\"\"\n", "entry_point": "harmonic_sum", "test": "def check(candidate):\n\n    assert candidate(10)==2.9289682539682538\n    assert candidate(4)==2.083333333333333\n    assert candidate(7)==2.5928571428571425\n"}
{"task_id": "705", "prompt": "def sort_sublists(list1):\n\"\"\"\nWrite a function to sort a list of lists by length and value.\nYour code should satisfy these tests:\nsort_sublists([[3, 2, 1], [1, 2], [4, 4, 4]]) == [[1, 2], [3, 2, 1], [4, 4, 4]]\nsort_sublists([[5], [1, 1, 1, 1], [2, 2]]) == [[5], [2, 2], [1, 1, 1, 1]]\nsort_sublists([[7, 6], [5, 4, 3], [2, 1, 0, -1]]) == [[7, 6], [5, 4, 3], [2, 1, 0, -1]]\n\"\"\"\n", "entry_point": "sort_sublists", "test": "def check(candidate):\n\n    assert candidate([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\n    assert candidate([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\n    assert candidate([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]\n"}
{"task_id": "706", "prompt": "def is_subset(arr1, m, arr2, n):\n\"\"\"\nWrite a function to find whether an array is subset of another array.\nYour code should satisfy these tests:\nis_subset([1, 2, 3, 4, 5], 5, [1, 2, 3], 3) == True\nis_subset([10, 20, 30, 40, 50], 5, [15, 20, 25], 3) == False\nis_subset([5, 6, 7, 8, 9], 5, [7, 8], 2) == True\n\"\"\"\n", "entry_point": "is_subset", "test": "def check(candidate):\n\n    assert candidate([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\n    assert candidate([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\n    assert candidate([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False\n"}
{"task_id": "707", "prompt": "def count_Set_Bits(n):\n\"\"\"\nWrite a python function to count the total set bits from 1 to n.\nYour code should satisfy these tests:\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 7\ncount_Set_Bits(10) == 17\n\"\"\"\n", "entry_point": "count_Set_Bits", "test": "def check(candidate):\n\n    assert candidate(16) == 33\n    assert candidate(2) == 2\n    assert candidate(14) == 28\n"}
{"task_id": "708", "prompt": "def Convert(string):\n\"\"\"\nWrite a python function to convert a string to a list.\nYour code should satisfy these tests:\nConvert(\"hello world\") == ['hello', 'world']\nConvert(\"Python programming is fun\") == ['Python', 'programming', 'is', 'fun']\nConvert(\"single\") == ['single']\n\"\"\"\n", "entry_point": "Convert", "test": "def check(candidate):\n\n    assert candidate('python program') == ['python','program']\n    assert candidate('Data Analysis') ==['Data','Analysis']\n    assert candidate('Hadoop Training') == ['Hadoop','Training']\n"}
{"task_id": "709", "prompt": "def get_unique(test_list):\n\"\"\"\nWrite a function to count unique keys for each value present in the tuple.\n\"\"\"\n", "entry_point": "get_unique", "test": "def check(candidate):\n\n    assert candidate([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\n    assert candidate([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\n    assert candidate([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'\n"}
{"task_id": "710", "prompt": "def front_and_rear(test_tup):\n\"\"\"\nWrite a function to access the initial and last data of the given tuple record.\nYour code should satisfy these tests:\nfront_and_rear((1, 2, 3, 4)) == (1, 4)\nfront_and_rear(('a', 'b', 'c')) == ('a', 'c')\nfront_and_rear((True, False, True, False)) == (True, False)\n\"\"\"\n", "entry_point": "front_and_rear", "test": "def check(candidate):\n\n    assert candidate((10, 4, 5, 6, 7)) == (10, 7)\n    assert candidate((1, 2, 3, 4, 5)) == (1, 5)\n    assert candidate((6, 7, 8, 9, 10)) == (6, 10)\n"}
{"task_id": "711", "prompt": "def product_Equal(n):\n\"\"\"\nWrite a python function to check whether the product of digits of a number at even and odd places is equal or not.\nYour code should satisfy these tests:\nproduct_Equal(1236) == False\nproduct_Equal(1122) == True\nproduct_Equal(1234) == False\n\"\"\"\n", "entry_point": "product_Equal", "test": "def check(candidate):\n\n    assert candidate(2841) == True\n    assert candidate(1234) == False\n    assert candidate(1212) == False\n"}
{"task_id": "712", "prompt": "def remove_duplicate(list1):\n\"\"\"\nWrite a function to remove duplicates from a list of lists.\nYour code should satisfy these tests:\nremove_duplicate([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\nremove_duplicate([3, 3, 3, 3, 3, 3]) == [3]\nremove_duplicate([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]\nremove_duplicate([]) == []\nremove_duplicate([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n\"\"\"\n", "entry_point": "remove_duplicate", "test": "def check(candidate):\n\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]]\n    assert candidate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\n    assert candidate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]\n"}
{"task_id": "713", "prompt": "def check_valid(test_tup):\n\"\"\"\nWrite a function to check if the given tuple contains all valid values or not.\nYour code should satisfy these tests:\ncheck_valid((1, 2, 3)) == True\ncheck_valid((1, 0, 3)) == False\ncheck_valid(('a', 'b', '')) == False\n\"\"\"\n", "entry_point": "check_valid", "test": "def check(candidate):\n\n    assert candidate((True, True, True, True) ) == True\n    assert candidate((True, False, True, True) ) == False\n    assert candidate((True, True, True, True) ) == True\n"}
{"task_id": "714", "prompt": "def count_Fac(n):\n\"\"\"\nWrite a python function to count the number of distinct power of prime factor of given number.\nYour code should satisfy these tests:\ncount_Fac(12) == 2\ncount_Fac(36) == 2\ncount_Fac(100) == 2\ncount_Fac(17) == 1\ncount_Fac(144) == 3\n\"\"\"\n", "entry_point": "count_Fac", "test": "def check(candidate):\n\n    assert candidate(24) == 3\n    assert candidate(12) == 2\n    assert candidate(4) == 1\n"}
{"task_id": "715", "prompt": "def str_to_tuple(test_str):\n\"\"\"\nWrite a function to convert the given string of integers into a tuple.\nYour code should satisfy these tests:\nstr_to_tuple(\"1, 2, 3\") == (1, 2, 3)\nstr_to_tuple(\"10, 20, 30, 40\") == (10, 20, 30, 40)\nstr_to_tuple(\"5, 15, 25, 35, 45\") == (5, 15, 25, 35, 45)\n\"\"\"\n", "entry_point": "str_to_tuple", "test": "def check(candidate):\n\n    assert candidate(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\n    assert candidate(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\n    assert candidate(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)\n"}
{"task_id": "716", "prompt": "def rombus_perimeter(a):\n\"\"\"\nWrite a function to find the perimeter of a rombus.\nYour code should satisfy these tests:\nrombus_perimeter(5) == 20\nrombus_perimeter(10) == 40\nrombus_perimeter(1) == 4\n\"\"\"\n", "entry_point": "rombus_perimeter", "test": "def check(candidate):\n\n    assert candidate(10)==40\n    assert candidate(5)==20\n    assert candidate(4)==16\n"}
{"task_id": "717", "prompt": "def sd_calc(data):\n\"\"\"\nWrite a function to calculate the standard deviation.\nYour code should satisfy these tests:\nsd_calc([5]) == 0.0\n\"\"\"\n", "entry_point": "sd_calc", "test": "def check(candidate):\n\n    assert candidate([4, 2, 5, 8, 6])== 2.23606797749979\n    assert candidate([1,2,3,4,5,6,7])==2.160246899469287\n    assert candidate([5,9,10,15,6,4])==4.070217029430577\n"}
{"task_id": "718", "prompt": "def alternate_elements(list1):\n\"\"\"\nWrite a function to create a list taking alternate elements from another given list.\nYour code should satisfy these tests:\nalternate_elements([1, 2, 3, 4, 5]) == [1, 3, 5]\nalternate_elements(['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'c', 'e']\nalternate_elements([10, 20, 30, 40, 50, 60, 70]) == [10, 30, 50, 70]\n\"\"\"\n", "entry_point": "alternate_elements", "test": "def check(candidate):\n\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\n    assert candidate([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n"}
{"task_id": "719", "prompt": "def text_match(text):\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's.\nYour code should satisfy these tests:\ntext_match(\"aab\") == \"Found a match!\"\ntext_match(\"cb\") == \"Not matched!\"\ntext_match(\"abb\") == \"Found a match!\"\ntext_match(\"abbb\") == \"Found a match!\"\ntext_match(\"abc\") == \"Found a match!\"\n\"\"\"\n", "entry_point": "text_match", "test": "def check(candidate):\n\n    assert candidate(\"ac\")==('Found a match!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abba\")==('Found a match!')\n"}
{"task_id": "720", "prompt": "def add_dict_to_tuple(test_tup, test_dict):\n\"\"\"\nWrite a function to add a dictionary to the tuple.\nYour code should satisfy these tests:\nadd_dict_to_tuple((1, 2, 3), {'a': 1}) == ((1, 2, 3, {'a': 1}))\nadd_dict_to_tuple(('x', 'y'), {'key': 'value'}) == (('x', 'y', {'key': 'value'}))\nadd_dict_to_tuple((True, False), {'bool': True}) == ((True, False, {'bool': True}))\n\"\"\"\n", "entry_point": "add_dict_to_tuple", "test": "def check(candidate):\n\n    assert candidate((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    assert candidate((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\n    assert candidate((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n"}
{"task_id": "721", "prompt": "def maxAverageOfPath(cost, N):\n\"\"\"\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\nYour code should satisfy these tests:\nmaxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 5.8\nmaxAverageOfPath([[5, 3], [1, 4]], 2) == 4.0\nmaxAverageOfPath([[10, 15, 20], [25, 30, 35], [40, 45, 50]], 3) == 34.0\n\"\"\"\n", "entry_point": "maxAverageOfPath", "test": "def check(candidate):\n\n    assert candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\n    assert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\n    assert candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2\n"}
{"task_id": "722", "prompt": "def filter_data(students,h,w):\n\"\"\"\nWrite a function to filter the height and width of students which are stored in a dictionary.\n\"\"\"\n", "entry_point": "filter_data", "test": "def check(candidate):\n\n    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\n    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\n"}
{"task_id": "723", "prompt": "def count_same_pair(nums1, nums2):\n\"\"\"\nWrite a function to count the same pair in two given lists using map function.\nYour code should satisfy these tests:\ncount_same_pair([1, 2, 3], [1, 4, 3]) == 2\ncount_same_pair(['a', 'b', 'c'], ['a', 'b', 'd']) == 2\ncount_same_pair([True, False, True], [True, True, False]) == 1\n\"\"\"\n", "entry_point": "count_same_pair", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1\n"}
{"task_id": "724", "prompt": "def power_base_sum(base, power):\n\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\nYour code should satisfy these tests:\npower_base_sum(2, 10) == 7\npower_base_sum(5, 5) == 11\npower_base_sum(10, 3) == 1\n\"\"\"\n", "entry_point": "power_base_sum", "test": "def check(candidate):\n\n    assert candidate(2,100)==115\n    assert candidate(8,10)==37\n    assert candidate(8,15)==62\n"}
{"task_id": "725", "prompt": "def extract_quotation(text1):\n\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\nYour code should satisfy these tests:\nextract_quotation('He said, \"Hello, world!\" and then left.') == ['Hello, world!']\nextract_quotation('She replied, \"Sure, I can do that.\"') == ['Sure, I can do that.']\nextract_quotation('The book had a quote: \"To be or not to be, that is the question.\"') == ['To be or not to be, that is the question.']\n\"\"\"\n", "entry_point": "extract_quotation", "test": "def check(candidate):\n\n    assert candidate('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n    assert candidate('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\n    assert candidate('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\n"}
{"task_id": "726", "prompt": "def multiply_elements(test_tup):\n\"\"\"\nWrite a function to multiply the adjacent elements of the given tuple.\nYour code should satisfy these tests:\nmultiply_elements((1, 2, 3, 4)) == (2, 6, 12)\nmultiply_elements((5, 5, 5, 5)) == (25, 25, 25)\nmultiply_elements((0, 1, 2, 3)) == (0, 2, 6)\n\"\"\"\n", "entry_point": "multiply_elements", "test": "def check(candidate):\n\n    assert candidate((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n    assert candidate((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\n    assert candidate((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\n"}
{"task_id": "727", "prompt": "def remove_char(S):\n\"\"\"\nWrite a function to remove all characters except letters and numbers using regex\nYour code should satisfy these tests:\nremove_char(\"Hello, World!\") == \"HelloWorld\"\nremove_char(\"Python_3.8\") == \"Python38\"\nremove_char(\"123-456-7890\") == \"1234567890\"\n\"\"\"\n", "entry_point": "remove_char", "test": "def check(candidate):\n\n    assert candidate(\"123abcjw:, .@! eiw\") == '123abcjweiw'\n    assert candidate(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\n    assert candidate(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips'\n"}
{"task_id": "728", "prompt": "def sum_list(lst1,lst2):\n\"\"\"\nWrite a function to sum elements in two lists.\nYour code should satisfy these tests:\nsum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\nsum_list([0, 0, 0], [1, 1, 1]) == [1, 1, 1]\nsum_list([-1, -2, -3], [1, 2, 3]) == [0, 0, 0]\n\"\"\"\n", "entry_point": "sum_list", "test": "def check(candidate):\n\n    assert candidate([10,20,30],[15,25,35])==[25,45,65]\n    assert candidate([1,2,3],[5,6,7])==[6,8,10]\n    assert candidate([15,20,30],[15,45,75])==[30,65,105]\n"}
{"task_id": "729", "prompt": "def add_list(nums1,nums2):\n\"\"\"\nWrite a function to add two lists using map and lambda function.\nYour code should satisfy these tests:\nadd_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\nadd_list([0, 0, 0], [1, 1, 1]) == [1, 1, 1]\nadd_list([-1, -2, -3], [1, 2, 3]) == [0, 0, 0]\n\"\"\"\n", "entry_point": "add_list", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3],[4,5,6])==[5, 7, 9]\n    assert candidate([1,2],[3,4])==[4,6]\n    assert candidate([10,20],[50,70])==[60,90]\n"}
{"task_id": "730", "prompt": "def consecutive_duplicates(nums):\n\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nYour code should satisfy these tests:\nconsecutive_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\nconsecutive_duplicates([1, 1, 1, 1, 1]) == [1]\nconsecutive_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\"\"\"\n", "entry_point": "consecutive_duplicates", "test": "def check(candidate):\n\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\n"}
{"task_id": "731", "prompt": "def lateralsurface_cone(r,h):\n\"\"\"\nWrite a function to find the lateral surface area of a cone.\nYour code should satisfy these tests:\nlateralsurface_cone(3, 4) == 47.12388980384689\nlateralsurface_cone(5, 12) == 204.20352248333654\nlateralsurface_cone(7, 24) == 549.7787143782137\n\"\"\"\n", "entry_point": "lateralsurface_cone", "test": "def check(candidate):\n\n    assert candidate(5,12)==204.20352248333654\n    assert candidate(10,15)==566.3586699569488\n    assert candidate(19,17)==1521.8090132193388\n"}
{"task_id": "732", "prompt": "def replace_specialchar(text):\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nYour code should satisfy these tests:\nreplace_specialchar(\"hello world\") == \"hello:world\"\nreplace_specialchar(\"this,is,a,test\") == \"this:is:a:test\"\nreplace_specialchar(\"no special chars\") == \"no:special:chars\"\n\"\"\"\n", "entry_point": "replace_specialchar", "test": "def check(candidate):\n\n    assert candidate('Python language, Programming language.')==('Python:language::Programming:language:')\n    assert candidate('a b c,d e f')==('a:b:c:d:e:f')\n    assert candidate('ram reshma,ram rahim')==('ram:reshma:ram:rahim')\n"}
{"task_id": "733", "prompt": "def find_first_occurrence(A, x):\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nYour code should satisfy these tests:\nfind_first_occurrence([1, 2, 4, 4, 4, 5, 6], 4) == 2\nfind_first_occurrence([1, 1, 1, 1, 1, 1, 1], 1) == 0\nfind_first_occurrence([3, 5, 7, 9, 11, 13, 15], 8) == -1\n\"\"\"\n", "entry_point": "find_first_occurrence", "test": "def check(candidate):\n\n    assert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    assert candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\n    assert candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n"}
{"task_id": "734", "prompt": "def sum_Of_Subarray_Prod(arr,n):\n\"\"\"\nWrite a python function to find sum of products of all possible subarrays.\nYour code should satisfy these tests:\nsum_Of_Subarray_Prod([1, 2, 3], 3) == 20\nsum_Of_Subarray_Prod([4, 5, 6, 7], 4) == 1284\nsum_Of_Subarray_Prod([10, 20, 30], 3) == 6860\n\"\"\"\n", "entry_point": "sum_Of_Subarray_Prod", "test": "def check(candidate):\n\n    assert candidate([1,2,3],3) == 20\n    assert candidate([1,2],2) == 5\n    assert candidate([1,2,3,4],4) == 84\n"}
{"task_id": "735", "prompt": "def set_middle_bits(n):\n\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\nYour code should satisfy these tests:\nset_middle_bits(0b101010) == 30\nset_middle_bits(0b110011) == 30\nset_middle_bits(0b1000001) == 62\nset_middle_bits(0b1111111) == 62\nset_middle_bits(0b10001) == 14\n\"\"\"\n", "entry_point": "set_middle_bits", "test": "def check(candidate):\n\n    assert toggle_middle_bits(9) == 15\n    assert toggle_middle_bits(10) == 12\n    assert toggle_middle_bits(11) == 13\n"}
{"task_id": "736", "prompt": "def left_insertion(a, x):\n\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\nYour code should satisfy these tests:\nleft_insertion([1, 2, 4, 4, 5], 4) == 2\nleft_insertion([1, 3, 5, 7], 6) == 3\nleft_insertion([0, 0, 0, 0], 0) == 0\n\"\"\"\n", "entry_point": "left_insertion", "test": "def check(candidate):\n\n    assert candidate([1,2,4,5],6)==4\n    assert candidate([1,2,4,5],3)==2\n    assert candidate([1,2,4,5],7)==4\n"}
{"task_id": "737", "prompt": "def check_str(string):\n\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nYour code should satisfy these tests:\ncheck_str(\"Apple\") == \"Valid\"\ncheck_str(\"banana\") == \"Invalid\"\ncheck_str(\"Orange_123\") == \"Valid\"\n\"\"\"\n", "entry_point": "check_str", "test": "def check(candidate):\n\n    assert candidate(\"annie\") == 'Valid'\n    assert candidate(\"dawood\") == 'Invalid'\n    assert candidate(\"Else\") == 'Valid'\n"}
{"task_id": "738", "prompt": "def geometric_sum(n):\n\"\"\"\nWrite a function to calculate the geometric sum of n-1.\nYour code should satisfy these tests:\ngeometric_sum(0) == 1.0\ngeometric_sum(1) == 1.5\ngeometric_sum(5) == 1.96875\n\"\"\"\n", "entry_point": "geometric_sum", "test": "def check(candidate):\n\n    assert candidate(7) == 1.9921875\n    assert candidate(4) == 1.9375\n    assert candidate(8) == 1.99609375\n"}
{"task_id": "739", "prompt": "def find_Index(n):\n\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\nYour code should satisfy these tests:\nfind_Index(1) == 1\nfind_Index(2) == 4\nfind_Index(3) == 14\n\"\"\"\n", "entry_point": "find_Index", "test": "def check(candidate):\n\n    assert candidate(2) == 4\n    assert candidate(3) == 14\n    assert candidate(4) == 45\n"}
{"task_id": "740", "prompt": "def tuple_to_dict(test_tup):\n\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements.\nYour code should satisfy these tests:\ntuple_to_dict(('a', 1, 'b', 2)) == {'a': 1, 'b': 2}\ntuple_to_dict(('x', 10, 'y', 20, 'z', 30)) == {'x': 10, 'y': 20, 'z': 30}\ntuple_to_dict(('key1', 'value1', 'key2', 'value2', 'key3', 'value3')) == {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n\"\"\"\n", "entry_point": "tuple_to_dict", "test": "def check(candidate):\n\n    assert candidate((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n    assert candidate((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\n    assert candidate((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}\n"}
{"task_id": "741", "prompt": "def all_Characters_Same(s):\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\nYour code should satisfy these tests:\nall_Characters_Same(\"aaaa\") == True\nall_Characters_Same(\"abc\") == False\nall_Characters_Same(\"zzzzz\") == True\n\"\"\"\n", "entry_point": "all_Characters_Same", "test": "def check(candidate):\n\n    assert candidate(\"python\") == False\n    assert candidate(\"aaa\") == True\n    assert candidate(\"data\") == False\n"}
{"task_id": "742", "prompt": "def area_tetrahedron(side):\n\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nYour code should satisfy these tests:\narea_tetrahedron(2) == 6.928203230275509\narea_tetrahedron(5) == 43.30127018922193\narea_tetrahedron(10) == 173.20508075688772\n\"\"\"\n", "entry_point": "area_tetrahedron", "test": "def check(candidate):\n\n    assert candidate(3)==15.588457268119894\n    assert candidate(20)==692.8203230275509\n    assert candidate(10)==173.20508075688772\n"}
{"task_id": "743", "prompt": "def rotate_right(list1,m,n):\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\nYour code should satisfy these tests:\nrotate_right([1, 2, 3, 4, 5], 2, 2) == [4, 5, 1, 2, 3]\nrotate_right([10, 20, 30, 40, 50, 60], 3, 3) == [40, 50, 60, 10, 20, 30]\nrotate_right([7, 8, 9, 10], 1, 1) == [10, 7, 8, 9]\nrotate_right([1, 2, 3, 4, 5, 6, 7], 4, 4) == [4, 5, 6, 7, 1, 2, 3]\nrotate_right([5, 6, 7, 8, 9], 2, 2) == [8, 9, 5, 6, 7]\n\"\"\"\n", "entry_point": "rotate_right", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n"}
{"task_id": "744", "prompt": "def check_none(test_tup):\n\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nYour code should satisfy these tests:\ncheck_none((1, 2, None, 4)) == True\ncheck_none((1, 2, 3, 4)) == False\ncheck_none((None, None, None)) == True\n\"\"\"\n", "entry_point": "check_none", "test": "def check(candidate):\n\n    assert candidate((10, 4, 5, 6, None)) == True\n    assert candidate((7, 8, 9, 11, 14)) == False\n    assert candidate((1, 2, 3, 4, None)) == True\n"}
{"task_id": "745", "prompt": "def divisible_by_digits(startnum, endnum):\n\"\"\"\nWrite a function to find numbers within a given range where every number is divisible by every digit it contains.\nYour code should satisfy these tests:\ndivisible_by_digits(10, 20) == [11, 12, 15]\ndivisible_by_digits(50, 60) == [55]\ndivisible_by_digits(100, 110) == []\n\"\"\"\n", "entry_point": "divisible_by_digits", "test": "def check(candidate):\n\n    assert candidate(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    assert candidate(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    assert candidate(20,25)==[22, 24]\n"}
{"task_id": "746", "prompt": "def sector_area(r,a):\n\"\"\"\nWrite a function to find area of a sector.\nYour code should satisfy these tests:\nsector_area(5, 90) == 19.642857142857142\nsector_area(10, 180) == 157.14285714285714\nsector_area(7, 45) == 19.25\nsector_area(3, 270) == 21.214285714285715\nsector_area(12, 360) == None\n\"\"\"\n", "entry_point": "sector_area", "test": "def check(candidate):\n\n    assert candidate(4,45)==6.285714285714286\n    assert candidate(9,45)==31.82142857142857\n    assert candidate(9,360)==None\n"}
{"task_id": "747", "prompt": "def lcs_of_three(X, Y, Z, m, n, o):\n\"\"\"\nWrite a function to find the longest common subsequence for the given three string sequence.\nYour code should satisfy these tests:\nlcs_of_three(\"abc\", \"abc\", \"abc\", 3, 3, 3) == 3\nlcs_of_three(\"abcd\", \"abcf\", \"abch\", 4, 4, 4) == 3\nlcs_of_three(\"abcdef\", \"abc\", \"def\", 6, 3, 3) == 0\n\"\"\"\n", "entry_point": "lcs_of_three", "test": "def check(candidate):\n\n    assert candidate('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\n    assert candidate('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5\n    assert candidate('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3\n"}
{"task_id": "748", "prompt": "def capital_words_spaces(str1):\n\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\nYour code should satisfy these tests:\ncapital_words_spaces(\"thisIsATest\") == 'this Is ATest'\ncapital_words_spaces(\"helloWorldExample\") == 'hello World Example'\ncapital_words_spaces(\"pythonProgramming\") == 'python Programming'\n\"\"\"\n", "entry_point": "capital_words_spaces", "test": "def check(candidate):\n\n    assert candidate(\"Python\") == 'Python'\n    assert candidate(\"PythonProgrammingExamples\") == 'Python Programming Examples'\n    assert candidate(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'\n"}
{"task_id": "749", "prompt": "def sort_numeric_strings(nums_str):\n\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\nYour code should satisfy these tests:\nsort_numeric_strings(['3', '1', '4', '1', '5']) == [1, 1, 3, 4, 5]\nsort_numeric_strings(['10', '2', '8', '6', '4']) == [2, 4, 6, 8, 10]\nsort_numeric_strings(['7', '0', '2', '9', '5']) == [0, 2, 5, 7, 9]\n\"\"\"\n", "entry_point": "sort_numeric_strings", "test": "def check(candidate):\n\n    assert candidate( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    assert candidate(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    assert candidate(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n"}
{"task_id": "750", "prompt": "def add_tuple(test_list, test_tup):\n\"\"\"\nWrite a function to add the given tuple to the given list.\nYour code should satisfy these tests:\nadd_tuple([1, 2, 3], (4, 5)) == [1, 2, 3, 4, 5]\nadd_tuple(['a', 'b'], ('c', 'd', 'e')) == ['a', 'b', 'c', 'd', 'e']\nadd_tuple((10, 20), (30, 40, 50)) == (10, 20, 30, 40, 50)\n\"\"\"\n", "entry_point": "add_tuple", "test": "def check(candidate):\n\n    assert candidate([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n    assert candidate([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\n    assert candidate([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n"}
{"task_id": "751", "prompt": "def check_min_heap(arr, i):\n\"\"\"\nWrite a function to check if the given array represents min heap or not.\nYour code should satisfy these tests:\ncheck_min_heap([10, 9, 8, 7], 0) == False\n\"\"\"\n", "entry_point": "check_min_heap", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 5, 6], 0) == True\n    assert candidate([2, 3, 4, 5, 10, 15], 0) == True\n    assert candidate([2, 10, 4, 5, 3, 15], 0) == False\n"}
{"task_id": "752", "prompt": "def jacobsthal_num(n):\n\"\"\"\nWrite a function to find the nth jacobsthal number.\nYour code should satisfy these tests:\njacobsthal_num(1) == 1\njacobsthal_num(5) == 11\n\"\"\"\n", "entry_point": "jacobsthal_num", "test": "def check(candidate):\n\n    assert candidate(5) == 11\n    assert candidate(2) == 1\n    assert candidate(4) == 5\n"}
{"task_id": "753", "prompt": "def min_k(test_list, K):\n\"\"\"\nWrite a function to find minimum k records from tuple list.\nYour code should satisfy these tests:\nmin_k([(1, 3), (2, 2), (3, 1)], 2) == [(3, 1), (2, 2)]\nmin_k([(5, 10), (4, 4), (3, 5)], 1) == [(4, 4)]\nmin_k([(7, 8), (6, 6), (5, 7)], 3) == [(6, 6), (5, 7), (7, 8)]\n\"\"\"\n", "entry_point": "min_k", "test": "def check(candidate):\n\n    assert candidate([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n    assert candidate([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n    assert candidate([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n"}
{"task_id": "754", "prompt": "def extract_index_list(l1, l2, l3):\n\"\"\"\nWrite a function to find common index elements from three lists.\nYour code should satisfy these tests:\nextract_index_list([1, 2, 3], [1, 4, 3], [1, 5, 3]) == [1, 3]\nextract_index_list([7, 8, 9], [7, 8, 10], [7, 8, 11]) == [7, 8]\nextract_index_list([10, 20, 30], [10, 20, 30], [10, 20, 30]) == [10, 20, 30]\n\"\"\"\n", "entry_point": "extract_index_list", "test": "def check(candidate):\n\n    assert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n    assert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\n    assert candidate([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\n"}
{"task_id": "755", "prompt": "def second_smallest(numbers):\n\"\"\"\nWrite a function to find the second smallest number in a list.\nYour code should satisfy these tests:\nsecond_smallest([4, 2, 1, 3, 5]) == 2\nsecond_smallest([10, 10, 9, 8, 7]) == 8\nsecond_smallest([1, 1, 1, 2, 2]) == 2\n\"\"\"\n", "entry_point": "second_smallest", "test": "def check(candidate):\n\n    assert candidate([1, 2, -8, -2, 0, -2])==-2\n    assert candidate([1, 1, -0.5, 0, 2, -2, -2])==-0.5\n    assert candidate([2,2])==None\n"}
{"task_id": "756", "prompt": "def text_match_zero_one(text):\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or one 'b'.\nYour code should satisfy these tests:\ntext_match_zero_one('ac') == 'Found a match!'\ntext_match_zero_one('abc') == 'Found a match!'\ntext_match_zero_one('b') == 'Not matched!'\ntext_match_zero_one('ad') == 'Found a match!'\ntext_match_zero_one('axyz') == 'Found a match!'\n\"\"\"\n", "entry_point": "text_match_zero_one", "test": "def check(candidate):\n\n    assert candidate(\"ac\")==('Found a match!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abbbba\")==('Found a match!')\n"}
{"task_id": "757", "prompt": "def count_reverse_pairs(test_list):\n\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list.\nYour code should satisfy these tests:\ncount_reverse_pairs(['abc', 'cba', 'xyz', 'zyx']) == '2'\ncount_reverse_pairs(['123', '321', '456', '654', '789']) == '2'\ncount_reverse_pairs(['level', 'deified', 'rotor', 'redder']) == '4'\n\"\"\"\n", "entry_point": "count_reverse_pairs", "test": "def check(candidate):\n\n    assert candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\n    assert candidate([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\n    assert candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2'\n"}
{"task_id": "758", "prompt": "def unique_sublists(list1):\n\"\"\"\nWrite a function to count number of unique lists within a list.\nYour code should satisfy these tests:\nunique_sublists([[1, 2], [3, 4], [1, 2]]) == {(1, 2): 2, (3, 4): 1}\nunique_sublists([[5, 6], [7, 8], [5, 6], [7, 8]]) == {(5, 6): 2, (7, 8): 2}\nunique_sublists([[9, 10], [11, 12], [13, 14], [9, 10], [11, 12]]) == {(9, 10): 2, (11, 12): 2, (13, 14): 1}\n\"\"\"\n", "entry_point": "unique_sublists", "test": "def check(candidate):\n\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert candidate([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\n"}
{"task_id": "759", "prompt": "def is_decimal(num):\n\"\"\"\nWrite a function to check a decimal with a precision of 2.\nYour code should satisfy these tests:\nis_decimal(\"123\") == True\nis_decimal(\"123.45\") == True\nis_decimal(\"123.456\") == False\n\"\"\"\n", "entry_point": "is_decimal", "test": "def check(candidate):\n\n    assert candidate('123.11')==True\n    assert candidate('e666.86')==False\n    assert candidate('3.124587')==False\n"}
{"task_id": "760", "prompt": "def unique_Element(arr,n):\n\"\"\"\nWrite a python function to check whether an array contains only one distinct element or not.\nYour code should satisfy these tests:\nunique_Element([1, 1, 1, 1], 4) == 'YES'\nunique_Element([2, 3, 2, 3], 4) == 'NO'\nunique_Element([5], 1) == 'YES'\n\"\"\"\n", "entry_point": "unique_Element", "test": "def check(candidate):\n\n    assert candidate([1,1,1],3) == 'YES'\n    assert candidate([1,2,1,2],4) == 'NO'\n    assert candidate([1,2,3,4,5],5) == 'NO'\n"}
{"task_id": "761", "prompt": "def arc_length(d,a):\n\"\"\"\nWrite a function to caluclate arc length of an angle.\nYour code should satisfy these tests:\narc_length(10, 90) == 7.857142857142857\narc_length(20, 180) == 31.428571428571427\narc_length(15, 45) == 5.892857142857142\narc_length(30, 270) == 70.71428571428571\narc_length(5, 360) == None\n\"\"\"\n", "entry_point": "arc_length", "test": "def check(candidate):\n\n    assert candidate(9,45)==3.5357142857142856\n    assert candidate(9,480)==None\n    assert candidate(5,270)==11.785714285714285\n"}
{"task_id": "762", "prompt": "def check_monthnumber_number(monthnum3):\n\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\nYour code should satisfy these tests:\ncheck_monthnumber_number(4) == True\ncheck_monthnumber_number(7) == False\ncheck_monthnumber_number(11) == True\n\"\"\"\n", "entry_point": "check_monthnumber_number", "test": "def check(candidate):\n\n    assert candidate(6)==True\n    assert candidate(2)==False\n    assert candidate(12)==False\n"}
{"task_id": "763", "prompt": "def find_Min_Diff(arr,n):\n\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array.\nYour code should satisfy these tests:\nfind_Min_Diff([1, 5, 3, 19, 18, 25], 6) == 1\nfind_Min_Diff([4, 9, 1, 32, 12], 5) == 3\nfind_Min_Diff([100, 50, 200, 150, 300], 5) == 50\nfind_Min_Diff([10, 22, 12, 11, 15], 5) == 1\nfind_Min_Diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 1\n\"\"\"\n", "entry_point": "find_Min_Diff", "test": "def check(candidate):\n\n    assert candidate((1,5,3,19,18,25),6) == 1\n    assert candidate((4,3,2,6),4) == 1\n    assert candidate((30,5,20,9),4) == 4\n"}
{"task_id": "764", "prompt": "def number_ctr(str):\n\"\"\"\nWrite a python function to count numeric values in a given string.\nYour code should satisfy these tests:\nnumber_ctr(\"abc123\") == 3\nnumber_ctr(\"no_numbers_here!\") == 0\nnumber_ctr(\"2023_is_the_year\") == 4\n\"\"\"\n", "entry_point": "number_ctr", "test": "def check(candidate):\n\n    assert candidate('program2bedone') == 1\n    assert candidate('3wonders') ==1\n    assert candidate('123') == 3\n"}
{"task_id": "765", "prompt": "def is_polite(n):\n\"\"\"\nWrite a function to find nth polite number.\nYour code should satisfy these tests:\nis_polite(5) == 9\nis_polite(10) == 14\nis_polite(20) == 25\nis_polite(100) == 107\nis_polite(200) == 208\n\"\"\"\n", "entry_point": "is_polite", "test": "def check(candidate):\n\n    assert candidate(7) == 11\n    assert candidate(4) == 7\n    assert candidate(9) == 13\n"}
{"task_id": "766", "prompt": "def pair_wise(l1):\n\"\"\"\nWrite a function to iterate over all pairs of consecutive items in a given list.\nYour code should satisfy these tests:\npair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]\npair_wise(['a', 'b', 'c']) == [('a', 'b'), ('b', 'c')]\npair_wise([True, False, True]) == [(True, False), (False, True)]\n\"\"\"\n", "entry_point": "pair_wise", "test": "def check(candidate):\n\n    assert candidate([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    assert candidate([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n"}
{"task_id": "767", "prompt": "def get_Pairs_Count(arr,n,sum):\n\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\nYour code should satisfy these tests:\nget_Pairs_Count([1, 5, 7, -1], 4, 6) == 2\nget_Pairs_Count([10, 12, 10, 15, -1, 7, 6, 5, 4, 2, 1, 1, 1], 13, 11) == 9\nget_Pairs_Count([0, 0, 0, 0], 4, 0) == 6\n\"\"\"\n", "entry_point": "get_Pairs_Count", "test": "def check(candidate):\n\n    assert candidate([1,1,1,1],4,2) == 6\n    assert candidate([1,5,7,-1,5],5,6) == 3\n    assert candidate([1,-2,3],3,1) == 1\n"}
{"task_id": "768", "prompt": "def check_Odd_Parity(x):\n\"\"\"\nWrite a python function to check for odd parity of a given number.\nYour code should satisfy these tests:\ncheck_Odd_Parity(5) == False\ncheck_Odd_Parity(7) == True\ncheck_Odd_Parity(10) == False\n\"\"\"\n", "entry_point": "check_Odd_Parity", "test": "def check(candidate):\n\n    assert candidate(13) == True\n    assert candidate(21) == True\n    assert candidate(18) == False\n"}
{"task_id": "769", "prompt": "def Diff(li1,li2):\n\"\"\"\nWrite a python function to get the difference between two lists.\nYour code should satisfy these tests:\nDiff([1, 2, 3], [2, 3, 4]) == [1, 4]\nDiff([5, 6, 7], [7, 8, 9]) == [5, 6, 8, 9]\nDiff([10, 20, 30], [30, 40, 50]) == [10, 20, 40, 50]\nDiff([100, 200], [200, 300]) == [100, 300]\nDiff([True, False], [False]) == [True]\n\"\"\"\n", "entry_point": "Diff", "test": "def check(candidate):\n\n    assert (candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n    assert (candidate([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\n    assert (candidate([1,2,3], [6,7,1])) == [2,3,6,7]\n"}
{"task_id": "770", "prompt": "def odd_Num_Sum(n):\n\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nYour code should satisfy these tests:\nodd_Num_Sum(1) == 1\nodd_Num_Sum(2) == 82\nodd_Num_Sum(3) == 707\n\"\"\"\n", "entry_point": "odd_Num_Sum", "test": "def check(candidate):\n\n    assert candidate(2) == 82\n    assert candidate(3) == 707\n    assert candidate(4) == 3108\n"}
{"task_id": "771", "prompt": "def check_expression(exp):\n\"\"\"\nWrite a function to check if the given expression is balanced or not.\nYour code should satisfy these tests:\ncheck_expression(\"()[]{}\") == True\ncheck_expression(\"([{}])\") == True\ncheck_expression(\"(]\") == False\n\"\"\"\n", "entry_point": "check_expression", "test": "def check(candidate):\n\n    assert candidate(\"{()}[{}]\") == True\n    assert candidate(\"{()}[{]\") == False\n    assert candidate(\"{()}[{}][]({})\") == True\n"}
{"task_id": "772", "prompt": "def remove_length(test_str, K):\n\"\"\"\nWrite a function to remove all the words with k length in the given string.\nYour code should satisfy these tests:\nremove_length(\"hello world test\", 5) == 'test'\nremove_length(\"python is fun\", 2) == 'python fun'\nremove_length(\"a quick brown fox\", 1) == 'quick brown fox'\n\"\"\"\n", "entry_point": "remove_length", "test": "def check(candidate):\n\n    assert candidate('The person is most value tet', 3) == 'person is most value'\n    assert candidate('If you told me about this ok', 4) == 'If you me about ok'\n    assert candidate('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n"}
{"task_id": "773", "prompt": "def occurance_substring(text,pattern):\n\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string.\nYour code should satisfy these tests:\noccurance_substring(\"hello world\", \"world\") == ('world', 6, 11)\noccurance_substring(\"abababa\", \"aba\") == ('aba', 0, 3)\noccurance_substring(\"mississippi\", \"issi\") == ('issi', 1, 5)\n\"\"\"\n", "entry_point": "occurance_substring", "test": "def check(candidate):\n\n    assert candidate('python programming, python language','python')==('python', 0, 6)\n    assert candidate('python programming,programming language','programming')==('programming', 7, 18)\n    assert candidate('python programming,programming language','language')==('language', 31, 39)\n"}
{"task_id": "774", "prompt": "def check_email(email):\n\"\"\"\nWrite a function to check if the string is a valid email address or not using regex.\nYour code should satisfy these tests:\ncheck_email(\"example@test.com\") == \"Valid Email\"\ncheck_email(\"user.name@domain.co\") == \"Valid Email\"\ncheck_email(\"user@domain.com\") == \"Valid Email\"\n\"\"\"\n", "entry_point": "check_email", "test": "def check(candidate):\n\n    assert candidate(\"ankitrai326@gmail.com\") == 'Valid Email'\n    assert candidate(\"my.ownsite@ourearth.org\") == 'Valid Email'\n    assert candidate(\"ankitaoie326.com\") == 'Invalid Email'\n"}
{"task_id": "775", "prompt": "def odd_position(nums):\n\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nYour code should satisfy these tests:\nodd_position([0, 1, 2, 3, 4]) == True\nodd_position([1, 3, 5, 7, 9]) == False\nodd_position([2, 4, 6, 8, 10]) == False\n\"\"\"\n", "entry_point": "odd_position", "test": "def check(candidate):\n\n    assert candidate([2,1,4,3,6,7,6,3]) == True\n    assert candidate([4,1,2]) == True\n    assert candidate([1,2,3]) == False\n"}
{"task_id": "776", "prompt": "def count_vowels(test_str):\n\"\"\"\nWrite a function to count those characters which have vowels as their neighbors in the given string.\nYour code should satisfy these tests:\ncount_vowels(\"hello\") == 3\ncount_vowels(\"world\") == 2\ncount_vowels(\"python\") == 2\ncount_vowels(\"programming\") == 6\ncount_vowels(\"aeiou\") == 0\n\"\"\"\n", "entry_point": "count_vowels", "test": "def check(candidate):\n\n    assert candidate('bestinstareels') == 7\n    assert candidate('partofthejourneyistheend') == 12\n    assert candidate('amazonprime') == 5\n"}
{"task_id": "777", "prompt": "def find_Sum(arr,n):\n\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given array.\nYour code should satisfy these tests:\nfind_Sum([1, 2, 3, 4, 5], 5) == 15\nfind_Sum([1, 1, 2, 2, 3, 3], 6) == 6\nfind_Sum([5, 5, 5, 5, 5], 5) == 5\n\"\"\"\n", "entry_point": "find_Sum", "test": "def check(candidate):\n\n    assert candidate([1,2,3,1,1,4,5,6],8) == 21\n    assert candidate([1,10,9,4,2,10,10,45,4],9) == 71\n    assert candidate([12,10,9,45,2,10,10,45,10],9) == 78\n"}
{"task_id": "778", "prompt": "def pack_consecutive_duplicates(list1):\n\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nYour code should satisfy these tests:\npack_consecutive_duplicates([1, 1, 2, 2, 3, 1]) == [[1, 1], [2, 2], [3], [1]]\npack_consecutive_duplicates(['a', 'a', 'a', 'b', 'c', 'c', 'a']) == [['a', 'a', 'a'], ['b'], ['c', 'c'], ['a']]\npack_consecutive_duplicates([4, 5, 5, 5, 6, 6, 7, 8, 8, 8, 8]) == [[4], [5, 5, 5], [6, 6], [7], [8, 8, 8, 8]]\n\"\"\"\n", "entry_point": "pack_consecutive_duplicates", "test": "def check(candidate):\n\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]\n"}
{"task_id": "779", "prompt": "def unique_sublists(list1):\n\"\"\"\nWrite a function to count the number of unique lists within a list.\nYour code should satisfy these tests:\nunique_sublists([[1, 2], [3, 4], [1, 2]]) == {(1, 2): 2, (3, 4): 1}\nunique_sublists([[5, 6], [7, 8], [5, 6], [7, 8]]) == {(5, 6): 2, (7, 8): 2}\nunique_sublists([[9, 10], [11, 12], [13, 14], [9, 10], [11, 12]]) == {(9, 10): 2, (11, 12): 2, (13, 14): 1}\n\"\"\"\n", "entry_point": "unique_sublists", "test": "def check(candidate):\n\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert candidate([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}\n"}
{"task_id": "780", "prompt": "def find_combinations(test_list):\n\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list.\nYour code should satisfy these tests:\nfind_combinations([(1, 2), (3, 4), (5, 6)]) == [(4, 6), (6, 8), (8, 10)]\nfind_combinations([(0, 0), (1, 1), (2, 2)]) == [(1, 1), (2, 2), (3, 3)]\nfind_combinations([(10, 20), (30, 40)]) == [(40, 60)]\n\"\"\"\n", "entry_point": "find_combinations", "test": "def check(candidate):\n\n    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n"}
{"task_id": "781", "prompt": "def count_Divisors(n):\n\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\nYour code should satisfy these tests:\ncount_Divisors(9) == \"Odd\"\ncount_Divisors(16) == \"Odd\"\ncount_Divisors(28) == \"Even\"\n\"\"\"\n", "entry_point": "count_Divisors", "test": "def check(candidate):\n\n    assert candidate(10) == \"Even\"\n    assert candidate(100) == \"Odd\"\n    assert candidate(125) == \"Even\"\n"}
{"task_id": "782", "prompt": "def Odd_Length_Sum(arr):\n\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\nYour code should satisfy these tests:\nOdd_Length_Sum([1, 4, 2, 5, 3]) == 58\nOdd_Length_Sum([10, 20, 30]) == 120\nOdd_Length_Sum([7, 1, 3, 4, 5, 6]) == 111\n\"\"\"\n", "entry_point": "Odd_Length_Sum", "test": "def check(candidate):\n\n    assert candidate([1,2,4]) == 14\n    assert candidate([1,2,1,2]) == 15\n    assert candidate([1,7]) == 8\n"}
{"task_id": "783", "prompt": "def rgb_to_hsv(r, g, b):\n\"\"\"\nWrite a function to convert rgb color to hsv color.\nYour code should satisfy these tests:\nrgb_to_hsv(255, 0, 0) == (0.0, 100.0, 100.0)\nrgb_to_hsv(0, 255, 0) == (120.0, 100.0, 100.0)\nrgb_to_hsv(0, 0, 255) == (240.0, 100.0, 100.0)\n\"\"\"\n", "entry_point": "rgb_to_hsv", "test": "def check(candidate):\n\n    assert candidate(255, 255, 255)==(0, 0.0, 100.0)\n    assert candidate(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\n    assert candidate(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)\n"}
{"task_id": "784", "prompt": "def mul_even_odd(list1):\n\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nYour code should satisfy these tests:\nmul_even_odd([2, 4, 6, 8, 10, 11]) == 22\nmul_even_odd([1, 3, 5, 7, 9, 2]) == 2\nmul_even_odd([7, 14, 21, 28, 35]) == 98\n\"\"\"\n", "entry_point": "mul_even_odd", "test": "def check(candidate):\n\n    assert candidate([1,3,5,7,4,1,6,8])==4\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==2\n    assert candidate([1,5,7,9,10])==10\n"}
{"task_id": "785", "prompt": "def tuple_str_int(test_str):\n\"\"\"\nWrite a function to convert tuple string to integer tuple.\nYour code should satisfy these tests:\ntuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\ntuple_str_int(\"(10, 20, 30, 40)\") == (10, 20, 30, 40)\ntuple_str_int(\"(100, 200, 300, 400, 500)\") == (100, 200, 300, 400, 500)\n\"\"\"\n", "entry_point": "tuple_str_int", "test": "def check(candidate):\n\n    assert candidate(\"(7, 8, 9)\") == (7, 8, 9)\n    assert candidate(\"(1, 2, 3)\") == (1, 2, 3)\n    assert candidate(\"(4, 5, 6)\") == (4, 5, 6)\n"}
{"task_id": "786", "prompt": "def right_insertion(a, x):\n\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nYour code should satisfy these tests:\nright_insertion([1, 2, 4, 4, 5], 4) == 4\nright_insertion([1, 3, 5, 7], 6) == 3\nright_insertion([0, 0, 0, 0], 0) == 4\n\"\"\"\n", "entry_point": "right_insertion", "test": "def check(candidate):\n\n    assert candidate([1,2,4,5],6)==4\n    assert candidate([1,2,4,5],3)==2\n    assert candidate([1,2,4,5],7)==4\n"}
{"task_id": "787", "prompt": "def text_match_three(text):\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nYour code should satisfy these tests:\ntext_match_three(\"aabbb\") == 'Found a match!'\ntext_match_three(\"abbb\") == 'Found a match!'\ntext_match_three(\"aabb\") == 'Not matched!'\n\"\"\"\n", "entry_point": "text_match_three", "test": "def check(candidate):\n\n    assert candidate(\"ac\")==('Not matched!')\n    assert candidate(\"dc\")==('Not matched!')\n    assert candidate(\"abbbba\")==('Found a match!')\n"}
{"task_id": "788", "prompt": "def new_tuple(test_list, test_str):\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\nYour code should satisfy these tests:\nnew_tuple([1, 2, 3], 'a') == (1, 2, 3, 'a')\nnew_tuple(['hello', 'world'], 'python') == ('hello', 'world', 'python')\nnew_tuple([], 'start') == ('start',)\n\"\"\"\n", "entry_point": "new_tuple", "test": "def check(candidate):\n\n    assert candidate([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n    assert candidate([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\n    assert candidate([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')\n"}
{"task_id": "789", "prompt": "def perimeter_polygon(s,l):\n\"\"\"\nWrite a function to calculate the perimeter of a regular polygon.\nYour code should satisfy these tests:\nperimeter_polygon(5, 6) == 30\nperimeter_polygon(3, 10) == 30\nperimeter_polygon(8, 2) == 16\n\"\"\"\n", "entry_point": "perimeter_polygon", "test": "def check(candidate):\n\n    assert candidate(4,20)==80\n    assert candidate(10,15)==150\n    assert candidate(9,7)==63\n"}
{"task_id": "790", "prompt": "def even_position(nums):\n\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nYour code should satisfy these tests:\neven_position([0, 1, 2, 3, 4]) == True\neven_position([1, 3, 5, 7, 9]) == False\neven_position([2, 4, 6, 8, 10]) == False\n\"\"\"\n", "entry_point": "even_position", "test": "def check(candidate):\n\n    assert candidate([3,2,1]) == False\n    assert candidate([1,2,3]) == False\n    assert candidate([2,1,4]) == True\n"}
{"task_id": "791", "prompt": "def remove_nested(test_tup):\n\"\"\"\nWrite a function to remove the nested record from the given tuple.\nYour code should satisfy these tests:\nremove_nested((1, (2, 3), 4, (5, 6))) == (1, 4)\nremove_nested((('a', 'b'), 'c', ('d',), 'e')) == ('c', 'e')\nremove_nested((1, 2, 3, 4)) == (1, 2, 3, 4)\n\"\"\"\n", "entry_point": "remove_nested", "test": "def check(candidate):\n\n    assert candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n    assert candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\n    assert candidate((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\n"}
{"task_id": "792", "prompt": "def count_list(input_list):\n\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nYour code should satisfy these tests:\ncount_list([]) == 0\ncount_list([1, 2, 3]) == 3\ncount_list(['a', 'b', 'c', 'd']) == 4\n\"\"\"\n", "entry_point": "count_list", "test": "def check(candidate):\n\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n    assert candidate([[1,2],[2,3],[4,5]]) == 3\n    assert candidate([[1,0],[2,0]]) == 2\n"}
{"task_id": "793", "prompt": "def last(arr,x,n):\n\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nYour code should satisfy these tests:\nlast([1, 2, 2, 2, 3, 4, 5], 2, 7) == 3\nlast([10, 20, 20, 20, 30, 40, 50], 20, 7) == 3\nlast([5, 10, 15, 20, 25, 30, 35], 35, 7) == 6\n\"\"\"\n", "entry_point": "last", "test": "def check(candidate):\n\n    assert candidate([1,2,3],1,3) == 0\n    assert candidate([1,1,1,2,3,4],1,6) == 2\n    assert candidate([2,3,2,3,6,8,9],3,8) == 3\n"}
{"task_id": "794", "prompt": "def text_starta_endb(text):\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nYour code should satisfy these tests:\ntext_starta_endb(\"abc\") == 'Not matched!'\ntext_starta_endb(\"ababab\") == 'Found a match!'\ntext_starta_endb(\"cba\") == 'Not matched!'\ntext_starta_endb(\"xyab\") == 'Found a match!'\ntext_starta_endb(\"abxyzb\") == 'Found a match!'\n\"\"\"\n", "entry_point": "text_starta_endb", "test": "def check(candidate):\n\n    assert candidate(\"aabbbb\")==('Found a match!')\n    assert candidate(\"aabAbbbc\")==('Not matched!')\n    assert candidate(\"accddbbjjj\")==('Not matched!')\n"}
{"task_id": "795", "prompt": "def cheap_items(items,n):\n\"\"\"\nWrite a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\n", "entry_point": "cheap_items", "test": "def check(candidate):\n\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]\n"}
{"task_id": "796", "prompt": "def return_sum(dict):\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nYour code should satisfy these tests:\nreturn_sum({'a': 10, 'b': 20, 'c': 30}) == 60\nreturn_sum({'x': 100, 'y': 200}) == 300\nreturn_sum({'m': 5, 'n': 15, 'o': 25, 'p': 35}) == 80\n\"\"\"\n", "entry_point": "return_sum", "test": "def check(candidate):\n\n    assert candidate({'a': 100, 'b':200, 'c':300}) == 600\n    assert candidate({'a': 25, 'b':18, 'c':45}) == 88\n    assert candidate({'a': 36, 'b':39, 'c':49}) == 124\n"}
{"task_id": "797", "prompt": "def sum_Odd(n):\n\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nYour code should satisfy these tests:\nsum_Odd(1) == 1\nsum_Odd(5) == 9\nsum_Odd(10) == 25\nsum_Odd(15) == 64\nsum_Odd(20) == 100\n\"\"\"\n", "entry_point": "sum_Odd", "test": "def check(candidate):\n\n    assert sum_in_Range(2,5) == 8\n    assert sum_in_Range(5,7) == 12\n    assert sum_in_Range(7,13) == 40\n"}
{"task_id": "798", "prompt": "def _sum(arr):\n\"\"\"\nWrite a python function to find the sum of an array.\nYour code should satisfy these tests:\n_sum([1, 2, 3, 4, 5]) == 15\n_sum([-1, -2, -3, -4, -5]) == -15\n_sum([100, 200, 300]) == 600\n\"\"\"\n", "entry_point": "_sum", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([15, 12, 13, 10]) == 50\n    assert candidate([0, 1, 2]) == 3\n"}
{"task_id": "799", "prompt": "def left_Rotate(n,d):\n\"\"\"\nWrite a python function to left rotate the bits of a given number.\n\"\"\"\n", "entry_point": "left_Rotate", "test": "def check(candidate):\n\n    assert candidate(16,2) == 64\n    assert candidate(10,2) == 40\n    assert candidate(99,3) == 792\n"}
{"task_id": "800", "prompt": "def remove_all_spaces(text):\n\"\"\"\nWrite a function to remove all whitespaces from a string.\nYour code should satisfy these tests:\nremove_all_spaces(\"Hello World\") == \"HelloWorld\"\nremove_all_spaces(\"  Leading and trailing spaces  \") == \"Leadingandtrailingspaces\"\nremove_all_spaces(\"Multiple    spaces    between\") == \"Multiplespacesbetween\"\n\"\"\"\n", "entry_point": "remove_all_spaces", "test": "def check(candidate):\n\n    assert candidate('python  program')==('pythonprogram')\n    assert candidate('python   programming    language')==('pythonprogramminglanguage')\n    assert candidate('python                     program')==('pythonprogram')\n"}
{"task_id": "801", "prompt": "def test_three_equal(x,y,z):\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nYour code should satisfy these tests:\ntest_three_equal(1, 2, 3) == 0\ntest_three_equal(5, 5, 5) == 3\ntest_three_equal(7, 7, 8) == 2\n\"\"\"\n", "entry_point": "test_three_equal", "test": "def check(candidate):\n\n    assert candidate(1,1,1) == 3\n    assert candidate(-1,-2,-3) == 0\n    assert candidate(1,2,2) == 2\n"}
{"task_id": "802", "prompt": "def count_Rotation(arr,n):\n\"\"\"\nWrite a python function to count the number of rotations required to generate a sorted array.\nYour code should satisfy these tests:\ncount_Rotation([15, 18, 2, 3, 6, 12], 6) == 2\ncount_Rotation([7, 9, 11, 12, 5], 5) == 4\ncount_Rotation([1, 2, 3, 4, 5, 6], 6) == 0\n\"\"\"\n", "entry_point": "count_Rotation", "test": "def check(candidate):\n\n    assert candidate([3,2,1],3) == 1\n    assert candidate([4,5,1,2,3],5) == 2\n    assert candidate([7,8,9,1,2,3],6) == 3\n"}
{"task_id": "803", "prompt": "def is_Perfect_Square(n):\n\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\nYour code should satisfy these tests:\nis_Perfect_Square(16) == True\nis_Perfect_Square(14) == False\nis_Perfect_Square(25) == True\n\"\"\"\n", "entry_point": "is_Perfect_Square", "test": "def check(candidate):\n\n    assert candidate(10) == False\n    assert candidate(36) == True\n    assert candidate(14) == False\n"}
{"task_id": "804", "prompt": "def is_Product_Even(arr,n):\n\"\"\"\nWrite a python function to check whether the product of numbers is even or not.\nYour code should satisfy these tests:\nis_Product_Even([1, 3, 5, 7], 4) == False\nis_Product_Even([2, 3, 5, 7], 4) == True\nis_Product_Even([11, 13, 17, 19, 20], 5) == True\n\"\"\"\n", "entry_point": "is_Product_Even", "test": "def check(candidate):\n\n    assert candidate([1,2,3],3) == True\n    assert candidate([1,2,1,4],4) == True\n    assert candidate([1,1],2) == False\n"}
{"task_id": "805", "prompt": "def max_sum_list(lists):\n\"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\nYour code should satisfy these tests:\nmax_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]\nmax_sum_list([[10, 20], [5, 5, 5, 5], [1, 2, 3, 4, 5]]) == [10, 20]\nmax_sum_list([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == [-1, -2, -3]\n\"\"\"\n", "entry_point": "max_sum_list", "test": "def check(candidate):\n\n    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n    assert candidate([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]\n    assert candidate([[2,3,1]])==[2,3,1]\n"}
{"task_id": "806", "prompt": "def max_run_uppercase(test_str):\n\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nYour code should satisfy these tests:\nmax_run_uppercase(\"HELLOworld\") == 0\nmax_run_uppercase(\"aBcDEFGhIJK\") == 3\nmax_run_uppercase(\"PythonPROGRAMMING\") == 11\n\"\"\"\n", "entry_point": "max_run_uppercase", "test": "def check(candidate):\n\n    assert candidate('GeMKSForGERksISBESt') == 5\n    assert candidate('PrECIOusMOVemENTSYT') == 6\n    assert candidate('GooGLEFluTTER') == 4\n"}
{"task_id": "807", "prompt": "def first_odd(nums):\n\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nYour code should satisfy these tests:\nfirst_odd([2, 4, 6, 8, 10, 11]) == 11\nfirst_odd([1, 3, 5, 7, 9]) == 1\nfirst_odd([2, 4, 6, 8, 10]) == -1\n\"\"\"\n", "entry_point": "first_odd", "test": "def check(candidate):\n\n    assert candidate([1,3,5]) == 1\n    assert candidate([2,4,1,3]) == 1\n    assert candidate ([8,9,1]) == 9\n"}
{"task_id": "808", "prompt": "def check_K(test_tup, K):\n\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nYour code should satisfy these tests:\ncheck_K((1, 2, 3, 4, 5), 3) == True\ncheck_K(('a', 'b', 'c'), 'd') == False\ncheck_K((10, 20, 30, 40), 25) == False\n\"\"\"\n", "entry_point": "check_K", "test": "def check(candidate):\n\n    assert candidate((10, 4, 5, 6, 8), 6) == True\n    assert candidate((1, 2, 3, 4, 5, 6), 7) == False\n    assert candidate((7, 8, 9, 44, 11, 12), 11) == True\n"}
{"task_id": "809", "prompt": "def check_smaller(test_tup1, test_tup2):\n\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\nYour code should satisfy these tests:\ncheck_smaller((5, 6, 7), (4, 5, 6)) == True\ncheck_smaller((1, 2, 3), (2, 3, 4)) == False\ncheck_smaller((10, 20, 30), (9, 19, 29)) == True\n\"\"\"\n", "entry_point": "check_smaller", "test": "def check(candidate):\n\n    assert candidate((1, 2, 3), (2, 3, 4)) == False\n    assert candidate((4, 5, 6), (3, 4, 5)) == True\n    assert candidate((11, 12, 13), (10, 11, 12)) == True\n"}
{"task_id": "810", "prompt": "def count_variable(a,b,c,d):\n\"\"\"\nWrite a function to iterate over elements repeating each as many times as its count.\nYour code should satisfy these tests:\ncount_variable(2, 3, 1, 4) == ['p', 'p', 'q', 'q', 'q', 'r', 's', 's', 's', 's']\ncount_variable(0, 0, 0, 0) == []\ncount_variable(5, 5, 5, 5) == ['p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's']\n\"\"\"\n", "entry_point": "count_variable", "test": "def check(candidate):\n\n    assert candidate(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q']\n    assert candidate(0,1,2,3)==['q', 'r', 'r', 's', 's', 's']\n    assert candidate(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']\n"}
{"task_id": "811", "prompt": "def check_identical(test_list1, test_list2):\n\"\"\"\nWrite a function to check if two lists of tuples are identical or not.\nYour code should satisfy these tests:\ncheck_identical([1, 2, 3], [1, 2, 3]) == True\ncheck_identical([1, 2, 3], [3, 2, 1]) == False\ncheck_identical(['a', 'b'], ['a', 'b', 'c']) == False\n\"\"\"\n", "entry_point": "check_identical", "test": "def check(candidate):\n\n    assert candidate([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\n    assert candidate([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\n    assert candidate([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True\n"}
{"task_id": "812", "prompt": "def road_rd(street):\n\"\"\"\nWrite a function to abbreviate 'road' as 'rd.' in a given string.\nYour code should satisfy these tests:\nroad_rd(\"Main Road\") == \"Main Rd.\"\nroad_rd(\"Elm Street Road\") == \"Elm Street Rd.\"\nroad_rd(\"Broadway Road\") == \"Broadway Rd.\"\n\"\"\"\n", "entry_point": "road_rd", "test": "def check(candidate):\n\n    assert candidate(\"ravipadu Road\")==('ravipadu Rd.')\n    assert candidate(\"palnadu Road\")==('palnadu Rd.')\n    assert candidate(\"eshwar enclave Road\")==('eshwar enclave Rd.')\n"}
{"task_id": "813", "prompt": "def string_length(str1):\n\"\"\"\nWrite a function to find length of the string.\nYour code should satisfy these tests:\nstring_length(\"hello\") == 5\nstring_length(\"\") == 0\nstring_length(\"Python Programming\") == 18\n\"\"\"\n", "entry_point": "string_length", "test": "def check(candidate):\n\n    assert candidate('python')==6\n    assert candidate('program')==7\n    assert candidate('language')==8\n"}
{"task_id": "814", "prompt": "def rombus_area(p,q):\n\"\"\"\nWrite a function to find the area of a rombus.\nYour code should satisfy these tests:\nrombus_area(10, 5) == 25.0\nrombus_area(8, 6) == 24.0\nrombus_area(12, 7) == 42.0\n\"\"\"\n", "entry_point": "rombus_area", "test": "def check(candidate):\n\n    assert candidate(10,20)==100\n    assert candidate(10,5)==25\n    assert candidate(4,2)==4\n"}
{"task_id": "815", "prompt": "def sort_by_dnf(arr, n):\n\"\"\"\nWrite a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\nYour code should satisfy these tests:\nsort_by_dnf([2, 0, 2, 1, 1, 0], 6) == [0, 0, 1, 1, 2, 2]\nsort_by_dnf([0, 1, 2, 0, 1, 2], 6) == [0, 0, 1, 1, 2, 2]\nsort_by_dnf([1, 2, 0, 1, 0, 0], 6) == [0, 0, 0, 1, 1, 2]\n\"\"\"\n", "entry_point": "sort_by_dnf", "test": "def check(candidate):\n\n    assert candidate([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\n    assert candidate([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n    assert candidate([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n"}
{"task_id": "816", "prompt": "def clear_tuple(test_tup):\n\"\"\"\nWrite a function to clear the values of the given tuples.\nYour code should satisfy these tests:\nclear_tuple((1, 2, 3)) == ()\nclear_tuple(('a', 'b', 'c')) == ()\nclear_tuple((True, False, True)) == ()\n\"\"\"\n", "entry_point": "clear_tuple", "test": "def check(candidate):\n\n    assert candidate((1, 5, 3, 6, 8)) == ()\n    assert candidate((2, 1, 4 ,5 ,6)) == ()\n    assert candidate((3, 2, 5, 6, 8)) == ()\n"}
{"task_id": "817", "prompt": "def div_of_nums(nums,m,n):\n\"\"\"\nWrite a function to find numbers divisible by m or n from a list of numbers using lambda function.\nYour code should satisfy these tests:\ndiv_of_nums([10, 15, 20, 25, 30], 5, 3) == [10, 15, 20, 25, 30]\ndiv_of_nums([1, 2, 3, 4, 5, 6], 2, 3) == [2, 3, 4, 6]\ndiv_of_nums([7, 14, 21, 28, 35], 7, 11) == [7, 14, 21, 28, 35]\n\"\"\"\n", "entry_point": "div_of_nums", "test": "def check(candidate):\n\n    assert candidate([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\n    assert candidate([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\n    assert candidate([10,15,14,13,18,12,20],10,5)==[10, 15, 20]\n"}
{"task_id": "818", "prompt": "def lower_ctr(str):\n\"\"\"\nWrite a python function to count lower case letters in a given string.\nYour code should satisfy these tests:\nlower_ctr(\"HelloWorld\") == 8\nlower_ctr(\"PYTHON\") == 0\nlower_ctr(\"python3.8\") == 6\n\"\"\"\n", "entry_point": "lower_ctr", "test": "def check(candidate):\n\n    assert candidate('abc') == 3\n    assert candidate('string') == 6\n    assert candidate('Python') == 5\n"}
{"task_id": "819", "prompt": "def count_duplic(lists):\n\"\"\"\nWrite a function to count the frequency of consecutive duplicate elements in a given list of numbers.\nYour code should satisfy these tests:\ncount_duplic([1, 1, 2, 2, 2, 3, 3, 3, 3]) == ([1, 2, 3], [2, 3, 4])\ncount_duplic(['a', 'a', 'b', 'b', 'b', 'c']) == (['a', 'b', 'c'], [2, 3, 1])\ncount_duplic([5, 5, 5, 5, 5]) == ([5], [5])\n\"\"\"\n", "entry_point": "count_duplic", "test": "def check(candidate):\n\n    assert candidate([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\n    assert candidate([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n"}
{"task_id": "820", "prompt": "def check_monthnum_number(monthnum1):\n\"\"\"\nWrite a function to check whether the given month number contains 28 days or not.\nYour code should satisfy these tests:\ncheck_monthnum_number(2) == True\ncheck_monthnum_number(1) == False\ncheck_monthnum_number(12) == False\n\"\"\"\n", "entry_point": "check_monthnum_number", "test": "def check(candidate):\n\n    assert candidate(2)==True\n    assert candidate(1)==False\n    assert candidate(3)==False\n"}
{"task_id": "821", "prompt": "def merge_dictionaries(dict1,dict2):\n\"\"\"\nWrite a function to merge two dictionaries into a single expression.\nYour code should satisfy these tests:\nmerge_dictionaries({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'a': 1, 'b': 2, 'c': 4}\nmerge_dictionaries({}, {'x': 10, 'y': 20}) == {'x': 10, 'y': 20}\nmerge_dictionaries({'key1': 'value1'}, {}) == {'key1': 'value1'}\n\"\"\"\n", "entry_point": "merge_dictionaries", "test": "def check(candidate):\n\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\n    assert candidate({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}\n"}
{"task_id": "822", "prompt": "def pass_validity(p):\n\"\"\"\nWrite a function to return true if the password is valid.\nYour code should satisfy these tests:\npass_validity(\"aA1#\") == False\npass_validity(\"Valid1@\") == True\npass_validity(\"1234567890123\") == False\n\"\"\"\n", "entry_point": "pass_validity", "test": "def check(candidate):\n\n    assert candidate(\"password\")==False\n    assert candidate(\"Password@10\")==True\n    assert candidate(\"password@10\")==False\n"}
{"task_id": "823", "prompt": "def check_substring(string, sample):\n\"\"\"\nWrite a function to check if the given string starts with a substring using regex.\nYour code should satisfy these tests:\ncheck_substring(\"hello world\", \"hello\") == \"string starts with the given substring\"\ncheck_substring(\"hello world\", \"world\") == \"string doesnt start with the given substring\"\ncheck_substring(\"goodbye\", \"good\") == \"string starts with the given substring\"\n\"\"\"\n", "entry_point": "check_substring", "test": "def check(candidate):\n\n    assert candidate(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\n    assert candidate(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\n    assert candidate(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'\n"}
{"task_id": "824", "prompt": "def remove_even(l):\n\"\"\"\nWrite a python function to remove even numbers from a given list.\nYour code should satisfy these tests:\nremove_even([1, 2, 3, 4, 5]) == [1, 3, 5]\nremove_even([10, 21, 32, 43, 54]) == [21, 43]\nremove_even([2, 4, 6, 8, 10]) == [4, 8]\n\"\"\"\n", "entry_point": "remove_even", "test": "def check(candidate):\n\n    assert candidate([1,3,5,2]) == [1,3,5]\n    assert candidate([5,6,7]) == [5,7]\n    assert candidate([1,2,3,4]) == [1,3]\n"}
{"task_id": "825", "prompt": "def access_elements(nums, list_index):\n\"\"\"\nWrite a python function to access multiple elements of specified index from a given list.\nYour code should satisfy these tests:\naccess_elements([10, 20, 30, 40, 50], [0, 2, 4]) == [10, 30, 50]\naccess_elements(['a', 'b', 'c', 'd'], [1, 3]) == ['b', 'd']\naccess_elements([True, False, True, False], [2, 3]) == [True, False]\n\"\"\"\n", "entry_point": "access_elements", "test": "def check(candidate):\n\n    assert candidate([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\n    assert candidate([1, 2, 3, 4, 5],[1,2]) == [2,3]\n    assert candidate([1,0,2,3],[0,1]) == [1,0]\n"}
{"task_id": "826", "prompt": "def check_Type_Of_Triangle(a,b,c):\n\"\"\"\nWrite a python function to find the type of triangle from the given sides.\nYour code should satisfy these tests:\ncheck_Type_Of_Triangle(3, 4, 5) == 'Right-angled Triangle'\ncheck_Type_Of_Triangle(5, 12, 13) == 'Right-angled Triangle'\ncheck_Type_Of_Triangle(7, 8, 10) == 'Acute-angled Triangle'\ncheck_Type_Of_Triangle(6, 6, 6) == 'Acute-angled Triangle'\ncheck_Type_Of_Triangle(8, 15, 17) == 'Right-angled Triangle'\n\"\"\"\n", "entry_point": "check_Type_Of_Triangle", "test": "def check(candidate):\n\n    assert candidate(1,2,3) == \"Obtuse-angled Triangle\"\n    assert candidate(2,2,2) == \"Acute-angled Triangle\"\n    assert candidate(1,0,1) == \"Right-angled Triangle\"\n"}
{"task_id": "827", "prompt": "def sum_column(list1, C):\n\"\"\"\nWrite a function to sum a specific column of a list in a given list of lists.\nYour code should satisfy these tests:\nsum_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == 12\nsum_column([[10, 20], [30, 40], [50, 60]], 1) == 120\nsum_column([[5, 5, 5], [5, 5, 5], [5, 5, 5]], 2) == 15\n\"\"\"\n", "entry_point": "sum_column", "test": "def check(candidate):\n\n    assert candidate( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\n    assert candidate( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\n    assert candidate( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9\n"}
{"task_id": "828", "prompt": "def count_alpha_dig_spl(string):\n\"\"\"\nWrite a function to count alphabets,digits and special charactes in a given string.\nYour code should satisfy these tests:\ncount_alpha_dig_spl(\"Hello123!\") == (5, 3, 1)\ncount_alpha_dig_spl(\"Python3.8\") == (6, 2, 1)\ncount_alpha_dig_spl(\"$$$123abc\") == (3, 3, 3)\n\"\"\"\n", "entry_point": "count_alpha_dig_spl", "test": "def check(candidate):\n\n    assert candidate(\"abc!@#123\")==(3,3,3)\n    assert candidate(\"dgsuy@#$%&1255\")==(5,4,5)\n    assert candidate(\"fjdsif627348#%$^&\")==(6,6,5)\n"}
{"task_id": "829", "prompt": "def second_frequent(input):\n\"\"\"\nWrite a function to find out the second most repeated (or frequent) string in the given sequence.\nYour code should satisfy these tests:\nsecond_frequent([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 3\nsecond_frequent(['apple', 'banana', 'apple', 'orange', 'banana', 'banana']) == 'apple'\nsecond_frequent([5, 5, 6, 6, 6, 7, 7, 7, 7]) == 6\n\"\"\"\n", "entry_point": "second_frequent", "test": "def check(candidate):\n\n    assert candidate(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\n    assert candidate(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\n    assert candidate(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'\n"}
{"task_id": "830", "prompt": "def round_up(a, digits):\n\"\"\"\nWrite a function to round up a number to specific digits.\nYour code should satisfy these tests:\nround_up(3.14159, 2) == 3.15\nround_up(2.71828, 3) == 2.719\nround_up(0.00123, 4) == 0.0013\n\"\"\"\n", "entry_point": "round_up", "test": "def check(candidate):\n\n    assert candidate(123.01247,0)==124\n    assert candidate(123.01247,1)==123.1\n    assert candidate(123.01247,2)==123.02\n"}
{"task_id": "831", "prompt": "def count_Pairs(arr,n):\n\"\"\"\nWrite a python function to count equal element pairs from the given array.\nYour code should satisfy these tests:\ncount_Pairs([1, 2, 3, 4, 5], 5) == 0\ncount_Pairs([2, 2, 2, 2, 2], 5) == 10\ncount_Pairs([5, 5, 5, 5, 5], 5) == 10\ncount_Pairs([1, 2, 2, 1, 3], 5) == 2\ncount_Pairs([4, 3, 2, 1, 4], 5) == 1\n\"\"\"\n", "entry_point": "count_Pairs", "test": "def check(candidate):\n\n    assert candidate([1,1,1,1],4) == 6\n    assert candidate([1,5,1],3) == 1\n    assert candidate([3,2,1,7,8,9],6) == 0\n"}
{"task_id": "832", "prompt": "def extract_max(input):\n\"\"\"\nWrite a function to extract the maximum numeric value from a string by using regex.\nYour code should satisfy these tests:\nextract_max(\"abc123xyz456\") == 456\nextract_max(\"100a200b300\") == 300\n\"\"\"\n", "entry_point": "extract_max", "test": "def check(candidate):\n\n    assert candidate('100klh564abc365bg') == 564\n    assert candidate('hello300how546mer231') == 546\n    assert candidate('its233beenalong343journey234') == 343\n"}
{"task_id": "833", "prompt": "def get_key(dict):\n\"\"\"\nWrite a function to get dictionary keys as a list.\nYour code should satisfy these tests:\nget_key({'a': 1, 'b': 2}) == ['a', 'b']\nget_key({1: 'apple', 2: 'banana', 3: 'cherry'}) == [1, 2, 3]\nget_key({'name': 'John', 'age': 30, 'city': 'New York'}) == ['name', 'age', 'city']\n\"\"\"\n", "entry_point": "get_key", "test": "def check(candidate):\n\n    assert candidate({1:'python',2:'java'})==[1,2]\n    assert candidate({10:'red',20:'blue',30:'black'})==[10,20,30]\n    assert candidate({27:'language',39:'java',44:'little'})==[27,39,44]\n"}
{"task_id": "834", "prompt": "def generate_matrix(n):\n\"\"\"\nWrite a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\nYour code should satisfy these tests:\ngenerate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\ngenerate_matrix(1) == [[1]]\ngenerate_matrix(5) == [[1, 2, 3, 4, 5], [16, 17, 18, 19, 6], [15, 24, 25, 20, 7], [14, 23, 22, 21, 8], [13, 12, 11, 10, 9]]\n\"\"\"\n", "entry_point": "generate_matrix", "test": "def check(candidate):\n\n    assert candidate(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n    assert candidate(2)==[[1,2],[4,3]]\n    assert candidate(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]\n"}
{"task_id": "835", "prompt": "def slope(x1,y1,x2,y2):\n\"\"\"\nWrite a python function to find the slope of a line.\nYour code should satisfy these tests:\nslope(1, 2, 3, 4) == 1.0\nslope(0, 0, 5, 10) == 2.0\nslope(-1, -1, 1, 1) == 1.0\n\"\"\"\n", "entry_point": "slope", "test": "def check(candidate):\n\n    assert candidate(4,2,2,5) == -1.5\n    assert candidate(2,4,4,6) == 1\n    assert candidate(1,2,4,2) == 0\n"}
{"task_id": "836", "prompt": "def max_sub_array_sum(a,size):\n\"\"\"\nWrite a function to find length of the subarray having maximum sum.\nYour code should satisfy these tests:\nmax_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 5\nmax_sub_array_sum([1, 2, 3, -2, 5], 5) == 5\nmax_sub_array_sum([-1, -2, -3, -4], 4) == 1\n\"\"\"\n", "entry_point": "max_sub_array_sum", "test": "def check(candidate):\n\n    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\n    assert candidate([1, -2, 1, 1, -2, 1],6) == 2\n    assert candidate([-1, -2, 3, 4, 5],5) == 3\n"}
{"task_id": "837", "prompt": "def cube_Sum(n):\n\"\"\"\nWrite a python function to find the cube sum of first n odd natural numbers.\nYour code should satisfy these tests:\ncube_Sum(1) == 1\ncube_Sum(2) == 28\ncube_Sum(3) == 153\n\"\"\"\n", "entry_point": "cube_Sum", "test": "def check(candidate):\n\n    assert candidate(2) == 28\n    assert candidate(3) == 153\n    assert candidate(4) == 496\n"}
{"task_id": "838", "prompt": "def min_Swaps(s1,s2):\n\"\"\"\nWrite a python function to find minimum number swaps required to make two binary strings equal.\nYour code should satisfy these tests:\nmin_Swaps(\"0101\", \"1010\") == 2\nmin_Swaps(\"1100\", \"0011\") == 2\nmin_Swaps(\"111000\", \"000111\") == 4\nmin_Swaps(\"101010\", \"010101\") == 4\nmin_Swaps(\"1001\", \"0110\") == 2\n\"\"\"\n", "entry_point": "min_Swaps", "test": "def check(candidate):\n\n    assert candidate(\"0011\",\"1111\") == 1\n    assert candidate(\"00011\",\"01001\") == 2\n    assert candidate(\"111\",\"111\") == 0\n"}
{"task_id": "839", "prompt": "def sort_tuple(tup):\n\"\"\"\nWrite a function to sort the tuples alphabetically by the first item of each tuple.\nYour code should satisfy these tests:\nsort_tuple([(3, 2), (1, 5), (4, 3)]) == [(1, 5), (3, 2), (4, 3)]\nsort_tuple([(7, 9), (5, 2), (2, 4), (8, 1)]) == [(2, 4), (5, 2), (7, 9), (8, 1)]\nsort_tuple([(10, 5), (2, 8), (6, 3), (4, 7)]) == [(2, 8), (4, 7), (6, 3), (10, 5)]\nsort_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == [(1, 2), (3, 4), (5, 6), (7, 8)]\nsort_tuple([(9, 4), (2, 7), (6, 3)]) == [(2, 7), (6, 3), (9, 4)]\n\"\"\"\n", "entry_point": "sort_tuple", "test": "def check(candidate):\n\n    assert candidate([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\n    assert candidate([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\n    assert candidate([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]\n"}
{"task_id": "840", "prompt": "def Check_Solution(a,b,c):\n\"\"\"\nWrite a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\nYour code should satisfy these tests:\nCheck_Solution(1, 2, 3) == 'No'\nCheck_Solution(5, 5, 10) == 'No'\nCheck_Solution(0, 0, 0) == 'Yes'\nCheck_Solution(7, 3, 11) == 'No'\nCheck_Solution(-1, 1, 0) == 'No'\n\"\"\"\n", "entry_point": "Check_Solution", "test": "def check(candidate):\n\n    assert candidate(2,0,-1) == \"Yes\"\n    assert candidate(1,-5,6) == \"No\"\n    assert candidate(2,0,2) == \"Yes\"\n"}
{"task_id": "841", "prompt": "def get_inv_count(arr, n):\n\"\"\"\nWrite a function to count the number of inversions in the given array.\nYour code should satisfy these tests:\nget_inv_count([1, 20, 6, 4, 5], 5) == 5\nget_inv_count([10, 20, 30, 40, 50], 5) == 0\nget_inv_count([50, 40, 30, 20, 10], 5) == 10\n\"\"\"\n", "entry_point": "get_inv_count", "test": "def check(candidate):\n\n    assert candidate([1, 20, 6, 4, 5], 5) == 5\n    assert candidate([8, 4, 2, 1], 4) == 6\n    assert candidate([3, 1, 2], 3) == 2\n"}
{"task_id": "842", "prompt": "def get_odd_occurence(arr, arr_size):\n\"\"\"\nWrite a function to find the number which occurs for odd number of times in the given array.\nYour code should satisfy these tests:\nget_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nget_odd_occurence([4, 1, 2, 2, 5, 1, 4], 7) == 5\nget_odd_occurence([10, 10, 10, 10, 11], 5) == 11\n\"\"\"\n", "entry_point": "get_odd_occurence", "test": "def check(candidate):\n\n    assert candidate([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\n    assert candidate([1, 2, 3, 2, 3, 1, 3], 7) == 3\n    assert candidate([5, 7, 2, 7, 5, 2, 5], 7) == 5\n"}
{"task_id": "843", "prompt": "def nth_super_ugly_number(n, primes):\n\"\"\"\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\nYour code should satisfy these tests:\nnth_super_ugly_number(10, [2, 3, 5]) == 12\nnth_super_ugly_number(1, [2, 7, 13, 19, 31, 53]) == 1\nnth_super_ugly_number(12, [2, 7, 13, 19, 31, 53]) == 31\n\"\"\"\n", "entry_point": "nth_super_ugly_number", "test": "def check(candidate):\n\n    assert candidate(12,[2,7,13,19])==32\n    assert candidate(10,[2,7,13,19])==26\n    assert candidate(100,[2,7,13,19])==5408\n"}
{"task_id": "844", "prompt": "def get_Number(n, k):\n\"\"\"\nWrite a python function to find the kth element in an array containing odd elements first and then even elements.\nYour code should satisfy these tests:\nget_Number(10, 3) == 5\nget_Number(7, 7) == 6\nget_Number(15, 12) == 8\n\"\"\"\n", "entry_point": "get_Number", "test": "def check(candidate):\n\n    assert candidate(8,5) == 2\n    assert candidate(7,2) == 3\n    assert candidate(5,2) == 3\n"}
{"task_id": "845", "prompt": "def find_Digits(n):\n\"\"\"\nWrite a python function to count the number of digits in factorial of a given number.\nYour code should satisfy these tests:\nfind_Digits(5) == 3\nfind_Digits(10) == 7\nfind_Digits(100) == 158\n\"\"\"\n", "entry_point": "find_Digits", "test": "def check(candidate):\n\n    assert candidate(7) == 4\n    assert candidate(5) == 3\n    assert candidate(4) == 2\n"}
{"task_id": "846", "prompt": "def find_platform(arr, dep, n):\n\"\"\"\nWrite a function to find the minimum number of platforms required for a railway/bus station.\nYour code should satisfy these tests:\nfind_platform([900, 940, 950, 1100, 1500, 1800], [910, 1200, 1120, 1130, 1900, 2000], 6) == 3\nfind_platform([1000, 1030, 1040, 1050], [1010, 1040, 1050, 1060], 4) == 2\nfind_platform([800, 850, 900, 950], [810, 860, 910, 960], 4) == 1\n\"\"\"\n", "entry_point": "find_platform", "test": "def check(candidate):\n\n    assert candidate([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\n    assert candidate([100,200,300,400],[700,800,900,1000],4)==4\n    assert candidate([5,6,7,8],[4,3,2,1],4)==1\n"}
{"task_id": "847", "prompt": "def lcopy(xs):\n\"\"\"\nWrite a python function to copy a list from a singleton tuple.\nYour code should satisfy these tests:\nlcopy([1, 2, 3]) == [1, 2, 3]\nlcopy(['a', 'b', 'c']) == ['a', 'b', 'c']\nlcopy([]) == []\n\"\"\"\n", "entry_point": "lcopy", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3]) == [1, 2, 3]\n    assert candidate([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\n    assert candidate([4, 5, 6]) == [4, 5, 6]\n\n"}
{"task_id": "848", "prompt": "def area_trapezium(base1,base2,height):\n\"\"\"\nWrite a function to find the area of a trapezium.\nYour code should satisfy these tests:\narea_trapezium(10, 20, 15) == 225.0\narea_trapezium(5, 5, 10) == 50.0\narea_trapezium(8, 12, 7) == 70.0\n\"\"\"\n", "entry_point": "area_trapezium", "test": "def check(candidate):\n\n    assert candidate(6,9,4)==30\n    assert candidate(10,20,30)==450\n    assert candidate(15,25,35)==700\n"}
{"task_id": "849", "prompt": "def Sum(N):\n\"\"\"\nWrite a python function to find sum of all prime divisors of a given number.\nYour code should satisfy these tests:\nSum(10) == 7\nSum(15) == 8\nSum(20) == 7\n\"\"\"\n", "entry_point": "Sum", "test": "def check(candidate):\n\n    assert candidate(60) == 10\n    assert candidate(39) == 16\n    assert candidate(40) == 7\n"}
{"task_id": "850", "prompt": "def is_triangleexists(a,b,c):\n\"\"\"\nWrite a function to check if a triangle of positive area is possible with the given angles.\nYour code should satisfy these tests:\nis_triangleexists(60, 60, 60) == True\nis_triangleexists(90, 45, 45) == True\nis_triangleexists(0, 90, 90) == False\n\"\"\"\n", "entry_point": "is_triangleexists", "test": "def check(candidate):\n\n    assert candidate(50,60,70)==True\n    assert candidate(90,45,45)==True\n    assert candidate(150,30,70)==False\n"}
{"task_id": "851", "prompt": "def Sum_of_Inverse_Divisors(N,Sum):\n\"\"\"\nWrite a python function to find sum of inverse of divisors.\nYour code should satisfy these tests:\nSum_of_Inverse_Divisors(6, 12) == 2.0\nSum_of_Inverse_Divisors(10, 18) == 1.8\nSum_of_Inverse_Divisors(15, 24) == 1.6\nSum_of_Inverse_Divisors(20, 42) == 2.1\nSum_of_Inverse_Divisors(25, 31) == 1.24\n\"\"\"\n", "entry_point": "Sum_of_Inverse_Divisors", "test": "def check(candidate):\n\n    assert candidate(6,12) == 2\n    assert candidate(9,13) == 1.44\n    assert candidate(1,4) == 4\n"}
{"task_id": "852", "prompt": "def remove_negs(num_list):\n\"\"\"\nWrite a python function to remove negative numbers from a list.\nYour code should satisfy these tests:\nremove_negs([1, -2, 3, -4, 5]) == [1, 3, 5]\nremove_negs([-1, -2, -3, -4, -5]) == [-2, -4]\nremove_negs([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]\n\"\"\"\n", "entry_point": "remove_negs", "test": "def check(candidate):\n\n    assert candidate([1,-2,3,-4]) == [1,3]\n    assert candidate([1,2,3,-4]) == [1,2,3]\n    assert candidate([4,5,-6,7,-8]) == [4,5,7]\n"}
{"task_id": "853", "prompt": "def sum_of_odd_Factors(n):\n\"\"\"\nWrite a python function to find sum of odd factors of a number.\nYour code should satisfy these tests:\nsum_of_odd_Factors(12) == 4\nsum_of_odd_Factors(15) == 24\nsum_of_odd_Factors(21) == 32\n\"\"\"\n", "entry_point": "sum_of_odd_Factors", "test": "def check(candidate):\n\n    assert candidate(30) == 24\n    assert candidate(18) == 13\n    assert candidate(2) == 1\n"}
{"task_id": "854", "prompt": "def raw_heap(rawheap):\n\"\"\"\nWrite a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\nYour code should satisfy these tests:\nraw_heap([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 9, 4, 6, 5, 5, 5]\nraw_heap([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]\nraw_heap([7, 2, 5, 3, 8, 4]) == [2, 3, 4, 7, 8, 5]\n\"\"\"\n", "entry_point": "raw_heap", "test": "def check(candidate):\n\n    assert candidate([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\n    assert candidate([4, 5, 6, 2])==[2, 4, 6, 5]\n"}
{"task_id": "855", "prompt": "def check_Even_Parity(x):\n\"\"\"\nWrite a python function to check for even parity of a given number.\nYour code should satisfy these tests:\ncheck_Even_Parity(5) == True\ncheck_Even_Parity(7) == False\ncheck_Even_Parity(10) == True\n\"\"\"\n", "entry_point": "check_Even_Parity", "test": "def check(candidate):\n\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(18) == True\n"}
{"task_id": "856", "prompt": "def find_Min_Swaps(arr,n):\n\"\"\"\nWrite a python function to find minimum adjacent swaps required to sort binary array.\nYour code should satisfy these tests:\nfind_Min_Swaps([0, 1, 0, 1, 1], 5) == 1\nfind_Min_Swaps([1, 0, 0, 1, 0, 1], 6) == 4\nfind_Min_Swaps([0, 0, 0, 1, 1, 1], 6) == 0\n\"\"\"\n", "entry_point": "find_Min_Swaps", "test": "def check(candidate):\n\n    assert candidate([1,0,1,0],4) == 3\n    assert candidate([0,1,0],3) == 1\n    assert candidate([0,0,1,1,0],5) == 2\n"}
{"task_id": "857", "prompt": "def listify_list(list1):\n\"\"\"\nWrite a function to list out the list of given strings individually using map function.\nYour code should satisfy these tests:\nlistify_list([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\nlistify_list([(5, 6), (7, 8)]) == [[5, 6], [7, 8]]\nlistify_list([['a', 'b'], ['c', 'd']]) == [['a', 'b'], ['c', 'd']]\n\"\"\"\n", "entry_point": "listify_list", "test": "def check(candidate):\n\n    assert candidate(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\n    assert candidate(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\n    assert candidate([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]\n"}
{"task_id": "858", "prompt": "def count_list(input_list):\n\"\"\"\nWrite a function to count number of lists in a given list of lists and square the count.\nYour code should satisfy these tests:\ncount_list([1, 2, 3, 4]) == 16\ncount_list(['a', 'b']) == 4\ncount_list([]) == 0\n\"\"\"\n", "entry_point": "count_list", "test": "def check(candidate):\n\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\n    assert candidate([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9\n"}
{"task_id": "859", "prompt": "def sub_lists(my_list):\n\"\"\"\nWrite a function to generate all sublists of a given list.\nYour code should satisfy these tests:\nsub_lists([1, 2, 3]) == [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\nsub_lists(['a', 'b']) == [[], ['a'], ['b'], ['a', 'b']]\nsub_lists([True, False]) == [[], [True], [False], [True, False]]\n\"\"\"\n", "entry_point": "sub_lists", "test": "def check(candidate):\n\n    assert candidate([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\n    assert candidate(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\n    assert candidate([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]\n"}
{"task_id": "860", "prompt": "def check_alphanumeric(string):\n\"\"\"\nWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\nYour code should satisfy these tests:\ncheck_alphanumeric(\"Hello123\") == \"Accept\"\ncheck_alphanumeric(\"World!\") == \"Discard\"\ncheck_alphanumeric(\"Python3\") == \"Accept\"\n\"\"\"\n", "entry_point": "check_alphanumeric", "test": "def check(candidate):\n\n    assert candidate(\"dawood@\") == 'Discard'\n    assert candidate(\"skdmsam326\") == 'Accept'\n    assert candidate(\"cooltricks@\") == 'Discard'\n"}
{"task_id": "861", "prompt": "def anagram_lambda(texts,str):\n\"\"\"\nWrite a function to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\n", "entry_point": "anagram_lambda", "test": "def check(candidate):\n\n    assert candidate([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\n    assert candidate([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\n    assert candidate([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]\n"}
{"task_id": "862", "prompt": "def n_common_words(text,n):\n\"\"\"\nWrite a function to find the occurrences of n most common words in a given text.\nYour code should satisfy these tests:\nn_common_words(\"hello world hello\", 1) == [('hello', 2)]\nn_common_words(\"test test test example example\", 2) == [('test', 3), ('example', 2)]\nn_common_words(\"one two three four five six seven eight nine ten\", 5) == [('one', 1), ('two', 1), ('three', 1), ('four', 1), ('five', 1)]\n\"\"\"\n", "entry_point": "n_common_words", "test": "def check(candidate):\n\n    assert candidate(\"python is a programming language\",1)==[('python', 1)]\n    assert candidate(\"python is a programming language\",1)==[('python', 1)]\n    assert candidate(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]\n"}
{"task_id": "863", "prompt": "def find_longest_conseq_subseq(arr, n):\n\"\"\"\nWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\nYour code should satisfy these tests:\nfind_longest_conseq_subseq([1, 2, 3, 4, 5], 5) == 5\nfind_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nfind_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5\n\"\"\"\n", "entry_point": "find_longest_conseq_subseq", "test": "def check(candidate):\n\n    assert candidate([1, 2, 2, 3], 4) == 3\n    assert candidate([1, 9, 3, 10, 4, 20, 2], 7) == 4\n    assert candidate([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5\n"}
{"task_id": "864", "prompt": "def palindrome_lambda(texts):\n\"\"\"\nWrite a function to find palindromes in a given list of strings using lambda function.\nYour code should satisfy these tests:\npalindrome_lambda([\"radar\", \"hello\", \"level\"]) == [\"radar\", \"level\"]\npalindrome_lambda([\"world\", \"python\", \"madam\"]) == [\"madam\"]\npalindrome_lambda([\"\", \"a\", \"abba\"]) == [\"\", \"a\", \"abba\"]\n\"\"\"\n", "entry_point": "palindrome_lambda", "test": "def check(candidate):\n\n    assert candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\n    assert candidate([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\n    assert candidate([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']\n"}
{"task_id": "865", "prompt": "def ntimes_list(nums,n):\n\"\"\"\nWrite a function to print n-times a list using map function.\nYour code should satisfy these tests:\nntimes_list([1, 2, 3], 4) == [4, 8, 12]\nntimes_list([0, -1, 5], 3) == [0, -3, 15]\nntimes_list([10, 20, 30], 0) == [0, 0, 0]\n\"\"\"\n", "entry_point": "ntimes_list", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\n    assert candidate([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\n    assert candidate([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]\n"}
{"task_id": "866", "prompt": "def check_monthnumb(monthname2):\n\"\"\"\nWrite a function to check whether the given month name contains 31 days or not.\nYour code should satisfy these tests:\ncheck_monthnumb(\"January\") == True\ncheck_monthnumb(\"February\") == False\ncheck_monthnumb(\"April\") == False\n\"\"\"\n", "entry_point": "check_monthnumb", "test": "def check(candidate):\n\n    assert candidate(\"February\")==False\n    assert candidate(\"January\")==True\n    assert candidate(\"March\")==True\n"}
{"task_id": "867", "prompt": "def min_Num(arr,n):\n\"\"\"\nWrite a python function to add a minimum number such that the sum of array becomes even.\nYour code should satisfy these tests:\nmin_Num([1, 2, 3, 4, 5], 5) == 1\nmin_Num([2, 4, 6, 8, 10], 5) == 2\nmin_Num([1, 3, 5, 7, 9], 5) == 1\nmin_Num([1, 2, 2, 4, 6], 5) == 1\nmin_Num([1, 1, 1, 1, 1], 5) == 1\n\"\"\"\n", "entry_point": "min_Num", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4,5,6,7,8,9],9) == 1\n    assert candidate([1,2,3,4,5,6,7,8],8) == 2\n    assert candidate([1,2,3],3) == 2\n"}
{"task_id": "868", "prompt": "def length_Of_Last_Word(a):\n\"\"\"\nWrite a python function to find the length of the last word in a given string.\nYour code should satisfy these tests:\nlength_Of_Last_Word(\"Hello World\") == 5\nlength_Of_Last_Word(\"   fly me   to   the moon  \") == 4\nlength_Of_Last_Word(\"luffy is still joyboy\") == 6\n\"\"\"\n", "entry_point": "length_Of_Last_Word", "test": "def check(candidate):\n\n    assert candidate(\"python language\") == 8\n    assert candidate(\"PHP\") == 3\n    assert candidate(\"\") == 0\n"}
{"task_id": "869", "prompt": "def remove_list_range(list1, leftrange, rigthrange):\n\"\"\"\nWrite a function to remove sublists from a given list of lists, which are outside a given range.\nYour code should satisfy these tests:\nremove_list_range([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 8) == [[4, 5, 6]]\nremove_list_range([[10, 20, 30], [40, 50, 60], [70, 80, 90]], 25, 75) == [[40, 50, 60]]\nremove_list_range([[5, 10], [15, 20], [25, 30]], 10, 25) == [[15, 20]]\nremove_list_range([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5, 6) == []\nremove_list_range([[100, 200, 300], [400, 500, 600], [700, 800, 900]], 150, 850) == [[400, 500, 600]]\n\"\"\"\n", "entry_point": "remove_list_range", "test": "def check(candidate):\n\n    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\n    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\n    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]\n"}
{"task_id": "870", "prompt": "def sum_positivenum(nums):\n\"\"\"\nWrite a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\nYour code should satisfy these tests:\nsum_positivenum([1, -2, 3, 4, -5]) == 8\nsum_positivenum([-1, -2, -3, -4, -5]) == 0\nsum_positivenum([10, 20, 30, 40, 50]) == 150\n\"\"\"\n", "entry_point": "sum_positivenum", "test": "def check(candidate):\n\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\n    assert candidate([10,15,-14,13,-18,12,-20])==50\n    assert candidate([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522\n"}
{"task_id": "871", "prompt": "def are_Rotations(string1,string2):\n\"\"\"\nWrite a python function to check whether the given strings are rotations of each other or not.\nYour code should satisfy these tests:\nare_Rotations(\"waterbottle\", \"erbottlewat\") == True\nare_Rotations(\"camera\", \"macera\") == False\nare_Rotations(\"rotation\", \"tationro\") == True\n\"\"\"\n", "entry_point": "are_Rotations", "test": "def check(candidate):\n\n    assert candidate(\"abc\",\"cba\") == False\n    assert candidate(\"abcd\",\"cdba\") == False\n    assert candidate(\"abacd\",\"cdaba\") == True\n"}
{"task_id": "872", "prompt": "def check_subset(list1,list2):\n\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nYour code should satisfy these tests:\ncheck_subset([1, 2, 3, 4], [2, 3]) == True\ncheck_subset(['a', 'b', 'c'], ['b', 'd']) == False\ncheck_subset([10, 20, 30], [10, 20, 30]) == True\n\"\"\"\n", "entry_point": "check_subset", "test": "def check(candidate):\n\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\n    assert candidate([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\n    assert candidate([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False\n"}
{"task_id": "873", "prompt": "def fibonacci(n):\n\"\"\"\nWrite a function to solve the fibonacci sequence using recursion.\nYour code should satisfy these tests:\nfibonacci(1) == 1\nfibonacci(5) == 5\nfibonacci(10) == 55\n\"\"\"\n", "entry_point": "fibonacci", "test": "def check(candidate):\n\n    assert candidate(7) == 13\n    assert candidate(8) == 21\n    assert candidate(9) == 34\n"}
{"task_id": "874", "prompt": "def check_Concat(str1,str2):\n\"\"\"\nWrite a python function to check if the string is a concatenation of another string.\nYour code should satisfy these tests:\ncheck_Concat(\"abcabc\", \"abc\") == True\ncheck_Concat(\"abcdabcd\", \"abcd\") == True\ncheck_Concat(\"abcabcabc\", \"abc\") == True\n\"\"\"\n", "entry_point": "check_Concat", "test": "def check(candidate):\n\n    assert candidate(\"abcabcabc\",\"abc\") == True\n    assert candidate(\"abcab\",\"abc\") == False\n    assert candidate(\"aba\",\"ab\") == False\n"}
{"task_id": "875", "prompt": "def min_difference(test_list):\n\"\"\"\nWrite a function to find the minimum difference in the tuple pairs of given tuples.\nYour code should satisfy these tests:\nmin_difference([(1, 5), (3, 8), (10, 14)]) == 4\nmin_difference([(0, 0), (1, 1), (2, 2)]) == 0\nmin_difference([(100, 200), (300, 400), (500, 600)]) == 100\n\"\"\"\n", "entry_point": "min_difference", "test": "def check(candidate):\n\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\n    assert candidate([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\n    assert candidate([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6\n"}
{"task_id": "876", "prompt": "def lcm(x, y):\n\"\"\"\nWrite a python function to find lcm of two positive integers.\nYour code should satisfy these tests:\nlcm(12, 18) == 36\nlcm(5, 7) == 35\nlcm(21, 6) == 42\n\"\"\"\n", "entry_point": "lcm", "test": "def check(candidate):\n\n    assert candidate(4,6) == 12\n    assert candidate(15,17) == 255\n    assert candidate(2,6) == 6\n"}
{"task_id": "877", "prompt": "def sort_String(str):\n\"\"\"\nWrite a python function to sort the given string.\nYour code should satisfy these tests:\nsort_String(\"hello\") == \"ehllo\"\nsort_String(\"world\") == \"dlorw\"\nsort_String(\"python\") == \"hnopty\"\n\"\"\"\n", "entry_point": "sort_String", "test": "def check(candidate):\n\n    assert candidate(\"cba\") == \"abc\"\n    assert candidate(\"data\") == \"aadt\"\n    assert candidate(\"zxy\") == \"xyz\"\n"}
{"task_id": "878", "prompt": "def check_tuples(test_tuple, K):\n\"\"\"\nWrite a function to check if the given tuple contains only k elements.\nYour code should satisfy these tests:\ncheck_tuples((1, 2, 3), [1, 2, 3, 4]) == True\ncheck_tuples((5, 6), [1, 2, 3, 4]) == False\ncheck_tuples(('a', 'b'), ['a', 'b', 'c']) == True\n\"\"\"\n", "entry_point": "check_tuples", "test": "def check(candidate):\n\n    assert candidate((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\n    assert candidate((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\n    assert candidate((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False\n"}
{"task_id": "879", "prompt": "def text_match(text):\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\nYour code should satisfy these tests:\ntext_match(\"alphabet\") == 'Not matched!'\ntext_match(\"abc\") == 'Not matched!'\ntext_match(\"cab\") == 'Found a match!'\ntext_match(\"ab\") == 'Found a match!'\ntext_match(\"acdb\") == 'Found a match!'\n\"\"\"\n", "entry_point": "text_match", "test": "def check(candidate):\n\n    assert candidate(\"aabbbbd\") == 'Not matched!'\n    assert candidate(\"aabAbbbc\") == 'Not matched!'\n    assert candidate(\"accddbbjjjb\") == 'Found a match!'\n"}
{"task_id": "880", "prompt": "def Check_Solution(a,b,c):\n\"\"\"\nWrite a python function to find number of solutions in quadratic equation.\nYour code should satisfy these tests:\nCheck_Solution(1, 5, 6) == \"2 solutions\"\nCheck_Solution(1, 4, 4) == \"1 solution\"\nCheck_Solution(1, 0, 1) == \"No solutions\"\n\"\"\"\n", "entry_point": "Check_Solution", "test": "def check(candidate):\n\n    assert candidate(2,5,2) == \"2 solutions\"\n    assert candidate(1,1,1) == \"No solutions\"\n    assert candidate(1,2,1) == \"1 solution\"\n"}
{"task_id": "881", "prompt": "def sum_even_odd(list1):\n\"\"\"\nWrite a function to find the sum of first even and odd number of a given list.\nYour code should satisfy these tests:\nsum_even_odd([2, 4, 6, 8, 10]) == 1\nsum_even_odd([1, 3, 5, 7, 9]) == 0\nsum_even_odd([1, 2, 3, 4, 5]) == 3\n\"\"\"\n", "entry_point": "sum_even_odd", "test": "def check(candidate):\n\n    assert candidate([1,3,5,7,4,1,6,8])==5\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==3\n    assert candidate([1,5,7,9,10])==11\n"}
{"task_id": "882", "prompt": "def parallelogram_perimeter(b,h):\n\"\"\"\nWrite a function to caluclate perimeter of a parallelogram.\nYour code should satisfy these tests:\nparallelogram_perimeter(5, 10) == 100\nparallelogram_perimeter(3, 7) == 42\nparallelogram_perimeter(8, 4) == 64\nparallelogram_perimeter(12, 6) == 144\nparallelogram_perimeter(9, 2) == 36\n\"\"\"\n", "entry_point": "parallelogram_perimeter", "test": "def check(candidate):\n\n    assert candidate(10,20)==400\n    assert candidate(15,20)==600\n    assert candidate(8,9)==144\n"}
{"task_id": "883", "prompt": "def div_of_nums(nums,m,n):\n\"\"\"\nWrite a function to find numbers divisible by m and n from a list of numbers using lambda function.\nYour code should satisfy these tests:\ndiv_of_nums([10, 20, 30, 40, 50], 5, 10) == [10, 20, 30, 40, 50]\ndiv_of_nums([12, 15, 18, 24, 30], 3, 5) == [15, 30]\ndiv_of_nums([7, 14, 21, 28, 35], 7, 2) == [14, 28]\n\"\"\"\n", "entry_point": "div_of_nums", "test": "def check(candidate):\n\n    assert candidate([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\n    assert candidate([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\n    assert candidate([10,15,14,13,18,12,20],10,5)==[10,20]\n"}
{"task_id": "884", "prompt": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n\"\"\"\nWrite a python function to check whether all the bits are within a given range or not.\nYour code should satisfy these tests:\nall_Bits_Set_In_The_Given_Range(30, 2, 4) == True\nall_Bits_Set_In_The_Given_Range(15, 1, 3) == True\nall_Bits_Set_In_The_Given_Range(8, 2, 3) == False\n\"\"\"\n", "entry_point": "all_Bits_Set_In_The_Given_Range", "test": "def check(candidate):\n\n    assert candidate(10,2,1) == True\n    assert candidate(5,2,4) == False\n    assert candidate(22,2,3) == True\n"}
{"task_id": "885", "prompt": "def is_Isomorphic(str1,str2):\n\"\"\"\nWrite a python function to check whether the two given strings are isomorphic to each other or not.\nYour code should satisfy these tests:\nis_Isomorphic(\"egg\", \"add\") == True\nis_Isomorphic(\"foo\", \"bar\") == False\nis_Isomorphic(\"paper\", \"title\") == True\n\"\"\"\n", "entry_point": "is_Isomorphic", "test": "def check(candidate):\n\n    assert candidate(\"paper\",\"title\") == True\n    assert candidate(\"ab\",\"ba\") == True\n    assert candidate(\"ab\",\"aa\") == False\n"}
{"task_id": "886", "prompt": "def sum_num(numbers):\n\"\"\"\nWrite a function to add all the numbers in a list and divide it with the length of the list.\nYour code should satisfy these tests:\nsum_num([1, 2, 3, 4, 5]) == 3.0\nsum_num([10, 20, 30]) == 20.0\nsum_num([100, 200, 300, 400]) == 250.0\n\"\"\"\n", "entry_point": "sum_num", "test": "def check(candidate):\n\n    assert candidate((8, 2, 3, 0, 7))==4.0\n    assert candidate((-10,-20,-30))==-20.0\n    assert candidate((19,15,18))==17.333333333333332\n"}
{"task_id": "887", "prompt": "def is_odd(n):\n\"\"\"\nWrite a python function to check whether the given number is odd or not using bitwise operator.\nYour code should satisfy these tests:\nis_odd(3) == True\nis_odd(10) == False\nis_odd(15) == True\n\"\"\"\n", "entry_point": "is_odd", "test": "def check(candidate):\n\n    assert candidate(5) == True\n    assert candidate(6) == False\n    assert candidate(7) == True\n"}
{"task_id": "888", "prompt": "def substract_elements(test_tup1, test_tup2):\n\"\"\"\nWrite a function to substract the elements of the given nested tuples.\n\"\"\"\n", "entry_point": "substract_elements", "test": "def check(candidate):\n\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\n    assert candidate(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\n    assert candidate(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))\n"}
{"task_id": "889", "prompt": "def reverse_list_lists(lists):\n\"\"\"\nWrite a function to reverse each list in a given list of lists.\nYour code should satisfy these tests:\nreverse_list_lists([[3, 1, 2], [6, 5, 4]]) == [[3, 2, 1], [6, 5, 4]]\nreverse_list_lists([[10, 20, 30], [1, 2, 3], [5, 4]]) == [[30, 20, 10], [3, 2, 1], [5, 4]]\nreverse_list_lists([[-1, -2, -3], [0, 0, 0], [9, 8, 7]]) == [[-1, -2, -3], [0, 0, 0], [9, 8, 7]]\n\"\"\"\n", "entry_point": "reverse_list_lists", "test": "def check(candidate):\n\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\n    assert candidate([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\n    assert candidate([[10,20],[30,40]])==[[20,10],[40,30]]\n"}
{"task_id": "890", "prompt": "def find_Extra(arr1,arr2,n):\n\"\"\"\nWrite a python function to find the index of an extra element present in one sorted array.\nYour code should satisfy these tests:\nfind_Extra([1, 2, 3, 4, 5], [1, 2, 3, 4], 4) == 4\nfind_Extra([10, 20, 30, 40], [10, 20, 30, 50], 4) == 3\nfind_Extra([5, 15, 25, 35, 45], [5, 15, 25, 35, 55], 5) == 4\n\"\"\"\n", "entry_point": "find_Extra", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4],[1,2,3],3) == 3\n    assert candidate([2,4,6,8,10],[2,4,6,8],4) == 4\n    assert candidate([1,3,5,7,9,11],[1,3,5,7,9],5) == 5\n"}
{"task_id": "891", "prompt": "def same_Length(A,B):\n\"\"\"\nWrite a python function to check whether the given two numbers have same number of digits or not.\nYour code should satisfy these tests:\nsame_Length(123, 456) == False\nsame_Length(7890, 1234) == False\nsame_Length(12, 345) == False\n\"\"\"\n", "entry_point": "same_Length", "test": "def check(candidate):\n\n    assert candidate(12,1) == False\n    assert candidate(2,2) == True\n    assert candidate(10,20) == True\n"}
{"task_id": "892", "prompt": "def remove_spaces(text):\n\"\"\"\nWrite a function to remove multiple spaces in a string.\nYour code should satisfy these tests:\nremove_spaces(\"Hello   World\") == \"Hello World\"\nremove_spaces(\"  This   is  a   test  \") == \" This is a test \"\nremove_spaces(\"NoSpacesHere\") == \"NoSpacesHere\"\n\"\"\"\n", "entry_point": "remove_spaces", "test": "def check(candidate):\n\n    assert candidate('python  program')==('python program')\n    assert candidate('python   programming    language')==('python programming language')\n    assert candidate('python                     program')==('python program')\n"}
{"task_id": "893", "prompt": "def Extract(lst):\n\"\"\"\nWrite a python function to get the last element of each sublist.\nYour code should satisfy these tests:\nExtract([['apple', 'banana'], ['carrot', 'date'], ['egg', 'fig']]) == ['banana', 'date', 'fig']\nExtract([['one'], ['two', 'three'], ['four', 'five', 'six']]) == ['one', 'three', 'six']\nExtract([['red', 'blue', 'green'], ['yellow'], ['purple', 'orange']]) == ['green', 'yellow', 'orange']\n\"\"\"\n", "entry_point": "Extract", "test": "def check(candidate):\n\n    assert candidate([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\n    assert candidate([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\n    assert candidate([[1, 2, 3], [4, 5]]) == [3, 5]\n"}
{"task_id": "894", "prompt": "def float_to_tuple(test_str):\n\"\"\"\nWrite a function to convert the given string of float type into tuple.\nYour code should satisfy these tests:\nfloat_to_tuple(\"1.1, 2.2, 3.3\") == (1.1, 2.2, 3.3)\nfloat_to_tuple(\"0.0, -1.1, 4.4\") == (0.0, -1.1, 4.4)\nfloat_to_tuple(\"100.100, 200.200, 300.300\") == (100.100, 200.200, 300.300)\n\"\"\"\n", "entry_point": "float_to_tuple", "test": "def check(candidate):\n\n    assert candidate(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\n    assert candidate(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\n    assert candidate(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)\n"}
{"task_id": "895", "prompt": "def max_sum_subseq(A):\n\"\"\"\nWrite a function to find the maximum sum of subsequences of given array with no adjacent elements.\nYour code should satisfy these tests:\nmax_sum_subseq([3, 2, 5, 10, 7]) == 15\nmax_sum_subseq([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 11\nmax_sum_subseq([1, 2, 3, 4, 5]) == 9\n\"\"\"\n", "entry_point": "max_sum_subseq", "test": "def check(candidate):\n\n    assert candidate([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\n    assert candidate([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\n    assert candidate([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44\n"}
{"task_id": "896", "prompt": "def last(n):\n\"\"\"\nWrite a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\nYour code should satisfy these tests:\nlast([(1, 2), (3, 4), (5, 6)]) == (5, 6)\nlast([(10, 20), (30, 40), (50, 60)]) == (50, 60)\nlast([(7, 8), (9, 10), (11, 12)]) == (11, 12)\nlast([(100, 200), (300, 400), (500, 600)]) == (500, 600)\nlast([(0, 1), (2, 3), (4, 5)]) == (4, 5)\n\"\"\"\n", "entry_point": "last", "test": "def check(candidate):\n\n    assert sort_list_candidate([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]\n    assert sort_list_candidate([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)]\n    assert sort_list_candidate([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)]\n"}
{"task_id": "897", "prompt": "def is_Word_Present(sentence,word):\n\"\"\"\nWrite a python function to check whether the word is present in a given sentence or not.\nYour code should satisfy these tests:\nis_Word_Present(\"The quick brown fox jumps over the lazy dog\", \"fox\") == True\nis_Word_Present(\"Hello world\", \"planet\") == False\nis_Word_Present(\"Python programming is fun\", \"Python\") == True\n\"\"\"\n", "entry_point": "is_Word_Present", "test": "def check(candidate):\n\n    assert candidate(\"machine learning\",\"machine\") == True\n    assert candidate(\"easy\",\"fun\") == False\n    assert candidate(\"python language\",\"code\") == False\n"}
{"task_id": "898", "prompt": "def extract_elements(numbers, n):\n\"\"\"\nWrite a function to extract specified number of elements from a given list, which follow each other continuously.\nYour code should satisfy these tests:\nextract_elements([1, 1, 2, 2, 2, 3, 3, 4], 2) == [1, 3]\nextract_elements([5, 5, 5, 6, 7, 7, 8, 8, 8], 3) == [5, 8]\nextract_elements([9, 10, 10, 11, 11, 11, 12, 12, 13], 2) == [10, 12]\n\"\"\"\n", "entry_point": "extract_elements", "test": "def check(candidate):\n\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\n    assert candidate([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\n    assert candidate([0,0,0,0,0],5)==[0]\n"}
{"task_id": "899", "prompt": "def check(arr,n):\n\"\"\"\nWrite a python function to check whether an array can be sorted or not by picking only the corner elements.\nYour code should satisfy these tests:\ncheck([1, 2, 3, 4, 5], 5) == True\ncheck([5, 4, 3, 2, 1], 5) == True\ncheck([1, 3, 2, 4, 5], 5) == True\ncheck([10, 7, 5, 3, 1], 5) == True\ncheck([1, 2, 2, 3, 4], 5) == True\n\"\"\"\n", "entry_point": "check", "test": "def check(candidate):\n\n    assert candidate([3,2,1,2,3,4],6) == True\n    assert candidate([2,1,4,5,1],5) == True\n    assert candidate([1,2,2,1,2,3],6) == True\n"}
{"task_id": "900", "prompt": "def match_num(string):\n\"\"\"\nWrite a function where a string will start with a specific number.\nYour code should satisfy these tests:\nmatch_num(\"54321\") == True\nmatch_num(\"51234\") == True\nmatch_num(\"56789\") == True\nmatch_num(\"512345\") == True\nmatch_num(\"53210\") == True\n\"\"\"\n", "entry_point": "match_num", "test": "def check(candidate):\n\n    assert candidate('5-2345861')==True\n    assert candidate('6-2345861')==False\n    assert candidate('78910')==False\n"}
{"task_id": "901", "prompt": "def smallest_multiple(n):\n\"\"\"\nWrite a function to find the smallest multiple of the first n numbers.\nYour code should satisfy these tests:\nsmallest_multiple(5) == 60\nsmallest_multiple(7) == 420\nsmallest_multiple(10) == 2520\n\"\"\"\n", "entry_point": "smallest_multiple", "test": "def check(candidate):\n\n    assert candidate(13)==360360\n    assert candidate(2)==2\n    assert candidate(1)==1\n"}
{"task_id": "902", "prompt": "def add_dict(d1,d2):\n\"\"\"\nWrite a function to combine two dictionaries by adding values for common keys.\nYour code should satisfy these tests:\nadd_dict({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == Counter({'b': 5, 'c': 4, 'a': 1})\nadd_dict({'x': 10, 'y': 20}, {'x': 5, 'z': 15}) == Counter({'x': 15, 'y': 20, 'z': 15})\nadd_dict({'m': 1, 'n': 2, 'o': 3}, {'p': 4, 'q': 5}) == Counter({'m': 1, 'n': 2, 'o': 3, 'p': 4, 'q': 5})\n\"\"\"\n", "entry_point": "add_dict", "test": "def check(candidate):\n\n    assert candidate({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300})\n    assert candidate({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900})\n    assert candidate({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})\n"}
{"task_id": "903", "prompt": "def count_Unset_Bits(n):\n\"\"\"\nWrite a python function to count the total unset bits from 1 to n.\nYour code should satisfy these tests:\ncount_Unset_Bits(5) == 4\ncount_Unset_Bits(10) == 12\ncount_Unset_Bits(15) == 17\n\"\"\"\n", "entry_point": "count_Unset_Bits", "test": "def check(candidate):\n\n    assert candidate(2) == 1\n    assert candidate(5) == 4\n    assert candidate(14) == 17\n"}
{"task_id": "904", "prompt": "def even_num(x):\n\"\"\"\nWrite a function to return true if the given number is even else return false.\nYour code should satisfy these tests:\neven_num(2) == True\neven_num(15) == False\neven_num(0) == True\n\"\"\"\n", "entry_point": "even_num", "test": "def check(candidate):\n\n    assert candidate(13.5)==False\n    assert candidate(0)==True\n    assert candidate(-9)==False\n"}
{"task_id": "905", "prompt": "def factorial(start,end):\n\"\"\"\nWrite a python function to find the sum of squares of binomial co-efficients.\n\"\"\"\n", "entry_point": "factorial", "test": "def check(candidate):\n\n    assert sum_of_square(4) == 70\n    assert sum_of_square(5) == 252\n    assert sum_of_square(2) == 6\n"}
{"task_id": "906", "prompt": "def extract_date(url):\n\"\"\"\nWrite a function to extract year, month and date from a url by using regex.\nYour code should satisfy these tests:\nextract_date('http://example.com/2021/09/15/') == [('2021', '09', '15')]\nextract_date('https://another-example.org/2022/12/31/') == [('2022', '12', '31')]\nextract_date('http://testsite.net/2020/01/01/') == [('2020', '01', '01')]\n\"\"\"\n", "entry_point": "extract_date", "test": "def check(candidate):\n\n    assert candidate(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\n    assert candidate(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\n    assert candidate(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]\n"}
{"task_id": "907", "prompt": "def lucky_num(n):\n\"\"\"\nWrite a function to print the first n lucky numbers.\nYour code should satisfy these tests:\nlucky_num(1) == [1]\nlucky_num(5) == [1, 3, 7, 9, 13]\nlucky_num(10) == [1, 3, 7, 9, 13, 15, 21, 25, 31, 33]\nlucky_num(15) == [1, 3, 7, 9, 13, 15, 21, 25, 31, 33, 37, 43, 49, 51, 63]\nlucky_num(20) == [1, 3, 7, 9, 13, 15, 21, 25, 31, 33, 37, 43, 49, 51, 63, 67, 69, 73, 75, 79]\n\"\"\"\n", "entry_point": "lucky_num", "test": "def check(candidate):\n\n    assert candidate(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33]\n    assert candidate(5)==[1, 3, 7, 9, 13]\n    assert candidate(8)==[1, 3, 7, 9, 13, 15, 21, 25]\n"}
{"task_id": "908", "prompt": "def find_fixed_point(arr, n):\n\"\"\"\nWrite a function to find the fixed point in the given array.\nYour code should satisfy these tests:\nfind_fixed_point([0, 2, 3, 4], 4) == 0\nfind_fixed_point([1, 1, 3, 4], 4) == 1\nfind_fixed_point([-1, 2, 3, 4], 4) == -1\n\"\"\"\n", "entry_point": "find_fixed_point", "test": "def check(candidate):\n\n    assert candidate([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\n    assert candidate([0, 2, 5, 8, 17],5) == 0\n"}
{"task_id": "909", "prompt": "def previous_palindrome(num):\n\"\"\"\nWrite a function to find the previous palindrome of a specified number.\nYour code should satisfy these tests:\nprevious_palindrome(10) == 9\nprevious_palindrome(100) == 99\nprevious_palindrome(123) == 121\n\"\"\"\n", "entry_point": "previous_palindrome", "test": "def check(candidate):\n\n    assert candidate(99)==88\n    assert candidate(1221)==1111\n    assert candidate(120)==111\n"}
{"task_id": "910", "prompt": "def check_date(m, d, y):\n\"\"\"\nWrite a function to validate a gregorian date.\nYour code should satisfy these tests:\ncheck_date(2, 29, 2020) == True\ncheck_date(2, 29, 2021) == False\ncheck_date(4, 31, 2023) == False\ncheck_date(12, 31, 2022) == True\ncheck_date(13, 1, 2023) == False\n\"\"\"\n", "entry_point": "check_date", "test": "def check(candidate):\n\n    assert candidate(11,11,2002)==True\n    assert candidate(13,11,2002)==False\n    assert candidate('11','11','2002')==True\n"}
{"task_id": "911", "prompt": "def maximum_product(nums):\n\"\"\"\nWrite a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\nYour code should satisfy these tests:\nmaximum_product([1, 10, 2, 6, 5, 3]) == 300\nmaximum_product([-10, -10, 5, 2]) == 500\nmaximum_product([1, 2, 3, 4, 5]) == 60\n\"\"\"\n", "entry_point": "maximum_product", "test": "def check(candidate):\n\n    assert candidate( [12, 74, 9, 50, 61, 41])==225700\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520\n"}
{"task_id": "912", "prompt": "def binomial_coeff(n, k):\n\"\"\"\nWrite a function to find ln, m lobb number.\nYour code should satisfy these tests:\nbinomial_coeff(4, 2) == 6\nbinomial_coeff(5, 3) == 10\nbinomial_coeff(10, 5) == 252\nbinomial_coeff(7, 4) == 35\nbinomial_coeff(8, 2) == 28\n\"\"\"\n", "entry_point": "binomial_coeff", "test": "def check(candidate):\n\n    assert int(lobb_num(5, 3)) == 35\n    assert int(lobb_num(3, 2)) == 5\n    assert int(lobb_num(4, 2)) == 20\n"}
{"task_id": "913", "prompt": "def end_num(string):\n\"\"\"\nWrite a function to check for a number at the end of a string.\nYour code should satisfy these tests:\nend_num(\"hello2\") == True\nend_num(\"world\") == False\nend_num(\"test123\") == True\n\"\"\"\n", "entry_point": "end_num", "test": "def check(candidate):\n\n    assert candidate('abcdef')==False\n    assert candidate('abcdef7')==True\n    assert candidate('abc')==False\n"}
{"task_id": "914", "prompt": "def is_Two_Alter(s):\n\"\"\"\nWrite a python function to check whether the given string is made up of two alternating characters or not.\nYour code should satisfy these tests:\nis_Two_Alter(\"abab\") == True\nis_Two_Alter(\"aabb\") == False\nis_Two_Alter(\"abcabc\") == False\n\"\"\"\n", "entry_point": "is_Two_Alter", "test": "def check(candidate):\n\n    assert candidate(\"abab\") == True\n    assert candidate(\"aaaa\") == False\n    assert candidate(\"xyz\") == False\n"}
{"task_id": "915", "prompt": "def rearrange_numbs(array_nums):\n\"\"\"\nWrite a function to rearrange positive and negative numbers in a given array using lambda function.\nYour code should satisfy these tests:\nrearrange_numbs([3, 1, 0, 2]) == [1, 2, 3, 0]\nrearrange_numbs([0, -1, -2, -3]) == [0, -3, -2, -1]\nrearrange_numbs([5, 0, 10, 1]) == [1, 5, 10, 0]\n\"\"\"\n", "entry_point": "rearrange_numbs", "test": "def check(candidate):\n\n    assert candidate([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\n    assert candidate([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\n    assert candidate([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]\n"}
{"task_id": "916", "prompt": "def find_triplet_array(A, arr_size, sum):\n\"\"\"\nWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\nYour code should satisfy these tests:\nfind_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)\nfind_triplet_array([0, -1, 2, -3, 1], 5, -2) == (0, -3, 1)\nfind_triplet_array([12, 3, 4, 1, 6, 9], 6, 24) == (12, 3, 9)\n\"\"\"\n", "entry_point": "find_triplet_array", "test": "def check(candidate):\n\n    assert candidate([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\n    assert candidate([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\n    assert candidate([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)\n"}
{"task_id": "917", "prompt": "def text_uppercase_lowercase(text):\n\"\"\"\nWrite a function to find the sequences of one upper case letter followed by lower case letters.\nYour code should satisfy these tests:\ntext_uppercase_lowercase('HelloWorld') == 'Found a match!'\ntext_uppercase_lowercase('PYTHON') == 'Not matched!'\ntext_uppercase_lowercase('javaSCRIPT') == 'Not matched!'\n\"\"\"\n", "entry_point": "text_uppercase_lowercase", "test": "def check(candidate):\n\n    assert candidate(\"AaBbGg\")==('Found a match!')\n    assert candidate(\"aA\")==('Not matched!')\n    assert candidate(\"PYTHON\")==('Not matched!')\n"}
{"task_id": "918", "prompt": "def coin_change(S, m, n):\n\"\"\"\nWrite a function to count coin change.\nYour code should satisfy these tests:\ncoin_change([1, 2, 5], 3, 5) == 4\ncoin_change([2, 5, 3, 6], 4, 10) == 5\ncoin_change([10, 25, 50], 3, 30) == 1\n\"\"\"\n", "entry_point": "coin_change", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3],3,4)==4\n    assert candidate([4,5,6,7,8,9],6,9)==2\n    assert candidate([4,5,6,7,8,9],6,4)==1\n"}
{"task_id": "919", "prompt": "def multiply_list(items):\n\"\"\"\nWrite a python function to multiply all items in the list.\nYour code should satisfy these tests:\nmultiply_list([1, 2, 3, 4]) == 24\nmultiply_list([5, 5, 5]) == 125\nmultiply_list([0, 1, 2, 3]) == 0\n\"\"\"\n", "entry_point": "multiply_list", "test": "def check(candidate):\n\n    assert candidate([1,-2,3]) == -6\n    assert candidate([1,2,3,4]) == 24\n    assert candidate([3,1,2,3]) == 18\n"}
{"task_id": "920", "prompt": "def remove_tuple(test_list):\n\"\"\"\nWrite a function to remove all tuples with all none values in the given tuple list.\nYour code should satisfy these tests:\nremove_tuple([(1, 2), (None, None), (3, 4)]) == \"[(1, 2), (3, 4)]\"\nremove_tuple([(None, None), (None, None), (None, None)]) == \"[]\"\nremove_tuple([(5, 6), (7, 8), (9, 10)]) == \"[(5, 6), (7, 8), (9, 10)]\"\n\"\"\"\n", "entry_point": "remove_tuple", "test": "def check(candidate):\n\n    assert candidate([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\n    assert candidate([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\n    assert candidate([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'\n"}
{"task_id": "921", "prompt": "def chunk_tuples(test_tup, N):\n\"\"\"\nWrite a function to perform chunking of tuples each of size n.\nYour code should satisfy these tests:\nchunk_tuples((1, 2, 3, 4, 5, 6), 2) == [(1, 2), (3, 4), (5, 6)]\nchunk_tuples(('a', 'b', 'c', 'd', 'e', 'f', 'g'), 3) == [('a', 'b', 'c'), ('d', 'e', 'f'), ('g',)]\nchunk_tuples((10, 20, 30, 40, 50), 1) == [(10,), (20,), (30,), (40,), (50,)]\n\"\"\"\n", "entry_point": "chunk_tuples", "test": "def check(candidate):\n\n    assert candidate((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\n    assert candidate((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\n    assert candidate((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]\n"}
{"task_id": "922", "prompt": "def max_product(arr):\n\"\"\"\nWrite a function to find a pair with the highest product from a given array of integers.\nYour code should satisfy these tests:\nmax_product([1, 2, 3, 4, 5]) == (4, 5)\nmax_product([-10, -20, 1, 3]) == (-10, -20)\nmax_product([0, 2, 3, -1]) == (2, 3)\n\"\"\"\n", "entry_point": "max_product", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\n    assert candidate([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\n    assert candidate([1, 3, 5, 6, 8, 9])==(8,9)\n"}
{"task_id": "923", "prompt": "def super_seq(X, Y, m, n):\n\"\"\"\nWrite a function to find the length of the shortest string that has both str1 and str2 as subsequences.\nYour code should satisfy these tests:\nsuper_seq(\"abc\", \"ac\", 3, 2) == 3\nsuper_seq(\"abcdef\", \"ace\", 6, 3) == 6\nsuper_seq(\"xyz\", \"xyx\", 3, 3) == 4\n\"\"\"\n", "entry_point": "super_seq", "test": "def check(candidate):\n\n    assert candidate(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\n    assert candidate(\"feek\", \"eke\", 4, 3) == 5\n    assert candidate(\"PARRT\", \"RTA\", 5, 3) == 6\n"}
{"task_id": "924", "prompt": "def max_of_two( x, y ):\n\"\"\"\nWrite a function to find maximum of two numbers.\nYour code should satisfy these tests:\nmax_of_two(10, 20) == 20\nmax_of_two(-5, -10) == -5\nmax_of_two(0, 0) == 0\n\"\"\"\n", "entry_point": "max_of_two", "test": "def check(candidate):\n\n    assert candidate(10,20)==20\n    assert candidate(19,15)==19\n    assert candidate(-10,-20)==-10\n"}
{"task_id": "925", "prompt": "def mutiple_tuple(nums):\n\"\"\"\nWrite a python function to calculate the product of all the numbers of a given tuple.\nYour code should satisfy these tests:\nmutiple_tuple((1, 2, 3, 4)) == 24\nmutiple_tuple((5, 5, 5)) == 125\nmutiple_tuple((0, 2, 3)) == 0\n\"\"\"\n", "entry_point": "mutiple_tuple", "test": "def check(candidate):\n\n    assert candidate((4, 3, 2, 2, -1, 18)) == -864\n    assert candidate((1,2,3)) == 6\n    assert candidate((-2,-4,-6)) == -48\n"}
{"task_id": "926", "prompt": "def binomial_coeffi(n, k):\n\"\"\"\nWrite a function to find n-th rencontres number.\nYour code should satisfy these tests:\nbinomial_coeffi(5, 2) == 10\nbinomial_coeffi(6, 3) == 20\nbinomial_coeffi(4, 4) == 1\nbinomial_coeffi(7, 0) == 1\nbinomial_coeffi(8, 5) == 56\n\"\"\"\n", "entry_point": "binomial_coeffi", "test": "def check(candidate):\n\n    assert rencontres_number(7, 2) == 924\n    assert rencontres_number(3, 0) == 2\n    assert rencontres_number(3, 1) == 3\n"}
{"task_id": "927", "prompt": "def __init__(self, data):\n\"\"\"\nWrite a function to calculate the height of the given binary tree.\n\"\"\"\n", "entry_point": "__init__", "test": "def check(candidate):\n\n    assert (max_height(root)) == 3\n    assert (max_height(root1)) == 5\n    assert (max_height(root2)) == 4\n"}
{"task_id": "928", "prompt": "def change_date_format(dt):\n\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nYour code should satisfy these tests:\nchange_date_format('2023-10-05') == '05-10-2023'\nchange_date_format('1999-1-1') == '1-1-1999'\nchange_date_format('2000-12-31') == '31-12-2000'\n\"\"\"\n", "entry_point": "change_date_format", "test": "def check(candidate):\n\n    assert candidate('2026-01-02')=='02-01-2026'\n    assert candidate('2021-01-04')=='04-01-2021'\n    assert candidate('2030-06-06')=='06-06-2030'\n"}
{"task_id": "929", "prompt": "def count_tuplex(tuplex,value):\n\"\"\"\nWrite a function to count repeated items of a tuple.\nYour code should satisfy these tests:\ncount_tuplex((1, 2, 3, 4, 2, 2), 2) == 3\ncount_tuplex(('apple', 'banana', 'cherry', 'apple'), 'apple') == 2\ncount_tuplex((True, False, True, True, False), True) == 3\n\"\"\"\n", "entry_point": "count_tuplex", "test": "def check(candidate):\n\n    assert candidate((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\n    assert candidate((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\n    assert candidate((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4\n"}
{"task_id": "930", "prompt": "def text_match(text):\n\"\"\"\nWrite a function that matches a string that has an a followed by zero or more b's by using regex.\nYour code should satisfy these tests:\ntext_match(\"ab\") == 'Found a match!'\ntext_match(\"a\") == 'Found a match!'\ntext_match(\"ac\") == 'Found a match!'\ntext_match(\"abb\") == 'Found a match!'\ntext_match(\"abc\") == 'Found a match!'\n\"\"\"\n", "entry_point": "text_match", "test": "def check(candidate):\n\n    assert candidate(\"msb\") == 'Not matched!'\n    assert candidate(\"a0c\") == 'Found a match!'\n    assert candidate(\"abbc\") == 'Found a match!'\n"}
{"task_id": "931", "prompt": "def sum_series(number):\n\"\"\"\nWrite a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\nYour code should satisfy these tests:\nsum_series(1) == 1.0\nsum_series(2) == 9.0\nsum_series(3) == 36.0\n\"\"\"\n", "entry_point": "sum_series", "test": "def check(candidate):\n\n    assert candidate(7)==784\n    assert candidate(5)==225\n    assert candidate(15)==14400\n"}
{"task_id": "932", "prompt": "def remove_duplic_list(l):\n\"\"\"\nWrite a function to remove duplicate words from a given list of strings.\nYour code should satisfy these tests:\nremove_duplic_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\nremove_duplic_list(['a', 'b', 'a', 'c', 'b', 'd']) == ['a', 'b', 'c', 'd']\nremove_duplic_list([10, 10, 10, 10, 10]) == [10]\n\"\"\"\n", "entry_point": "remove_duplic_list", "test": "def check(candidate):\n\n    assert candidate([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\n    assert candidate([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\n    assert candidate([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']\n"}
{"task_id": "933", "prompt": "def camel_to_snake(text):\n\"\"\"\nWrite a function to convert camel case string to snake case string by using regex.\nYour code should satisfy these tests:\ncamel_to_snake('CamelCaseString') == 'camel_case_string'\ncamel_to_snake('thisIsATest') == 'this_is_a_test'\ncamel_to_snake('Python3IsFun') == 'python3_is_fun'\n\"\"\"\n", "entry_point": "camel_to_snake", "test": "def check(candidate):\n\n    assert candidate('GoogleAssistant') == 'google_assistant'\n    assert candidate('ChromeCast') == 'chrome_cast'\n    assert candidate('QuadCore') == 'quad_core'\n"}
{"task_id": "934", "prompt": "def dealnnoy_num(n, m):\n\"\"\"\nWrite a function to find the nth delannoy number.\nYour code should satisfy these tests:\ndealnnoy_num(1, 1) == 3\ndealnnoy_num(2, 2) == 13\ndealnnoy_num(3, 3) == 63\n\"\"\"\n", "entry_point": "dealnnoy_num", "test": "def check(candidate):\n\n    assert candidate(3, 4) == 129\n    assert candidate(3, 3) == 63\n    assert candidate(4, 5) == 681\n"}
{"task_id": "935", "prompt": "def series_sum(number):\n\"\"\"\nWrite a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\nYour code should satisfy these tests:\nseries_sum(1) == 1\nseries_sum(3) == 14\nseries_sum(5) == 55\n\"\"\"\n", "entry_point": "series_sum", "test": "def check(candidate):\n\n    assert candidate(6)==91\n    assert candidate(7)==140\n    assert candidate(12)==650\n"}
{"task_id": "936", "prompt": "def re_arrange_tuples(test_list, ord_list):\n\"\"\"\nWrite a function to re-arrange the given tuples based on the given ordered list.\n\"\"\"\n", "entry_point": "re_arrange_tuples", "test": "def check(candidate):\n\n    assert candidate([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\n    assert candidate([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\n    assert candidate([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]\n"}
{"task_id": "937", "prompt": "def max_char(str1):\n\"\"\"\nWrite a function to count the most common character in a given string.\nYour code should satisfy these tests:\nmax_char(\"hello\") == 'l'\nmax_char(\"abracadabra\") == 'a'\nmax_char(\"mississippi\") == 'i'\n\"\"\"\n", "entry_point": "max_char", "test": "def check(candidate):\n\n    assert candidate(\"hello world\")==('l')\n    assert candidate(\"hello \")==('l')\n    assert candidate(\"python pr\")==('p')\n"}
{"task_id": "938", "prompt": "def find_closet(A, B, C, p, q, r):\n\"\"\"\nWrite a function to find three closest elements from three sorted arrays.\nYour code should satisfy these tests:\nfind_closet([1, 4, 10], [2, 15, 20], [10, 12], 3, 3, 2) == (10, 15, 10)\nfind_closet([5, 10, 15], [3, 6, 9], [8, 12, 16], 3, 3, 3) == (10, 9, 8)\nfind_closet([1, 2, 3], [4, 5, 6], [7, 8, 9], 3, 3, 3) == (3, 4, 7)\n\"\"\"\n", "entry_point": "find_closet", "test": "def check(candidate):\n\n    assert candidate([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\n    assert candidate([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\n    assert candidate([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)\n"}
{"task_id": "939", "prompt": "def sorted_models(models):\n\"\"\"\nWrite a function to sort a list of dictionaries using lambda function.\n\"\"\"\n", "entry_point": "sorted_models", "test": "def check(candidate):\n\n    assert candidate([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\n    assert candidate([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\n    assert candidate([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])\n"}
{"task_id": "940", "prompt": "def heap_sort(arr):\n\"\"\"\nWrite a function to sort the given array by using heap sort.\nYour code should satisfy these tests:\nheap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]\nheap_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nheap_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\"\"\"\n", "entry_point": "heap_sort", "test": "def check(candidate):\n\n    assert candidate([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\n    assert candidate([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\n    assert candidate([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]\n"}
{"task_id": "941", "prompt": "def count_elim(num):\n\"\"\"\nWrite a function to count the elements in a list until an element is a tuple.\nYour code should satisfy these tests:\ncount_elim([1, 2, 3, 4]) == 4\ncount_elim([1, (2, 3), 4, 5]) == 1\ncount_elim([(1, 2), 3, 4, 5]) == 0\n\"\"\"\n", "entry_point": "count_elim", "test": "def check(candidate):\n\n    assert candidate([10,20,30,(10,20),40])==3\n    assert candidate([10,(20,30),(10,20),40])==1\n    assert candidate([(10,(20,30,(10,20),40))])==0\n"}
{"task_id": "942", "prompt": "def check_element(test_tup, check_list):\n\"\"\"\nWrite a function to check if any list element is present in the given list.\nYour code should satisfy these tests:\ncheck_element(('apple', 'banana', 'cherry'), ['banana', 'date']) == True\ncheck_element(('dog', 'cat', 'mouse'), ['elephant', 'giraffe']) == False\ncheck_element(('red', 'blue', 'green'), ['yellow', 'red']) == True\n\"\"\"\n", "entry_point": "check_element", "test": "def check(candidate):\n\n    assert candidate((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\n    assert candidate((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\n    assert candidate((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False\n"}
{"task_id": "943", "prompt": "def combine_lists(num1,num2):\n\"\"\"\nWrite a function to combine two given sorted lists using heapq module.\nYour code should satisfy these tests:\ncombine_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]\ncombine_lists([], [1, 2, 3]) == [1, 2, 3]\ncombine_lists([10, 20, 30], []) == [10, 20, 30]\n\"\"\"\n", "entry_point": "combine_lists", "test": "def check(candidate):\n\n    assert candidate([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\n    assert candidate([1,3,7],[2,4,6])==[1,2,3,4,6,7]\n"}
{"task_id": "944", "prompt": "def num_position(text):\n\"\"\"\nWrite a function to separate and print the numbers and their position of a given string.\nYour code should satisfy these tests:\nnum_position(\"Hello 123 World\") == 6\nnum_position(\"Python 3.9 is the latest version\") == 7\nnum_position(\"The answer is 42\") == 14\nnum_position(\"1234 is a number\") == 0\nnum_position(\"No digits here\") == None\n\"\"\"\n", "entry_point": "num_position", "test": "def check(candidate):\n\n    assert candidate(\"there are 70 flats in this apartment\")==10\n    assert candidate(\"every adult have 32 teeth\")==17\n    assert candidate(\"isha has 79 chocolates in her bag\")==9\n"}
{"task_id": "945", "prompt": "def tuple_to_set(t):\n\"\"\"\nWrite a function to convert the given tuples into set.\nYour code should satisfy these tests:\ntuple_to_set((1, 2, 3, 4)) == {1, 2, 3, 4}\ntuple_to_set(('a', 'b', 'c', 'a')) == {'a', 'b', 'c'}\ntuple_to_set((True, False, True, True)) == {True, False}\n\"\"\"\n", "entry_point": "tuple_to_set", "test": "def check(candidate):\n\n    assert candidate(('x', 'y', 'z') ) == {'y', 'x', 'z'}\n    assert candidate(('a', 'b', 'c') ) == {'c', 'a', 'b'}\n    assert candidate(('z', 'd', 'e') ) == {'d', 'e', 'z'}\n"}
{"task_id": "946", "prompt": "def most_common_elem(s,a):\n\"\"\"\nWrite a function to find the most common elements and their counts of a specified text.\nYour code should satisfy these tests:\nmost_common_elem(\"aabbbcc\", 1) == [('b', 3)]\nmost_common_elem(\"hello world\", 2) == [('l', 3), ('o', 2)]\nmost_common_elem(\"test test test\", 3) == [('t', 6), ('e', 3), ('s', 3)]\n\"\"\"\n", "entry_point": "most_common_elem", "test": "def check(candidate):\n\n    assert candidate('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)]\n    assert candidate('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\n    assert candidate('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]\n"}
{"task_id": "947", "prompt": "def len_log(list1):\n\"\"\"\nWrite a python function to find the length of the shortest word.\nYour code should satisfy these tests:\nlen_log([\"apple\", \"banana\", \"pear\"]) == 4\nlen_log([\"hello\", \"world\", \"hi\", \"bye\"]) == 2\nlen_log([\"one\", \"two\", \"three\", \"four\"]) == 3\n\"\"\"\n", "entry_point": "len_log", "test": "def check(candidate):\n\n    assert candidate([\"win\",\"lose\",\"great\"]) == 3\n    assert candidate([\"a\",\"ab\",\"abc\"]) == 1\n    assert candidate([\"12\",\"12\",\"1234\"]) == 2\n"}
{"task_id": "948", "prompt": "def get_item(tup1,index):\n\"\"\"\nWrite a function to get an item of a tuple.\nYour code should satisfy these tests:\nget_item((1, 2, 3, 4), 2) == 3\nget_item(('a', 'b', 'c', 'd'), 0) == 'a'\nget_item((10.5, 20.3, 30.1), 1) == 20.3\nget_item((True, False, True), 2) == True\nget_item(('apple', 'banana', 'cherry'), 1) == 'banana'\n\"\"\"\n", "entry_point": "get_item", "test": "def check(candidate):\n\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')\n"}
{"task_id": "949", "prompt": "def count_digs(tup):\n\"\"\"\nWrite a function to sort the given tuple list basis the total digits in tuple.\nYour code should satisfy these tests:\ncount_digs((123, 45, 6789)) == 9\ncount_digs((1, 22, 333, 4444)) == 10\ncount_digs((0, 100, 1000)) == 8\ncount_digs((999, 9999, 99999)) == 12\ncount_digs((5, 55, 555, 5555)) == 10\n\"\"\"\n", "entry_point": "count_digs", "test": "def check(candidate):\n\n    assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\n    assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\n    assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'\n"}
{"task_id": "950", "prompt": "def chinese_zodiac(year):\n\"\"\"\nWrite a function to display sign of the chinese zodiac for given year.\nYour code should satisfy these tests:\nchinese_zodiac(2000) == 'Dragon'\nchinese_zodiac(1997) == 'Ox'\nchinese_zodiac(2012) == 'Dragon'\n\"\"\"\n", "entry_point": "chinese_zodiac", "test": "def check(candidate):\n\n    assert candidate(1997)==('Ox')\n    assert candidate(1998)==('Tiger')\n    assert candidate(1994)==('Dog')\n"}
{"task_id": "951", "prompt": "def max_similar_indices(test_list1, test_list2):\n\"\"\"\nWrite a function to find the maximum of similar indices in two lists of tuples.\nYour code should satisfy these tests:\nmax_similar_indices([(1, 2), (3, 4)], [(2, 1), (4, 3)]) == [(2, 2), (4, 4)]\nmax_similar_indices([(5, 6), (7, 8)], [(6, 5), (8, 7)]) == [(6, 6), (8, 8)]\nmax_similar_indices([(0, 0), (9, 9)], [(1, 1), (8, 8)]) == [(1, 1), (9, 9)]\n\"\"\"\n", "entry_point": "max_similar_indices", "test": "def check(candidate):\n\n    assert candidate([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\n    assert candidate([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\n    assert candidate([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]\n"}
{"task_id": "952", "prompt": "def nCr_mod_p(n, r, p):\n\"\"\"\nWrite a function to compute the value of ncr mod p.\nYour code should satisfy these tests:\nnCr_mod_p(5, 2, 13) == 10\nnCr_mod_p(10, 3, 17) == 1\nnCr_mod_p(7, 4, 11) == 2\nnCr_mod_p(15, 6, 19) == 8\nnCr_mod_p(20, 10, 23) == 20\n\"\"\"\n", "entry_point": "nCr_mod_p", "test": "def check(candidate):\n\n    assert candidate(10, 2, 13) == 6\n    assert candidate(11, 3, 14) == 11\n    assert candidate(18, 14, 19) == 1\n"}
{"task_id": "953", "prompt": "def subset(ar, n):\n\"\"\"\nWrite a python function to find the minimun number of subsets with distinct elements.\nYour code should satisfy these tests:\nsubset([1, 2, 2, 3, 3, 3, 4], 7) == 1\nsubset([5, 5, 5, 5, 5], 5) == 5\nsubset([10, 20, 30, 40, 50], 5) == 1\n\"\"\"\n", "entry_point": "subset", "test": "def check(candidate):\n\n    assert candidate([1, 2, 3, 4],4) == 1\n    assert candidate([5, 6, 9, 3, 4, 3, 4],7) == 2\n    assert candidate([1, 2, 3 ],3) == 1\n"}
{"task_id": "954", "prompt": "def profit_amount(actual_cost,sale_amount):\n\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\nYour code should satisfy these tests:\nprofit_amount(100, 80) == 20\nprofit_amount(50, 70) == None\nprofit_amount(120, 100) == 20\nprofit_amount(90, 75) == 15\nprofit_amount(200, 150) == 50\n\"\"\"\n", "entry_point": "profit_amount", "test": "def check(candidate):\n\n    assert candidate(1500,1200)==300\n    assert candidate(100,200)==None\n    assert candidate(2000,5000)==None\n"}
{"task_id": "955", "prompt": "def is_abundant(n):\n\"\"\"\nWrite a function to find out, if the given number is abundant.\nYour code should satisfy these tests:\nis_abundant(12) == True\nis_abundant(28) == False\nis_abundant(18) == True\n\"\"\"\n", "entry_point": "is_abundant", "test": "def check(candidate):\n\n    assert candidate(12)==True\n    assert candidate(13)==False\n    assert candidate(9)==False\n"}
{"task_id": "956", "prompt": "def split_list(text):\n\"\"\"\nWrite a function to split the given string at uppercase letters by using regex.\nYour code should satisfy these tests:\nsplit_list(\"HelloWorld\") == ['Hello', 'World']\nsplit_list(\"SplitCamelCase\") == ['Split', 'Camel', 'Case']\nsplit_list(\"PythonIsFun\") == ['Python', 'Is', 'Fun']\n\"\"\"\n", "entry_point": "split_list", "test": "def check(candidate):\n\n    assert candidate(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\n    assert candidate(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\n    assert candidate(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']\n"}
{"task_id": "957", "prompt": "def get_First_Set_Bit_Pos(n):\n\"\"\"\nWrite a python function to get the position of rightmost set bit.\nYour code should satisfy these tests:\nget_First_Set_Bit_Pos(18) == 2\nget_First_Set_Bit_Pos(128) == 8\nget_First_Set_Bit_Pos(7) == 1\n\"\"\"\n", "entry_point": "get_First_Set_Bit_Pos", "test": "def check(candidate):\n\n    assert candidate(12) == 3\n    assert candidate(18) == 2\n    assert candidate(16) == 5\n"}
{"task_id": "958", "prompt": "def int_to_roman( num):\n\"\"\"\nWrite a function to convert an integer into a roman numeral.\nYour code should satisfy these tests:\nint_to_roman(3) == 'III'\nint_to_roman(58) == 'LVIII'\nint_to_roman(1994) == 'MCMXCIV'\n\"\"\"\n", "entry_point": "int_to_roman", "test": "def check(candidate):\n\n    assert candidate(1)==(\"I\")\n    assert candidate(50)==(\"L\")\n    assert candidate(4)==(\"IV\")\n"}
{"task_id": "959", "prompt": "def Average(lst):\n\"\"\"\nWrite a python function to find the average of a list.\nYour code should satisfy these tests:\nAverage([10, 20, 30, 40, 50]) == 30.0\nAverage([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5\nAverage([100, 200, 300]) == 200.0\n\"\"\"\n", "entry_point": "Average", "test": "def check(candidate):\n\n    assert candidate([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\n    assert candidate([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\n    assert candidate([1,2,3]) == 2\n"}
{"task_id": "960", "prompt": "def get_noOfways(n):\n\"\"\"\nWrite a function to solve tiling problem.\nYour code should satisfy these tests:\nget_noOfways(2) == 1\nget_noOfways(3) == 2\nget_noOfways(4) == 3\n\"\"\"\n", "entry_point": "get_noOfways", "test": "def check(candidate):\n\n    assert candidate(4)==3\n    assert candidate(3)==2\n    assert candidate(5)==5\n"}
{"task_id": "961", "prompt": "def roman_to_int(s):\n\"\"\"\nWrite a function to convert a roman numeral to an integer.\nYour code should satisfy these tests:\nroman_to_int(\"III\") == 3\nroman_to_int(\"LVIII\") == 58\nroman_to_int(\"MCMXCIV\") == 1994\n\"\"\"\n", "entry_point": "roman_to_int", "test": "def check(candidate):\n\n    assert candidate('MMMCMLXXXVI')==3986\n    assert candidate('MMMM')==4000\n    assert candidate('C')==100\n"}
{"task_id": "962", "prompt": "def sum_Natural(n):\n\"\"\"\nWrite a python function to find the sum of all even natural numbers within the range l and r.\nYour code should satisfy these tests:\nsum_Natural(5) == 30\nsum_Natural(10) == 110\nsum_Natural(1) == 2\nsum_Natural(7) == 56\nsum_Natural(0) == 0\n\"\"\"\n", "entry_point": "sum_Natural", "test": "def check(candidate):\n\n    assert sum_Even(2,5) == 6\n    assert sum_Even(3,8) == 18\n    assert sum_Even(4,6) == 10\n"}
{"task_id": "963", "prompt": "def discriminant_value(x,y,z):\n\"\"\"\nWrite a function to calculate the discriminant value.\nYour code should satisfy these tests:\ndiscriminant_value(1, 5, 6) == (\"Two solutions\", 1)\ndiscriminant_value(1, 2, 1) == (\"one solution\", 0)\ndiscriminant_value(1, 1, 2) == (\"no real solution\", -7)\n\"\"\"\n", "entry_point": "discriminant_value", "test": "def check(candidate):\n\n    assert candidate(4,8,2)==(\"Two solutions\",32)\n    assert candidate(5,7,9)==(\"no real solution\",-131)\n    assert candidate(0,0,9)==(\"one solution\",0)\n"}
{"task_id": "964", "prompt": "def word_len(s):\n\"\"\"\nWrite a python function to check whether the length of the word is even or not.\nYour code should satisfy these tests:\nword_len(\"hello world\") == False\nword_len(\"even odd\") == True\nword_len(\"python programming\") == True\n\"\"\"\n", "entry_point": "word_len", "test": "def check(candidate):\n\n    assert candidate(\"program\") == False\n    assert candidate(\"solution\") == True\n    assert candidate(\"data\") == True\n"}
{"task_id": "965", "prompt": "def camel_to_snake(text):\n\"\"\"\nWrite a function to convert camel case string to snake case string.\nYour code should satisfy these tests:\ncamel_to_snake('CamelCase') == 'camel_case'\ncamel_to_snake('thisIsATest') == 'this_is_a_test'\ncamel_to_snake('Python3IsFun') == 'python3_is_fun'\n\"\"\"\n", "entry_point": "camel_to_snake", "test": "def check(candidate):\n\n    assert candidate('PythonProgram')==('python_program')\n    assert candidate('pythonLanguage')==('python_language')\n    assert candidate('ProgrammingLanguage')==('programming_language')\n"}
{"task_id": "966", "prompt": "def remove_empty(tuple1):\n\"\"\"\nWrite a function to remove an empty tuple from a list of tuples.\n\"\"\"\n", "entry_point": "remove_empty", "test": "def check(candidate):\n\n    assert candidate([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']\n    assert candidate([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]\n    assert candidate([(), (), ('',), (\"java\")])==[('',),(\"java\") ]\n"}
{"task_id": "967", "prompt": "def check(string):\n\"\"\"\nWrite a python function to accept the strings which contains all vowels.\nYour code should satisfy these tests:\ncheck(\"Education\") == \"accepted\"\ncheck(\"Python\") == \"not accepted\"\ncheck(\"AeIoU\") == \"accepted\"\ncheck(\"Quick brown fox\") == \"not accepted\"\ncheck(\"Artificial Intelligence\") == \"accepted\"\n\"\"\"\n", "entry_point": "check", "test": "def check(candidate):\n\n    assert candidate(\"SEEquoiaL\") == 'accepted'\n    assert candidate('program') == \"not accepted\"\n    assert candidate('fine') == \"not accepted\"\n"}
{"task_id": "968", "prompt": "def floor_Max(A,B,N):\n\"\"\"\nWrite a python function to find maximum possible value for the given periodic function.\nYour code should satisfy these tests:\nfloor_Max(5, 3, 10) == 3\nfloor_Max(7, 4, 8) == 5\nfloor_Max(10, 5, 20) == 8\n\"\"\"\n", "entry_point": "floor_Max", "test": "def check(candidate):\n\n    assert candidate(11,10,9) == 9\n    assert candidate(5,7,4) == 2\n    assert candidate(2,2,1) == 1\n"}
{"task_id": "969", "prompt": "def join_tuples(test_list):\n\"\"\"\nWrite a function to join the tuples if they have similar initial elements.\nYour code should satisfy these tests:\njoin_tuples([(1, 2), (1, 3), (2, 4)]) == [(1, 2, 3), (2, 4)]\njoin_tuples([(5, 6), (7, 8), (7, 9), (7, 10)]) == [(5, 6), (7, 8, 9, 10)]\njoin_tuples([(3, 4), (5, 6), (5, 7), (8, 9), (8, 10)]) == [(3, 4), (5, 6, 7), (8, 9, 10)]\n\"\"\"\n", "entry_point": "join_tuples", "test": "def check(candidate):\n\n    assert candidate([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\n    assert candidate([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\n    assert candidate([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]\n"}
{"task_id": "970", "prompt": "def min_of_two( x, y ):\n\"\"\"\nWrite a function to find minimum of two numbers.\nYour code should satisfy these tests:\nmin_of_two(10, 20) == 10\nmin_of_two(-5, -10) == -10\nmin_of_two(0, 0) == 0\n\"\"\"\n", "entry_point": "min_of_two", "test": "def check(candidate):\n\n    assert candidate(10,20)==10\n    assert candidate(19,15)==15\n    assert candidate(-10,-20)==-20\n"}
{"task_id": "971", "prompt": "def maximum_segments(n, a, b, c):\n\"\"\"\nWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\nYour code should satisfy these tests:\nmaximum_segments(5, 1, 2, 3) == 5\nmaximum_segments(10, 4, 5, 6) == 2\nmaximum_segments(15, 5, 5, 5) == 3\n\"\"\"\n", "entry_point": "maximum_segments", "test": "def check(candidate):\n\n    assert candidate(7, 5, 2, 5) == 2\n    assert candidate(17, 2, 1, 3) == 17\n    assert candidate(18, 16, 3, 6) == 6\n"}
{"task_id": "972", "prompt": "def concatenate_nested(test_tup1, test_tup2):\n\"\"\"\nWrite a function to concatenate the given two tuples to a nested tuple.\nYour code should satisfy these tests:\nconcatenate_nested((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nconcatenate_nested(('a', 'b'), ('c', 'd', 'e')) == ('a', 'b', 'c', 'd', 'e')\nconcatenate_nested((True, False), (True,)) == (True, False, True)\n\"\"\"\n", "entry_point": "concatenate_nested", "test": "def check(candidate):\n\n    assert candidate((3, 4), (5, 6)) == (3, 4, 5, 6)\n    assert candidate((1, 2), (3, 4)) == (1, 2, 3, 4)\n    assert candidate((4, 5), (6, 8)) == (4, 5, 6, 8)\n"}
{"task_id": "973", "prompt": "def left_rotate(s,d):\n\"\"\"\nWrite a python function to left rotate the string.\nYour code should satisfy these tests:\nleft_rotate(\"abcdef\", 2) == \"cdefab\"\nleft_rotate(\"rotation\", 3) == \"ationrot\"\nleft_rotate(\"hello\", 1) == \"elloh\"\n\"\"\"\n", "entry_point": "left_rotate", "test": "def check(candidate):\n\n    assert candidate(\"python\",2) == \"thonpy\"\n    assert candidate(\"bigdata\",3 ) == \"databig\"\n    assert candidate(\"hadoop\",1 ) == \"adooph\"\n"}
{"task_id": "974", "prompt": "def min_sum_path(A):\n\"\"\"\nWrite a function to find the minimum total path sum in the given triangle.\nYour code should satisfy these tests:\nmin_sum_path([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]]) == 16\n\"\"\"\n", "entry_point": "min_sum_path", "test": "def check(candidate):\n\n    assert candidate([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\n    assert candidate([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10\n    assert candidate([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9\n"}
