task_id,prompt,entry_point,test,canonical_solution,generate_test_cases,plantuml
801,"def test_three_equal(x,y,z):
""""""
Write a python function to count the number of equal numbers from three given integers.
Your code should satisfy these tests:
test_three_equal(1, 2, 3) == 0
test_three_equal(5, 5, 5) == 3
test_three_equal(7, 7, 8) == 2
""""""
",test_three_equal,"def check(candidate):

    assert candidate(1,1,1) == 3
    assert candidate(-1,-2,-3) == 0
    assert candidate(1,2,2) == 2
","def test_three_equal(x,y,z):
  result= set([x,y,z])
  if len(result)==3:
    return 0
  else:
    return (4-len(result))","[""test_three_equal(1, 2, 3) == 0"", ""test_three_equal(5, 5, 5) == 3"", ""test_three_equal(7, 7, 8) == 2""]","@startuml

title test_three_equal

start
:test_three_equal(x,y,z);

if (x == y) and (y == z) then (
  :return 3;
) else (
  if (x == y) or (y == z) then (
    :return 2;
  ) else (
    :return 0;
  )
)

@enduml"
542,"def fill_spaces(text):
""""""
Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.
Your code should satisfy these tests:
fill_spaces(""hello world"") == ""hello:world""
fill_spaces(""this,is,a,test"") == ""this:is:a:test""
fill_spaces(""python,java.c++"") == ""python:java:c++""
""""""
",fill_spaces,"def check(candidate):

    assert candidate('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'
    assert candidate('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'
    assert candidate('Probass Curve Audio') == 'Probass:Curve:Audio'
","import re
def fill_spaces(text):
  return (re.sub(""[ ,.]"", "":"", text))","[""fill_spaces(\""hello world\"") == \""hello:world\"""", ""fill_spaces(\""this,is,a,test\"") == \""this:is:a:test\"""", ""fill_spaces(\""python,java.c++\"") == \""python:java:c++\""""]","@startuml
start

:Input text string;
:Check if input is valid (not None and is a string);
if (Is input valid?) then (yes)
    :Use regex to replace spaces, commas, or dots with colons;
    :Return the modified string;
else (no)
    :Return an error or handle invalid input;
endif

:Output the result;
stop
@enduml"
931,"def sum_series(number):
""""""
Write a function to calculate the sum of series 1³+2³+3³+….+n³.
Your code should satisfy these tests:
sum_series(1) == 1.0
sum_series(2) == 9.0
sum_series(3) == 36.0
""""""
",sum_series,"def check(candidate):

    assert candidate(7)==784
    assert candidate(5)==225
    assert candidate(15)==14400
","import math
def sum_series(number):
 total = 0
 total = math.pow((number * (number + 1)) /2, 2)
 return total","[""sum_series(1) == 1.0"", ""sum_series(2) == 9.0"", ""sum_series(3) == 36.0""]","@startuml

title Sum Series

start
:Input number;

if (number <= 0) then (false)
:Invalid input;
:End;
else (true)
:Valid input;

:Calculate sum;
:sum = 0;

for (i = 1; i <= number; i++)
:sum = sum + i^3;

:Output sum;
:End;

@enduml"
137,"def zero_count(nums):
""""""
Write a function to find the ration of zeroes in an array of integers.
Your code should satisfy these tests:
zero_count([1, 0, 0, 1, 0]) == 0.6
zero_count([0, 0, 0, 0, 0]) == 1.0
zero_count([1, 1, 1, 1, 1]) == 0.0
zero_count([0, 1, 2, 3, 4, 5, 0]) == 0.29
zero_count([0, 0, 1, 1, 1, 0, 0, 0]) == 0.62
""""""
",zero_count,"def check(candidate):

    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15
    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00
    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00
","from array import array
def zero_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x == 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)","[""zero_count([1, 0, 0, 1, 0]) == 0.6"", ""zero_count([0, 0, 0, 0, 0]) == 1.0"", ""zero_count([1, 1, 1, 1, 1]) == 0.0"", ""zero_count([0, 1, 2, 3, 4, 5, 0]) == 0.29"", ""zero_count([0, 0, 1, 1, 1, 0, 0, 0]) == 0.62""]","@startuml
start
:Input: nums
:Check if nums is empty: isEmpty(nums)
if (isEmpty(nums) == true) then
    :Return 0: return 0
else
    :Initialize count to 0: count = 0
    :Initialize length to len(nums): length = len(nums)
    :Iterate over nums: for i in nums
        if (i == 0) then
            :Increment count: count = count + 1
        endif
    endfor
    :Calculate ratio: ratio = count / length
    :Return ratio: return ratio
endif
stop
@enduml"
259,"def maximize_elements(test_tup1, test_tup2):
""""""
Write a function to maximize the given two tuples.
Your code should satisfy these tests:
maximize_elements(((1, 2), (3, 4)), ((2, 1), (4, 3))) == ((2, 2), (4, 4))
maximize_elements(((5, 6), (7, 8)), ((3, 9), (1, 2))) == ((5, 9), (7, 8))
maximize_elements(((0, 0), (0, 0)), ((0, 0), (0, 0))) == ((0, 0), (0, 0))
""""""
",maximize_elements,"def check(candidate):

    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))
    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))
    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))
","def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","[""maximize_elements(((1, 2), (3, 4)), ((2, 1), (4, 3))) == ((2, 2), (4, 4))"", ""maximize_elements(((5, 6), (7, 8)), ((3, 9), (1, 2))) == ((5, 9), (7, 8))"", ""maximize_elements(((0, 0), (0, 0)), ((0, 0), (0, 0))) == ((0, 0), (0, 0))""]","@startuml

start
:maximize_elements(test_tup1, test_tup2);

if (test_tup1[0] > test_tup2[0]) then (yes)
  :return (test_tup1[0], test_tup1[1]);
elseif (test_tup1[0] < test_tup2[0]) then (no)
  :return (test_tup2[0], test_tup2[1]);
else (equal)
  if (test_tup1[1] > test_tup2[1]) then (yes)
    :return (test_tup1[0], test_tup1[1]);
  elseif (test_tup1[1] < test_tup2[1]) then (no)
    :return (test_tup2[0], test_tup2[1]);
  else (equal)
    :return (test_tup1[0], test_tup1[1]);
  endif;
endif;

stop

@enduml"
471,"def find_remainder(arr, lens, n):
""""""
Write a python function to find remainder of array multiplication divided by n.
Your code should satisfy these tests:
find_remainder([2, 3, 5], 3, 7) == 2
find_remainder([10, 20, 30], 3, 11) == 5
find_remainder([1, 2, 3, 4, 5], 5, 13) == 3
""""""
",find_remainder,"def check(candidate):

    assert candidate([ 100, 10, 5, 25, 35, 14 ],6,11) ==9
    assert candidate([1,1,1],3,1) == 0
    assert candidate([1,2,1],3,2) == 0
","def find_remainder(arr, lens, n):
    mul = 1
    for i in range(lens):
        mul = (mul * (arr[i] % n)) % n
    return mul % n ","[""find_remainder([2, 3, 5], 3, 7) == 2"", ""find_remainder([10, 20, 30], 3, 11) == 5"", ""find_remainder([1, 2, 3, 4, 5], 5, 13) == 3""]","@startuml

title ""Find Remainder of Array Multiplication""

start
:Start;

if (arr.length == 0) then (no elements in array)
:Return 0;
else
:Multiply all elements in array;
:Divide result by n;
:Return remainder;

stop
:End;

@enduml"
426,"def filter_oddnumbers(nums):
""""""
Write a function to filter odd numbers using lambda function.
Your code should satisfy these tests:
filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]
filter_oddnumbers([10, 21, 32, 43, 54]) == [21, 43]
filter_oddnumbers([0, -1, -2, -3, -4]) == [-1, -3]
""""""
",filter_oddnumbers,"def check(candidate):

    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]
    assert candidate([10,20,45,67,84,93])==[45,67,93]
    assert candidate([5,7,9,8,6,4,3])==[5,7,9,3]
","def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums","[""filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]"", ""filter_oddnumbers([10, 21, 32, 43, 54]) == [21, 43]"", ""filter_oddnumbers([0, -1, -2, -3, -4]) == [-1, -3]""]","@startuml

title filter_oddnumbers

start
:filter_oddnumbers(nums);

if (nums is empty) then (yes)
:return [];
else (no)

for each num in nums
:if (num is odd) then (yes)
:add num to result;
else (no)

end for

:return result;

@enduml"
268,"def find_star_num(n):
""""""
Write a function to find the n'th star number.
Your code should satisfy these tests:
find_star_num(1) == 1
find_star_num(2) == 13
find_star_num(3) == 37
""""""
",find_star_num,"def check(candidate):

    assert candidate(3) == 37
    assert candidate(4) == 73
    assert candidate(5) == 121
","def find_star_num(n):
	return (6 * n * (n - 1) + 1) ","[""find_star_num(1) == 1"", ""find_star_num(2) == 13"", ""find_star_num(3) == 37""]","@startuml
start

:Input n (nth star number to find);
if (n <= 0?) then (yes)
  :Invalid input: n must be a positive integer;
  stop
else (no)
  :Calculate the nth star number using the formula: \nstar_num = 6 * n * (n - 1) + 1;
  :Output the result (star_num);
  stop
endif

@enduml"
350,"def minimum_Length(s):
""""""
Write a python function to minimize the length of the string by removing occurrence of only one character.
Your code should satisfy these tests:
minimum_Length(""aabbc"") == 3
minimum_Length(""abcde"") == 4
minimum_Length(""zzzzz"") == 0
""""""
",minimum_Length,"def check(candidate):

    assert candidate(""mnm"") == 1
    assert candidate(""abcda"") == 3
    assert candidate(""abcb"") == 2
","def minimum_Length(s) :
    maxOcc = 0
    n = len(s)
    arr = [0]*26
    for i in range(n) :
        arr[ord(s[i]) -ord('a')] += 1
    for i in range(26) :
        if arr[i] > maxOcc :
            maxOcc = arr[i]
    return n - maxOcc ","[""minimum_Length(\""aabbc\"") == 3"", ""minimum_Length(\""abcde\"") == 4"", ""minimum_Length(\""zzzzz\"") == 0""]","@startuml
start
:Input String s;
if (s is empty?) then (yes)
    :Return 0;
    stop
endif
:Initialize count to 0;
:Initialize min_length to length of s;
:Initialize char_count to an empty dictionary;
repeat
    :Increment count;
    :Get the character at index count;
    :Increment char_count of the character;
    if (char_count > 1) then (yes)
        :Remove all occurrences of the character from s;
    endif
    :Set min_length to min of min_length and length of s;
until (count == length of s)
:Return min_length;
stop
@enduml"
317,"def modified_encode(alist):
""""""
Write a function to reflect the modified run-length encoding from a list.
Your code should satisfy these tests:
modified_encode([1, 1, 2, 2, 2, 3, 3, 1]) == [[2, 1], [3, 2], [2, 3], 1]
modified_encode(['a', 'a', 'a', 'b', 'c', 'c', 'a', 'a', 'd']) == [[3, 'a'], 'b', [2, 'c'], [2, 'a'], 'd']
modified_encode([7, 8, 9, 9, 10, 10, 10, 11]) == [7, 8, [2, 9], [3, 10], 11]
""""""
",modified_encode,"def check(candidate):

    assert candidate([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]
    assert candidate('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']
    assert candidate('python')==['p', 'y', 't', 'h', 'o', 'n']
","from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]","[""modified_encode([1, 1, 2, 2, 2, 3, 3, 1]) == [[2, 1], [3, 2], [2, 3], 1]"", ""modified_encode(['a', 'a', 'a', 'b', 'c', 'c', 'a', 'a', 'd']) == [[3, 'a'], 'b', [2, 'c'], [2, 'a'], 'd']"", ""modified_encode([7, 8, 9, 9, 10, 10, 10, 11]) == [7, 8, [2, 9], [3, 10], 11]""]","@startuml

start
:modified_encode(alist);

if (alist is empty) then (no encoding needed)
  :return [];
else
  :result = [];
  :current = alist[0];
  :count = 1;

  while (current is not the last element of alist)
    :if (current is equal to alist[i])
      :count = count + 1;
    :else
      :if (count is greater than 1)
        :result.append([count, current]);
      :else
        :result.append(current);
      :end if
      :current = alist[i];
      :count = 1;
    :end if
  :end while

  :if (count is greater than 1)
    :result.append([count, current]);
  :else
    :result.append(current);
  :end if

  :return result;
:end if

@enduml"
305,"def start_withp(words):
""""""
Write a function to match two words from a list of words starting with letter 'p'.
Your code should satisfy these tests:
start_withp([""Python Programming"", ""Java Coding""]) == ('Python', 'Programming')
start_withp([""Physics Problem"", ""Chemistry Quiz""]) == ('Physics', 'Problem')
start_withp([""Pandas Dataframe"", ""Numpy Array""]) == None
start_withp([""Prolog Logic"", ""Pascal Programming""]) == ('Pascal', 'Programming')
start_withp([""Perl Scripting"", ""PHP Development""]) == None
""""""
",start_withp,"def check(candidate):

    assert candidate([""Python PHP"", ""Java JavaScript"", ""c c++""])==('Python', 'PHP')
    assert candidate([""Python Programming"",""Java Programming""])==('Python','Programming')
    assert candidate([""Pqrst Pqr"",""qrstuv""])==('Pqrst','Pqr')
","import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()","[""start_withp([\""Python Programming\"", \""Java Coding\""]) == ('Python', 'Programming')"", ""start_withp([\""Physics Problem\"", \""Chemistry Quiz\""]) == ('Physics', 'Problem')"", ""start_withp([\""Pandas Dataframe\"", \""Numpy Array\""]) == None"", ""start_withp([\""Prolog Logic\"", \""Pascal Programming\""]) == ('Pascal', 'Programming')"", ""start_withp([\""Perl Scripting\"", \""PHP Development\""]) == None""]","@startuml
start
:Input List;
if ""Does the list contain words starting with 'p'?"" then
    :Iterate through the list;
    if ""Is the word starting with 'p'?"" then
        :Store the word;
        stop
    endif
endif
:Return None;
stop
@enduml"
527,"def get_pairs_count(arr, n, sum):
""""""
Write a function to find all pairs in an integer array whose sum is equal to a given number.
Your code should satisfy these tests:
get_pairs_count([1, 5, 7, -1], 4, 6) == 2
get_pairs_count([10, 12, 10, 15, -1, 7, 6, 5, 4, 2, 1, 1, 1], 13, 11) == 9
get_pairs_count([0, 0, 0, 0], 4, 0) == 6
""""""
",get_pairs_count,"def check(candidate):

    assert candidate([1, 5, 7, -1, 5], 5, 6) == 3
    assert candidate([1, 5, 7, -1], 4, 6) == 2
    assert candidate([1, 1, 1, 1], 4, 2) == 6
","def get_pairs_count(arr, n, sum):
    count = 0
    for i in range(0, n):
        for j in range(i + 1, n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count","[""get_pairs_count([1, 5, 7, -1], 4, 6) == 2"", ""get_pairs_count([10, 12, 10, 15, -1, 7, 6, 5, 4, 2, 1, 1, 1], 13, 11) == 9"", ""get_pairs_count([0, 0, 0, 0], 4, 0) == 6""]","@startuml

title get_pairs_count

start
:get_pairs_count(arr, n, sum);

if (n == 0) then (no)
:return 0;
else (yes)
:for i in range(n):
:   for j in range(i+1, n):
:       if (arr[i] + arr[j] == sum) then (yes)
:           return 1;
:       else (no)
:           continue;
:       endif
:   endfor
:endfor
:return 0;
endif

@enduml"
786,"def right_insertion(a, x):
""""""
Write a function to locate the right insertion point for a specified value in sorted order.
Your code should satisfy these tests:
right_insertion([1, 2, 4, 4, 5], 4) == 4
right_insertion([1, 3, 5, 7], 6) == 3
right_insertion([0, 0, 0, 0], 0) == 4
""""""
",right_insertion,"def check(candidate):

    assert candidate([1,2,4,5],6)==4
    assert candidate([1,2,4,5],3)==2
    assert candidate([1,2,4,5],7)==4
","import bisect
def right_insertion(a, x):
    i = bisect.bisect_right(a, x)
    return i","[""right_insertion([1, 2, 4, 4, 5], 4) == 4"", ""right_insertion([1, 3, 5, 7], 6) == 3"", ""right_insertion([0, 0, 0, 0], 0) == 4""]","@startuml

start
:right_insertion(a, x);

if (a is empty) then (yes)
:return 0;
else (no)
:initialize result to 0;

for each element in a
:if element is equal to x then
:return result;

:if element is greater than x then
:return result;

:increment result;

end for

:return result;

@enduml"
168,"def frequency(a,x):
""""""
Write a python function to find the frequency of a number in a given array.
Your code should satisfy these tests:
frequency([1, 2, 3, 4, 5, 1, 1], 1) == 3
frequency(['a', 'b', 'c', 'a', 'd', 'a'], 'a') == 3
frequency([10, 20, 30, 40, 50], 60) == 0
""""""
",frequency,"def check(candidate):

    assert candidate([1,2,3],4) == 0
    assert candidate([1,2,2,3,3,3,4],3) == 3
    assert candidate([0,1,2,3,1,2],1) == 2
","def frequency(a,x):
    count = 0
    for i in a:
        if i == x: count += 1
    return count ","[""frequency([1, 2, 3, 4, 5, 1, 1], 1) == 3"", ""frequency(['a', 'b', 'c', 'a', 'd', 'a'], 'a') == 3"", ""frequency([10, 20, 30, 40, 50], 60) == 0""]","@startuml

title Frequency of a Number in an Array

start
:Start;

if (a is not an array) then (
  :Invalid input;
  stop;
)

if (x is not a number) then (
  :Invalid input;
  stop;
)

:Initialize frequency to 0;

for each element in a (
  if (element == x) then (
    :Increment frequency;
  )
)

:Return frequency;

stop

@enduml"
163,"def area_polygon(s,l):
""""""
Write a function to calculate the area of a regular polygon.
Your code should satisfy these tests:
area_polygon(3, 5) == 10.825317547305486
area_polygon(4, 10) == 100.00000000000001
area_polygon(6, 2) == 10.392304845413264
""""""
",area_polygon,"def check(candidate):

    assert candidate(4,20)==400.00000000000006
    assert candidate(10,15)==1731.1969896610804
    assert candidate(9,7)==302.90938549487214
","from math import tan, pi
def area_polygon(s,l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area","[""area_polygon(3, 5) == 10.825317547305486"", ""area_polygon(4, 10) == 100.00000000000001"", ""area_polygon(6, 2) == 10.392304845413264""]","@startuml

start
:area_polygon(s,l);

if (s < 3) then (no
:Invalid input;
:return 0;
)

else (yes)
:Calculate area;
:area = (s * l^2) / (4 * tan(pi / s));
:return area;

end if

stop

@enduml"
241,"def array_3d(m,n,o):
""""""
Write a function to generate a 3d array having each element as '*'.
""""""
",array_3d,"def check(candidate):

    assert candidate(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]
    assert candidate(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]
    assert candidate(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]
","def array_3d(m,n,o):
 array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]
 return array_3d","[""array_3d(2, 3, 4) == [[['*', '*'], ['*', '*'], ['*', '*']], [['*', '*'], ['*', '*'], ['*', '*']], [['*', '*'], ['*', '*'], ['*', '*']], [['*', '*'], ['*', '*'], ['*', '*']]]"", ""array_3d(1, 1, 1) == [[['*']]]"", ""array_3d(5, 2, 3) == [[['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]"", ""array_3d(0, 0, 0) == []"", ""array_3d(3, 2, 2) == [[['*', '*', '*'], ['*', '*', '*']], [['*', '*', '*'], ['*', '*', '*']]]""]","@startuml
start
:Validate Input;
if (m <= 0 or n <= 0 or o <= 0) then (
    :Return Error;
    stop
)
:Initialize 3D array;
for (i = 0; i < o; i++)
    for (j = 0; j < n; j++)
        for (k = 0; k < m; k++)
            :Fill array with '*';
        end
    end
end
:Return 3D array;
stop
@enduml"
563,"def extract_values(text):
""""""
Write a function to extract values between quotation marks of a string.
Your code should satisfy these tests:
extract_values('The ""quick"" brown ""fox"" jumps over the ""lazy"" dog.') == ['quick', 'fox', 'lazy']
extract_values('She said, ""Hello, world!"" and then ""Goodbye!""') == ['Hello, world!', 'Goodbye!']
extract_values('No quotes here.') == []
""""""
",extract_values,"def check(candidate):

    assert candidate('""Python"", ""PHP"", ""Java""')==['Python', 'PHP', 'Java']
    assert candidate('""python"",""program"",""language""')==['python','program','language']
    assert candidate('""red"",""blue"",""green"",""yellow""')==['red','blue','green','yellow']
","import re
def extract_values(text):
 return (re.findall(r'""(.*?)""', text))","[""extract_values('The \""quick\"" brown \""fox\"" jumps over the \""lazy\"" dog.') == ['quick', 'fox', 'lazy']"", ""extract_values('She said, \""Hello, world!\"" and then \""Goodbye!\""') == ['Hello, world!', 'Goodbye!']"", ""extract_values('No quotes here.') == []""]","@startuml

start
:extract_values(text);

if (text.find('""') != -1) then (
  :extract_values_helper(text);
) else (
  :return [];
)

:return values;

@enduml"
739,"def find_Index(n):
""""""
Write a python function to find the index of smallest triangular number with n digits.
Your code should satisfy these tests:
find_Index(1) == 1
find_Index(2) == 4
find_Index(3) == 14
""""""
",find_Index,"def check(candidate):

    assert candidate(2) == 4
    assert candidate(3) == 14
    assert candidate(4) == 45
","import math
def find_Index(n):
    x = math.sqrt(2 * math.pow(10,(n - 1)));
    return round(x); ","[""find_Index(1) == 1"", ""find_Index(2) == 4"", ""find_Index(3) == 14""]","@startuml
start
:Initialize index = 1, triangular_number = 1, digit_count = 1;
while (digit_count < n)
  :Increment index;
  :Calculate next triangular number;
  :Count digits in the triangular number;
endwhile
:Return index;

stop
@enduml"
890,"def find_Extra(arr1,arr2,n):
""""""
Write a python function to find the index of an extra element present in one sorted array.
Your code should satisfy these tests:
find_Extra([1, 2, 3, 4, 5], [1, 2, 3, 4], 4) == 4
find_Extra([10, 20, 30, 40], [10, 20, 30, 50], 4) == 3
find_Extra([5, 15, 25, 35, 45], [5, 15, 25, 35, 55], 5) == 4
""""""
",find_Extra,"def check(candidate):

    assert candidate([1,2,3,4],[1,2,3],3) == 3
    assert candidate([2,4,6,8,10],[2,4,6,8],4) == 4
    assert candidate([1,3,5,7,9,11],[1,3,5,7,9],5) == 5
","def find_Extra(arr1,arr2,n) :
    for i in range(0, n) :
        if (arr1[i] != arr2[i]) :
            return i
    return n ","[""find_Extra([1, 2, 3, 4, 5], [1, 2, 3, 4], 4) == 4"", ""find_Extra([10, 20, 30, 40], [10, 20, 30, 50], 4) == 3"", ""find_Extra([5, 15, 25, 35, 45], [5, 15, 25, 35, 55], 5) == 4""]","@startuml
start

:Input: arr1, arr2, n;
:Validate inputs (arr1 and arr2 are sorted, n is the length of arr2);

if (arr1.length != n + 1) then (yes)
    :Return -1 (Invalid input);
    stop
else (no)
    :Initialize index = 0;
    :Initialize left = 0, right = n - 1;

    while (left <= right) is (yes)
        :Calculate mid = (left + right) // 2;
        if (arr1[mid] == arr2[mid]) then (yes)
            :left = mid + 1;
        else (no)
            :right = mid - 1;
        endif
    endwhile

    :Return left (Index of the extra element);
endif

stop
@enduml"
180,"def distance_lat_long(slat,slon,elat,elon):
""""""
Write a function to calculate distance between two points using latitude and longitude.
""""""
",distance_lat_long,"def check(candidate):

    assert candidate(23.5,67.5,25.5,69.5)==12179.372041317429
    assert candidate(10.5,20.5,30.5,40.5)==6069.397933300514
    assert candidate(10,20,30,40)==6783.751974994595
","from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):
 dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
 return dist","[""test test cases failed""]","@startuml
start
:Input Validation;
if (slat and slon are valid latitude and longitude?) then (yes)
  :Calculate distance using Haversine formula;
else (no)
  :Handle invalid input;
endif
:Return distance;
stop
@enduml"
417,"def group_tuples(Input):
""""""
Write a function to find common first element in given list of tuple.
Your code should satisfy these tests:
group_tuples([(1, 2), (1, 3), (2, 4)]) == [(1, 2, 3), (2, 4)]
group_tuples([(3, 5), (3, 6, 7), (4, 8)]) == [(3, 5, 6, 7), (4, 8)]
group_tuples([(5, 9), (6, 10), (5, 11)]) == [(5, 9, 11), (6, 10)]
""""""
",group_tuples,"def check(candidate):

    assert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]
    assert candidate([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]
    assert candidate([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]
","def group_tuples(Input):
	out = {}
	for elem in Input:
		try:
			out[elem[0]].extend(elem[1:])
		except KeyError:
			out[elem[0]] = list(elem)
	return [tuple(values) for values in out.values()] ","[""group_tuples([(1, 2), (1, 3), (2, 4)]) == [(1, 2, 3), (2, 4)]"", ""group_tuples([(3, 5), (3, 6, 7), (4, 8)]) == [(3, 5, 6, 7), (4, 8)]"", ""group_tuples([(5, 9), (6, 10), (5, 11)]) == [(5, 9, 11), (6, 10)]""]","@startuml

start
:group_tuples(Input);

if (Input.length == 0) then (no-op)
else (process input)
  :initialize output list;
  :iterate over Input;
    :if (current tuple's first element is not in output list) then (add to output list)
      :add current tuple to output list;
    :else (merge with existing tuple)
      :find existing tuple in output list;
      :merge current tuple with existing tuple;
    :end if;
  :end iterate;
:end if;

return output list;

@enduml"
965,"def camel_to_snake(text):
""""""
Write a function to convert camel case string to snake case string.
Your code should satisfy these tests:
camel_to_snake('CamelCase') == 'camel_case'
camel_to_snake('thisIsATest') == 'this_is_a_test'
camel_to_snake('Python3IsFun') == 'python3_is_fun'
""""""
",camel_to_snake,"def check(candidate):

    assert candidate('PythonProgram')==('python_program')
    assert candidate('pythonLanguage')==('python_language')
    assert candidate('ProgrammingLanguage')==('programming_language')
","def camel_to_snake(text):
        import re
        str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()","[""camel_to_snake('CamelCase') == 'camel_case'"", ""camel_to_snake('thisIsATest') == 'this_is_a_test'"", ""camel_to_snake('Python3IsFun') == 'python3_is_fun'""]","@startuml
start

:Input camel case string (text);
if (Is text empty?) then (yes)
  :Return empty string;
  stop
else (no)
  :Initialize result as empty string;
  :Initialize i = 0;
  while (i < length of text) is (yes)
    if (Is current character uppercase?) then (yes)
      if (Is i > 0?) then (yes)
        :Append '_' to result;
      endif
      :Append lowercase version of current character to result;
    else (no)
      :Append current character to result;
    endif
    :Increment i by 1;
  endwhile (no)
  :Return result as snake case string;
  stop
endif

@enduml"
744,"def check_none(test_tup):
""""""
Write a function to check if the given tuple has any none value or not.
Your code should satisfy these tests:
check_none((1, 2, None, 4)) == True
check_none((1, 2, 3, 4)) == False
check_none((None, None, None)) == True
""""""
",check_none,"def check(candidate):

    assert candidate((10, 4, 5, 6, None)) == True
    assert candidate((7, 8, 9, 11, 14)) == False
    assert candidate((1, 2, 3, 4, None)) == True
","def check_none(test_tup):
  res = any(map(lambda ele: ele is None, test_tup))
  return (res) ","[""check_none((1, 2, None, 4)) == True"", ""check_none((1, 2, 3, 4)) == False"", ""check_none((None, None, None)) == True""]","@startuml

start
:check_none(test_tup);

if (test_tup is None) then (
  :return True;
) else (
  :return False;
)

@enduml"
246,"def babylonian_squareroot(number):
""""""
Write a function for computing square roots using the babylonian method.
Your code should satisfy these tests:
babylonian_squareroot(16) == 4
babylonian_squareroot(25) == 5
babylonian_squareroot(9) == 3
babylonian_squareroot(100) == 10
babylonian_squareroot(144) == 12
""""""
",babylonian_squareroot,"def check(candidate):

    assert candidate(10)==3.162277660168379
    assert candidate(2)==1.414213562373095
    assert candidate(9)==3.0
","def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;","[""babylonian_squareroot(16) == 4"", ""babylonian_squareroot(25) == 5"", ""babylonian_squareroot(9) == 3"", ""babylonian_squareroot(100) == 10"", ""babylonian_squareroot(144) == 12""]","@startuml
start

:Input number;
if (Is number valid? (number >= 0)) then (yes)
    :Initialize guess = number / 2;
    :Initialize tolerance = 0.000001;
    :Initialize difference = abs(guess * guess - number);
    while (difference > tolerance) is (yes)
        :Update guess = (guess + number / guess) / 2;
        :Update difference = abs(guess * guess - number);
    endwhile (no)
    :Return guess as the square root;
else (no)
    :Raise ValueError(""Input must be a non-negative number"");
endif

stop
@enduml"
451,"def remove_whitespaces(text1):
""""""
Write a function to remove all whitespaces from the given string using regex.
Your code should satisfy these tests:
remove_whitespaces(""Hello World"") == ""HelloWorld""
remove_whitespaces(""  Leading and trailing  "") == ""Leadingandtrailing""
remove_whitespaces(""Multiple   spaces   here"") == ""Multiplespaceshere""
""""""
",remove_whitespaces,"def check(candidate):

    assert candidate(' Google    Flutter ') == 'GoogleFlutter'
    assert candidate(' Google    Dart ') == 'GoogleDart'
    assert candidate(' iOS    Swift ') == 'iOSSwift'
","import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))","[""remove_whitespaces(\""Hello World\"") == \""HelloWorld\"""", ""remove_whitespaces(\""  Leading and trailing  \"") == \""Leadingandtrailing\"""", ""remove_whitespaces(\""Multiple   spaces   here\"") == \""Multiplespaceshere\""""]","@startuml

start
:remove_whitespaces(text1);

if (text1.isspace()) then (yes)
  :return text1.strip();
else (no)
  :return text1.replace("" "", """");
endif

stop

@enduml"
92,"def is_undulating(n):
""""""
Write a function to check whether the given number is undulating or not.
Your code should satisfy these tests:
is_undulating(""121212"") == True
is_undulating(""112211"") == False
is_undulating(""34343434"") == True
""""""
",is_undulating,"def check(candidate):

    assert candidate(""1212121"") == True
    assert candidate(""1991"") == False
    assert candidate(""121"") == True
","def is_undulating(n):
	if (len(n) <= 2):
		return False
	for i in range(2, len(n)):
		if (n[i - 2] != n[i]):
			return False
	return True","[""is_undulating(\""121212\"") == True"", ""is_undulating(\""112211\"") == False"", ""is_undulating(\""34343434\"") == True""]","@startuml

start
:is_undulating(n);
if (n < 0) then (no)
:return False;
else (yes)
:return True;
endif

@enduml"
648,"def exchange_elements(lst):
""""""
Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.
""""""
",exchange_elements,"def check(candidate):

    assert candidate([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4]
    assert candidate([5,6,7,8,9,10])==[6,5,8,7,10,9]
    assert candidate([25,35,45,55,75,95])==[35,25,55,45,95,75]
","from itertools import zip_longest, chain, tee
def exchange_elements(lst):
    lst1, lst2 = tee(iter(lst), 2)
    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))","[""test test cases failed""]","@startuml

title exchange_elements

start
:Start;

if (len(lst) == 0) then (no elements)
:No elements;
stop

else (at least one element)
:At least one element;

loop (n = 0 to len(lst) - 1)
:Loop;

if (n % 2 == 0) then (even n)
:Even n;

if (n + 1 < len(lst)) then (n + 1 is valid)
:N + 1 is valid;

if (lst[n] != lst[n + 1]) then (elements are different)
:Elements are different;

exchange (lst[n], lst[n + 1])
:Exchange elements;

else (n + 1 is not valid)
:N + 1 is not valid;

end if

end if

end loop

stop

@enduml"
23,"def maximum_Sum(list1):
""""""
Write a python function to find the maximum sum of elements of list in a list of lists.
Your code should satisfy these tests:
maximum_Sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 24
maximum_Sum([[0, -1, -2], [-3, -4, -5], [-6, -7, -8]]) == -3
maximum_Sum([[100], [200, 300], [10, 20, 30, 40]]) == 500
""""""
",maximum_Sum,"def check(candidate):

    assert candidate([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33
    assert candidate([[0,1,1],[1,1,2],[3,2,1]]) == 6
    assert candidate([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19
","def maximum_Sum(list1):
    maxi = -100000
    for x in list1:
        sum = 0
        for y in x:
            sum+= y
        maxi = max(sum,maxi)
    return maxi ","[""maximum_Sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 24"", ""maximum_Sum([[0, -1, -2], [-3, -4, -5], [-6, -7, -8]]) == -3"", ""maximum_Sum([[100], [200, 300], [10, 20, 30, 40]]) == 500""]","@startuml

start
:maximum_Sum(list1);

if (list1 is empty) then (no)
:return 0;

else (yes)
:max_sum = 0;

for each sublist in list1 do
:sublist_sum = 0;

for each element in sublist do
:sublist_sum = sublist_sum + element;

if (sublist_sum > max_sum) then
:max_sum = sublist_sum;

end for

end for

:return max_sum;

end if

@enduml"
615,"def average_tuple(nums):
""""""
Write a function to find average value of the numbers in a given tuple of tuples.
Your code should satisfy these tests:
average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [4.0, 5.0, 6.0]
average_tuple(((10, 20), (30, 40), (50, 60))) == [30.0, 40.0]
average_tuple(((1, 1, 1), (2, 2, 2), (3, 3, 3))) == [2.0, 2.0, 2.0]
""""""
",average_tuple,"def check(candidate):

    assert candidate(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]
    assert candidate(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]
    assert candidate( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]
","def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result","[""average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [4.0, 5.0, 6.0]"", ""average_tuple(((10, 20), (30, 40), (50, 60))) == [30.0, 40.0]"", ""average_tuple(((1, 1, 1), (2, 2, 2), (3, 3, 3))) == [2.0, 2.0, 2.0]""]","@startuml
start
:Input: nums
:Check if nums is a tuple: is_tuple
if (is_tuple = True) then
    :Check if nums is not empty: is_empty
    if (is_empty = False) then
        :Initialize sum and count: sum, count
        :Initialize result list: result
        :Iterate over nums: for num in nums
            :Check if num is a tuple: is_tuple
            if (is_tuple = True) then
                :Iterate over num: for value in num
                    :Add value to sum: sum += value
                    :Increment count: count += 1
            else
                :Return error: ""Invalid input. Expected a tuple of tuples.""
            endif
        endfor
        :Calculate average: average = sum / count
        :Add average to result: result.append(average)
    else
        :Return error: ""Invalid input. Tuple is empty.""
    endif
else
    :Return error: ""Invalid input. Expected a tuple.""
endif
:Return result: result
stop
@enduml"
645,"def get_product(val):
""""""
Write a function to find the product of it’s kth index in the given tuples.
Your code should satisfy these tests:
get_product([1, 2, 3, 4]) == 24
get_product([5, 5, 5, 5]) == 625
get_product([10, 0, 100]) == 0
get_product([-1, -2, -3]) == -6
get_product([2, 3, 5, 7, 11]) == 2310
""""""
",get_product,"def check(candidate):

    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665
    assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280
    assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210
","def get_product(val) :
	res = 1
	for ele in val:
		res *= ele
	return res
def find_k_product(test_list, K):
  res = get_product([sub[K] for sub in test_list])
  return (res) ","[""get_product([1, 2, 3, 4]) == 24"", ""get_product([5, 5, 5, 5]) == 625"", ""get_product([10, 0, 100]) == 0"", ""get_product([-1, -2, -3]) == -6"", ""get_product([2, 3, 5, 7, 11]) == 2310""]","@startuml
start

:Input list of integers (val);
if (Is val a list?) then (yes)
    if (Is val empty?) then (yes)
        :Return 0 (or handle empty list case);
    else (no)
        :Initialize product = 1;
        :Initialize index = 0;
        while (index < length of val) is (yes)
            :Multiply product by val[index];
            :Increment index by 1;
        endwhile (no)
        :Return product;
    endif
else (no)
    :Raise TypeError (Input must be a list);
endif

stop
@enduml"
910,"def check_date(m, d, y):
""""""
Write a function to validate a gregorian date.
Your code should satisfy these tests:
check_date(2, 29, 2020) == True
check_date(2, 29, 2021) == False
check_date(4, 31, 2023) == False
check_date(12, 31, 2022) == True
check_date(13, 1, 2023) == False
""""""
",check_date,"def check(candidate):

    assert candidate(11,11,2002)==True
    assert candidate(13,11,2002)==False
    assert candidate('11','11','2002')==True
","import datetime
def check_date(m, d, y):
    try:
        m, d, y = map(int, (m, d, y))
        datetime.date(y, m, d)
        return True
    except ValueError:
        return False","[""check_date(2, 29, 2020) == True"", ""check_date(2, 29, 2021) == False"", ""check_date(4, 31, 2023) == False"", ""check_date(12, 31, 2022) == True"", ""check_date(13, 1, 2023) == False""]","@startuml
start
:Input month, day, year;
:Validate month (1-12);
:Validate day (1-31);
:Validate year (1583-infinity);
if (Is leap year?) then (yes)
  :Validate day (1-29);
else (no)
  :Validate day (1-28 or 1-29 if month is February);
endif
:Check if date is valid;
if (Is date valid?) then (yes)
  :Return True;
else (no)
  :Return False;
endif
stop
@enduml"
207,"def find_longest_repeating_subseq(str):
""""""
Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.
Your code should satisfy these tests:
find_longest_repeating_subseq(""aabb"") == 2
find_longest_repeating_subseq(""abc"") == 0
find_longest_repeating_subseq(""aabebcdd"") == 3
""""""
",find_longest_repeating_subseq,"def check(candidate):

    assert candidate(""AABEBCDD"") == 3
    assert candidate(""aabb"") == 2
    assert candidate(""aab"") == 1
","def find_longest_repeating_subseq(str):
	n = len(str)
	dp = [[0 for k in range(n+1)] for l in range(n+1)]
	for i in range(1, n+1):
		for j in range(1, n+1):
			if (str[i-1] == str[j-1] and i != j):
				dp[i][j] = 1 + dp[i-1][j-1]
			else:
				dp[i][j] = max(dp[i][j-1], dp[i-1][j])
	return dp[n][n]","[""find_longest_repeating_subseq(\""aabb\"") == 2"", ""find_longest_repeating_subseq(\""abc\"") == 0"", ""find_longest_repeating_subseq(\""aabebcdd\"") == 3""]","@startuml
start

:Input string (str);
if (Is str empty or None?) then (yes)
    :Return 0;
    stop
else (no)
    :Initialize n = length of str;
    :Create a DP table of size (n+1) x (n+1);
    :Initialize DP table with 0;
    :Initialize i = 1;
    while (i <= n) is (yes)
        :Initialize j = 1;
        while (j <= n) is (yes)
            if (str[i-1] == str[j-1] and i != j) then (yes)
                :DP[i][j] = DP[i-1][j-1] + 1;
            else (no)
                :DP[i][j] = max(DP[i-1][j], DP[i][j-1]);
            endif
            :j = j + 1;
        endwhile
        :i = i + 1;
    endwhile
    :Return DP[n][n];
    stop
endif

@enduml"
712,"def remove_duplicate(list1):
""""""
Write a function to remove duplicates from a list of lists.
Your code should satisfy these tests:
remove_duplicate([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
remove_duplicate([3, 3, 3, 3, 3, 3]) == [3]
remove_duplicate([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]
remove_duplicate([]) == []
remove_duplicate([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]
""""""
",remove_duplicate,"def check(candidate):

    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]]
    assert candidate([""a"", ""b"", ""a"", ""c"", ""c""] )==[""a"", ""b"", ""c""]
    assert candidate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]
","import itertools
def remove_duplicate(list1):
 list.sort(list1)
 remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))
 return remove_duplicate","[""remove_duplicate([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]"", ""remove_duplicate([3, 3, 3, 3, 3, 3]) == [3]"", ""remove_duplicate([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]"", ""remove_duplicate([]) == []"", ""remove_duplicate([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]""]","@startuml
start
:Input List;
if (List is empty?) then (yes)
    :Return List;
    stop
endif
:Sort List;
:Remove Duplicates;
:Return List;
stop
@enduml"
878,"def check_tuples(test_tuple, K):
""""""
Write a function to check if the given tuple contains only k elements.
Your code should satisfy these tests:
check_tuples((1, 2, 3), [1, 2, 3, 4]) == True
check_tuples((5, 6), [1, 2, 3, 4]) == False
check_tuples(('a', 'b'), ['a', 'b', 'c']) == True
""""""
",check_tuples,"def check(candidate):

    assert candidate((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True
    assert candidate((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True
    assert candidate((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False
","def check_tuples(test_tuple, K):
  res = all(ele in K for ele in test_tuple)
  return (res) ","[""check_tuples((1, 2, 3), [1, 2, 3, 4]) == True"", ""check_tuples((5, 6), [1, 2, 3, 4]) == False"", ""check_tuples(('a', 'b'), ['a', 'b', 'c']) == True""]","@startuml
start
:Input Tuple;
:Input List;
if ""Length of Tuple == K?"" then (yes)
  :Convert Tuple to List;
  if ""Tuple List == List?"" then (yes)
    :Return True;
  else (no)
    :Return False;
  endif
else (no)
  :Return False;
endif
stop
@enduml"
736,"def left_insertion(a, x):
""""""
Write a function to locate the left insertion point for a specified value in sorted order.
Your code should satisfy these tests:
left_insertion([1, 2, 4, 4, 5], 4) == 2
left_insertion([1, 3, 5, 7], 6) == 3
left_insertion([0, 0, 0, 0], 0) == 0
""""""
",left_insertion,"def check(candidate):

    assert candidate([1,2,4,5],6)==4
    assert candidate([1,2,4,5],3)==2
    assert candidate([1,2,4,5],7)==4
","import bisect
def left_insertion(a, x):
    i = bisect.bisect_left(a, x)
    return i","[""left_insertion([1, 2, 4, 4, 5], 4) == 2"", ""left_insertion([1, 3, 5, 7], 6) == 3"", ""left_insertion([0, 0, 0, 0], 0) == 0""]","@startuml

title Left Insertion

start
:Start;

if (a is empty) then (
  :Return 0;
  stop;
)

if (x is less than a[0]) then (
  :Return 0;
  stop;
)

if (x is greater than a[len(a) - 1]) then (
  :Return len(a);
  stop;
)

:Search for x in a;

if (x is found) then (
  :Return the index of x;
  stop;
)

:Search for the first element greater than x;

if (a[i] is greater than x) then (
  :Return i;
  stop;
)

:Search for the last element less than x;

if (a[i] is less than x) then (
  :Return i;
  stop;
)

:Return len(a);

stop;

@enduml"
24,"def binary_to_decimal(binary):
""""""
Write a function to convert the given binary number to its decimal equivalent.
Your code should satisfy these tests:
binary_to_decimal(1010) == 10
binary_to_decimal(1101) == 13
binary_to_decimal(111) == 7
binary_to_decimal(10000) == 16
binary_to_decimal(1001) == 9
""""""
",binary_to_decimal,"def check(candidate):

    assert candidate(100) == 4
    assert candidate(1011) == 11
    assert candidate(1101101) == 109
","def binary_to_decimal(binary):
    binary1 = binary
    decimal, i, n = 0, 0, 0
    while(binary != 0):
        dec = binary % 10
        decimal = decimal + dec * pow(2, i)
        binary = binary//10
        i += 1
    return (decimal)","[""binary_to_decimal(1010) == 10"", ""binary_to_decimal(1101) == 13"", ""binary_to_decimal(111) == 7"", ""binary_to_decimal(10000) == 16"", ""binary_to_decimal(1001) == 9""]","@startuml

title binary_to_decimal

start
:binary_to_decimal(binary);

if (binary == 0) then (no)
:return 0;
else (yes)
:result = 0;

for each digit in binary
:result = result * 2 + digit;

:return result;

@enduml"
746,"def sector_area(r,a):
""""""
Write a function to find area of a sector.
Your code should satisfy these tests:
sector_area(5, 90) == 19.642857142857142
sector_area(10, 180) == 157.14285714285714
sector_area(7, 45) == 19.25
sector_area(3, 270) == 21.214285714285715
sector_area(12, 360) == None
""""""
",sector_area,"def check(candidate):

    assert candidate(4,45)==6.285714285714286
    assert candidate(9,45)==31.82142857142857
    assert candidate(9,360)==None
","def sector_area(r,a):
    pi=22/7
    if a >= 360:
        return None
    sectorarea = (pi*r**2) * (a/360)
    return sectorarea","[""sector_area(5, 90) == 19.642857142857142"", ""sector_area(10, 180) == 157.14285714285714"", ""sector_area(7, 45) == 19.25"", ""sector_area(3, 270) == 21.214285714285715"", ""sector_area(12, 360) == None""]","@startuml
start

:Input radius (r) and angle (a);
if (r <= 0 or a < 0 or a > 360) then (yes)
    :Return None;
    stop
else (no)
    if (a == 360) then (yes)
        :Return None;
        stop
    else (no)
        :Calculate sector area using formula:
        (a / 360) * π * r²;
        :Return sector area;
        stop
    endif
endif

@enduml"
2,"def similar_elements(test_tup1, test_tup2):
""""""
Write a function to find the similar elements from the given two tuple lists.
Your code should satisfy these tests:
similar_elements((1, 2, 3), (3, 4, 5)) == (3,)
similar_elements(('a', 'b', 'c'), ('c', 'd', 'e')) == ('c',)
similar_elements((10, 20, 30), (40, 50, 60)) == ()
""""""
",similar_elements,"def check(candidate):

    assert candidate((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)
    assert candidate((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)
    assert candidate((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)
","def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) ","[""similar_elements((1, 2, 3), (3, 4, 5)) == (3,)"", ""similar_elements(('a', 'b', 'c'), ('c', 'd', 'e')) == ('c',)"", ""similar_elements((10, 20, 30), (40, 50, 60)) == ()""]","@startuml
start

:Input two tuples (test_tup1, test_tup2);
if (Are both inputs tuples?) then (yes)
    :Initialize an empty list (similar_list);
    :Iterate through each element in test_tup1;
    if (Is the current element in test_tup2?) then (yes)
        :Add the element to similar_list;
    else (no)
        :Continue to the next element;
    endif
    :Check if similar_list is not empty;
    if (similar_list is not empty?) then (yes)
        :Convert similar_list to a tuple (result_tuple);
    else (no)
        :Set result_tuple as an empty tuple;
    endif
    :Return result_tuple;
else (no)
    :Raise TypeError(""Both inputs must be tuples"");
endif

stop
@enduml"
593,"def removezero_ip(ip):
""""""
Write a function to remove leading zeroes from an ip address.
Your code should satisfy these tests:
removezero_ip(""192.001.000.001"") == '192.1..1'
removezero_ip(""000.000.000.000"") == '000...'
removezero_ip(""10.00.0.001"") == '10...1'
""""""
",removezero_ip,"def check(candidate):

    assert candidate(""216.08.094.196"")==('216.8.94.196')
    assert candidate(""12.01.024"")==('12.1.24')
    assert candidate(""216.08.094.0196"")==('216.8.94.196')
","import re
def removezero_ip(ip):
 string = re.sub('\.[0]*', '.', ip)
 return string
","[""removezero_ip(\""192.001.000.001\"") == '192.1..1'"", ""removezero_ip(\""000.000.000.000\"") == '000...'"", ""removezero_ip(\""10.00.0.001\"") == '10...1'""]","@startuml
start

:Input IP Address;
:Split IP Address into octets;
:Initialize an empty list for cleaned octets;

repeat
    :Take the next octet;
    :Remove leading zeroes from the octet;
    if (Is the octet empty after removing zeroes?) then (yes)
        :Add an empty string to the cleaned octets list;
    else (no)
        :Add the cleaned octet to the cleaned octets list;
    endif
repeat while (More octets to process?) is (yes)
->no;

:Join the cleaned octets with '.' as the separator;
:Output the cleaned IP Address;

stop
@enduml"
665,"def move_last(num_list):
""""""
Write a python function to shift first element to the end of given list.
Your code should satisfy these tests:
move_last([1, 2, 3, 1, 4]) == [2, 3, 4, 1, 1]
move_last([5, 5, 5, 6, 7]) == [6, 7, 5, 5, 5]
move_last([9, 8, 9, 7, 9]) == [8, 7, 9, 9, 9]
""""""
",move_last,"def check(candidate):

    assert candidate([1,2,3,4]) == [2,3,4,1]
    assert candidate([2,3,4,1,5,0]) == [3,4,1,5,0,2]
    assert candidate([5,4,3,2,1]) == [4,3,2,1,5]
","def move_last(num_list):
    a = [num_list[0] for i in range(num_list.count(num_list[0]))]
    x = [ i for i in num_list if i != num_list[0]]
    x.extend(a)
    return (x)","[""move_last([1, 2, 3, 1, 4]) == [2, 3, 4, 1, 1]"", ""move_last([5, 5, 5, 6, 7]) == [6, 7, 5, 5, 5]"", ""move_last([9, 8, 9, 7, 9]) == [8, 7, 9, 9, 9]""]","@startuml

title: Move Last Element to End of List

start
:Move Last Element to End of List;

if (num_list is empty) then (No-op)
else (Move Last Element to End of List)
  :Shift first element to the end of the list;
  :Move last element to the end of the list;
  :Return the modified list;
endif

@enduml"
643,"def text_match_wordz_middle(text):
""""""
Write a function that matches a word containing 'z', not at the start or end of the word.
Your code should satisfy these tests:
text_match_wordz_middle(""apple zebra banana"") == 'Not matched!'
text_match_wordz_middle(""hello world"") == 'Not matched!'
text_match_wordz_middle(""pizza is amazing"") == 'Found a match!'
text_match_wordz_middle(""lazy z dog"") == 'Found a match!'
text_match_wordz_middle(""amazing zoo"") == 'Found a match!'
""""""
",text_match_wordz_middle,"def check(candidate):

    assert candidate(""pythonzabc."")==('Found a match!')
    assert candidate(""xyzabc."")==('Found a match!')
    assert candidate(""  lang  ."")==('Not matched!')
","import re
def text_match_wordz_middle(text):
        patterns = '\Bz\B'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","[""text_match_wordz_middle(\""apple zebra banana\"") == 'Not matched!'"", ""text_match_wordz_middle(\""hello world\"") == 'Not matched!'"", ""text_match_wordz_middle(\""pizza is amazing\"") == 'Found a match!'"", ""text_match_wordz_middle(\""lazy z dog\"") == 'Found a match!'"", ""text_match_wordz_middle(\""amazing zoo\"") == 'Found a match!'""]","@startuml

title text_match_wordz_middle

start
:text_match_wordz_middle(text);

if (text == null) then (no)
:return ""Not matched!"";
else (yes)
:split text into words;

for each word in words
:check if word contains ""z"";

if (word contains ""z"") then (yes)
:return ""Found a match!"";
else (no)
:continue;

end for

:return ""Not matched!"";

end if

@enduml"
52,"def parallelogram_area(b,h):
""""""
Write a function to caluclate area of a parallelogram.
Your code should satisfy these tests:
parallelogram_area(5, 10) == 50
parallelogram_area(7, 3) == 21
parallelogram_area(12, 8) == 96
""""""
",parallelogram_area,"def check(candidate):

    assert candidate(10,20)==200
    assert candidate(15,20)==300
    assert candidate(8,9)==72
","def parallelogram_area(b,h):
  area=b*h
  return area","[""parallelogram_area(5, 10) == 50"", ""parallelogram_area(7, 3) == 21"", ""parallelogram_area(12, 8) == 96""]","@startuml

title parallelogram_area

start
:Calculate area of parallelogram;

if (b < 0 or h < 0) then (no)
:Invalid input;
:Return 0;

else (yes)
:Calculate area;
:Return area;

end if

@enduml"
778,"def pack_consecutive_duplicates(list1):
""""""
Write a function to pack consecutive duplicates of a given list elements into sublists.
Your code should satisfy these tests:
pack_consecutive_duplicates([1, 1, 2, 2, 3, 1]) == [[1, 1], [2, 2], [3], [1]]
pack_consecutive_duplicates(['a', 'a', 'a', 'b', 'c', 'c', 'a']) == [['a', 'a', 'a'], ['b'], ['c', 'c'], ['a']]
pack_consecutive_duplicates([4, 5, 5, 5, 6, 6, 7, 8, 8, 8, 8]) == [[4], [5, 5, 5], [6, 6], [7], [8, 8, 8, 8]]
""""""
",pack_consecutive_duplicates,"def check(candidate):

    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]
    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]
    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]
","from itertools import groupby
def pack_consecutive_duplicates(list1):
    return [list(group) for key, group in groupby(list1)]","[""pack_consecutive_duplicates([1, 1, 2, 2, 3, 1]) == [[1, 1], [2, 2], [3], [1]]"", ""pack_consecutive_duplicates(['a', 'a', 'a', 'b', 'c', 'c', 'a']) == [['a', 'a', 'a'], ['b'], ['c', 'c'], ['a']]"", ""pack_consecutive_duplicates([4, 5, 5, 5, 6, 6, 7, 8, 8, 8, 8]) == [[4], [5, 5, 5], [6, 6], [7], [8, 8, 8, 8]]""]","@startuml

start
:pack_consecutive_duplicates(list1);

if (list1 is empty) then (no)
:return [];

else (yes)
:result = [];
:current_element = list1[0];
:current_sublist = [];

repeat
:if (current_element == list1[i]) then (yes)
:current_sublist.append(current_element);

else (no)
:if (current_sublist is not empty) then (yes)
:result.append(current_sublist);
:current_sublist = [];

:current_element = list1[i];
:current_sublist.append(current_element);

until (i == len(list1) - 1)

:if (current_sublist is not empty) then (yes)
:result.append(current_sublist);

:return result;

@enduml"
676,"def remove_extra_char(text1):
""""""
Write a function to remove everything except alphanumeric characters from the given string by using regex.
Your code should satisfy these tests:
remove_extra_char(""Hello, World!"") == ""HelloWorld""
remove_extra_char(""Python_3.8"") == ""Python38""
remove_extra_char(""Test-Case#123"") == ""TestCase123""
""""""
",remove_extra_char,"def check(candidate):

    assert candidate('**//Google Android// - 12. ') == 'GoogleAndroid12'
    assert candidate('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'
    assert candidate('**//Google Firebase// - 478. ') == 'GoogleFirebase478'
","import re
def remove_extra_char(text1):
  pattern = re.compile('[\W_]+')
  return (pattern.sub('', text1))","[""remove_extra_char(\""Hello, World!\"") == \""HelloWorld\"""", ""remove_extra_char(\""Python_3.8\"") == \""Python38\"""", ""remove_extra_char(\""Test-Case#123\"") == \""TestCase123\""""]","@startuml
start

:Input text1 (string);
:Initialize regex pattern to match non-alphanumeric characters;
:Use regex to remove non-alphanumeric characters from text1;
:Store the cleaned string in result;

if (Is result a valid string?) then (yes)
  :Return result;
else (no)
  :Return empty string or handle error;
endif

stop
@enduml"
617,"def min_Jumps(a, b, d):
""""""
Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.
""""""
",min_Jumps,"def check(candidate):

    assert candidate(3,4,11)==3.5
    assert candidate(3,4,0)==0
    assert candidate(11,14,11)==1
","def min_Jumps(a, b, d):
    temp = a
    a = min(a, b)
    b = max(temp, b)
    if (d >= b):
        return (d + b - 1) / b
    if (d == 0):
        return 0
    if (d == a):
        return 1
    else:
        return 2","[""test test cases failed""]","@startuml
start
:Input Validation;
if (a >= 0 and b >= 0 and d >= 0) then
    :Calculate Jumps;
    (Calculate Jumps):>""a*a + 2*b*b = d*d""<<loop>>
    :Calculate Jumps;
else
    :Invalid Input;
endif
:Return Jumps;
stop
@enduml"
74,"def is_samepatterns(colors, patterns):
""""""
Write a function to check whether it follows the sequence given in the patterns array.
Your code should satisfy these tests:
is_samepatterns(['red', 'blue', 'red'], ['a', 'b', 'a']) == True
is_samepatterns(['red', 'blue', 'green'], ['a', 'b', 'a']) == False
is_samepatterns(['red', 'red', 'red'], ['a', 'a', 'a']) == True
""""""
",is_samepatterns,"def check(candidate):

    assert candidate([""red"",""green"",""green""], [""a"", ""b"", ""b""])==True
    assert candidate([""red"",""green"",""greenn""], [""a"",""b"",""b""])==False
    assert candidate([""red"",""green"",""greenn""], [""a"",""b""])==False
","def is_samepatterns(colors, patterns):
    if len(colors) != len(patterns):
        return False
    sdict = {}
    pset = set()
    sset = set()
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True","[""is_samepatterns(['red', 'blue', 'red'], ['a', 'b', 'a']) == True"", ""is_samepatterns(['red', 'blue', 'green'], ['a', 'b', 'a']) == False"", ""is_samepatterns(['red', 'red', 'red'], ['a', 'a', 'a']) == True""]","@startuml
start
:Input colors and patterns;
:Validate input;
if ""Is the input valid?"" then
  :Check if the length of colors and patterns are the same;
  if ""Is the length the same?"" then
    :Initialize a variable to store the result;
    :Iterate through the colors and patterns;
    :Compare each color with the corresponding pattern;
    :If all colors match their corresponding patterns, set the result to True;
    :Else, set the result to False;
  else
    :Set the result to False;
  endif
else
  :Set the result to False;
endif
:Return the result;
stop
@enduml"
614,"def cummulative_sum(test_list):
""""""
Write a function to find the cumulative sum of all the values that are present in the given tuple list.
Your code should satisfy these tests:
cummulative_sum([[1, 2], [3, 4]]) == 10
cummulative_sum([[5], [10, 15], [20]]) == 50
cummulative_sum([[0, 0, 0], [0]]) == 0
""""""
",cummulative_sum,"def check(candidate):

    assert candidate([(1, 3), (5, 6, 7), (2, 6)]) == 30
    assert candidate([(2, 4), (6, 7, 8), (3, 7)]) == 37
    assert candidate([(3, 5), (7, 8, 9), (4, 8)]) == 44
","def cummulative_sum(test_list):
  res = sum(map(sum, test_list))
  return (res)","[""cummulative_sum([[1, 2], [3, 4]]) == 10"", ""cummulative_sum([[5], [10, 15], [20]]) == 50"", ""cummulative_sum([[0, 0, 0], [0]]) == 0""]","@startuml

title Cumulative Sum

start
:Start;

if (test_list is not empty) then (yes)
  :Validate input;
  :Initialize sum;
  :Loop through list;
    :Add current value to sum;
  :End loop;
  :Return sum;
else (no)
  :Return 0;
endif

@enduml"
102,"def snake_to_camel(word):
""""""
Write a function to convert snake case string to camel case string.
Your code should satisfy these tests:
snake_to_camel('hello_world') == 'HelloWorld'
snake_to_camel('convert_this_string') == 'ConvertThisString'
snake_to_camel('python_programming_language') == 'PythonProgrammingLanguage'
""""""
",snake_to_camel,"def check(candidate):

    assert candidate('python_program')=='PythonProgram'
    assert candidate('python_language')==('PythonLanguage')
    assert candidate('programming_language')==('ProgrammingLanguage')
","def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))","[""snake_to_camel('hello_world') == 'HelloWorld'"", ""snake_to_camel('convert_this_string') == 'ConvertThisString'"", ""snake_to_camel('python_programming_language') == 'PythonProgrammingLanguage'""]","@startuml
start
:input;
:word = snake_case_string;
if (word == """") then (
    :return ""Empty string"";
    stop
)
:result = """";
:split_word = word.split(""_"");
loop for each item in split_word
    :capitalize_item = item.capitalize();
    :result += capitalize_item;
end
:return result;
stop
@enduml"
557,"def toggle_string(string):
""""""
Write a function to toggle characters case in a string.
Your code should satisfy these tests:
toggle_string(""Hello World"") == ""hELLO wORLD""
toggle_string(""Python3.8"") == ""pYTHON3.8""
toggle_string(""123abcXYZ"") == ""123ABCxyz""
""""""
",toggle_string,"def check(candidate):

    assert candidate(""Python"")==(""pYTHON"")
    assert candidate(""Pangram"")==(""pANGRAM"")
    assert candidate(""LIttLE"")==(""liTTle"")
","def toggle_string(string):
 string1 = string.swapcase()
 return string1","[""toggle_string(\""Hello World\"") == \""hELLO wORLD\"""", ""toggle_string(\""Python3.8\"") == \""pYTHON3.8\"""", ""toggle_string(\""123abcXYZ\"") == \""123ABCxyz\""""]","@startuml

start
:toggle_string(string);

if (string.isalpha()) then (
  :toggle_case(string);
  :return toggle_case(string);
) else (
  :return string;
)

:toggle_case(string);
:string = string.swapcase();
:return string;

@enduml"
401,"def add_nested_tuples(test_tup1, test_tup2):
""""""
Write a function to perform index wise addition of tuple elements in the given two nested tuples.
Your code should satisfy these tests:
add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))
add_nested_tuples(((0, 0), (0, 0)), ((1, 1), (1, 1))) == ((1, 1), (1, 1))
add_nested_tuples(((-1, -2), (-3, -4)), ((1, 2), (3, 4))) == ((0, 0), (0, 0))
""""""
",add_nested_tuples,"def check(candidate):

    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))
    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))
    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))
","def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","[""add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))"", ""add_nested_tuples(((0, 0), (0, 0)), ((1, 1), (1, 1))) == ((1, 1), (1, 1))"", ""add_nested_tuples(((-1, -2), (-3, -4)), ((1, 2), (3, 4))) == ((0, 0), (0, 0))""]","@startuml

start
:add_nested_tuples(test_tup1, test_tup2);

if (test_tup1 and test_tup2 are not empty) then (yes)
  :validate input;
  :perform index-wise addition;
  :return result;
else (no)
  :raise ValueError;
end if

@enduml"
532,"def check_permutation(str1, str2):
""""""
Write a function to check if the two given strings are permutations of each other.
Your code should satisfy these tests:
check_permutation(""abc"", ""bca"") == True
check_permutation(""hello"", ""bello"") == False
check_permutation(""123"", ""321"") == True
""""""
",check_permutation,"def check(candidate):

    assert candidate(""abc"", ""cba"") == True
    assert candidate(""test"", ""ttew"") == False
    assert candidate(""xxyz"", ""yxzx"") == True
","def check_permutation(str1, str2):
  n1=len(str1)
  n2=len(str2)
  if(n1!=n2):
    return False
  a=sorted(str1)
  str1="" "".join(a)
  b=sorted(str2)
  str2="" "".join(b)
  for i in range(0, n1, 1):
    if(str1[i] != str2[i]):
      return False
  return True","[""check_permutation(\""abc\"", \""bca\"") == True"", ""check_permutation(\""hello\"", \""bello\"") == False"", ""check_permutation(\""123\"", \""321\"") == True""]","@startuml
start

:Input two strings (str1, str2);
if (Are str1 and str2 of the same length?) then (yes)
    :Sort str1 and str2;
    if (Are sorted str1 and sorted str2 equal?) then (yes)
        :Return True;
    else (no)
        :Return False;
    endif
else (no)
    :Return False;
endif

stop
@enduml"
795,"def cheap_items(items,n):
""""""
Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.
""""""
",cheap_items,"def check(candidate):

    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]
    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]
    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]
","import heapq
def cheap_items(items,n):
  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])
  return cheap_items","[""cheap_items([{'name': 'apple', 'price': 1.2}, {'name': 'banana', 'price': 0.5}, {'name': 'cherry', 'price': 2.0}], 2) == [{'name': 'banana', 'price': 0.5}, {'name': 'apple', 'price': 1.2}]"", ""cheap_items([{'name': 'grape', 'price': 3.0}, {'name': 'orange', 'price': 1.5}, {'name': 'pear', 'price': 2.5}, {'name': 'peach', 'price': 4.0}], 3) == [{'name': 'orange', 'price': 1.5}, {'name': 'pear', 'price': 2.5}, {'name': 'grape', 'price': 3.0}]"", ""cheap_items([{'name': 'kiwi', 'price': 1.0}, {'name': 'melon', 'price': 5.0}, {'name': 'plum', 'price': 3.5}, {'name': 'lime', 'price': 0.75}], 1) == [{'name': 'lime', 'price': 0.75}]""]","@startuml

title cheap_items

start
:items = [{'name': 'kiwi', 'price': 1.0}, {'name': 'melon', 'price': 5.0}, {'name': 'plum', 'price': 3.5}, {'name': 'lime', 'price': 0.75}]
:n = 1

if (n > 0) then (yes)
  :heap = []
  :for item in items:
    :heap.append(item)
  :heap.sort(key=lambda x: x['price'])
  :cheap_items = []
  :for i in range(n):
    :cheap_items.append(heap.pop(0))
  :return cheap_items
else (no)
  :return []

@enduml"
354,"def tn_ap(a,n,d):
""""""
Write a function to find t-nth term of arithemetic progression.
Your code should satisfy these tests:
tn_ap(2, 5, 3) == 14
tn_ap(1, 10, 2) == 19
tn_ap(0, 7, 4) == 24
""""""
",tn_ap,"def check(candidate):

    assert candidate(1,5,2)==9
    assert candidate(2,6,4)==22
    assert candidate(1,4,5)==16
","def tn_ap(a,n,d):
  tn = a + (n - 1) * d
  return tn","[""tn_ap(2, 5, 3) == 14"", ""tn_ap(1, 10, 2) == 19"", ""tn_ap(0, 7, 4) == 24""]","@startuml
start

:Input parameters: a, n, d;
if (Are inputs valid?) then (yes)
    :Calculate nth term using formula: tn = a + (n - 1) * d;
    :Return tn;
else (no)
    :Handle invalid input (e.g., return error or None);
endif

stop
@enduml"
373,"def volume_cuboid(l,w,h):
""""""
Write a function to find the volume of a cuboid.
Your code should satisfy these tests:
volume_cuboid(2, 3, 4) == 24
volume_cuboid(5, 5, 5) == 125
volume_cuboid(10, 2, 3) == 60
""""""
",volume_cuboid,"def check(candidate):

    assert candidate(1,2,3)==6
    assert candidate(5,7,9)==315
    assert candidate(10,15,21)==3150
","def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume","[""volume_cuboid(2, 3, 4) == 24"", ""volume_cuboid(5, 5, 5) == 125"", ""volume_cuboid(10, 2, 3) == 60""]","@startuml

start
:volume_cuboid(l,w,h);
if (l < 0 or w < 0 or h < 0) then (no)
:Invalid input;
stop
else (yes)
:Valid input;
:volume = l * w * h;
:return volume;
endif

@enduml"
403,"def is_valid_URL(str):
""""""
Write a function to check if a url is valid or not using regex.
Your code should satisfy these tests:
is_valid_URL(""https://www.example.com"") == True
is_valid_URL(""http://example.co.uk"") == True
is_valid_URL(""ftp://example.com"") == False
""""""
",is_valid_URL,"def check(candidate):

    assert candidate(""https://www.google.com"") == True
    assert candidate(""https:/www.gmail.com"") == False
    assert candidate(""https:// www.redit.com"") == False
","import re
def is_valid_URL(str):
	regex = (""((http|https)://)(www.)?"" +
			""[a-zA-Z0-9@:%._\\+~#?&//=]"" +
			""{2,256}\\.[a-z]"" +
			""{2,6}\\b([-a-zA-Z0-9@:%"" +
			""._\\+~#?&//=]*)"")
	p = re.compile(regex)
	if (str == None):
		return False
	if(re.search(p, str)):
		return True
	else:
		return False","[""is_valid_URL(\""https://www.example.com\"") == True"", ""is_valid_URL(\""http://example.co.uk\"") == True"", ""is_valid_URL(\""ftp://example.com\"") == False""]","@startuml
start

:Input URL string;
if (Is input string empty or None?) then (yes)
    :Return False;
    stop
else (no)
    :Define regex pattern for valid URLs;
    :Check if input matches regex pattern;
    if (Does input match regex pattern?) then (yes)
        :Return True;
        stop
    else (no)
        :Return False;
        stop
    endif
endif

@enduml"
830,"def round_up(a, digits):
""""""
Write a function to round up a number to specific digits.
Your code should satisfy these tests:
round_up(3.14159, 2) == 3.15
round_up(2.71828, 3) == 2.719
round_up(0.00123, 4) == 0.0013
""""""
",round_up,"def check(candidate):

    assert candidate(123.01247,0)==124
    assert candidate(123.01247,1)==123.1
    assert candidate(123.01247,2)==123.02
","import math
def round_up(a, digits):
    n = 10**-digits
    return round(math.ceil(a / n) * n, digits)","[""round_up(3.14159, 2) == 3.15"", ""round_up(2.71828, 3) == 2.719"", ""round_up(0.00123, 4) == 0.0013""]","@startuml
start
:Input number (a) and digits;
if (Digits >= 0) then (yes)
  :Calculate multiplier = 10^digits;
  :Rounded number = a * multiplier;
  :Check if the decimal part is greater than 0;
  if (Decimal part > 0) then (yes)
    :Rounded number = int(Rounded number) + 1;
  else (no)
    :Rounded number = int(Rounded number);
  endif
  :Return Rounded number / multiplier;
else (no)
  :Return ""Error: Digits should be >= 0"";
endif
stop
@enduml"
495,"def remove_lowercase(str1):
""""""
Write a function to remove lowercase substrings from a given string by using regex.
Your code should satisfy these tests:
remove_lowercase(""HelloWorld123"") == 'HW123'
remove_lowercase(""Python3.8"") == 'P3.8'
remove_lowercase(""aBcDeFgHiJkLmNoPqRsTuVwXyZ"") == 'BDFHJLNPRTVXZ'
""""""
",remove_lowercase,"def check(candidate):

    assert candidate('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'
    assert candidate('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'
    assert candidate('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'
","import re
def remove_lowercase(str1):
  remove_lower = lambda text: re.sub('[a-z]', '', text)
  result =  remove_lower(str1)
  return (result)","[""remove_lowercase(\""HelloWorld123\"") == 'HW123'"", ""remove_lowercase(\""Python3.8\"") == 'P3.8'"", ""remove_lowercase(\""aBcDeFgHiJkLmNoPqRsTuVwXyZ\"") == 'BDFHJLNPRTVXZ'""]","@startuml

title remove_lowercase

start
:remove_lowercase(str1);

if (str1 == """") then (no)
  :return """";
else (yes)
  :result = """";
  :for each character in str1 do
    if (character is lowercase) then (no)
      :result += character;
    endif
  endfor
  :return result;
endif

@enduml"
363,"def add_K_element(test_list, K):
""""""
Write a function to add the k elements to each element in the tuple.
Your code should satisfy these tests:
add_K_element([(1, 2), (3, 4)], 5) == [(6, 7), (8, 9)]
add_K_element([(0, 0), (-1, -2)], 3) == [(3, 3), (2, 1)]
add_K_element([(10, 20), (30, 40), (50, 60)], 10) == [(20, 30), (40, 50), (60, 70)]
""""""
",add_K_element,"def check(candidate):

    assert candidate([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]
    assert candidate([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]
    assert candidate([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]
","def add_K_element(test_list, K):
  res = [tuple(j + K for j in sub ) for sub in test_list]
  return (res) ","[""add_K_element([(1, 2), (3, 4)], 5) == [(6, 7), (8, 9)]"", ""add_K_element([(0, 0), (-1, -2)], 3) == [(3, 3), (2, 1)]"", ""add_K_element([(10, 20), (30, 40), (50, 60)], 10) == [(20, 30), (40, 50), (60, 70)]""]","@startuml
start
:Input Validation;
if (Is test_list empty?) then (yes)
    :Return error message;
    stop
endif
if (Is K not a number?) then (yes)
    :Return error message;
    stop
endif
:Initialize result list;
:Iterate over test_list;
if (Is current element not a tuple?) then (yes)
    :Return error message;
    stop
endif
:Add K to each element in the tuple;
:Append the result tuple to result list;
:Increment counter;
:Check if counter equals to length of test_list;
if (yes) then (no)
    :Go back to step 4;
endif
:Return result list;
stop
@enduml"
347,"def count_Squares(m,n):
""""""
Write a python function to count the number of squares in a rectangle.
Your code should satisfy these tests:
count_Squares(4, 3) == 20
count_Squares(1, 1) == 1
count_Squares(5, 5) == 55
""""""
",count_Squares,"def check(candidate):

    assert candidate(4,3) == 20
    assert candidate(1,2) == 2
    assert candidate(2,2) == 5
","def count_Squares(m,n):
    if (n < m):
        temp = m
        m = n
        n = temp
    return n * (n + 1) * (3 * m - n + 1) // 6","[""count_Squares(4, 3) == 20"", ""count_Squares(1, 1) == 1"", ""count_Squares(5, 5) == 55""]","@startuml
start
:Input m, n;
:if m <= 0 or n <= 0:
    :return ""Invalid input, m and n should be greater than 0"";
:endif;
:set total_squares to 0;
:for i from 1 to m:
    :for j from 1 to n:
        :total_squares += min(i, j);
    :endfor;
:endfor;
:return total_squares;
stop
@enduml"
612,"def merge(lst):
""""""
Write a python function to merge the first and last elements separately in a list of lists.
Your code should satisfy these tests:
merge([[1, 2], [3, 4]]) == [[1, 3], [2, 4]]
merge([[5, 6, 7], [8, 9, 10]]) == [[5, 8], [6, 9], [7, 10]]
merge([['a', 'b'], ['c', 'd'], ['e', 'f']]) == [['a', 'c', 'e'], ['b', 'd', 'f']]
""""""
",merge,"def check(candidate):

    assert candidate([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]
    assert candidate([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]
    assert candidate([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]
","def merge(lst):
    return [list(ele) for ele in list(zip(*lst))] ","[""merge([[1, 2], [3, 4]]) == [[1, 3], [2, 4]]"", ""merge([[5, 6, 7], [8, 9, 10]]) == [[5, 8], [6, 9], [7, 10]]"", ""merge([['a', 'b'], ['c', 'd'], ['e', 'f']]) == [['a', 'c', 'e'], ['b', 'd', 'f']]""]","@startuml
start
:Input: lst
if (lst is empty?) then (yes)
    :Return empty list
    stop
endif
:first_element <- lst[0]
:last_element <- lst[-1]
:merged_list <- []
:length <- len(first_element)
loop i from 0 to length-1
    :temp_list <- []
    loop j from 0 to len(lst)-1
        :temp_list.append(lst[j][i])
    end
    :merged_list.append(temp_list)
end
:Return merged_list
stop
@enduml"
496,"def heap_queue_smallest(nums,n):
""""""
Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.
Your code should satisfy these tests:
heap_queue_smallest([5, 7, 2, 3, 1], 3) == [1, 2, 3]
heap_queue_smallest([10, 22, 5, 75, 65, 80], 4) == [5, 10, 22, 65]
heap_queue_smallest([-1, -3, -2, 0, 2], 2) == [-3, -2]
""""""
",heap_queue_smallest,"def check(candidate):

    assert candidate( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25]
    assert candidate( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]
    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]
","import heapq as hq
def heap_queue_smallest(nums,n):
  smallest_nums = hq.nsmallest(n, nums)
  return smallest_nums","[""heap_queue_smallest([5, 7, 2, 3, 1], 3) == [1, 2, 3]"", ""heap_queue_smallest([10, 22, 5, 75, 65, 80], 4) == [5, 10, 22, 65]"", ""heap_queue_smallest([-1, -3, -2, 0, 2], 2) == [-3, -2]""]","@startuml

start
:heap_queue_smallest(nums, n);

if (nums is not a list) then (
  :raise ValueError(""nums must be a list"");
  stop;
)

if (n is not an integer) then (
  :raise ValueError(""n must be an integer"");
  stop;
)

if (n < 0) then (
  :raise ValueError(""n must be non-negative"");
  stop;
)

if (n > len(nums)) then (
  :raise ValueError(""n must be less than or equal to the length of nums"");
  stop;
)

:heapify(nums);

:result = [];

while (len(result) < n) do (
  :result.append(nums.pop());
)

:return result;

@enduml"
10,"def small_nnum(list1,n):
""""""
Write a function to get the n smallest items from a dataset.
Your code should satisfy these tests:
small_nnum([5, 7, 2, 3, 1], 3) == [1, 2, 3]
small_nnum([10, 22, 5, 75, 65, 80], 4) == [5, 10, 22, 65]
small_nnum([1, 1, 1, 1, 1], 2) == [1, 1]
""""""
",small_nnum,"def check(candidate):

    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]
    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]
    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]
","import heapq
def small_nnum(list1,n):
  smallest=heapq.nsmallest(n,list1)
  return smallest","[""small_nnum([5, 7, 2, 3, 1], 3) == [1, 2, 3]"", ""small_nnum([10, 22, 5, 75, 65, 80], 4) == [5, 10, 22, 65]"", ""small_nnum([1, 1, 1, 1, 1], 2) == [1, 1]""]","@startuml

title Smallest N Numbers

start
:Get n;
:Get list;

if (n <= 0) then (no)
:Invalid input;
:Return empty list;
else (yes)
:Validate input;
:Sort list;
:Get smallest n numbers;
:Return list;

@enduml"
711,"def product_Equal(n):
""""""
Write a python function to check whether the product of digits of a number at even and odd places is equal or not.
Your code should satisfy these tests:
product_Equal(1236) == False
product_Equal(1122) == True
product_Equal(1234) == False
""""""
",product_Equal,"def check(candidate):

    assert candidate(2841) == True
    assert candidate(1234) == False
    assert candidate(1212) == False
","def product_Equal(n):
    if n < 10:
        return False
    prodOdd = 1; prodEven = 1
    while n > 0:
        digit = n % 10
        prodOdd *= digit
        n = n//10
        if n == 0:
            break;
        digit = n % 10
        prodEven *= digit
        n = n//10
    if prodOdd == prodEven:
        return True
    return False","[""product_Equal(1236) == False"", ""product_Equal(1122) == True"", ""product_Equal(1234) == False""]","@startuml

title product_Equal(n)

start
:Check if n is a valid input;
if (n < 0) then (return False)
endif

:Extract the digits of n;
digits = [d1, d2, ..., dn]

:Calculate the product of the digits at even and odd places;
even_product = d2 * d4 * ... * dn
odd_product = d1 * d3 * ... * dn-1

:Compare the products;
if (even_product == odd_product) then (return True)
else (return False)
endif

stop

@enduml"
928,"def change_date_format(dt):
""""""
Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.
Your code should satisfy these tests:
change_date_format('2023-10-05') == '05-10-2023'
change_date_format('1999-1-1') == '1-1-1999'
change_date_format('2000-12-31') == '31-12-2000'
""""""
",change_date_format,"def check(candidate):

    assert candidate('2026-01-02')=='02-01-2026'
    assert candidate('2021-01-04')=='04-01-2021'
    assert candidate('2030-06-06')=='06-06-2030'
","import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)
        return change_date_format(dt)","[""change_date_format('2023-10-05') == '05-10-2023'"", ""change_date_format('1999-1-1') == '1-1-1999'"", ""change_date_format('2000-12-31') == '31-12-2000'""]","@startuml
start

:Input date string (dt);
if (Is dt in 'yyyy-mm-dd' format?) then (yes)
    :Split dt into year, month, day using '-' as separator;
    if (Are year, month, and day valid?) then (yes)
        :Reformat date to 'dd-mm-yyyy';
        :Return reformatted date;
    else (no)
        :Return ""Invalid date components"";
    endif
else (no)
    :Return ""Invalid date format"";
endif

stop
@enduml"
893,"def Extract(lst):
""""""
Write a python function to get the last element of each sublist.
Your code should satisfy these tests:
Extract([['apple', 'banana'], ['carrot', 'date'], ['egg', 'fig']]) == ['banana', 'date', 'fig']
Extract([['one'], ['two', 'three'], ['four', 'five', 'six']]) == ['one', 'three', 'six']
Extract([['red', 'blue', 'green'], ['yellow'], ['purple', 'orange']]) == ['green', 'yellow', 'orange']
""""""
",Extract,"def check(candidate):

    assert candidate([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]
    assert candidate([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']
    assert candidate([[1, 2, 3], [4, 5]]) == [3, 5]
","def Extract(lst):
    return [item[-1] for item in lst] ","[""Extract([['apple', 'banana'], ['carrot', 'date'], ['egg', 'fig']]) == ['banana', 'date', 'fig']"", ""Extract([['one'], ['two', 'three'], ['four', 'five', 'six']]) == ['one', 'three', 'six']"", ""Extract([['red', 'blue', 'green'], ['yellow'], ['purple', 'orange']]) == ['green', 'yellow', 'orange']""]","@startuml
start

:Input list of sublists (lst);
if (Is lst empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize an empty list (result);
    :Iterate through each sublist in lst;
    :Get the last element of the current sublist;
    :Append the last element to the result list;
    if (More sublists to process?) then (yes)
        :Continue iteration;
    else (no)
        :Return the result list;
        stop
    endif
endif

@enduml"
689,"def min_jumps(arr, n):
""""""
## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block
Your code should satisfy these tests:
min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3
min_jumps([2, 3, 1, 1, 4], 5) == 2
min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 10) == 9
""""""
",min_jumps,"def check(candidate):

    assert candidate([1, 3, 6, 1, 0, 9], 6) == 3
    assert candidate([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3
    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10
","def min_jumps(arr, n):
	jumps = [0 for i in range(n)]
	if (n == 0) or (arr[0] == 0):
		return float('inf')
	jumps[0] = 0
	for i in range(1, n):
		jumps[i] = float('inf')
		for j in range(i):
			if (i <= j + arr[j]) and (jumps[j] != float('inf')):
				jumps[i] = min(jumps[i], jumps[j] + 1)
				break
	return jumps[n-1]","[""min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3"", ""min_jumps([2, 3, 1, 1, 4], 5) == 2"", ""min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 10) == 9""]","@startuml

start

:Initialize jumps = 0;
:Initialize max_reach = arr[0];
:Initialize steps = arr[0];

while (steps < n) is (True)
    :Increment jumps by 1;
    :Set new_steps = 0;

    :Iterate over current steps;
    :Find max reach from current position;

    while (current position < max_reach and position < n) is (True)
        :Update max_reach from current position;
        :Increment position by 1;
    endwhile

    :Update steps to new_steps;
endwhile

:Return jumps;

stop

@enduml"
763,"def find_Min_Diff(arr,n):
""""""
Write a python function to find the minimum difference between any two elements in a given array.
Your code should satisfy these tests:
find_Min_Diff([1, 5, 3, 19, 18, 25], 6) == 1
find_Min_Diff([4, 9, 1, 32, 12], 5) == 3
find_Min_Diff([100, 50, 200, 150, 300], 5) == 50
find_Min_Diff([10, 22, 12, 11, 15], 5) == 1
find_Min_Diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 1
""""""
",find_Min_Diff,"def check(candidate):

    assert candidate((1,5,3,19,18,25),6) == 1
    assert candidate((4,3,2,6),4) == 1
    assert candidate((30,5,20,9),4) == 4
","def find_Min_Diff(arr,n):
    arr = sorted(arr)
    diff = 10**20
    for i in range(n-1):
        if arr[i+1] - arr[i] < diff:
            diff = arr[i+1] - arr[i]
    return diff ","[""find_Min_Diff([1, 5, 3, 19, 18, 25], 6) == 1"", ""find_Min_Diff([4, 9, 1, 32, 12], 5) == 3"", ""find_Min_Diff([100, 50, 200, 150, 300], 5) == 50"", ""find_Min_Diff([10, 22, 12, 11, 15], 5) == 1"", ""find_Min_Diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 1""]","@startuml
start
:Input Validation;
if (arr is empty or n <= 1) then (return None)
:Sort the array;
:Initialize min_diff to be the maximum possible value;
:Initialize min_pair to be an empty list;
for (i from 0 to n-2) {
    for (j from i+1 to n-1) {
        :Calculate the difference;
        if (diff < min_diff) then (
            :Update min_diff;
            :Update min_pair;
        )
    }
}
:Return min_pair;
stop
@enduml"
821,"def merge_dictionaries(dict1,dict2):
""""""
Write a function to merge two dictionaries into a single expression.
Your code should satisfy these tests:
merge_dictionaries({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'a': 1, 'b': 2, 'c': 4}
merge_dictionaries({}, {'x': 10, 'y': 20}) == {'x': 10, 'y': 20}
merge_dictionaries({'key1': 'value1'}, {}) == {'key1': 'value1'}
""""""
",merge_dictionaries,"def check(candidate):

    assert candidate({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}
    assert candidate({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" },{ ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}
    assert candidate({ ""G"": ""Green"", ""W"": ""White"" },{ ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}
","import collections as ct
def merge_dictionaries(dict1,dict2):
    merged_dict = dict(ct.ChainMap({}, dict1, dict2))
    return merged_dict","[""merge_dictionaries({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'a': 1, 'b': 2, 'c': 4}"", ""merge_dictionaries({}, {'x': 10, 'y': 20}) == {'x': 10, 'y': 20}"", ""merge_dictionaries({'key1': 'value1'}, {}) == {'key1': 'value1'}""]","@startuml

start
:merge_dictionaries(dict1,dict2);

if (dict1 is empty) then (yes)
  :return dict2;
else (no)
  :return dict1;
endif

if (dict2 is empty) then (yes)
  :return dict1;
else (no)
  :return dict2;
endif

if (dict1 and dict2 have the same key) then (yes)
  :return dict1;
else (no)
  :return dict2;
endif

:return dict1;

@enduml"
149,"def longest_subseq_with_diff_one(arr, n):
""""""
Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.
Your code should satisfy these tests:
longest_subseq_with_diff_one([1, 2, 3, 4, 5], 5) == 5
longest_subseq_with_diff_one([1, 3, 5, 7, 9], 5) == 1
longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3
""""""
",longest_subseq_with_diff_one,"def check(candidate):

    assert candidate([1, 2, 3, 4, 5, 3, 2], 7) == 6
    assert candidate([10, 9, 4, 5, 4, 8, 6], 7) == 3
    assert candidate([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7
","def longest_subseq_with_diff_one(arr, n):
	dp = [1 for i in range(n)]
	for i in range(n):
		for j in range(i):
			if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)):
				dp[i] = max(dp[i], dp[j]+1)
	result = 1
	for i in range(n):
		if (result < dp[i]):
			result = dp[i]
	return result","[""longest_subseq_with_diff_one([1, 2, 3, 4, 5], 5) == 5"", ""longest_subseq_with_diff_one([1, 3, 5, 7, 9], 5) == 1"", ""longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3""]","@startuml

title longest_subseq_with_diff_one

start
:Start;

if (n == 0) then (no subsequence)
:End;

else
:Find longest subsequence;

partition ""Find longest subsequence"" {
    :Find longest subsequence;
    :Check if subsequence is valid;
    :If valid, return subsequence;
    :Else, continue searching;
}

if (subsequence is valid) then (return subsequence)
:Return subsequence;

else
:Continue searching;

partition ""Continue searching"" {
    :Continue searching;
    :Check if subsequence is valid;
    :If valid, return subsequence;
    :Else, continue searching;
}

if (subsequence is valid) then (return subsequence)
:Return subsequence;

else
:End;

:End;

@enduml"
402,"def ncr_modp(n, r, p):
""""""
Write a function to compute the value of ncr%p.
Your code should satisfy these tests:
ncr_modp(5, 2, 13) == 10
ncr_modp(10, 3, 7) == 1
ncr_modp(6, 4, 17) == 15
""""""
",ncr_modp,"def check(candidate):

    assert candidate(10,2,13)==6
    assert candidate(15,12,43)==25
    assert candidate(17,9,18)==10
","def ncr_modp(n, r, p):
    C = [0 for i in range(r+1)]
    C[0] = 1
    for i in range(1, n+1):
        for j in range(min(i, r), 0, -1):
            C[j] = (C[j] + C[j-1]) % p
    return C[r] ","[""ncr_modp(5, 2, 13) == 10"", ""ncr_modp(10, 3, 7) == 1"", ""ncr_modp(6, 4, 17) == 15""]","@startuml
start

:Input n, r, p;
if (n < 0 or r < 0 or p <= 0) then (yes)
    :Return ""Invalid input: n and r must be non-negative, p must be positive"";
    stop
else (no)
    if (r > n) then (yes)
        :Return 0 (since nCr is 0 when r > n);
        stop
    else (no)
        :Initialize result = 1;
        :Initialize i = 1;
        while (i <= r)
            :result = (result * (n - r + i)) % p;
            :result = (result // i) % p;
            :i = i + 1;
        endwhile
        :Return result;
        stop
    endif
endif

@enduml"
306,"def max_sum_increasing_subseq(a, n, index, k):
""""""
Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .
Your code should satisfy these tests:
max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11
max_sum_increasing_subseq([10, 20, 30, 40, 50], 5, 2, 4) == 110
max_sum_increasing_subseq([5, 4, 3, 2, 1], 5, 3, 4) == 1
max_sum_increasing_subseq([10, 5, 20, 6, 50, 7, 80], 7, 5, 6) == 160
max_sum_increasing_subseq([3, 4, 5, 10], 4, 2, 3) == 22
""""""
",max_sum_increasing_subseq,"def check(candidate):

    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11
    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7
    assert candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71
","def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for i in range(n)]
			for i in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]","[""max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11"", ""max_sum_increasing_subseq([10, 20, 30, 40, 50], 5, 2, 4) == 110"", ""max_sum_increasing_subseq([5, 4, 3, 2, 1], 5, 3, 4) == 1"", ""max_sum_increasing_subseq([10, 5, 20, 6, 50, 7, 80], 7, 5, 6) == 160"", ""max_sum_increasing_subseq([3, 4, 5, 10], 4, 2, 3) == 22""]","@startuml
start
:Validate Inputs;
:Check if k > i;
if (Not?) then (
    :Return Error Message;
    stop
)
:Initialize max_sum with a[k];
:Initialize dp array with a[k];
:Set i from k+1 to n;
if (i > n) then (
    :Return max_sum;
    stop
)
:Set j from k-1 to 0;
if (j < 0) then (
    :Return max_sum;
    stop
)
:Set max_end with a[i];
:Set max_sum with dp[i];
:Set j from i-1 to j;
if (j >= 0) then (
    :Set max_end with max(max_end, a[j]);
    :Set dp[i] with max(dp[i], dp[j] + a[i]);
    :Set max_sum with max(max_sum, dp[i]);
    :Set j to j-1;
)
:Return max_sum;
stop
@enduml"
53,"def check_Equality(str):
""""""
Write a python function to check whether the first and last characters of a given string are equal or not.
Your code should satisfy these tests:
check_Equality(""radar"") == ""Equal""
check_Equality(""hello"") == ""Not Equal""
check_Equality(""level"") == ""Equal""
""""""
",check_Equality,"def check(candidate):

    assert candidate(""abcda"") == ""Equal""
    assert candidate(""ab"") == ""Not Equal""
    assert candidate(""mad"") == ""Not Equal""
","def check_Equality(str):
  if (str[0] == str[-1]):
    return (""Equal"")
  else:
    return (""Not Equal"") ","[""check_Equality(\""radar\"") == \""Equal\"""", ""check_Equality(\""hello\"") == \""Not Equal\"""", ""check_Equality(\""level\"") == \""Equal\""""]","@startuml
start

:Input string (str);
if (Is str empty?) then (yes)
    :Output ""Invalid Input"";
    stop
else (no)
    :Get first character (first_char);
    :Get last character (last_char);
    if (first_char == last_char?) then (yes)
        :Output ""Equal"";
    else (no)
        :Output ""Not Equal"";
    endif
endif

stop
@enduml"
469,"def max_profit(price, k):
""""""
Write a function to find the maximum profit earned from a maximum of k stock transactions
Your code should satisfy these tests:
max_profit([10, 22, 5, 75, 65, 80], 2) == 87
max_profit([12, 14, 17, 10, 14, 13, 12, 15], 3) == 12
max_profit([3, 3, 5, 0, 0, 3, 1, 4], 2) == 6
""""""
",max_profit,"def check(candidate):

    assert candidate([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10
    assert candidate([2, 4, 7, 5, 4, 3, 5], 2) == 7
    assert candidate([10, 6, 8, 4, 2], 2) == 2
","def max_profit(price, k):
    n = len(price)
    final_profit = [[None for x in range(n)] for y in range(k + 1)]
    for i in range(k + 1):
        for j in range(n):
            if i == 0 or j == 0:
                final_profit[i][j] = 0
            else:
                max_so_far = 0
                for x in range(j):
                    curr_price = price[j] - price[x] + final_profit[i-1][x]
                    if max_so_far < curr_price:
                        max_so_far = curr_price
                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)
    return final_profit[k][n-1]","[""max_profit([10, 22, 5, 75, 65, 80], 2) == 87"", ""max_profit([12, 14, 17, 10, 14, 13, 12, 15], 3) == 12"", ""max_profit([3, 3, 5, 0, 0, 3, 1, 4], 2) == 6""]","@startuml
start
:Input: price, k
:Output: max_profit
:Validate Input: price is a list of integers and k is an integer
if (Validate Input) then
    (Find local minima and maxima)
    :Find local minima: min_price
    :Find local maxima: max_price
    if (min_price < max_price) then
        (Calculate profit)
        :Calculate profit: profit
        if (profit > max_profit) then
            :Update max_profit: max_profit
        endif
    endif
else
    :Return error: error
endif
:Return max_profit: max_profit
stop
@enduml"
594,"def diff_even_odd(list1):
""""""
Write a function to find the difference of first even and odd number of a given list.
Your code should satisfy these tests:
diff_even_odd([2, 4, 6, 8, 10]) == 3
diff_even_odd([1, 3, 5, 7, 9]) == -2
diff_even_odd([11, 13, 2, 17, 19]) == -9
""""""
",diff_even_odd,"def check(candidate):

    assert candidate([1,3,5,7,4,1,6,8])==3
    assert candidate([1,2,3,4,5,6,7,8,9,10])==1
    assert candidate([1,5,7,9,10])==9
","def diff_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even-first_odd)","[""diff_even_odd([2, 4, 6, 8, 10]) == 3"", ""diff_even_odd([1, 3, 5, 7, 9]) == -2"", ""diff_even_odd([11, 13, 2, 17, 19]) == -9""]","@startuml
start
:Input List;
:Initialize first_even and first_odd to None;
:Initialize diff to 0;
:For each element in the list;
    :If the element is even and first_even is None;
        :Set first_even to the element;
    :Else if the element is odd and first_odd is None;
        :Set first_odd to the element;
    :End if;
    :If first_even is not None and first_odd is not None;
        :Break the loop;
    :End if;
:End for;
:If first_even is not None;
    :Set diff to first_even;
:Else;
    :Set diff to 0;
:End if;
:If first_odd is not None;
    :Set diff to diff - first_odd;
:End if;
:Return diff;
stop
@enduml"
741,"def all_Characters_Same(s):
""""""
Write a python function to check whether all the characters are same or not.
Your code should satisfy these tests:
all_Characters_Same(""aaaa"") == True
all_Characters_Same(""abc"") == False
all_Characters_Same(""zzzzz"") == True
""""""
",all_Characters_Same,"def check(candidate):

    assert candidate(""python"") == False
    assert candidate(""aaa"") == True
    assert candidate(""data"") == False
","def all_Characters_Same(s) :
    n = len(s)
    for i in range(1,n) :
        if s[i] != s[0] :
            return False
    return True","[""all_Characters_Same(\""aaaa\"") == True"", ""all_Characters_Same(\""abc\"") == False"", ""all_Characters_Same(\""zzzzz\"") == True""]","@startuml

title all_Characters_Same

start
:Check if input is empty;
if (s == """") then (no)
  :Return False;
else (yes)
  :Initialize result to True;
  :Loop through each character in s;
  if (s[i] != s[0]) then (no)
    :Set result to False;
    :Break loop;
  endif
endfor
:Return result;

@enduml"
20,"def is_woodall(x):
""""""
Write a function to check if the given number is woodball or not.
Your code should satisfy these tests:
is_woodall(7) == True
is_woodall(23) == True
is_woodall(31) == False
""""""
",is_woodall,"def check(candidate):

    assert candidate(383) == True
    assert candidate(254) == False
    assert candidate(200) == False
","def is_woodall(x):
	if (x % 2 == 0):
		return False
	if (x == 1):
		return True
	x = x + 1
	p = 0
	while (x % 2 == 0):
		x = x/2
		p = p + 1
		if (p == x):
			return True
	return False","[""is_woodall(7) == True"", ""is_woodall(23) == True"", ""is_woodall(31) == False""]","@startuml
start
:Start;
if (Check if x is less than 1) then (No)
  :Return False;
else (Yes)
  :Set n = 0;
  :Set woodall = 1;
  while (Check if woodall < x) is true
    :Increment n;
    :Set woodall = n * 2^n - 1;
  endwhile (No)
  if (Check if woodall equals x) then (Yes)
    :Return True;
  else (No)
    :Return False;
  endif
endif
stop
@enduml"
157,"def encode_list(list1):
""""""
Write a function to reflect the run-length encoding from a list.
Your code should satisfy these tests:
encode_list([1, 1, 2, 2, 2, 3]) == [[2, 1], [3, 2], [1, 3]]
encode_list(['a', 'a', 'b', 'b', 'c', 'c', 'c']) == [[2, 'a'], [2, 'b'], [3, 'c']]
encode_list([4, 5, 5, 5, 6, 6, 7]) == [[1, 4], [3, 5], [2, 6], [1, 7]]
""""""
",encode_list,"def check(candidate):

    assert candidate([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]
    assert candidate('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]
    assert candidate('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]
","from itertools import groupby
def encode_list(list1):
    return [[len(list(group)), key] for key, group in groupby(list1)]","[""encode_list([1, 1, 2, 2, 2, 3]) == [[2, 1], [3, 2], [1, 3]]"", ""encode_list(['a', 'a', 'b', 'b', 'c', 'c', 'c']) == [[2, 'a'], [2, 'b'], [3, 'c']]"", ""encode_list([4, 5, 5, 5, 6, 6, 7]) == [[1, 4], [3, 5], [2, 6], [1, 7]]""]","@startuml

title Encode List

start
:Start;

if (list1 is empty) then (no encoding needed)
	:Return empty list;
else
	:Initialize result list;
	:Initialize current element;
	:Initialize current count;
	:Initialize current run;

loop
	:Increment current count;
	:Check if current element is equal to next element;
	:If yes, then continue loop;
	:If no, then break loop;

	:Add current run to result list;
	:Initialize current run;
	:Initialize current count;
	:Initialize current element;

end

:Return result list;

@enduml"
864,"def palindrome_lambda(texts):
""""""
Write a function to find palindromes in a given list of strings using lambda function.
Your code should satisfy these tests:
palindrome_lambda([""radar"", ""hello"", ""level""]) == [""radar"", ""level""]
palindrome_lambda([""world"", ""python"", ""madam""]) == [""madam""]
palindrome_lambda(["""", ""a"", ""abba""]) == ["""", ""a"", ""abba""]
""""""
",palindrome_lambda,"def check(candidate):

    assert candidate([""php"", ""res"", ""Python"", ""abcd"", ""Java"", ""aaa""])==['php', 'aaa']
    assert candidate([""abcd"", ""Python"", ""abba"", ""aba""])==['abba', 'aba']
    assert candidate([""abcd"", ""abbccbba"", ""abba"", ""aba""])==['abbccbba', 'abba', 'aba']
","def palindrome_lambda(texts):
  result = list(filter(lambda x: (x == """".join(reversed(x))), texts))
  return result","[""palindrome_lambda([\""radar\"", \""hello\"", \""level\""]) == [\""radar\"", \""level\""]"", ""palindrome_lambda([\""world\"", \""python\"", \""madam\""]) == [\""madam\""]"", ""palindrome_lambda([\""\"", \""a\"", \""abba\""]) == [\""\"", \""a\"", \""abba\""]""]","@startuml
start

:Input list of strings (texts);
:Initialize empty list (palindromes);

partition ""Process each string in the list"" {
    :For each string in texts;
    if (Is string a palindrome?) then (yes)
        :Add string to palindromes list;
    else (no)
        :Skip string;
    endif
}

:Return palindromes list;
stop

@enduml"
405,"def check_tuplex(tuplex,tuple1):
""""""
Write a function to check whether an element exists within a tuple.
Your code should satisfy these tests:
check_tuplex((1, 2, 3), (2, 3)) == False
check_tuplex((1, 2, 3), (1, 2)) == False
check_tuplex(((1, 2), 3), (1, 2)) == True
""""""
",check_tuplex,"def check(candidate):

    assert candidate((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),'r')==True
    assert candidate((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),'5')==False
    assert candidate((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"",""e""),3)==True
","def check_tuplex(tuplex,tuple1):
  if tuple1 in tuplex:
    return True
  else:
     return False","[""check_tuplex((1, 2, 3), (2, 3)) == False"", ""check_tuplex((1, 2, 3), (1, 2)) == False"", ""check_tuplex(((1, 2), 3), (1, 2)) == True""]","@startuml
start
:check_tuplex(((1, 2), 3), (1, 2));
if (tuplex == tuple1) then (yes)
:return True;
else (no)
:return False;
endif
@enduml"
616,"def tuple_modulo(test_tup1, test_tup2):
""""""
Write a function to perfom the modulo of tuple elements in the given two tuples.
Your code should satisfy these tests:
tuple_modulo((10, 20, 30), (3, 5, 7)) == (1, 0, 2)
tuple_modulo((15, 25, 35), (4, 6, 8)) == (3, 1, 3)
tuple_modulo((100, 200, 300), (9, 11, 13)) == (1, 2, 1)
""""""
",tuple_modulo,"def check(candidate):

    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)
    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)
    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)
","def tuple_modulo(test_tup1, test_tup2):
  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","[""tuple_modulo((10, 20, 30), (3, 5, 7)) == (1, 0, 2)"", ""tuple_modulo((15, 25, 35), (4, 6, 8)) == (3, 1, 3)"", ""tuple_modulo((100, 200, 300), (9, 11, 13)) == (1, 2, 1)""]","@startuml

title Tuple Modulo

start
:Start;

if (test_tup1 and test_tup2 are not empty) then (yes)
  :Validate input;
  :Perform modulo operation;
  :Return result;
else (no)
  :Raise error;
end if

@enduml"
357,"def find_max(test_list):
""""""
Write a function to find the maximum element of all the given tuple records.
Your code should satisfy these tests:
find_max(['123', '456', '789']) == 9
find_max(['10', '20', '30', '40']) == 4
find_max(['111', '222', '333', '444']) == 4
""""""
",find_max,"def check(candidate):

    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10
    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11
    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12
","def find_max(test_list):
  res = max(int(j) for i in test_list for j in i)
  return (res) ","[""find_max(['123', '456', '789']) == 9"", ""find_max(['10', '20', '30', '40']) == 4"", ""find_max(['111', '222', '333', '444']) == 4""]","@startuml
start
:Input: test_list
:Output: max_value
:max_value = 0
:Convert all elements in test_list to integer
:max_value = max(test_list)
:Return max_value
stop
@enduml"
590,"def polar_rect(x,y):
""""""
Write a function to convert polar coordinates to rectangular coordinates.
Your code should satisfy these tests:
polar_rect(1, 1) == ((1.4142135623730951, 0.7853981633974483), (-2+2.4492935982947064e-16j))
polar_rect(0, 0) == ((0.0, 0.0), (-2+2.4492935982947064e-16j))
polar_rect(-1, -1) == ((1.4142135623730951, -2.356194490192345), (-2+2.4492935982947064e-16j))
""""""
",polar_rect,"def check(candidate):

    assert candidate(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))
    assert candidate(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))
    assert candidate(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))
","import cmath
def polar_rect(x,y):
 cn = complex(x,y)
 cn=cmath.polar(cn)
 cn1 = cmath.rect(2, cmath.pi)
 return (cn,cn1)","[""polar_rect(1, 1) == ((1.4142135623730951, 0.7853981633974483), (-2+2.4492935982947064e-16j))"", ""polar_rect(0, 0) == ((0.0, 0.0), (-2+2.4492935982947064e-16j))"", ""polar_rect(-1, -1) == ((1.4142135623730951, -2.356194490192345), (-2+2.4492935982947064e-16j))""]","@startuml
start

:Input polar coordinates (x, y);
if (Are x and y valid numbers?) then (yes)
    :Calculate magnitude (r) using sqrt(x^2 + y^2);
    :Calculate angle (theta) using atan2(y, x);
    :Convert polar coordinates to rectangular coordinates;
    :Calculate real part (a) using r * cos(theta);
    :Calculate imaginary part (b) using r * sin(theta);
    :Combine real and imaginary parts into a complex number;
    :Return ((r, theta), (a + bj));
else (no)
    :Return error or handle invalid input;
endif

stop
@enduml"
839,"def sort_tuple(tup):
""""""
Write a function to sort the tuples alphabetically by the first item of each tuple.
Your code should satisfy these tests:
sort_tuple([(3, 2), (1, 5), (4, 3)]) == [(1, 5), (3, 2), (4, 3)]
sort_tuple([(7, 9), (5, 2), (2, 4), (8, 1)]) == [(2, 4), (5, 2), (7, 9), (8, 1)]
sort_tuple([(10, 5), (2, 8), (6, 3), (4, 7)]) == [(2, 8), (4, 7), (6, 3), (10, 5)]
sort_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == [(1, 2), (3, 4), (5, 6), (7, 8)]
sort_tuple([(9, 4), (2, 7), (6, 3)]) == [(2, 7), (6, 3), (9, 4)]
""""""
",sort_tuple,"def check(candidate):

    assert candidate([(""Amana"", 28), (""Zenat"", 30), (""Abhishek"", 29),(""Nikhil"", 21), (""B"", ""C"")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]
    assert candidate([(""aaaa"", 28), (""aa"", 30), (""bab"", 29), (""bb"", 21), (""csa"", ""C"")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]
    assert candidate([(""Sarala"", 28), (""Ayesha"", 30), (""Suman"", 29),(""Sai"", 21), (""G"", ""H"")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]
","def sort_tuple(tup):
	n = len(tup)
	for i in range(n):
		for j in range(n-i-1):
			if tup[j][0] > tup[j + 1][0]:
				tup[j], tup[j + 1] = tup[j + 1], tup[j]
	return tup","[""sort_tuple([(3, 2), (1, 5), (4, 3)]) == [(1, 5), (3, 2), (4, 3)]"", ""sort_tuple([(7, 9), (5, 2), (2, 4), (8, 1)]) == [(2, 4), (5, 2), (7, 9), (8, 1)]"", ""sort_tuple([(10, 5), (2, 8), (6, 3), (4, 7)]) == [(2, 8), (4, 7), (6, 3), (10, 5)]"", ""sort_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == [(1, 2), (3, 4), (5, 6), (7, 8)]"", ""sort_tuple([(9, 4), (2, 7), (6, 3)]) == [(2, 7), (6, 3), (9, 4)]""]","@startuml
start

:Input a list of tuples;
if (Is the input a list?) then (yes)
    if (Is the list empty?) then (yes)
        :Return an empty list;
        stop
    else (no)
        :Sort the list of tuples by the first element;
        :Return the sorted list;
        stop
    endif
else (no)
    :Raise TypeError(""Input must be a list of tuples"");
    stop
endif

@enduml"
203,"def hamming_Distance(n1,n2):
""""""
Write a python function to find the hamming distance between given two integers.
Your code should satisfy these tests:
hamming_Distance(1, 4) == 2
hamming_Distance(255, 0) == 8
hamming_Distance(17, 34) == 4
""""""
",hamming_Distance,"def check(candidate):

    assert candidate(4,8) == 2
    assert candidate(2,4) == 2
    assert candidate(1,2) == 2
","def hamming_Distance(n1,n2) :
    x = n1 ^ n2
    setBits = 0
    while (x > 0) :
        setBits += x & 1
        x >>= 1
    return setBits  ","[""hamming_Distance(1, 4) == 2"", ""hamming_Distance(255, 0) == 8"", ""hamming_Distance(17, 34) == 4""]","@startuml
start

:Input two integers n1 and n2;
:Compute XOR of n1 and n2 (xor_result = n1 ^ n2);
:Initialize hamming_distance to 0;

while (xor_result > 0) is (True)
  :Increment hamming_distance by 1;
  :Clear the least significant bit of xor_result (xor_result = xor_result & (xor_result - 1));
endwhile (False)

:Return hamming_distance;
stop
@enduml"
26,"def check_k_elements(test_list, K):
""""""
Write a function to check if the given tuple list has all k elements.
Your code should satisfy these tests:
check_k_elements([(5, 5), (5, 5)], 5) == True
check_k_elements([(1, 2), (3, 4)], 5) == False
check_k_elements([(7, 7, 7), (7, 7)], 7) == True
""""""
",check_k_elements,"def check(candidate):

    assert candidate([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True
    assert candidate([(7, 7, 7), (7, 7)], 7) == True
    assert candidate([(9, 9), (9, 9, 9, 9)], 7) == False
","def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) ","[""check_k_elements([(5, 5), (5, 5)], 5) == True"", ""check_k_elements([(1, 2), (3, 4)], 5) == False"", ""check_k_elements([(7, 7, 7), (7, 7)], 7) == True""]","@startuml
start

:Input: test_list, K;
:Initialize flag = True;

if (Is test_list empty?) then (yes)
    :Set flag = False;
else (no)
    :Iterate through each tuple in test_list;
    :For each tuple, iterate through its elements;
    if (Is element != K?) then (yes)
        :Set flag = False;
        :Break loop;
    else (no)
        :Continue to next element;
    endif
endif

if (flag == True?) then (yes)
    :Return True;
else (no)
    :Return False;
endif

stop
@enduml"
379,"def surfacearea_cuboid(l,w,h):
""""""
Write a function to find the surface area of a cuboid.
Your code should satisfy these tests:
surfacearea_cuboid(2, 3, 4) == 52
surfacearea_cuboid(5, 5, 5) == 150
surfacearea_cuboid(1, 1, 1) == 6
""""""
",surfacearea_cuboid,"def check(candidate):

    assert candidate(1,2,3)==22
    assert candidate(5,7,9)==286
    assert candidate(10,15,21)==1350
","def surfacearea_cuboid(l,w,h):
  SA = 2*(l*w + l * h + w * h)
  return SA","[""surfacearea_cuboid(2, 3, 4) == 52"", ""surfacearea_cuboid(5, 5, 5) == 150"", ""surfacearea_cuboid(1, 1, 1) == 6""]","@startuml
start

:Input length (l), width (w), height (h);
if (Are l, w, h positive numbers?) then (yes)
  :Calculate surface area using formula: 2*(l*w + w*h + h*l);
  :Return surface area;
else (no)
  :Return ""Invalid input: Dimensions must be positive numbers"";
endif

stop
@enduml"
953,"def subset(ar, n):
""""""
Write a python function to find the minimun number of subsets with distinct elements.
Your code should satisfy these tests:
subset([1, 2, 2, 3, 3, 3, 4], 7) == 1
subset([5, 5, 5, 5, 5], 5) == 5
subset([10, 20, 30, 40, 50], 5) == 1
""""""
",subset,"def check(candidate):

    assert candidate([1, 2, 3, 4],4) == 1
    assert candidate([5, 6, 9, 3, 4, 3, 4],7) == 2
    assert candidate([1, 2, 3 ],3) == 1
","def subset(ar, n):
    res = 0
    ar.sort()
    for i in range(0, n) :
        count = 1
        for i in range(n - 1):
            if ar[i] == ar[i + 1]:
                count+=1
            else:
                break
        res = max(res, count)
    return res ","[""subset([1, 2, 2, 3, 3, 3, 4], 7) == 1"", ""subset([5, 5, 5, 5, 5], 5) == 5"", ""subset([10, 20, 30, 40, 50], 5) == 1""]","@startuml
start
:Initialize set to empty;
:Initialize subsets count to 0;
:Iterate over each element in input array;
if (Element not in set) then (yes)
    :Add element to set;
else (no)
    :Increment subsets count;
    :Clear set;
    :Add element to set;
endif
:Increment subsets count;
stop
@enduml"
94,"def index_minimum(test_list):
""""""
Write a function to extract the index minimum value record from the given tuples.
Your code should satisfy these tests:
index_minimum([(1, 10), (2, 5), (3, 8)]) == 2
index_minimum([(4, 20), (5, 15), (6, 25)]) == 5
index_minimum([(7, 30), (8, 20), (9, 10)]) == 9
""""""
",index_minimum,"def check(candidate):

    assert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
    assert candidate([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'
    assert candidate([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'
","from operator import itemgetter
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) ","[""index_minimum([(1, 10), (2, 5), (3, 8)]) == 2"", ""index_minimum([(4, 20), (5, 15), (6, 25)]) == 5"", ""index_minimum([(7, 30), (8, 20), (9, 10)]) == 9""]","@startuml

title index_minimum

start
:Extract index minimum value record;

if (test_list is empty) then (no
:Return empty list;
)

:Initialize minimum value and index;

repeat for each element in test_list
:Compare current element with minimum value;

if (current element is less than minimum value) then (yes
:Update minimum value and index;
)

end repeat

:Return minimum value and index;

@enduml"
820,"def check_monthnum_number(monthnum1):
""""""
Write a function to check whether the given month number contains 28 days or not.
Your code should satisfy these tests:
check_monthnum_number(2) == True
check_monthnum_number(1) == False
check_monthnum_number(12) == False
""""""
",check_monthnum_number,"def check(candidate):

    assert candidate(2)==True
    assert candidate(1)==False
    assert candidate(3)==False
","def check_monthnum_number(monthnum1):
  if monthnum1 == 2:
    return True
  else:
    return False","[""check_monthnum_number(2) == True"", ""check_monthnum_number(1) == False"", ""check_monthnum_number(12) == False""]","@startuml
start

:Input month number (monthnum1);
if (monthnum1 is an integer?) then (yes)
    if (monthnum1 >= 1 and monthnum1 <= 12?) then (yes)
        if (monthnum1 == 2?) then (yes)
            :Return True;
        else (no)
            :Return False;
        endif
    else (no)
        :Return ""Invalid month number. Must be between 1 and 12."";
    endif
else (no)
    :Return ""Invalid input. Must be an integer."";
endif

stop
@enduml"
51,"def check_equilateral(x,y,z):
""""""
Write a function to print check if the triangle is equilateral or not.
Your code should satisfy these tests:
check_equilateral(5, 5, 5) == True
check_equilateral(3, 4, 5) == False
check_equilateral(7, 7, 10) == False
""""""
",check_equilateral,"def check(candidate):

    assert candidate(6,8,12)==False
    assert candidate(6,6,12)==False
    assert candidate(6,6,6)==True
","def check_equilateral(x,y,z):
  if x == y == z:
	   return True
  else:
     return False","[""check_equilateral(5, 5, 5) == True"", ""check_equilateral(3, 4, 5) == False"", ""check_equilateral(7, 7, 10) == False""]","@startuml

title Check Equilateral Triangle

start
:Check if x, y, and z are equal;
if (x == y && y == z) then (yes)
  :Triangle is equilateral;
  stop
else (no)
  :Triangle is not equilateral;
  stop
endif

@enduml"
172,"def count_occurance(s):
""""""
Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item
Your code should satisfy these tests:
count_occurance(""standard"") == 0
count_occurance(""this is a test string with std"") == 1
""""""
",count_occurance,"def check(candidate):

    assert candidate(""letstdlenstdporstd"") == 3
    assert candidate(""truststdsolensporsd"") == 1
    assert candidate(""makestdsostdworthit"") == 2
","def count_occurance(s):
  count=0
  for i in range(len(s)):
    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):
      count = count + 1
  return count","[""count_occurance(\""standard\"") == 0"", ""count_occurance(\""this is a test string with std\"") == 1""]","@startuml
start
:Input String;
if (Is the input string empty?) then (yes)
    :Return 0;
    stop
endif
:Initialize count to 0;
:Set the input string to lowercase;
while (Does the string contain 'std'?)
    :Find the index of 'std' in the string;
    if (Is 'std' found at the start of the string?) then (yes)
        :Increment count;
        :Remove 'std' from the string;
    else (no)
        :Find the next 'std' in the string;
        if (Is 'std' found?) then (yes)
            :Increment count;
            :Remove 'std' from the string;
        else (no)
            :Break the loop;
        endif
    endif
endwhile
:Return count;
stop
@enduml"
831,"def count_Pairs(arr,n):
""""""
Write a python function to count equal element pairs from the given array.
Your code should satisfy these tests:
count_Pairs([1, 2, 3, 4, 5], 5) == 0
count_Pairs([2, 2, 2, 2, 2], 5) == 10
count_Pairs([5, 5, 5, 5, 5], 5) == 10
count_Pairs([1, 2, 2, 1, 3], 5) == 2
count_Pairs([4, 3, 2, 1, 4], 5) == 1
""""""
",count_Pairs,"def check(candidate):

    assert candidate([1,1,1,1],4) == 6
    assert candidate([1,5,1],3) == 1
    assert candidate([3,2,1,7,8,9],6) == 0
","def count_Pairs(arr,n):
    cnt = 0;
    for i in range(n):
        for j in range(i + 1,n):
            if (arr[i] == arr[j]):
                cnt += 1;
    return cnt; ","[""count_Pairs([1, 2, 3, 4, 5], 5) == 0"", ""count_Pairs([2, 2, 2, 2, 2], 5) == 10"", ""count_Pairs([5, 5, 5, 5, 5], 5) == 10"", ""count_Pairs([1, 2, 2, 1, 3], 5) == 2"", ""count_Pairs([4, 3, 2, 1, 4], 5) == 1""]","@startuml

title count_Pairs

start
:count_Pairs(arr, n);

if (n == 0) then (no pairs)
  :return 0;
else (at least one pair)

  repeat with i = 0 to n-1
    repeat with j = i+1 to n-1
      if (arr[i] == arr[j]) then (pair found)
        :count++;
      endif
    end repeat
  end repeat

  :return count;

endif

@enduml"
743,"def rotate_right(list1,m,n):
""""""
Write a function to rotate a given list by specified number of items to the right direction.
Your code should satisfy these tests:
rotate_right([1, 2, 3, 4, 5], 2, 2) == [4, 5, 1, 2, 3]
rotate_right([10, 20, 30, 40, 50, 60], 3, 3) == [40, 50, 60, 10, 20, 30]
rotate_right([7, 8, 9, 10], 1, 1) == [10, 7, 8, 9]
rotate_right([1, 2, 3, 4, 5, 6, 7], 4, 4) == [4, 5, 6, 7, 1, 2, 3]
rotate_right([5, 6, 7, 8, 9], 2, 2) == [8, 9, 5, 6, 7]
""""""
",rotate_right,"def check(candidate):

    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]
","def rotate_right(list1,m,n):
  result =  list1[-(m):]+list1[:-(n)]
  return result","[""rotate_right([1, 2, 3, 4, 5], 2, 2) == [4, 5, 1, 2, 3]"", ""rotate_right([10, 20, 30, 40, 50, 60], 3, 3) == [40, 50, 60, 10, 20, 30]"", ""rotate_right([7, 8, 9, 10], 1, 1) == [10, 7, 8, 9]"", ""rotate_right([1, 2, 3, 4, 5, 6, 7], 4, 4) == [4, 5, 6, 7, 1, 2, 3]"", ""rotate_right([5, 6, 7, 8, 9], 2, 2) == [8, 9, 5, 6, 7]""]","@startuml
start
:Input Validation;
if (m and n are positive integers?) then (yes)
  :Calculate the effective rotation;
  m = m mod length(list1);
  n = n mod length(list1);
  effective_rotation = length(list1) - m - n;
else (no)
  :Throw error;
  stop
endif
:Split the list into two parts;
part1 = list1[0:effective_rotation];
part2 = list1[effective_rotation:];
:Reverse the second part;
part2 = part2[::-1];
:Combine the two parts;
list1 = part2 + part1;
:Output the result;
output list1;
stop
@enduml"
537,"def first_repeated_word(str1):
""""""
Write a python function to find the first repeated word in a given string.
Your code should satisfy these tests:
first_repeated_word(""hello world hello"") == ""hello""
first_repeated_word(""python is great and python is fun"") == ""python""
first_repeated_word(""the quick brown fox jumps over the lazy dog"") == ""the""
first_repeated_word(""apple banana cherry apple"") == ""apple""
first_repeated_word(""one two three four five six seven eight nine ten one"") == ""one""
""""""
",first_repeated_word,"def check(candidate):

    assert candidate(""ab ca bc ab"") == ""ab""
    assert candidate(""ab ca bc"") == 'None'
    assert candidate(""ab ca bc ca ab bc"") == ""ca""
","def first_repeated_word(str1):
  temp = set()
  for word in str1.split():
    if word in temp:
      return word;
    else:
      temp.add(word)
  return 'None'","[""first_repeated_word(\""hello world hello\"") == \""hello\"""", ""first_repeated_word(\""python is great and python is fun\"") == \""python\"""", ""first_repeated_word(\""the quick brown fox jumps over the lazy dog\"") == \""the\"""", ""first_repeated_word(\""apple banana cherry apple\"") == \""apple\"""", ""first_repeated_word(\""one two three four five six seven eight nine ten one\"") == \""one\""""]","@startuml
start
:input string str1;
if ""is str1 empty?"" then (yes)
  :return ""No input provided"";
else (no)
  :split str1 into words;
  :initialize an empty dictionary;
  while ""are there more words?"" do
    :get the next word;
    if ""is the word in the dictionary?"" then
      :return the word;
    else
      :add the word to the dictionary;
    endif
  endwhile
  :return ""No repeated words"";
endif
stop
@enduml"
412,"def remove_odd(l):
""""""
Write a python function to remove odd numbers from a given list.
Your code should satisfy these tests:
remove_odd([1, 2, 3, 4, 5]) == [2, 4]
remove_odd([10, 15, 20, 25, 30]) == [10, 20, 30]
remove_odd([7, 11, 13, 17]) == [11, 17]
""""""
",remove_odd,"def check(candidate):

    assert candidate([1,2,3]) == [2]
    assert candidate([2,4,6]) == [2,4,6]
    assert candidate([10,20,3]) == [10,20]
","def remove_odd(l):
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l","[""remove_odd([1, 2, 3, 4, 5]) == [2, 4]"", ""remove_odd([10, 15, 20, 25, 30]) == [10, 20, 30]"", ""remove_odd([7, 11, 13, 17]) == [11, 17]""]","@startuml

title remove_odd(l)

start
:remove_odd(l);

if (l is not empty) then (yes)
  :for each element in l;
  :if element is odd then (yes)
    :remove element from l;
  :end if;
  :continue;
else (no)
  :return l;
endif;

end

@enduml"
93,"def power(a,b):
""""""
Write a function to calculate the value of 'a' to the power 'b'.
Your code should satisfy these tests:
power(2, 3) == 8
power(5, 0) == 1
power(0, 5) == 0
""""""
",power,"def check(candidate):

    assert candidate(3,4) == 81
    assert candidate(2,3) == 8
    assert candidate(5,5) == 3125
","def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)","[""power(2, 3) == 8"", ""power(5, 0) == 1"", ""power(0, 5) == 0""]","@startuml

title power(a, b)

start

if a == 0 and b == 0 then
  stop
  return 0
else if a == 0 and b != 0 then
  stop
  return 0
else if a != 0 and b == 0 then
  stop
  return 1
else
  loop
    if b == 0 then
      stop
      return 1
    else
      b = b - 1
      a = a * a
    endif
  endloop
  stop
  return a
endif

@enduml"
585,"def expensive_items(items,n):
""""""
Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.
""""""
",expensive_items,"def check(candidate):

    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]
    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]
    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]
","import heapq
def expensive_items(items,n):
  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])
  return expensive_items","[""expensive_items([{'name': 'laptop', 'price': 1200}, {'name': 'phone', 'price': 800}, {'name': 'tablet', 'price': 600}], 2) == [{'name': 'laptop', 'price': 1200}, {'name': 'phone', 'price': 800}]"", ""expensive_items([{'name': 'book', 'price': 15}, {'name': 'pen', 'price': 5}, {'name': 'notebook', 'price': 10}], 1) == [{'name': 'book', 'price': 15}]"", ""expensive_items([{'name': 'chair', 'price': 100}, {'name': 'desk', 'price': 300}, {'name': 'lamp', 'price': 50}], 3) == [{'name': 'desk', 'price': 300}, {'name': 'chair', 'price': 100}, {'name': 'lamp', 'price': 50}]""]","@startuml

title expensive_items

start
:expensive_items(items, n);

if (n <= 0) then (no items)
:return [];

else (n > 0)
:heapq = [];

for each item in items
:heapq.append(item);

end for

:heapq.sort(key=lambda x: x['price'], reverse=True);

:return heapq[:n];

end if

@enduml"
288,"def modular_inverse(arr, N, P):
""""""
Write a function to count array elements having modular inverse under given prime number p equal to itself.
Your code should satisfy these tests:
modular_inverse([1, 2, 3, 4], 4, 5) == 2
modular_inverse([7, 8, 9, 10], 4, 11) == 1
modular_inverse([2, 4, 6, 8], 4, 7) == 2
modular_inverse([3, 5, 7, 9], 4, 10) == 1
modular_inverse([1, 3, 5, 7, 9], 5, 8) == 5
""""""
",modular_inverse,"def check(candidate):

    assert candidate([ 1, 6, 4, 5 ], 4, 7) == 2
    assert candidate([1, 3, 8, 12, 12], 5, 13) == 3
    assert candidate([2, 3, 4, 5], 4, 6) == 1
","def modular_inverse(arr, N, P):
	current_element = 0
	for i in range(0, N):
		if ((arr[i] * arr[i]) % P == 1):
			current_element = current_element + 1
	return current_element","[""modular_inverse([1, 2, 3, 4], 4, 5) == 2"", ""modular_inverse([7, 8, 9, 10], 4, 11) == 1"", ""modular_inverse([2, 4, 6, 8], 4, 7) == 2"", ""modular_inverse([3, 5, 7, 9], 4, 10) == 1"", ""modular_inverse([1, 3, 5, 7, 9], 5, 8) == 5""]","@startuml
start
:Input Validation;
if (arr is empty?) then (yes)
    :Return 0;
    stop
endif
:Initialize count = 0;
:Initialize N and P;
:Initialize i = 0;
:Start Loop;
while (i < N)
    :Calculate modular inverse;
    if (arr[i]^(P-2) % P == arr[i]) then (modular inverse exists)
        :Increment count;
    endif
    :Increment i;
endwhile
:Return count;
stop
@enduml"
894,"def float_to_tuple(test_str):
""""""
Write a function to convert the given string of float type into tuple.
Your code should satisfy these tests:
float_to_tuple(""1.1, 2.2, 3.3"") == (1.1, 2.2, 3.3)
float_to_tuple(""0.0, -1.1, 4.4"") == (0.0, -1.1, 4.4)
float_to_tuple(""100.100, 200.200, 300.300"") == (100.100, 200.200, 300.300)
""""""
",float_to_tuple,"def check(candidate):

    assert candidate(""1.2, 1.3, 2.3, 2.4, 6.5"") == (1.2, 1.3, 2.3, 2.4, 6.5)
    assert candidate(""2.3, 2.4, 5.6, 5.4, 8.9"") == (2.3, 2.4, 5.6, 5.4, 8.9)
    assert candidate(""0.3, 0.5, 7.8, 9.4"") == (0.3, 0.5, 7.8, 9.4)
","def float_to_tuple(test_str):
  res = tuple(map(float, test_str.split(', ')))
  return (res) ","[""float_to_tuple(\""1.1, 2.2, 3.3\"") == (1.1, 2.2, 3.3)"", ""float_to_tuple(\""0.0, -1.1, 4.4\"") == (0.0, -1.1, 4.4)"", ""float_to_tuple(\""100.100, 200.200, 300.300\"") == (100.100, 200.200, 300.300)""]","@startuml

start
: float_to_tuple(test_str);

if (test_str.isdigit()) then (yes)
  : return (test_str);
else (no)
  : split test_str into a list of floats;
  : convert each float in the list to a tuple;
  : return the list of tuples;
endif

@enduml"
922,"def max_product(arr):
""""""
Write a function to find a pair with the highest product from a given array of integers.
Your code should satisfy these tests:
max_product([1, 2, 3, 4, 5]) == (4, 5)
max_product([-10, -20, 1, 3]) == (-10, -20)
max_product([0, 2, 3, -1]) == (2, 3)
""""""
",max_product,"def check(candidate):

    assert candidate([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)
    assert candidate([0, -1, -2, -4, 5, 0, -6])==(-4, -6)
    assert candidate([1, 3, 5, 6, 8, 9])==(8,9)
","def max_product(arr):
    arr_len = len(arr)
    if (arr_len < 2):
        return None
    x = arr[0]; y = arr[1]
    for i in range(0, arr_len):
        for j in range(i + 1, arr_len):
            if (arr[i] * arr[j] > x * y):
                x = arr[i]; y = arr[j]
    return x,y   ","[""max_product([1, 2, 3, 4, 5]) == (4, 5)"", ""max_product([-10, -20, 1, 3]) == (-10, -20)"", ""max_product([0, 2, 3, -1]) == (2, 3)""]","@startuml
start
:Input array;
if (Array is empty?) then (true)
  :Return error;
else (false)
  :Initialize max_product as the product of the first two elements;
  :Initialize pair as the first two elements;
endif
:Initialize i as 0;
while (i < length of array)
  :Initialize j as i + 1;
  while (j < length of array)
    :Calculate product of arr[i] and arr[j];
    if (product > max_product) then (true)
      :max_product = product;
      :pair = (arr[i], arr[j]);
    endif
    :j = j + 1;
  endwhile
  :i = i + 1;
endwhile
:Return pair;
stop
@enduml"
483,"def first_Factorial_Divisible_Number(x):
""""""
Write a python function to find the first natural number whose factorial is divisible by x.
Your code should satisfy these tests:
first_Factorial_Divisible_Number(1) == 1
first_Factorial_Divisible_Number(2) == 1
first_Factorial_Divisible_Number(3) == 2
first_Factorial_Divisible_Number(4) == 3
first_Factorial_Divisible_Number(5) == 4
""""""
",first_Factorial_Divisible_Number,"def check(candidate):

    assert candidate(10) == 5
    assert candidate(15) == 5
    assert candidate(5) == 4
","def first_Factorial_Divisible_Number(x):
    i = 1;
    fact = 1;
    for i in range(1,x):
        fact = fact * i
        if (fact % x == 0):
            break
    return i ","[""first_Factorial_Divisible_Number(1) == 1"", ""first_Factorial_Divisible_Number(2) == 1"", ""first_Factorial_Divisible_Number(3) == 2"", ""first_Factorial_Divisible_Number(4) == 3"", ""first_Factorial_Divisible_Number(5) == 4""]","@startuml
start
:Input x;
if (x <= 0) then (return ""Input must be a positive integer"")
:n = 1;
:factorial = 1;
while (factorial % x != 0)
    :n += 1;
    :factorial *= n;
endwhile
:return n;
stop
@enduml"
745,"def divisible_by_digits(startnum, endnum):
""""""
Write a function to find numbers within a given range where every number is divisible by every digit it contains.
Your code should satisfy these tests:
divisible_by_digits(10, 20) == [11, 12, 15]
divisible_by_digits(50, 60) == [55]
divisible_by_digits(100, 110) == []
""""""
",divisible_by_digits,"def check(candidate):

    assert candidate(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
    assert candidate(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert candidate(20,25)==[22, 24]
","def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]","[""divisible_by_digits(10, 20) == [11, 12, 15]"", ""divisible_by_digits(50, 60) == [55]"", ""divisible_by_digits(100, 110) == []""]","@startuml
start

:Initialize result list;
:Loop through each number in the range;
:    Initialize flag to True;
:    Convert number to string;
:    Loop through each digit in the number;
:        Convert digit to integer;
:        If digit is zero or number modulo digit is not zero;
:            Set flag to False;
:            Break;
:    End Loop;
:    If flag is True;
:        Add number to result list;
:End Loop;

:Return result list;

stop
@enduml"
130,"def max_occurrences(nums):
""""""
Write a function to find the item with maximum frequency in a given list.
Your code should satisfy these tests:
max_occurrences([1, 3, 2, 1, 4, 1, 3, 2, 1]) == (1, 4)
max_occurrences(['apple', 'banana', 'apple', 'orange', 'banana', 'apple']) == ('apple', 3)
max_occurrences([10, 20, 20, 10, 10, 30, 20, 20]) == (20, 4)
""""""
",max_occurrences,"def check(candidate):

    assert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)
    assert candidate([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)
    assert candidate([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)
","from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1])
    return result","[""max_occurrences([1, 3, 2, 1, 4, 1, 3, 2, 1]) == (1, 4)"", ""max_occurrences(['apple', 'banana', 'apple', 'orange', 'banana', 'apple']) == ('apple', 3)"", ""max_occurrences([10, 20, 20, 10, 10, 30, 20, 20]) == (20, 4)""]","@startuml
start

:Input list **nums**;
if (Is **nums** empty?) then (yes)
    :Return None or raise an error;
    stop
else (no)
    :Initialize an empty dictionary **freq_map**;
    :Initialize variables **max_item** and **max_count**;
    :Iterate through each item in **nums**;
    if (Is item in **freq_map**?) then (yes)
        :Increment its count in **freq_map**;
    else (no)
        :Add item to **freq_map** with count = 1;
    endif
    :Check if current item's count > **max_count**;
    if (yes) then (yes)
        :Update **max_item** and **max_count**;
    else (no)
        :Continue to next item;
    endif
    :Repeat until all items are processed;
    :Return tuple (**max_item**, **max_count**);
    stop
endif

@enduml"
938,"def find_closet(A, B, C, p, q, r):
""""""
Write a function to find three closest elements from three sorted arrays.
Your code should satisfy these tests:
find_closet([1, 4, 10], [2, 15, 20], [10, 12], 3, 3, 2) == (10, 15, 10)
find_closet([5, 10, 15], [3, 6, 9], [8, 12, 16], 3, 3, 3) == (10, 9, 8)
find_closet([1, 2, 3], [4, 5, 6], [7, 8, 9], 3, 3, 3) == (3, 4, 7)
""""""
",find_closet,"def check(candidate):

    assert candidate([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)
    assert candidate([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)
    assert candidate([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)
","import sys

def find_closet(A, B, C, p, q, r):
	diff = sys.maxsize
	res_i = 0
	res_j = 0
	res_k = 0
	i = 0
	j = 0
	k = 0
	while(i < p and j < q and k < r):
		minimum = min(A[i], min(B[j], C[k]))
		maximum = max(A[i], max(B[j], C[k]));
		if maximum-minimum < diff:
			res_i = i
			res_j = j
			res_k = k
			diff = maximum - minimum;
		if diff == 0:
			break
		if A[i] == minimum:
			i = i+1
		elif B[j] == minimum:
			j = j+1
		else:
			k = k+1
	return A[res_i],B[res_j],C[res_k]","[""find_closet([1, 4, 10], [2, 15, 20], [10, 12], 3, 3, 2) == (10, 15, 10)"", ""find_closet([5, 10, 15], [3, 6, 9], [8, 12, 16], 3, 3, 3) == (10, 9, 8)"", ""find_closet([1, 2, 3], [4, 5, 6], [7, 8, 9], 3, 3, 3) == (3, 4, 7)""]","@startuml
start
:Input Validation;
if (A, B, C are not sorted?) then (yes)
    :Return Error;
    stop
endif
:Initialize variables;
:Set minimum difference to a large number;
:Set result variables to None;
:Set i, j, k to 0;
while (i < p and j < q and k < r)
    :Calculate the difference;
    if (diff < min_diff) then
        :Update result variables;
        :Update min_diff;
    endif
    :Increment the smallest element index;
    if (A[i] < B[j] and A[i] < C[k])
        :Increment i;
    else if (B[j] < A[i] and B[j] < C[k])
        :Increment j;
    else
        :Increment k;
    endif
endwhile
:Return result variables;
stop
@enduml"
623,"def nth_nums(nums,n):
""""""
Write a function to find the n-th power of individual elements in a list using lambda function.
Your code should satisfy these tests:
nth_nums([1, 2, 3, 4], 2) == [1, 4, 9, 16]
nth_nums([5, 6, 7], 3) == [125, 216, 343]
nth_nums([0, 10, 20], 1) == [0, 10, 20]
""""""
",nth_nums,"def check(candidate):

    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    assert candidate([10,20,30],3)==([1000, 8000, 27000])
    assert candidate([12,15],5)==([248832, 759375])
","def nth_nums(nums,n):
 nth_nums = list(map(lambda x: x ** n, nums))
 return nth_nums","[""nth_nums([1, 2, 3, 4], 2) == [1, 4, 9, 16]"", ""nth_nums([5, 6, 7], 3) == [125, 216, 343]"", ""nth_nums([0, 10, 20], 1) == [0, 10, 20]""]","@startuml
start

:Input list of numbers (nums) and power (n);
if (Is nums a valid list and n a valid integer?) then (yes)
    :Initialize an empty list (result) to store the nth powers;
    :Iterate over each number in nums;
    :Use lambda function to raise the number to the nth power;
    :Append the result to the result list;
    :Check if all elements have been processed?;
    if (yes) then (yes)
        :Return the result list;
    else (no)
        :Continue iteration;
    endif
else (no)
    :Return an error message or handle invalid input;
endif

stop
@enduml"
25,"def find_Product(arr,n):
""""""
Write a python function to find the product of non-repeated elements in a given array.
Your code should satisfy these tests:
find_Product([1, 2, 3, 4, 5], 5) == 120
find_Product([2, 2, 3, 3, 4], 5) == 24
find_Product([1, 1, 1, 1, 1], 5) == 1
""""""
",find_Product,"def check(candidate):

    assert candidate([1,1,2,3],4) == 6
    assert candidate([1,2,3,1,1],5) == 6
    assert candidate([1,1,4,5,6],5) == 120
","def find_Product(arr,n):
    arr.sort()
    prod = 1
    for i in range(0,n,1):
        if (arr[i - 1] != arr[i]):
            prod = prod * arr[i]
    return prod; ","[""find_Product([1, 2, 3, 4, 5], 5) == 120"", ""find_Product([2, 2, 3, 3, 4], 5) == 24"", ""find_Product([1, 1, 1, 1, 1], 5) == 1""]","@startuml

title find_Product

start
:find_Product(arr, n);

if (n == 0) then (no elements)
:return 1;
else (at least one element)

:product = 1;

for (i = 0; i < n; i++) do
:product = product * arr[i];
end for

:return product;

@enduml"
352,"def unique_Characters(str):
""""""
Write a python function to check whether all the characters in a given string are unique.
Your code should satisfy these tests:
unique_Characters(""abcdef"") == True
unique_Characters(""hello"") == False
unique_Characters(""1234567890"") == True
""""""
",unique_Characters,"def check(candidate):

    assert candidate('aba') == False
    assert candidate('abc') == True
    assert candidate('abab') == False
","def unique_Characters(str):
    for i in range(len(str)):
        for j in range(i + 1,len(str)):
            if (str[i] == str[j]):
                return False;
    return True;","[""unique_Characters(\""abcdef\"") == True"", ""unique_Characters(\""hello\"") == False"", ""unique_Characters(\""1234567890\"") == True""]","@startuml
start

:Input string (str);
:Initialize an empty set (char_set);

if (Is str empty?) then (yes)
    :Return True;
    stop
else (no)
    :Iterate through each character in str;
    if (Is character in char_set?) then (yes)
        :Return False;
        stop
    else (no)
        :Add character to char_set;
    endif
endif

:Return True;
stop

@enduml"
956,"def split_list(text):
""""""
Write a function to split the given string at uppercase letters by using regex.
Your code should satisfy these tests:
split_list(""HelloWorld"") == ['Hello', 'World']
split_list(""SplitCamelCase"") == ['Split', 'Camel', 'Case']
split_list(""PythonIsFun"") == ['Python', 'Is', 'Fun']
""""""
",split_list,"def check(candidate):

    assert candidate(""LearnToBuildAnythingWithGoogle"") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']
    assert candidate(""ApmlifyingTheBlack+DeveloperCommunity"") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']
    assert candidate(""UpdateInTheGoEcoSystem"") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']
","import re
def split_list(text):
  return (re.findall('[A-Z][^A-Z]*', text))","[""split_list(\""HelloWorld\"") == ['Hello', 'World']"", ""split_list(\""SplitCamelCase\"") == ['Split', 'Camel', 'Case']"", ""split_list(\""PythonIsFun\"") == ['Python', 'Is', 'Fun']""]","@startuml

start
:Initialize empty list result;
:Initialize start_index to 0;
:Initialize end_index to 1;
:while end_index < length of text do (true)
    :if character at end_index is uppercase then (true)
        :Append text from start_index to end_index - 1 to result list;
        :Update start_index to end_index;
    else (false)
        :Increment end_index by 1;
    endif
endwhile
:Append remaining text from start_index to end of text to result list;
return result;
stop

@enduml"
112,"def perimeter(diameter,height):
""""""
Write a python function to find the perimeter of a cylinder.
Your code should satisfy these tests:
perimeter(5, 10) == 30
perimeter(3, 7) == 20
perimeter(8, 15) == 46
""""""
",perimeter,"def check(candidate):

    assert candidate(2,4) == 12
    assert candidate(1,2) == 6
    assert candidate(3,1) == 8
","def perimeter(diameter,height) :
    return 2*(diameter+height)  ","[""perimeter(5, 10) == 30"", ""perimeter(3, 7) == 20"", ""perimeter(8, 15) == 46""]","@startuml

title Perimeter of a Cylinder

start
:Calculate perimeter;
if (diameter <= 0 or height <= 0) then (no)
:Invalid input;
:Return -1;
else (yes)
:Calculate perimeter;
:Return perimeter;
endif

@enduml"
698,"def sort_dict_item(test_dict):
""""""
Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.
Your code should satisfy these tests:
sort_dict_item({(3, 2): 'a', (1, 4): 'b', (2, 3): 'c'}) == {(1, 4): 'b', (3, 2): 'a', (2, 3): 'c'}
sort_dict_item({(5, 1): 'x', (2, 2): 'y', (4, 3): 'z'}) == {(5, 1): 'x', (2, 2): 'y', (4, 3): 'z'}
sort_dict_item({(1, 1): 'm', (3, 3): 'n', (2, 2): 'o'}) == {(1, 1): 'm', (2, 2): 'o', (3, 3): 'n'}
""""""
",sort_dict_item,"def check(candidate):

    assert candidate({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}
    assert candidate({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}
    assert candidate({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}
","def sort_dict_item(test_dict):
  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}
  return  (res)
","[""sort_dict_item({(3, 2): 'a', (1, 4): 'b', (2, 3): 'c'}) == {(1, 4): 'b', (3, 2): 'a', (2, 3): 'c'}"", ""sort_dict_item({(5, 1): 'x', (2, 2): 'y', (4, 3): 'z'}) == {(5, 1): 'x', (2, 2): 'y', (4, 3): 'z'}"", ""sort_dict_item({(1, 1): 'm', (3, 3): 'n', (2, 2): 'o'}) == {(1, 1): 'm', (2, 2): 'o', (3, 3): 'n'}""]","@startuml
start
:Input: test_dict
if (test_dict is not a dictionary?) then (yes)
    :Raise TypeError
    stop
endif
:Sort test_dict by tuple product of keys
:Return sorted_dict
stop
@enduml"
251,"def insert_element(list,element):
""""""
Write a function to insert an element before each element of a list.
Your code should satisfy these tests:
insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]
insert_element(['a', 'b'], 'x') == ['x', 'a', 'x', 'b']
insert_element([True, False], None) == [None, True, None, False]
""""""
",insert_element,"def check(candidate):

    assert candidate(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']
    assert candidate(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']
    assert candidate(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']
","def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list","[""insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]"", ""insert_element(['a', 'b'], 'x') == ['x', 'a', 'x', 'b']"", ""insert_element([True, False], None) == [None, True, None, False]""]","@startuml
start

:Input list and element;
if (Is list valid?) then (yes)
    :Initialize an empty result list;
    :Iterate over each element in the input list;
    :Add the given element to the result list;
    :Add the current list element to the result list;
    :Check if there are more elements in the list;
    if (More elements?) then (yes)
        :Continue iteration;
    else (no)
        :Return the result list;
    endif
else (no)
    :Return an empty list or raise an error;
endif

stop
@enduml"
528,"def min_length(list1):
""""""
Write a function to find the list of lists with minimum length.
Your code should satisfy these tests:
min_length([""apple"", ""banana"", ""pear""]) == (4, 'apple')
min_length([""dog"", ""cat"", ""elephant""]) == (3, 'cat')
min_length([""sun"", ""moon"", ""star""]) == (3, 'moon')
""""""
",min_length,"def check(candidate):

    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])
    assert candidate([[1], [5, 7], [10, 12, 14,15]])==(1, [1])
    assert candidate([[5], [15,20,25]])==(1, [5])
","def min_length(list1):
   min_length = min(len(x) for x in  list1 )
   min_list = min((x) for x in   list1)
   return(min_length, min_list)     ","[""min_length([\""apple\"", \""banana\"", \""pear\""]) == (4, 'apple')"", ""min_length([\""dog\"", \""cat\"", \""elephant\""]) == (3, 'cat')"", ""min_length([\""sun\"", \""moon\"", \""star\""]) == (3, 'moon')""]","@startuml

title min_length

start
:min_length(list1);

if (len(list1) == 0) then (no elements)
:return (0, None);
else (at least one element)

:min_length = len(list1[0]);
:min_element = list1[0];

for each element in list1
:if (len(element) < min_length) then
:min_length = len(element);
:min_element = element;
:end if
:end for

:return (min_length, min_element);

@enduml"
734,"def sum_Of_Subarray_Prod(arr,n):
""""""
Write a python function to find sum of products of all possible subarrays.
Your code should satisfy these tests:
sum_Of_Subarray_Prod([1, 2, 3], 3) == 20
sum_Of_Subarray_Prod([4, 5, 6, 7], 4) == 1284
sum_Of_Subarray_Prod([10, 20, 30], 3) == 6860
""""""
",sum_Of_Subarray_Prod,"def check(candidate):

    assert candidate([1,2,3],3) == 20
    assert candidate([1,2],2) == 5
    assert candidate([1,2,3,4],4) == 84
","def sum_Of_Subarray_Prod(arr,n):
    ans = 0
    res = 0
    i = n - 1
    while (i >= 0):
        incr = arr[i]*(1 + res)
        ans += incr
        res = incr
        i -= 1
    return (ans)","[""sum_Of_Subarray_Prod([1, 2, 3], 3) == 20"", ""sum_Of_Subarray_Prod([4, 5, 6, 7], 4) == 1284"", ""sum_Of_Subarray_Prod([10, 20, 30], 3) == 6860""]","@startuml

title sum_Of_Subarray_Prod

start
:Input: arr, n;

if (n == 0) then (no subarrays)
:Return 0;
else (at least one subarray)

:Initialize sum = 0;

for (i = 0; i < n; i++) do
:Initialize prod = 1;

for (j = i; j < n; j++) do
:Multiply prod by arr[j];

:Add prod to sum;

end for

:Return sum;

end for

:Return sum;

end if

@enduml"
501,"def ngcd(x,y):
""""""
Write a python function to find common divisor between two numbers in a given pair.
Your code should satisfy these tests:
ngcd(12, 18) == 6
ngcd(56, 98) == 14
ngcd(17, 23) == 1
ngcd(100, 200) == 100
ngcd(81, 27) == 27
""""""
",ngcd,"def check(candidate):

    assert num_comm_div(2,4) == 2
    assert num_comm_div(2,8) == 2
    assert num_comm_div(12,24) == 6
","def ngcd(x,y):
    i=1
    while(i<=x and i<=y):
        if(x%i==0 and y%i == 0):
            gcd=i;
        i+=1
    return gcd;
def num_comm_div(x,y):
  n = ngcd(x,y)
  result = 0
  z = int(n**0.5)
  i = 1
  while(i <= z):
    if(n % i == 0):
      result += 2
      if(i == n/i):
        result-=1
    i+=1
  return result","[""ngcd(12, 18) == 6"", ""ngcd(56, 98) == 14"", ""ngcd(17, 23) == 1"", ""ngcd(100, 200) == 100"", ""ngcd(81, 27) == 27""]","@startuml
start
:Input x, y;
if (x > y) then
    :x = x mod y;
    goto if_end;
else
    :y = y mod x;
    goto if_end;
endif
if_end:
while (y != 0)
    :x = y;
    :y = x mod y;
endwhile
:return x;
stop
@enduml"
237,"def check_occurences(test_list):
""""""
Write a function to check the occurrences of records which occur similar times in the given tuples.
Your code should satisfy these tests:
check_occurences([['a', 'b'], ['b', 'a'], ['c', 'd']]) == {('a', 'b'): 2, ('c', 'd'): 1}
check_occurences([['x', 'y', 'z'], ['z', 'y', 'x'], ['x', 'z', 'y']]) == {('x', 'y', 'z'): 3}
check_occurences([['m', 'n'], ['n', 'm'], ['p', 'q'], ['q', 'p'], ['r', 's']]) == {('m', 'n'): 2, ('p', 'q'): 2, ('r', 's'): 1}
""""""
",check_occurences,"def check(candidate):

    assert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}
    assert candidate([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}
    assert candidate([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}
","from collections import Counter
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) ","[""check_occurences([['a', 'b'], ['b', 'a'], ['c', 'd']]) == {('a', 'b'): 2, ('c', 'd'): 1}"", ""check_occurences([['x', 'y', 'z'], ['z', 'y', 'x'], ['x', 'z', 'y']]) == {('x', 'y', 'z'): 3}"", ""check_occurences([['m', 'n'], ['n', 'm'], ['p', 'q'], ['q', 'p'], ['r', 's']]) == {('m', 'n'): 2, ('p', 'q'): 2, ('r', 's'): 1}""]","@startuml

start
:check_occurences(test_list);

if (test_list is empty) then (no)
:return empty dictionary;

else (yes)
:initialize result dictionary;
:for each tuple in test_list;
:   if (tuple is already in result dictionary) then (no)
:       increment count in result dictionary;
:   else (yes)
:       add tuple to result dictionary with count 1;
:   endif;
:endfor;
:return result dictionary;

endif;

@enduml"
919,"def multiply_list(items):
""""""
Write a python function to multiply all items in the list.
Your code should satisfy these tests:
multiply_list([1, 2, 3, 4]) == 24
multiply_list([5, 5, 5]) == 125
multiply_list([0, 1, 2, 3]) == 0
""""""
",multiply_list,"def check(candidate):

    assert candidate([1,-2,3]) == -6
    assert candidate([1,2,3,4]) == 24
    assert candidate([3,1,2,3]) == 18
","def multiply_list(items):
    tot = 1
    for x in items:
        tot *= x
    return tot","[""multiply_list([1, 2, 3, 4]) == 24"", ""multiply_list([5, 5, 5]) == 125"", ""multiply_list([0, 1, 2, 3]) == 0""]","@startuml

title Multiply List

start
:Start;

if (items is not empty) then (yes)
  :Multiply all items in the list;
  :Return the product;
else (no)
  :Return 0;
endif

stop
:End;

@enduml"
387,"def even_or_odd(N):
""""""
Write a python function to check whether the hexadecimal number is even or odd.
Your code should satisfy these tests:
even_or_odd(""1234"") == ""Even""
even_or_odd(""1235"") == ""Odd""
even_or_odd(""ABC"") == ""Even""
""""""
",even_or_odd,"def check(candidate):

    assert candidate(""AB3454D"") ==""Odd""
    assert candidate(""ABC"") == ""Even""
    assert candidate(""AAD"") == ""Odd""
","def even_or_odd(N):
    l = len(N)
    if (N[l-1] =='0'or N[l-1] =='2'or
        N[l-1] =='4'or N[l-1] =='6'or
        N[l-1] =='8'or N[l-1] =='A'or
        N[l-1] =='C'or N[l-1] =='E'):
        return (""Even"")
    else:
        return (""Odd"") ","[""even_or_odd(\""1234\"") == \""Even\"""", ""even_or_odd(\""1235\"") == \""Odd\"""", ""even_or_odd(\""ABC\"") == \""Even\""""]","@startuml
start

:Input hexadecimal string (N);
:Convert N from hexadecimal to integer (num);
if (num % 2 == 0?) then (yes)
    :Return ""Even"";
else (no)
    :Return ""Odd"";
endif

stop
@enduml"
655,"def fifth_Power_Sum(n):
""""""
Write a python function to find the sum of fifth power of n natural numbers.
Your code should satisfy these tests:
fifth_Power_Sum(1) == 1
fifth_Power_Sum(2) == 33
fifth_Power_Sum(3) == 276
""""""
",fifth_Power_Sum,"def check(candidate):

    assert candidate(2) == 33
    assert candidate(4) == 1300
    assert candidate(3) == 276
","def fifth_Power_Sum(n) :
    sm = 0
    for i in range(1,n+1) :
        sm = sm + (i*i*i*i*i)
    return sm ","[""fifth_Power_Sum(1) == 1"", ""fifth_Power_Sum(2) == 33"", ""fifth_Power_Sum(3) == 276""]","@startuml

start
:fifth_Power_Sum(n);
if (n == 1) then (yes)
  :return 1;
else (no)
  :sum = 0;
  :for i in range(1, n+1):
    :sum += i**5;
  :end for;
  :return sum;
endif;

@enduml"
191,"def check_monthnumber(monthname3):
""""""
Write a function to check whether the given month name contains 30 days or not.
Your code should satisfy these tests:
check_monthnumber(""April"") == True
check_monthnumber(""February"") == False
check_monthnumber(""November"") == True
""""""
",check_monthnumber,"def check(candidate):

    assert candidate(""February"")==False
    assert candidate(""June"")==True
    assert candidate(""April"")==True
","def check_monthnumber(monthname3):
  if monthname3 ==""April"" or monthname3== ""June"" or monthname3== ""September"" or monthname3== ""November"":
    return True
  else:
    return False","[""check_monthnumber(\""April\"") == True"", ""check_monthnumber(\""February\"") == False"", ""check_monthnumber(\""November\"") == True""]","@startuml
start

:Input monthname3;
if (Is monthname3 valid?) then (yes)
    if (monthname3 in [""April"", ""June"", ""September"", ""November""]) then (yes)
        :Return True;
    else (no)
        if (monthname3 == ""February"") then (yes)
            :Return False;
        else (no)
            :Return False (31-day month);
        endif
    endif
else (no)
    :Return ""Invalid input"";
endif

stop
@enduml"
333,"def Sort(sub_li):
""""""
Write a python function to sort a list according to the second element in sublist.
Your code should satisfy these tests:
Sort([(1, 3), (4, 1), (5, 2)]) == [(4, 1), (5, 2), (1, 3)]
Sort([(2, 5), (3, 2), (1, 4)]) == [(3, 2), (1, 4), (2, 5)]
Sort([(7, 0), (6, 1), (5, 3)]) == [(7, 0), (6, 1), (5, 3)]
""""""
",Sort,"def check(candidate):

    assert candidate([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]
    assert candidate([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]
    assert candidate([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]
","def Sort(sub_li):
    sub_li.sort(key = lambda x: x[1])
    return sub_li ","[""Sort([(1, 3), (4, 1), (5, 2)]) == [(4, 1), (5, 2), (1, 3)]"", ""Sort([(2, 5), (3, 2), (1, 4)]) == [(3, 2), (1, 4), (2, 5)]"", ""Sort([(7, 0), (6, 1), (5, 3)]) == [(7, 0), (6, 1), (5, 3)]""]","@startuml

title Sort List

start
:Sort([sub_li]);

if (sub_li.length > 1) then (yes)
  :sub_li.sort(key=lambda x: x[1]);
else (no)
  :return sub_li;
endif

:return sub_li;

@enduml"
477,"def is_lower(string):
""""""
Write a python function to convert the given string to lower case.
Your code should satisfy these tests:
is_lower(""hello"") == 'hello'
is_lower(""HELLO"") == 'hello'
is_lower(""HelloWorld"") == 'helloworld'
""""""
",is_lower,"def check(candidate):

    assert candidate(""InValid"") == ""invalid""
    assert candidate(""TruE"") == ""true""
    assert candidate(""SenTenCE"") == ""sentence""
","def is_lower(string):
  return (string.lower())","[""is_lower(\""hello\"") == 'hello'"", ""is_lower(\""HELLO\"") == 'hello'"", ""is_lower(\""HelloWorld\"") == 'helloworld'""]","@startuml
start

:Input a string;
if (Is the input a string?) then (yes)
    :Convert the string to lowercase;
    :Return the lowercase string;
else (no)
    :Raise an error or handle invalid input;
endif

stop
@enduml"
344,"def count_Odd_Squares(n,m):
""""""
Write a python function to find number of elements with odd factors in a given range.
Your code should satisfy these tests:
count_Odd_Squares(1, 10) == 3
count_Odd_Squares(5, 25) == 3
count_Odd_Squares(16, 49) == 4
""""""
",count_Odd_Squares,"def check(candidate):

    assert candidate(5,100) == 8
    assert candidate(8,65) == 6
    assert candidate(2,5) == 1
","def count_Odd_Squares(n,m):
    return int(m**0.5) - int((n-1)**0.5) ","[""count_Odd_Squares(1, 10) == 3"", ""count_Odd_Squares(5, 25) == 3"", ""count_Odd_Squares(16, 49) == 4""]","@startuml
start
:n = 1;
:m = 10;
:count = 0;
while (n <= m) is (n <= m)
    :i = 1;
    while (i <= sqrt(n)) is (i <= sqrt(n))
        :factor_count = 0;
        :is_square = i * i == n;
        if (is_square) is (i * i == n) then (is_square)
            :factor_count += 1;
        endif
        :n_i = n / i;
        if (n_i == i) is (n_i == i) then (n_i == i)
            :factor_count += 1;
        endif
        :i += 1;
    endwhile
    if (factor_count % 2 == 1) is (factor_count % 2 == 1) then (factor_count % 2 == 1)
        :count += 1;
    endif
    :n += 1;
endwhile
:count;
stop
@enduml"
222,"def check_type(test_tuple):
""""""
Write a function to check if all the elements in tuple have same data type or not.
Your code should satisfy these tests:
check_type((1, 2, 3)) == True
check_type((1, '2', 3)) == False
check_type(('a', 'b', 'c')) == True
""""""
",check_type,"def check(candidate):

    assert candidate((5, 6, 7, 3, 5, 6) ) == True
    assert candidate((1, 2, ""4"") ) == False
    assert candidate((3, 2, 1, 4, 5) ) == True
","def check_type(test_tuple):
  res = True
  for ele in test_tuple:
    if not isinstance(ele, type(test_tuple[0])):
      res = False
      break
  return (res) ","[""check_type((1, 2, 3)) == True"", ""check_type((1, '2', 3)) == False"", ""check_type(('a', 'b', 'c')) == True""]","@startuml
start

:Input tuple (test_tuple);
:Get the first element's data type (first_type);
:Initialize index (i = 1);

while (i < length of test_tuple?) is (yes)
    :Get the data type of the current element (current_type);
    if (current_type == first_type?) then (yes)
        :Increment index (i = i + 1);
    else (no)
        :Return False;
        stop
    endif
endwhile (no)

:Return True;
stop

@enduml"
243,"def sort_on_occurence(lst):
""""""
Write a function to sort the given list based on the occurrence of first element of tuples.
""""""
",sort_on_occurence,"def check(candidate):

    assert candidate([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]
    assert candidate([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]
    assert candidate([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]
","def sort_on_occurence(lst):
	dct = {}
	for i, j in lst:
		dct.setdefault(i, []).append(j)
	return ([(i, *dict.fromkeys(j), len(j))
				for i, j in dct.items()]) ","[""sort_on_occurence([(1, 'a'), (2, 'b'), (1, 'c'), (2, 'd'), (3, 'e'), (1, 'f')]) == [(1, 'a', 'c', 'f', 3), (2, 'b', 'd', 2), (3, 'e', 1)]"", ""sort_on_occurence([(5, 'x'), (6, 'y'), (5, 'z'), (6, 'w')]) == [(5, 'x', 'z', 2), (6, 'y', 'w', 2)]"", ""sort_on_occurence([(4, 'p'), (4, 'q'), (4, 'r')]) == [(4, 'p', 'q', 'r', 3)]"", ""sort_on_occurence([(7, 'm'), (8, 'n')]) == [(7, 'm', 1), (8, 'n', 1)]"", ""sort_on_occurence([(9, 's'), (9, 't'), (9, 'u')]) == [(9, 's', 't', 'u', 3)]""]","@startuml
start
:Input List;
:Validate Input;
if (Is List Empty?) then (yes)
    :Return Empty List;
    stop
endif
:Initialize Dictionary;
:Iterate over List;
    :Get First Element of Tuple;
    :Check if First Element Exists in Dictionary;
    if (Exists?) then (yes)
        :Increment Count;
    else (no)
        :Add to Dictionary with Count 1;
    endif
    :Add Tuple to Dictionary;
end
:Sort Dictionary Based on Count;
:Create Output List;
:Iterate over Sorted Dictionary;
    :Create New Tuple;
    :Add First Element of Tuple;
    :Add Tuple to Output List;
end
:Return Output List;
stop
@enduml"
661,"def max_sum_of_three_consecutive(arr, n):
""""""
Write a function to find the maximum sum that can be formed which has no three consecutive elements present.
Your code should satisfy these tests:
max_sum_of_three_consecutive([1, 2, 3, 4, 5], 5) == 12
max_sum_of_three_consecutive([3, 2, 5, 10, 7], 5) == 22
max_sum_of_three_consecutive([1, 20, 3, 1, 2, 4, 5, 6], 8) == 36
""""""
",max_sum_of_three_consecutive,"def check(candidate):

    assert candidate([100, 1000, 100, 1000, 1], 5) == 2101
    assert candidate([3000, 2000, 1000, 3, 10], 5) == 5013
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27
","def max_sum_of_three_consecutive(arr, n):
	sum = [0 for k in range(n)]
	if n >= 1:
		sum[0] = arr[0]
	if n >= 2:
		sum[1] = arr[0] + arr[1]
	if n > 2:
		sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2]))
	for i in range(3, n):
		sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3])
	return sum[n-1]","[""max_sum_of_three_consecutive([1, 2, 3, 4, 5], 5) == 12"", ""max_sum_of_three_consecutive([3, 2, 5, 10, 7], 5) == 22"", ""max_sum_of_three_consecutive([1, 20, 3, 1, 2, 4, 5, 6], 8) == 36""]","@startuml
start
:Input Validation;
if (arr is not empty AND n > 0 AND n == len(arr)) then (true)
    :Initialize three variables;
    :dp[0] = arr[0];
    :dp[1] = arr[0] + arr[1];
    :dp[2] = max(arr[0] + arr[1], arr[0] + arr[2], arr[1] + arr[2]);
    repeat (3 to n)
        :dp[i] = max(dp[i-1], dp[i-2] + arr[i], dp[i-3] + arr[i] + arr[i-1]);
    end
    :Return dp[n-1];
else (false)
    :Return error message;
end
stop
@enduml"
664,"def average_Even(n):
""""""
Write a python function to find the average of even numbers till a given even number.
Your code should satisfy these tests:
average_Even(10) == 6
average_Even(12) == 7
average_Even(14) == 8
""""""
",average_Even,"def check(candidate):

    assert candidate(2) == 2
    assert candidate(4) == 3
    assert candidate(100) == 51
","def average_Even(n) :
    if (n% 2!= 0) :
        return (""Invalid Input"")
        return -1
    sm = 0
    count = 0
    while (n>= 2) :
        count = count+1
        sm = sm+n
        n = n-2
    return sm // count ","[""average_Even(10) == 6"", ""average_Even(12) == 7"", ""average_Even(14) == 8""]","@startuml
start

:Input n (even number);
if (Is n even?) then (yes)
  :Initialize sum = 0;
  :Initialize count = 0;
  :Initialize i = 2;
  while (i <= n) is (yes)
    :sum = sum + i;
    :count = count + 1;
    :i = i + 2;
  endwhile (no)
  :average = sum / count;
  :Return average;
else (no)
  :Return ""Input must be an even number"";
endif

stop
@enduml"
37,"def sort_mixed_list(mixed_list):
""""""
Write a function to sort a given mixed list of integers and strings.
Your code should satisfy these tests:
sort_mixed_list([3, 'banana', 1, 'apple']) == [1, 3, 'apple', 'banana']
sort_mixed_list(['zebra', 2, 'dog', 1]) == [1, 2, 'dog', 'zebra']
sort_mixed_list([5, 'cat', 'bat', 4, 2]) == [2, 4, 5, 'bat', 'cat']
""""""
",sort_mixed_list,"def check(candidate):

    assert candidate([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']
    assert candidate([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']
    assert candidate([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']
","def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part","[""sort_mixed_list([3, 'banana', 1, 'apple']) == [1, 3, 'apple', 'banana']"", ""sort_mixed_list(['zebra', 2, 'dog', 1]) == [1, 2, 'dog', 'zebra']"", ""sort_mixed_list([5, 'cat', 'bat', 4, 2]) == [2, 4, 5, 'bat', 'cat']""]","@startuml

start
:sort_mixed_list(mixed_list);

if (mixed_list is empty) then (no)
:return empty list;

else (yes)
:create a list of integers;
:create a list of strings;

for each element in mixed_list do
:if element is an integer then
:add element to list of integers;
:else if element is a string then
:add element to list of strings;
:end if;
:end for;

sort list of integers;
sort list of strings;

return list of integers + list of strings;

@enduml"
110,"def extract_missing(test_list, strt_val, stop_val):
""""""
Write a function to extract the ranges that are missing from the given list with the given start range and end range values.
Your code should satisfy these tests:
extract_missing([(1, 5), (7, 10)], 0, 12) == [(0, 1), (5, 12), (5, 7), (10, 12)]
extract_missing([(2, 4), (6, 8)], 1, 10) == [(1, 2), (4, 10), (4, 6), (8, 10)]
extract_missing([(10, 20), (30, 40)], 5, 50) == [(5, 10), (20, 50), (20, 30), (40, 50)]
extract_missing([(15, 25), (35, 45)], 10, 50) == [(10, 15), (25, 50), (25, 35), (45, 50)]
extract_missing([(3, 7), (9, 12)], 1, 15) == [(1, 3), (7, 15), (7, 9), (12, 15)]
""""""
",extract_missing,"def check(candidate):

    assert candidate([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]
    assert candidate([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]
    assert candidate([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]
","def extract_missing(test_list, strt_val, stop_val):
  res = []
  for sub in test_list:
    if sub[0] > strt_val:
      res.append((strt_val, sub[0]))
      strt_val = sub[1]
    if strt_val < stop_val:
      res.append((strt_val, stop_val))
  return (res) ","[""extract_missing([(1, 5), (7, 10)], 0, 12) == [(0, 1), (5, 12), (5, 7), (10, 12)]"", ""extract_missing([(2, 4), (6, 8)], 1, 10) == [(1, 2), (4, 10), (4, 6), (8, 10)]"", ""extract_missing([(10, 20), (30, 40)], 5, 50) == [(5, 10), (20, 50), (20, 30), (40, 50)]"", ""extract_missing([(15, 25), (35, 45)], 10, 50) == [(10, 15), (25, 50), (25, 35), (45, 50)]"", ""extract_missing([(3, 7), (9, 12)], 1, 15) == [(1, 3), (7, 15), (7, 9), (12, 15)]""]","@startuml
start
:Input: test_list, strt_val, stop_val
:Output: missing_ranges
:Initialize: missing_ranges = []
:Initialize: current_range = (strt_val, stop_val)

if (test_list is not empty) then (1)
    :Find the first range in test_list: current_range = test_list[0]
    :Add (strt_val, current_range[0]) to missing_ranges: missing_ranges.append((strt_val, current_range[0]))
    :Update strt_val = current_range[1]: strt_val = current_range[1]
else (1)
    :Add (strt_val, stop_val) to missing_ranges: missing_ranges.append((strt_val, stop_val))
endif (1)

while (current_range is not None)
    :Find the next range in test_list: current_range = get_next_range(test_list, current_range[1])
    if (current_range is not None) then (2)
        :Add (current_range[0], current_range[1]) to missing_ranges: missing_ranges.append(current_range)
        :Update strt_val = current_range[1]: strt_val = current_range[1]
    else (2)
        :Add (strt_val, stop_val) to missing_ranges: missing_ranges.append((strt_val, stop_val))
        :Update strt_val = stop_val: strt_val = stop_val
    endif (2)
endwhile

:Return missing_ranges
stop
@enduml"
76,"def count_Squares(m,n):
""""""
Write a python function to count the number of squares in a rectangle.
Your code should satisfy these tests:
count_Squares(3, 3) == 14.0
count_Squares(4, 5) == 40.0
count_Squares(1, 10) == 10.0
""""""
",count_Squares,"def check(candidate):

    assert candidate(4,3) == 20
    assert candidate(2,2) == 5
    assert candidate(1,1) == 1
","def count_Squares(m,n):
    if(n < m):
        temp = m
        m = n
        n = temp
    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))","[""count_Squares(3, 3) == 14.0"", ""count_Squares(4, 5) == 40.0"", ""count_Squares(1, 10) == 10.0""]","@startuml
start
:Input m, n;
:if m <= 0 or n <= 0:
    :return ""Invalid input"";
:endif;
:initialize count = 0;
:initialize squares = 0;
:while squares < m * n:
    :count += 1;
    :squares = count * count;
:endwhile;
:return count;
stop
@enduml"
607,"def find_literals(text, pattern):
""""""
Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.
Your code should satisfy these tests:
find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)
find_literals('The quick brown fox jumps over the lazy fox.', 'fox') == ('fox', 16, 19)
find_literals('A quick brown fox jumps over the lazy dog.', 'quick') == ('quick', 2, 7)
""""""
",find_literals,"def check(candidate):

    assert candidate('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)
    assert candidate('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)
    assert candidate('Hardest choices required strongest will', 'will') == ('will', 35, 39)
","import re
pattern = 'fox'
text = 'The quick brown fox jumps over the lazy dog.'
def find_literals(text, pattern):
  match = re.search(pattern, text)
  s = match.start()
  e = match.end()
  return (match.re.pattern, s, e)","[""find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"", ""find_literals('The quick brown fox jumps over the lazy fox.', 'fox') == ('fox', 16, 19)"", ""find_literals('A quick brown fox jumps over the lazy dog.', 'quick') == ('quick', 2, 7)""]","@startuml

title find_literals

start
:find_literals(text, pattern);

if (text == None or pattern == None) then (no)
:return None;
else (yes)
:compile_regex(pattern);

if (regex == None) then (no)
:return None;
else (yes)
:search_regex(text, regex);

if (match == None) then (no)
:return None;
else (yes)
:return (match.group(), match.start(), match.end());

@enduml"
332,"def char_frequency(str1):
""""""
Write a function to count character frequency of a given string.
Your code should satisfy these tests:
char_frequency(""hello"") == {'h': 1, 'e': 1, 'l': 2, 'o': 1}
char_frequency(""testcase"") == {'t': 2, 'e': 2, 's': 2, 'c': 1, 'a': 1}
char_frequency(""123321"") == {'1': 2, '2': 2, '3': 2}
""""""
",char_frequency,"def check(candidate):

    assert candidate('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}
    assert candidate('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}
    assert candidate('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}
","def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict","[""char_frequency(\""hello\"") == {'h': 1, 'e': 1, 'l': 2, 'o': 1}"", ""char_frequency(\""testcase\"") == {'t': 2, 'e': 2, 's': 2, 'c': 1, 'a': 1}"", ""char_frequency(\""123321\"") == {'1': 2, '2': 2, '3': 2}""]","@startuml
start

:Input string (str1);
:Initialize an empty dictionary (char_count);

if (Is str1 empty?) then (yes)
  :Return empty dictionary;
  stop
else (no)
  :Iterate over each character (char) in str1;
  if (Is char in char_count?) then (yes)
    :Increment the count of char in char_count;
  else (no)
    :Add char to char_count with a count of 1;
  endif
  :Check if all characters are processed?;
  if (All characters processed?) then (yes)
    :Return char_count;
    stop
  else (no)
    :Continue to next character;
  endif
endif

@enduml"
571,"def max_sum_pair_diff_lessthan_K(arr, N, K):
""""""
Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.
Your code should satisfy these tests:
max_sum_pair_diff_lessthan_K([1, 3, 5, 7, 9], 5, 2) == 0
max_sum_pair_diff_lessthan_K([10, 20, 30, 40, 50], 5, 15) == 140
max_sum_pair_diff_lessthan_K([5, 8, 12, 15, 16], 5, 4) == 44
""""""
",max_sum_pair_diff_lessthan_K,"def check(candidate):

    assert candidate([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62
    assert candidate([5, 15, 10, 300], 4, 12) == 25
    assert candidate([1, 2, 3, 4, 5, 6], 6, 6) == 21
","def max_sum_pair_diff_lessthan_K(arr, N, K):
	arr.sort()
	dp = [0] * N
	dp[0] = 0
	for i in range(1, N):
		dp[i] = dp[i-1]
		if (arr[i] - arr[i-1] < K):
			if (i >= 2):
				dp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]);
			else:
				dp[i] = max(dp[i], arr[i] + arr[i-1]);
	return dp[N - 1]","[""max_sum_pair_diff_lessthan_K([1, 3, 5, 7, 9], 5, 2) == 0"", ""max_sum_pair_diff_lessthan_K([10, 20, 30, 40, 50], 5, 15) == 140"", ""max_sum_pair_diff_lessthan_K([5, 8, 12, 15, 16], 5, 4) == 44""]","@startuml
start
:Input Validation;
if (arr is None or N <= 0 or K < 0) then (Invalid Input)
elseif (N == 1) then (Return arr[0])
endif
:Sort the array in ascending order;
:Initialize max_sum as 0;
loop for each element in arr
    :Find the maximum element in arr that is less than current element and its difference is less than K;
    if (max_diff_element is not None) then (max_diff_element < current_element and abs(max_diff_element - current_element) < K)
        :Add current_element and max_diff_element to max_sum;
        :Remove max_diff_element from arr;
    endif
endloop
:Return max_sum;
stop
@enduml"
165,"def count_char_position(str1):
""""""
Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.
Your code should satisfy these tests:
count_char_position(""AbCdEf"") == 6
count_char_position(""abcdef"") == 6
count_char_position(""GHIJKL"") == 0
""""""
",count_char_position,"def check(candidate):

    assert candidate(""xbcefg"") == 2
    assert candidate(""ABcED"") == 3
    assert candidate(""AbgdeF"") == 5
","def count_char_position(str1):
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or
            (i == ord(str1[i]) - ord('a'))):
            count_chars += 1
    return count_chars ","[""count_char_position(\""AbCdEf\"") == 6"", ""count_char_position(\""abcdef\"") == 6"", ""count_char_position(\""GHIJKL\"") == 0""]","@startuml
start
:input str1;
if (str1 is not empty?) then (yes)
    :initialize count = 0;
    :initialize alphabet = 'abcdefghijklmnopqrstuvwxyz';
    :convert str1 to lowercase;
    :initialize str1_lower = str1;
    for (each character in str1_lower)
        :compare character with corresponding character in alphabet;
        if (character == alphabet[index]) then (yes)
            :increment count;
        endif
    endfor
else (no)
    :set count = -1;
endif
:return count;
stop
@enduml"
167,"def next_Power_Of_2(n):
""""""
Write a python function to find smallest power of 2 greater than or equal to n.
Your code should satisfy these tests:
next_Power_Of_2(5) == 8
next_Power_Of_2(17) == 32
next_Power_Of_2(31) == 32
""""""
",next_Power_Of_2,"def check(candidate):

    assert candidate(0) == 1
    assert candidate(5) == 8
    assert candidate(17) == 32
","def next_Power_Of_2(n):
    count = 0;
    if (n and not(n & (n - 1))):
        return n
    while( n != 0):
        n >>= 1
        count += 1
    return 1 << count; ","[""next_Power_Of_2(5) == 8"", ""next_Power_Of_2(17) == 32"", ""next_Power_Of_2(31) == 32""]","@startuml
start

:Input n;
if (Is n <= 0?) then (yes)
  :Return 1 (since 2^0 = 1);
  stop
else (no)
  :Initialize power = 1;
  while (power < n?) is (yes)
    :power = power * 2;
  endwhile (no)
  :Return power;
  stop
endif

@enduml"
382,"def find_rotation_count(A):
""""""
Write a function to find the number of rotations in a circularly sorted array.
Your code should satisfy these tests:
find_rotation_count([15, 18, 2, 3, 6, 12]) == 2
find_rotation_count([7, 9, 11, 12, 5]) == 4
find_rotation_count([1, 2, 3, 4, 5]) == 0
""""""
",find_rotation_count,"def check(candidate):

    assert candidate([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3
    assert candidate([8, 9, 10,2, 5, 6]) == 3
    assert candidate([2, 5, 6, 8, 9, 10]) == 0
","def find_rotation_count(A):
    (left, right) = (0, len(A) - 1)
    while left <= right:
        if A[left] <= A[right]:
            return left
        mid = (left + right) // 2
        next = (mid + 1) % len(A)
        prev = (mid - 1 + len(A)) % len(A)
        if A[mid] <= A[next] and A[mid] <= A[prev]:
            return mid
        elif A[mid] <= A[right]:
            right = mid - 1
        elif A[mid] >= A[left]:
            left = mid + 1
    return -1","[""find_rotation_count([15, 18, 2, 3, 6, 12]) == 2"", ""find_rotation_count([7, 9, 11, 12, 5]) == 4"", ""find_rotation_count([1, 2, 3, 4, 5]) == 0""]","@startuml
start

:Input array A;
if (Is A empty or None?) then (yes)
    :Return -1 (Invalid input);
    stop
else (no)
    :Initialize low = 0, high = len(A) - 1;
    :Check if array is already sorted;
    if (A[low] <= A[high]) then (yes)
        :Return 0 (No rotations);
        stop
    else (no)
        :Perform binary search to find rotation count;
        while (low <= high)
            :Calculate mid = (low + high) // 2;
            :Check if mid is the rotation point;
            if (A[mid] > A[mid + 1]) then (yes)
                :Return mid + 1 (Rotation count);
                stop
            else (no)
                :Check if mid is the smallest element;
                if (A[mid] < A[mid - 1]) then (yes)
                    :Return mid (Rotation count);
                    stop
                else (no)
                    :Adjust search range;
                    if (A[mid] > A[high]) then (yes)
                        :low = mid + 1;
                    else (no)
                        :high = mid - 1;
                    endif
                endif
            endif
        endwhile
    endif
endif

stop
@enduml"
440,"def find_adverb_position(text):
""""""
Write a function to find all adverbs and their positions in a given sentence.
Your code should satisfy these tests:
find_adverb_position(""She runs quickly"") == (9, 16, 'quickly')
find_adverb_position(""He sings beautifully"") == (9, 20, 'beautifully')
find_adverb_position(""They work tirelessly"") == (10, 20, 'tirelessly')
find_adverb_position(""The cat jumps lazily"") == (14, 20, 'lazily')
find_adverb_position(""The dog barks loudly"") == (14, 20, 'loudly')
""""""
",find_adverb_position,"def check(candidate):

    assert candidate(""clearly!! we can see the sky"")==(0, 7, 'clearly')
    assert candidate(""seriously!! there are many roses"")==(0, 9, 'seriously')
    assert candidate(""unfortunately!! sita is going to home"")==(0, 13, 'unfortunately')
","import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))","[""find_adverb_position(\""She runs quickly\"") == (9, 16, 'quickly')"", ""find_adverb_position(\""He sings beautifully\"") == (9, 20, 'beautifully')"", ""find_adverb_position(\""They work tirelessly\"") == (10, 20, 'tirelessly')"", ""find_adverb_position(\""The cat jumps lazily\"") == (14, 20, 'lazily')"", ""find_adverb_position(\""The dog barks loudly\"") == (14, 20, 'loudly')""]","@startuml
start
:input text;
if (is text empty?) then (return error)
ifnot (is text empty?) then (
    :find first position of adverb;
    :find last position of adverb;
    :extract adverb;
    :return positions and adverb;
)
stop
@enduml"
534,"def search_literal(pattern,text):
""""""
Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.
Your code should satisfy these tests:
search_literal('cat', 'The cat sat on the mat.') == (4, 7)
search_literal('dog', 'A quick brown dog jumps over the lazy dog.') == (14, 17)
search_literal('hello', 'hello world, hello universe') == (0, 5)
""""""
",search_literal,"def check(candidate):

    assert candidate('python','python programming language')==(0,6)
    assert candidate('programming','python programming language')==(7,18)
    assert candidate('language','python programming language')==(19,27)
","import re
def search_literal(pattern,text):
 match = re.search(pattern, text)
 s = match.start()
 e = match.end()
 return (s, e)","[""search_literal('cat', 'The cat sat on the mat.') == (4, 7)"", ""search_literal('dog', 'A quick brown dog jumps over the lazy dog.') == (14, 17)"", ""search_literal('hello', 'hello world, hello universe') == (0, 5)""]","@startuml
start
:Input pattern;
:Input text;
if ""Is pattern and text empty?"" then (yes)
    :Return None;
    stop
endif
if ""Is pattern longer than text?"" then (yes)
    :Return None;
    stop
endif
:Initialize start_index to 0;
while ""start_index is less than length of text"" is true
    :Find the pattern in text starting from start_index;
    if ""Pattern found?"" then (yes)
        :Return start_index and start_index + length of pattern;
        stop
    endif
    :Increment start_index by 1;
endwhile
:Return None;
stop
@enduml"
117,"def list_to_float(test_list):
""""""
Write a function to convert all possible convertible elements in the list to float.
Your code should satisfy these tests:
list_to_float([('a', '1.23'), ('b', '4.56')]) == ""[(\'a\', 1.23), (\'b\', 4.56)]""
list_to_float([('x', '7.89'), ('y', '0.12')]) == ""[(\'x\', 7.89), (\'y\', 0.12)]""
list_to_float([('m', '3.14'), ('n', '2.71')]) == ""[(\'m\', 3.14), (\'n\', 2.71)]""
""""""
",list_to_float,"def check(candidate):

    assert candidate( [(""3"", ""4""), (""1"", ""26.45""), (""7.32"", ""8""), (""4"", ""8"")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'
    assert candidate( [(""4"", ""4""), (""2"", ""27""), (""4.12"", ""9""), (""7"", ""11"")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'
    assert candidate( [(""6"", ""78""), (""5"", ""26.45""), (""1.33"", ""4""), (""82"", ""13"")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'
","def list_to_float(test_list):
  res = []
  for tup in test_list:
    temp = []
    for ele in tup:
      if ele.isalpha():
        temp.append(ele)
      else:
        temp.append(float(ele))
    res.append((temp[0],temp[1]))
  return (str(res)) ","[""list_to_float([('a', '1.23'), ('b', '4.56')]) == \""[(\\'a\\', 1.23), (\\'b\\', 4.56)]\"""", ""list_to_float([('x', '7.89'), ('y', '0.12')]) == \""[(\\'x\\', 7.89), (\\'y\\', 0.12)]\"""", ""list_to_float([('m', '3.14'), ('n', '2.71')]) == \""[(\\'m\\', 3.14), (\\'n\\', 2.71)]\""""]","@startuml
start
:Initialize empty result list;
:Iterate over each tuple in input list;
if (Element is convertible to float?) then (yes)
    :Convert element to float;
    :Append tuple with float value to result list;
else (no)
    :Append tuple as it is to result list;
endif
:Return the result list;
stop
@enduml"
122,"def smartNumber(n):
""""""
Write a function to find n’th smart number.
""""""
",smartNumber,"def check(candidate):

    assert candidate(1) == 30
    assert candidate(50) == 273
    assert candidate(1000) == 2664
","MAX = 3000
def smartNumber(n):
	primes = [0] * MAX
	result = []
	for i in range(2, MAX):
		if (primes[i] == 0):
			primes[i] = 1
			j = i * 2
			while (j < MAX):
				primes[j] -= 1
				if ( (primes[j] + 3) == 0):
					result.append(j)
				j = j + i
	result.sort()
	return result[n - 1] ","[""test test cases failed""]","@startuml
start
:Input n;
if (n > 0) then (
    :Find the n-th smart number;
) else (
    :Invalid input;
)
end
@enduml"
125,"def find_length(string, n):
""""""
Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
Your code should satisfy these tests:
find_length(""11000010001"", 11) == 6
find_length(""00000000000"", 11) == 11
find_length(""11111111111"", 11) == 0
""""""
",find_length,"def check(candidate):

    assert candidate(""11000010001"", 11) == 6
    assert candidate(""10111"", 5) == 1
    assert candidate(""11011101100101"", 14) == 2
","def find_length(string, n):
	current_sum = 0
	max_sum = 0
	for i in range(n):
		current_sum += (1 if string[i] == '0' else -1)
		if current_sum < 0:
			current_sum = 0
		max_sum = max(current_sum, max_sum)
	return max_sum if max_sum else 0","[""find_length(\""11000010001\"", 11) == 6"", ""find_length(\""00000000000\"", 11) == 11"", ""find_length(\""11111111111\"", 11) == 0""]","@startuml

title find_length

start
:find_length(string, n);

if (string.length() == 0) then (no)
:return 0;
else (yes)
:initialize count = 0;
:initialize max_diff = 0;
:initialize current_diff = 0;

loop
:for each character in string
:if (character == '0') then (no)
:count += 1;
:else (yes)
:count -= 1;
:end if

:if (count > max_diff) then (no)
:max_diff = count;
:end if

:if (count < 0) then (no)
:count = 0;
:end if

:end for

:return max_diff;

@enduml"
369,"def lateralsurface_cuboid(l,w,h):
""""""
Write a function to find the lateral surface area of cuboid
Your code should satisfy these tests:
lateralsurface_cuboid(3, 4, 5) == 70
lateralsurface_cuboid(7, 2, 9) == 162
lateralsurface_cuboid(1, 1, 1) == 4
""""""
",lateralsurface_cuboid,"def check(candidate):

    assert candidate(8,5,6)==156
    assert candidate(7,9,10)==320
    assert candidate(10,20,30)==1800
","def lateralsurface_cuboid(l,w,h):
  LSA = 2*h*(l+w)
  return LSA","[""lateralsurface_cuboid(3, 4, 5) == 70"", ""lateralsurface_cuboid(7, 2, 9) == 162"", ""lateralsurface_cuboid(1, 1, 1) == 4""]","@startuml
start
:Input Validation;
if (l > 0 and w > 0 and h > 0) then
    (Calculate Lateral Surface Area)
    :l * h * 2;
    :w * h * 2;
    :Add the two results;
else
    (Invalid Input)
    :Return Error Message;
endif
stop
@enduml"
644,"def reverse_Array_Upto_K(input, k):
""""""
Write a python function to reverse an array upto a given position.
Your code should satisfy these tests:
reverse_Array_Upto_K([1, 2, 3, 4, 5], 3) == [3, 2, 1, 4, 5]
reverse_Array_Upto_K([10, 20, 30, 40, 50, 60], 4) == [40, 30, 20, 10, 50, 60]
reverse_Array_Upto_K([7, 8, 9], 1) == [7, 8, 9]
""""""
",reverse_Array_Upto_K,"def check(candidate):

    assert candidate([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]
    assert candidate([4, 5, 6, 7], 2) == [5, 4, 6, 7]
    assert candidate([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]
","def reverse_Array_Upto_K(input, k):
  return (input[k-1::-1] + input[k:]) ","[""reverse_Array_Upto_K([1, 2, 3, 4, 5], 3) == [3, 2, 1, 4, 5]"", ""reverse_Array_Upto_K([10, 20, 30, 40, 50, 60], 4) == [40, 30, 20, 10, 50, 60]"", ""reverse_Array_Upto_K([7, 8, 9], 1) == [7, 8, 9]""]","@startuml

title Reverse Array Upto K

start
:Input Array;
:Input K;

if (K < 0) then (no)
:Invalid Input;
:Return;

if (K > Array.length) then (no)
:Invalid Input;
:Return;

if (K == 0) then (yes)
:Reverse Array;
:Return;

if (K == Array.length) then (yes)
:Reverse Array;
:Return;

:Reverse Array Upto K;
:Return;

@enduml"
138,"def is_Sum_Of_Powers_Of_Two(n):
""""""
Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
Your code should satisfy these tests:
is_Sum_Of_Powers_Of_Two(4) == True
is_Sum_Of_Powers_Of_Two(16) == True
is_Sum_Of_Powers_Of_Two(7) == False
is_Sum_Of_Powers_Of_Two(32) == True
is_Sum_Of_Powers_Of_Two(15) == False
is_Sum_Of_Powers_Of_Two(64) == True
is_Sum_Of_Powers_Of_Two(1) == False
is_Sum_Of_Powers_Of_Two(0) == True
is_Sum_Of_Powers_Of_Two(1024) == True
""""""
",is_Sum_Of_Powers_Of_Two,"def check(candidate):

    assert candidate(10) == True
    assert candidate(7) == False
    assert candidate(14) == True
","def is_Sum_Of_Powers_Of_Two(n):
    if (n % 2 == 1):
        return False
    else:
        return True","[""is_Sum_Of_Powers_Of_Two(4) == True"", ""is_Sum_Of_Powers_Of_Two(16) == True"", ""is_Sum_Of_Powers_Of_Two(7) == False"", ""is_Sum_Of_Powers_Of_Two(32) == True"", ""is_Sum_Of_Powers_Of_Two(15) == False"", ""is_Sum_Of_Powers_Of_Two(64) == True"", ""is_Sum_Of_Powers_Of_Two(1) == False"", ""is_Sum_Of_Powers_Of_Two(0) == True"", ""is_Sum_Of_Powers_Of_Two(1024) == True""]","@startuml
start

:Input number n;
if (n < 0) then (yes)
    :Return False (Invalid input);
    stop
elseif (n == 0) then (yes)
    :Return True (0 is considered valid);
    stop
elseif (n == 1) then (yes)
    :Return False (1 cannot be represented as sum of non-zero powers of 2);
    stop
else (no)
    :Initialize sum = 0;
    :Initialize power = 1;
    while (sum < n) is (yes)
        :sum = sum + power;
        :power = power * 2;
    endwhile (no)
    if (sum == n) then (yes)
        :Return True (n can be represented as sum of non-zero powers of 2);
        stop
    else (no)
        :Return False (n cannot be represented as sum of non-zero powers of 2);
        stop
    endif
endif

@enduml"
456,"def reverse_string_list(stringlist):
""""""
Write a function to reverse strings in a given list of string values.
Your code should satisfy these tests:
reverse_string_list([""hello"", ""world""]) == [""olleh"", ""dlrow""]
reverse_string_list([""Python"", ""is"", ""fun""]) == [""nohtyP"", ""si"", ""nuf""]
reverse_string_list([""test"", ""case"", ""three""]) == [""tset"", ""esac"", ""eerht""]
""""""
",reverse_string_list,"def check(candidate):

    assert candidate(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']
    assert candidate(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']
    assert candidate(['jack','john','mary'])==['kcaj','nhoj','yram']
","def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result","[""reverse_string_list([\""hello\"", \""world\""]) == [\""olleh\"", \""dlrow\""]"", ""reverse_string_list([\""Python\"", \""is\"", \""fun\""]) == [\""nohtyP\"", \""si\"", \""nuf\""]"", ""reverse_string_list([\""test\"", \""case\"", \""three\""]) == [\""tset\"", \""esac\"", \""eerht\""]""]","@startuml
start

:Input list of strings (stringlist);
if (Is stringlist empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize an empty list (reversed_list);
    :Iterate over each string in stringlist;
    :Reverse the current string;
    :Append reversed string to reversed_list;
    if (More strings to process?) then (yes)
        :Continue iteration;
    else (no)
        :Return reversed_list;
        stop
    endif
endif
@enduml"
627,"def find_First_Missing(array,start,end):
""""""
Write a python function to find the smallest missing number from the given array.
Your code should satisfy these tests:
find_First_Missing([0, 1, 2, 3, 5, 6, 7], 0, 6) == 4
find_First_Missing([1, 2, 3, 4, 5, 6, 7], 0, 6) == 0
find_First_Missing([0, 1, 2, 4, 5, 6, 7, 8], 0, 7) == 3
""""""
",find_First_Missing,"def check(candidate):

    assert candidate([0,1,2,3],0,3) == 4
    assert candidate([0,1,2,6,9],0,4) == 3
    assert candidate([2,3,5,8,9],0,4) == 0
","def find_First_Missing(array,start,end):
    if (start > end):
        return end + 1
    if (start != array[start]):
        return start;
    mid = int((start + end) / 2)
    if (array[mid] == mid):
        return find_First_Missing(array,mid+1,end)
    return find_First_Missing(array,start,mid) ","[""find_First_Missing([0, 1, 2, 3, 5, 6, 7], 0, 6) == 4"", ""find_First_Missing([1, 2, 3, 4, 5, 6, 7], 0, 6) == 0"", ""find_First_Missing([0, 1, 2, 4, 5, 6, 7, 8], 0, 7) == 3""]","@startuml

title find_First_Missing

start
:find_First_Missing(array, start, end);

if (start > end) then (no
:return -1;
)

if (array[start] != start) then (
:return start;
)

:for i in range(start, end):
:   if (array[i] != i) then (
:       return i;
:   )

:return end + 1;

@enduml"
802,"def count_Rotation(arr,n):
""""""
Write a python function to count the number of rotations required to generate a sorted array.
Your code should satisfy these tests:
count_Rotation([15, 18, 2, 3, 6, 12], 6) == 2
count_Rotation([7, 9, 11, 12, 5], 5) == 4
count_Rotation([1, 2, 3, 4, 5, 6], 6) == 0
""""""
",count_Rotation,"def check(candidate):

    assert candidate([3,2,1],3) == 1
    assert candidate([4,5,1,2,3],5) == 2
    assert candidate([7,8,9,1,2,3],6) == 3
","def count_Rotation(arr,n):
    for i in range (1,n):
        if (arr[i] < arr[i - 1]):
            return i
    return 0","[""count_Rotation([15, 18, 2, 3, 6, 12], 6) == 2"", ""count_Rotation([7, 9, 11, 12, 5], 5) == 4"", ""count_Rotation([1, 2, 3, 4, 5, 6], 6) == 0""]","@startuml
start

:Input array (arr) and its length (n);
if (Is arr empty or n <= 0?) then (yes)
    :Return 0;
    stop
else (no)
    :Initialize rotation_count = 0;
    :Initialize i = 0;
    while (i < n - 1) is (yes)
        if (arr[i] > arr[i + 1]) then (yes)
            :rotation_count = i + 1;
            :Break loop;
        else (no)
            :i = i + 1;
        endif
    endwhile
    :Return rotation_count;
    stop
endif

@enduml"
518,"def sqrt_root(num):
""""""
Write a function to find the square root of a perfect number.
Your code should satisfy these tests:
sqrt_root(4) == 2.0
sqrt_root(9) == 3.0
sqrt_root(16) == 4.0
""""""
",sqrt_root,"def check(candidate):

    assert candidate(4)==2
    assert candidate(16)==4
    assert candidate(400)==20
","import math
def sqrt_root(num):
 sqrt_root = math.pow(num, 0.5)
 return sqrt_root ","[""sqrt_root(4) == 2.0"", ""sqrt_root(9) == 3.0"", ""sqrt_root(16) == 4.0""]","@startuml

title: Sqrt Root Function

start
:Input number;

if (number < 0) then (no)
:Invalid input;
:End;

else (yes)
:Calculate square root;
:Return square root;
:End;

@enduml"
431,"def common_element(list1, list2):
""""""
Write a function that takes two lists and returns true if they have at least one common element.
Your code should satisfy these tests:
common_element([1, 2, 3], [3, 4, 5]) == True
common_element(['apple', 'banana'], ['cherry', 'date']) == None
common_element([10, 20, 30], [40, 50, 60, 10]) == True
""""""
",common_element,"def check(candidate):

    assert candidate([1,2,3,4,5], [5,6,7,8,9])==True
    assert candidate([1,2,3,4,5], [6,7,8,9])==None
    assert candidate(['a','b','c'], ['d','b','e'])==True
","def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result","[""common_element([1, 2, 3], [3, 4, 5]) == True"", ""common_element(['apple', 'banana'], ['cherry', 'date']) == None"", ""common_element([10, 20, 30], [40, 50, 60, 10]) == True""]","@startuml
start

:Input two lists: list1 and list2;
:Convert list1 to a set for faster lookup;
:Initialize a flag 'found' as False;

while (Iterate through each element in list2?) is (Yes)
    :Check if the current element exists in the set of list1;
    if (Element found in list1?) then (Yes)
        :Set 'found' to True;
        :Break the loop;
    else (No)
        :Continue to the next element;
    endif
endwhile

if (Is 'found' True?) then (Yes)
    :Return True;
else (No)
    :Return None;
endif

stop
@enduml"
606,"def radian_degree(degree):
""""""
Write a function to convert degrees to radians.
Your code should satisfy these tests:
radian_degree(0) == 0.0
radian_degree(180) == 3.141592653589793
radian_degree(90) == 1.5707963267948966
""""""
",radian_degree,"def check(candidate):

    assert candidate(90)==1.5707963267948966
    assert candidate(60)==1.0471975511965976
    assert candidate(120)==2.0943951023931953
","import math
def radian_degree(degree):
 radian = degree*(math.pi/180)
 return radian","[""radian_degree(0) == 0.0"", ""radian_degree(180) == 3.141592653589793"", ""radian_degree(90) == 1.5707963267948966""]","@startuml

title Radian Degree Conversion

start
:Input Degree;
if (degree == 0) then (
  :Return 0.0;
) elseif (degree == 180) then (
  :Return 3.141592653589793;
) elseif (degree == 90) then (
  :Return 1.5707963267948966;
) else (
  :Return degree * 0.017453292519943295;
)

@enduml"
740,"def tuple_to_dict(test_tup):
""""""
Write a function to convert the given tuple to a key-value dictionary using adjacent elements.
Your code should satisfy these tests:
tuple_to_dict(('a', 1, 'b', 2)) == {'a': 1, 'b': 2}
tuple_to_dict(('x', 10, 'y', 20, 'z', 30)) == {'x': 10, 'y': 20, 'z': 30}
tuple_to_dict(('key1', 'value1', 'key2', 'value2', 'key3', 'value3')) == {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}
""""""
",tuple_to_dict,"def check(candidate):

    assert candidate((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}
    assert candidate((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}
    assert candidate((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}
","def tuple_to_dict(test_tup):
  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))
  return (res) ","[""tuple_to_dict(('a', 1, 'b', 2)) == {'a': 1, 'b': 2}"", ""tuple_to_dict(('x', 10, 'y', 20, 'z', 30)) == {'x': 10, 'y': 20, 'z': 30}"", ""tuple_to_dict(('key1', 'value1', 'key2', 'value2', 'key3', 'value3')) == {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}""]","@startuml
start

:Input tuple (test_tup);
if (Is tuple length even?) then (yes)
    :Initialize empty dictionary (result_dict);
    :Initialize index (i = 0);
    while (i < length of test_tup) is (yes)
        :Get key from test_tup[i];
        :Get value from test_tup[i+1];
        :Add key-value pair to result_dict;
        :Increment index (i = i + 2);
    endwhile (no)
    :Return result_dict;
else (no)
    :Raise ValueError(""Tuple length must be even."");
endif

stop
@enduml"
35,"def find_rect_num(n):
""""""
Write a function to find the n-th rectangular number.
Your code should satisfy these tests:
find_rect_num(1) == 2
find_rect_num(5) == 30
find_rect_num(10) == 110
""""""
",find_rect_num,"def check(candidate):

    assert candidate(4) == 20
    assert candidate(5) == 30
    assert candidate(6) == 42
","def find_rect_num(n):
  return n*(n + 1) ","[""find_rect_num(1) == 2"", ""find_rect_num(5) == 30"", ""find_rect_num(10) == 110""]","@startuml
start
:Input n;
if (n > 0) then (true)
  :result = 1;
  :for i in range(2, n+1):
  :   result += i;
  :end for;
else (n <= 0) then (false)
  :return ""Input must be a positive integer"";
endif
:return result;
stop
@enduml"
963,"def discriminant_value(x,y,z):
""""""
Write a function to calculate the discriminant value.
Your code should satisfy these tests:
discriminant_value(1, 5, 6) == (""Two solutions"", 1)
discriminant_value(1, 2, 1) == (""one solution"", 0)
discriminant_value(1, 1, 2) == (""no real solution"", -7)
""""""
",discriminant_value,"def check(candidate):

    assert candidate(4,8,2)==(""Two solutions"",32)
    assert candidate(5,7,9)==(""no real solution"",-131)
    assert candidate(0,0,9)==(""one solution"",0)
","def discriminant_value(x,y,z):
    discriminant = (y**2) - (4*x*z)
    if discriminant > 0:
        return (""Two solutions"",discriminant)
    elif discriminant == 0:
        return (""one solution"",discriminant)
    elif discriminant < 0:
        return (""no real solution"",discriminant)","[""discriminant_value(1, 5, 6) == (\""Two solutions\"", 1)"", ""discriminant_value(1, 2, 1) == (\""one solution\"", 0)"", ""discriminant_value(1, 1, 2) == (\""no real solution\"", -7)""]","@startuml
start
:x;
:y;
:z;
:calculate discriminant (x*y*z);
if (discriminant > 0) then (s1)
    :""Two solutions"";
    :return (discriminant);
elseif (discriminant = 0) then (s2)
    :""one solution"";
    :return (discriminant);
else (s3)
    :""no real solution"";
    :return (discriminant);
endif
stop
@enduml"
920,"def remove_tuple(test_list):
""""""
Write a function to remove all tuples with all none values in the given tuple list.
Your code should satisfy these tests:
remove_tuple([(1, 2), (None, None), (3, 4)]) == ""[(1, 2), (3, 4)]""
remove_tuple([(None, None), (None, None), (None, None)]) == ""[]""
remove_tuple([(5, 6), (7, 8), (9, 10)]) == ""[(5, 6), (7, 8), (9, 10)]""
""""""
",remove_tuple,"def check(candidate):

    assert candidate([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'
    assert candidate([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'
    assert candidate([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'
","def remove_tuple(test_list):
  res = [sub for sub in test_list if not all(ele == None for ele in sub)]
  return (str(res)) ","[""remove_tuple([(1, 2), (None, None), (3, 4)]) == \""[(1, 2), (3, 4)]\"""", ""remove_tuple([(None, None), (None, None), (None, None)]) == \""[]\"""", ""remove_tuple([(5, 6), (7, 8), (9, 10)]) == \""[(5, 6), (7, 8), (9, 10)]\""""]","@startuml

start
:remove_tuple(test_list);

if (test_list is empty) then (yes)
  :return [];
else (no)
  :result = [];
  :for each tuple in test_list do
    :if (tuple contains any non-None values) then (yes)
      :result.append(tuple);
    else (no)
      :continue;
    endif
  endfor
  :return result;
endif

@enduml"
376,"def remove_replica(test_tup):
""""""
Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.
Your code should satisfy these tests:
remove_replica((1, 2, 3, 2, 4)) == (1, 2, 3, 'MSP', 4)
remove_replica(('a', 'b', 'a', 'c', 'b')) == ('a', 'b', 'MSP', 'c', 'MSP')
remove_replica((5, 5, 5, 5, 5)) == (5, 'MSP', 'MSP', 'MSP', 'MSP')
""""""
",remove_replica,"def check(candidate):

    assert candidate((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')
    assert candidate((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')
    assert candidate((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')
","def remove_replica(test_tup):
  temp = set()
  res = tuple(ele if ele not in temp and not temp.add(ele)
				else 'MSP' for ele in test_tup)
  return (res)","[""remove_replica((1, 2, 3, 2, 4)) == (1, 2, 3, 'MSP', 4)"", ""remove_replica(('a', 'b', 'a', 'c', 'b')) == ('a', 'b', 'MSP', 'c', 'MSP')"", ""remove_replica((5, 5, 5, 5, 5)) == (5, 'MSP', 'MSP', 'MSP', 'MSP')""]","@startuml

title remove_replica

start
:remove_replica(test_tup);

if (test_tup.count(test_tup[0]) > 1) then (yes)
  :replace_duplicates(test_tup);
else (no)
  :return test_tup;
endif

:return test_tup;

@enduml"
498,"def gcd(x, y):
""""""
Write a python function to find gcd of two positive integers.
Your code should satisfy these tests:
gcd(48, 18) == 6
gcd(101, 10) == 1
gcd(56, 98) == 14
""""""
",gcd,"def check(candidate):

    assert candidate(12, 17) == 1
    assert candidate(4,6) == 2
    assert candidate(2,9) == 1
","def gcd(x, y):
    gcd = 1
    if x % y == 0:
        return y
    for k in range(int(y / 2), 0, -1):
        if x % k == 0 and y % k == 0:
            gcd = k
            break
    return gcd","[""gcd(48, 18) == 6"", ""gcd(101, 10) == 1"", ""gcd(56, 98) == 14""]","@startuml
start

:Input two positive integers x and y;
if (x > 0 and y > 0?) then (yes)
  :Initialize variables a = x, b = y;
  while (b != 0?) is (yes)
    :Calculate remainder r = a % b;
    :Update a = b;
    :Update b = r;
  endwhile (no)
  :GCD is a;
  :Output GCD;
else (no)
  :Invalid input: x and y must be positive integers;
  :Output error message;
endif

stop
@enduml"
481,"def is_subset_sum(set, n, sum):
""""""
Write a function to determine if there is a subset of the given set with sum equal to the given sum.
Your code should satisfy these tests:
is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True
is_subset_sum([1, 2, 3, 4, 5], 5, 11) == True
is_subset_sum([10, 20, 30], 3, 50) == True
""""""
",is_subset_sum,"def check(candidate):

    assert candidate([3, 34, 4, 12, 5, 2], 6, 9) == True
    assert candidate([3, 34, 4, 12, 5, 2], 6, 30) == False
    assert candidate([3, 34, 4, 12, 5, 2], 6, 15) == True
","def is_subset_sum(set, n, sum):
	if (sum == 0):
		return True
	if (n == 0):
		return False
	if (set[n - 1] > sum):
		return is_subset_sum(set, n - 1, sum)
	return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])","[""is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True"", ""is_subset_sum([1, 2, 3, 4, 5], 5, 11) == True"", ""is_subset_sum([10, 20, 30], 3, 50) == True""]","@startuml

title is_subset_sum

start
:is_subset_sum(set, n, sum);

if (n == 0) then (no)
:return False;

else (yes)
:for each element in set
:if (element == sum) then (yes)
:return True;

:else (no)
:return is_subset_sum(set, n-1, sum-element);

endif

end

@enduml"
813,"def string_length(str1):
""""""
Write a function to find length of the string.
Your code should satisfy these tests:
string_length(""hello"") == 5
string_length("""") == 0
string_length(""Python Programming"") == 18
""""""
",string_length,"def check(candidate):

    assert candidate('python')==6
    assert candidate('program')==7
    assert candidate('language')==8
","def string_length(str1):
    count = 0
    for char in str1:
        count += 1
    return count","[""string_length(\""hello\"") == 5"", ""string_length(\""\"") == 0"", ""string_length(\""Python Programming\"") == 18""]","@startuml
start

:Input string (str1);
if (Is str1 empty?) then (yes)
  :Return length 0;
else (no)
  :Calculate length of str1;
  :Return calculated length;
endif

stop
@enduml"
849,"def Sum(N):
""""""
Write a python function to find sum of all prime divisors of a given number.
Your code should satisfy these tests:
Sum(10) == 7
Sum(15) == 8
Sum(20) == 7
""""""
",Sum,"def check(candidate):

    assert candidate(60) == 10
    assert candidate(39) == 16
    assert candidate(40) == 7
","def Sum(N):
    SumOfPrimeDivisors = [0]*(N + 1)
    for i in range(2,N + 1) :
        if (SumOfPrimeDivisors[i] == 0) :
            for j in range(i,N + 1,i) :
                SumOfPrimeDivisors[j] += i
    return SumOfPrimeDivisors[N] ","[""Sum(10) == 7"", ""Sum(15) == 8"", ""Sum(20) == 7""]","@startuml
start
:Initialize sum to 0;
:Iterate i from 2 to N;
if (N % i == 0 and is_prime(i)) then (yes)
    :Add i to sum;
endif
:Return sum;
stop

is_prime(num)
start
if (num < 2) then (yes)
    :Return False;
elseif (num == 2) then (yes)
    :Return True;
endif
:Iterate j from 2 to sqrt(num);
if (num % j == 0) then (yes)
    :Return False;
endif
:Return True;
stop
@enduml"
767,"def get_Pairs_Count(arr,n,sum):
""""""
Write a python function to count the number of pairs whose sum is equal to ‘sum’.
Your code should satisfy these tests:
get_Pairs_Count([1, 5, 7, -1], 4, 6) == 2
get_Pairs_Count([10, 12, 10, 15, -1, 7, 6, 5, 4, 2, 1, 1, 1], 13, 11) == 9
get_Pairs_Count([0, 0, 0, 0], 4, 0) == 6
""""""
",get_Pairs_Count,"def check(candidate):

    assert candidate([1,1,1,1],4,2) == 6
    assert candidate([1,5,7,-1,5],5,6) == 3
    assert candidate([1,-2,3],3,1) == 1
","def get_Pairs_Count(arr,n,sum):
    count = 0
    for i in range(0,n):
        for j in range(i + 1,n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count","[""get_Pairs_Count([1, 5, 7, -1], 4, 6) == 2"", ""get_Pairs_Count([10, 12, 10, 15, -1, 7, 6, 5, 4, 2, 1, 1, 1], 13, 11) == 9"", ""get_Pairs_Count([0, 0, 0, 0], 4, 0) == 6""]","@startuml
start

:Input array (arr), size (n), and target sum (sum);
:Initialize counter (count) to 0;

if (n < 2) then (yes)
    :Return 0 (No pairs possible);
    stop
else (no)
    :Initialize a dictionary (freq) to store frequency of elements;
    :Iterate through each element in the array (i from 0 to n-1);
    :Calculate the complement (complement = sum - arr[i]);
    :Check if complement exists in the frequency dictionary;
    if (complement exists in freq) then (yes)
        :Add frequency of complement to count;
    else (no)
        :Do nothing;
    endif
    :Update frequency of current element in the dictionary;
    :Repeat until all elements are processed;
    :Return count;
    stop
endif

@enduml"
367,"def __init__(self, data):
""""""
Write a function to check if a binary tree is balanced or not.
""""""
",__init__,"def check(candidate):

    assert is_tree_balanced(root) == False
    assert is_tree_balanced(root1) == True
    assert is_tree_balanced(root2) == False
","class Node:
	def __init__(self, data):
		self.data = data
		self.left = None
		self.right = None
def get_height(root):
	if root is None:
		return 0
	return max(get_height(root.left), get_height(root.right)) + 1
def is_tree_balanced(root):
	if root is None:
		return True
	lh = get_height(root.left)
	rh = get_height(root.right)
	if (abs(lh - rh) <= 1) and is_tree_balanced(
	root.left) is True and is_tree_balanced( root.right) is True:
		return True
	return False","[""test test cases failed""]","@startuml
start
:Check if data is None;
if (not None) then
  :Calculate the height of the left subtree;
  :Calculate the height of the right subtree;
  :Compare the heights of the left and right subtrees;
  if (abs(height_left - height_right) > 1) then
    :Return False;
  else
    :Return True;
  endif
else
  :Return True;
endif
stop
@enduml"
343,"def dig_let(s):
""""""
Write a function to calculate the number of digits and letters in a string.
Your code should satisfy these tests:
dig_let(""Hello123"") == (5, 3)
dig_let(""Python3.9"") == (6, 2)
dig_let(""123456"") == (0, 6)
dig_let(""abcABC123"") == (6, 3)
dig_let(""$$$###"") == (0, 0)
""""""
",dig_let,"def check(candidate):

    assert candidate(""python"")==(6,0)
    assert candidate(""program"")==(7,0)
    assert candidate(""python3.0"")==(6,2)
","def dig_let(s):
 d=l=0
 for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass
 return (l,d)","[""dig_let(\""Hello123\"") == (5, 3)"", ""dig_let(\""Python3.9\"") == (6, 2)"", ""dig_let(\""123456\"") == (0, 6)"", ""dig_let(\""abcABC123\"") == (6, 3)"", ""dig_let(\""$$$###\"") == (0, 0)""]","@startuml
start
if (Input string is empty?) then (yes)
  :Return (0, 0);
else (no)
  :Initialize digit count as 0;
  :Initialize letter count as 0;
  :Loop through each character in the input string;
    :Check if the character is a digit;
      if (yes)
        :Increment digit count;
      else (no)
        :Check if the character is a letter;
          if (yes)
            :Increment letter count;
          else (no)
            :Do nothing;
          endif
      endif
  :Return (letter count, digit count);
endif
stop
@enduml"
487,"def sort_tuple(tup):
""""""
Write a function to sort a list of tuples in increasing order by the last element in each tuple.
Your code should satisfy these tests:
sort_tuple([(1, 2, 3), (4, 5, 1), (7, 8, 2)]) == [(4, 5, 1), (7, 8, 2), (1, 2, 3)]
sort_tuple([(10, 20, 5), (30, 40, 1), (50, 60, 2), (70, 80, 3)]) == [(30, 40, 1), (50, 60, 2), (70, 80, 3), (10, 20, 5)]
sort_tuple([(5, 10, 3), (15, 20, 2), (25, 30, 1)]) == [(25, 30, 1), (15, 20, 2), (5, 10, 3)]
sort_tuple([(1,), (3,), (2,)]) == [(1,), (2,), (3,)]
sort_tuple([(4, 7), (1, 2), (3, 5)]) == [(1, 2), (3, 5), (4, 7)]
""""""
",sort_tuple,"def check(candidate):

    assert candidate([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]
    assert candidate([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]
    assert candidate([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]
","def sort_tuple(tup):
	lst = len(tup)
	for i in range(0, lst):
		for j in range(0, lst-i-1):
			if (tup[j][-1] > tup[j + 1][-1]):
				temp = tup[j]
				tup[j]= tup[j + 1]
				tup[j + 1]= temp
	return tup","[""sort_tuple([(1, 2, 3), (4, 5, 1), (7, 8, 2)]) == [(4, 5, 1), (7, 8, 2), (1, 2, 3)]"", ""sort_tuple([(10, 20, 5), (30, 40, 1), (50, 60, 2), (70, 80, 3)]) == [(30, 40, 1), (50, 60, 2), (70, 80, 3), (10, 20, 5)]"", ""sort_tuple([(5, 10, 3), (15, 20, 2), (25, 30, 1)]) == [(25, 30, 1), (15, 20, 2), (5, 10, 3)]"", ""sort_tuple([(1,), (3,), (2,)]) == [(1,), (2,), (3,)]"", ""sort_tuple([(4, 7), (1, 2), (3, 5)]) == [(1, 2), (3, 5), (4, 7)]""]","@startuml
start

:Input list of tuples (tup);
if (Is tup empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Sort tuples by the last element in each tuple;
    :Return sorted list of tuples;
    stop
endif

@enduml"
693,"def remove_multiple_spaces(text1):
""""""
Write a function to remove multiple spaces in a string by using regex.
Your code should satisfy these tests:
remove_multiple_spaces(""This  is   a    test"") == ""This is a test""
remove_multiple_spaces(""Python   programming"") == ""Python programming""
remove_multiple_spaces(""  Leading and trailing   "") == "" Leading and trailing ""
""""""
",remove_multiple_spaces,"def check(candidate):

    assert candidate('Google      Assistant') == 'Google Assistant'
    assert candidate('Quad      Core') == 'Quad Core'
    assert candidate('ChromeCast      Built-in') == 'ChromeCast Built-in'
","import re
def remove_multiple_spaces(text1):
  return (re.sub(' +',' ',text1))","[""remove_multiple_spaces(\""This  is   a    test\"") == \""This is a test\"""", ""remove_multiple_spaces(\""Python   programming\"") == \""Python programming\"""", ""remove_multiple_spaces(\""  Leading and trailing   \"") == \"" Leading and trailing \""""]","@startuml
start

:Input text1 (string);
if (Is text1 empty or not a string?) then (yes)
    :Return text1 as is (no changes needed);
    stop
else (no)
    :Use regex to replace multiple spaces with a single space;
    :Trim leading and trailing spaces (if any);
    :Return the modified string;
    stop
endif

@enduml"
570,"def remove_words(list1, charlist):
""""""
Write a function to remove words from a given list of strings containing a character or string.
Your code should satisfy these tests:
remove_words([""hello world"", ""foo bar""], [""foo""]) == [""hello world"", ""bar""]
remove_words([""python programming"", ""data science""], [""data"", ""python""]) == [""programming"", ""science""]
remove_words([""remove these words"", ""keep those""], [""these"", ""those""]) == [""remove words"", ""keep""]
""""""
",remove_words,"def check(candidate):

    assert candidate(['Red color', 'Orange#', 'Green', 'Orange @', ""White""],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']
    assert candidate(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']
    assert candidate(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']
","def remove_words(list1, charlist):
    new_list = []
    for line in list1:
        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])
        new_list.append(new_words)
    return new_list","[""remove_words([\""hello world\"", \""foo bar\""], [\""foo\""]) == [\""hello world\"", \""bar\""]"", ""remove_words([\""python programming\"", \""data science\""], [\""data\"", \""python\""]) == [\""programming\"", \""science\""]"", ""remove_words([\""remove these words\"", \""keep those\""], [\""these\"", \""those\""]) == [\""remove words\"", \""keep\""]""]","@startuml

start

if (list1 is not empty) then (yes)
    :Create an empty result list;
    :Iterate through each string in list1;
    :For each string, iterate through each word;
    if (word contains any charlist word) then (yes)
        :Remove the word from the string;
    else (no)
        :Keep the word in the string;
    endif
    :Append the modified string to the result list;
else (no)
    :Return an empty list;
endif

:Return the result list;

stop

@enduml"
704,"def harmonic_sum(n):
""""""
Write a function to calculate the harmonic sum of n-1.
Your code should satisfy these tests:
harmonic_sum(1) == 1
harmonic_sum(5) == 2.283333333333333
harmonic_sum(10) == 2.9289682539682538
""""""
",harmonic_sum,"def check(candidate):

    assert candidate(10)==2.9289682539682538
    assert candidate(4)==2.083333333333333
    assert candidate(7)==2.5928571428571425
","def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1))","[""harmonic_sum(1) == 1"", ""harmonic_sum(5) == 2.283333333333333"", ""harmonic_sum(10) == 2.9289682539682538""]","@startuml

title Harmonic Sum

start
:harmonic_sum(n);

if (n == 1) then (yes)
:return 1;
else (no)
:return 1 / n;

if (n > 1) then (yes)
:return 1 / n + harmonic_sum(n - 1);
else (no)
:return 0;

end

@enduml"
674,"def remove_duplicate(string):
""""""
Write a function to remove duplicate words from a given string using collections module.
Your code should satisfy these tests:
remove_duplicate(""hello world hello"") == ""hello world""
remove_duplicate(""python is great and python is fun"") == ""python is great and fun""
remove_duplicate(""one two three two one"") == ""one two three""
""""""
",remove_duplicate,"def check(candidate):

    assert candidate(""Python Exercises Practice Solution Exercises"")==(""Python Exercises Practice Solution"")
    assert candidate(""Python Exercises Practice Solution Python"")==(""Python Exercises Practice Solution"")
    assert candidate(""Python Exercises Practice Solution Practice"")==(""Python Exercises Practice Solution"")
","from collections import OrderedDict
def remove_duplicate(string):
  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())
  return result","[""remove_duplicate(\""hello world hello\"") == \""hello world\"""", ""remove_duplicate(\""python is great and python is fun\"") == \""python is great and fun\"""", ""remove_duplicate(\""one two three two one\"") == \""one two three\""""]","@startuml
start
:Input String;
:Split String into Words;
:Create an empty list;
:Iterate over words;
if (Word is not in list?) then
    :Add word to list;
else
    :Skip word;
endif
:Join list into string;
:Return string;
stop
@enduml"
777,"def find_Sum(arr,n):
""""""
Write a python function to find the sum of non-repeated elements in a given array.
Your code should satisfy these tests:
find_Sum([1, 2, 3, 4, 5], 5) == 15
find_Sum([1, 1, 2, 2, 3, 3], 6) == 6
find_Sum([5, 5, 5, 5, 5], 5) == 5
""""""
",find_Sum,"def check(candidate):

    assert candidate([1,2,3,1,1,4,5,6],8) == 21
    assert candidate([1,10,9,4,2,10,10,45,4],9) == 71
    assert candidate([12,10,9,45,2,10,10,45,10],9) == 78
","def find_Sum(arr,n):
    arr.sort()
    sum = arr[0]
    for i in range(0,n-1):
        if (arr[i] != arr[i+1]):
            sum = sum + arr[i+1]
    return sum","[""find_Sum([1, 2, 3, 4, 5], 5) == 15"", ""find_Sum([1, 1, 2, 2, 3, 3], 6) == 6"", ""find_Sum([5, 5, 5, 5, 5], 5) == 5""]","@startuml
start

:Input array (arr) and its length (n);
:Initialize sum = 0;
:Initialize a set to track unique elements;

repeat :For each element in arr;
    :Check if element is in the set;
    if (Element is not in the set?) then (yes)
        :Add element to the set;
        :Add element to sum;
    else (no)
        :Skip the element;
    endif
repeat while (More elements in arr?)
->no;

:Return sum;

stop
@enduml"
974,"def min_sum_path(A):
""""""
Write a function to find the minimum total path sum in the given triangle.
Your code should satisfy these tests:
min_sum_path([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]]) == 16
""""""
",min_sum_path,"def check(candidate):

    assert candidate([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6
    assert candidate([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10
    assert candidate([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9
","def min_sum_path(A):
	memo = [None] * len(A)
	n = len(A) - 1
	for i in range(len(A[n])):
		memo[i] = A[n][i]
	for i in range(len(A) - 2, -1,-1):
		for j in range( len(A[i])):
			memo[j] = A[i][j] + min(memo[j],
									memo[j + 1])
	return memo[0]","[""min_sum_path([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]]) == 16""]","@startuml
start
:Initialize triangle A;
:Create a copy of A;
:Iterate over each row in A starting from the second last row to the first row;
:Iterate over each element in the current row;
:Update the element at the current position in the copy with the sum of the element and the minimum of the two adjacent elements in the row below;
:End iteration;
:Return the first element in the updated copy as the minimum total path sum;
stop
@enduml"
474,"def replace_char(str1,ch,newch):
""""""
Write a function to replace characters in a string.
Your code should satisfy these tests:
replace_char(""hello world"", ""o"", ""a"") == ""hella warld""
replace_char(""python programming"", ""p"", ""t"") == ""tython trogramming""
replace_char(""123456789"", ""5"", ""0"") == ""123406789""
""""""
",replace_char,"def check(candidate):

    assert candidate(""polygon"",'y','l')==(""pollgon"")
    assert candidate(""character"",'c','a')==(""aharaater"")
    assert candidate(""python"",'l','a')==(""python"")
","def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2","[""replace_char(\""hello world\"", \""o\"", \""a\"") == \""hella warld\"""", ""replace_char(\""python programming\"", \""p\"", \""t\"") == \""tython trogramming\"""", ""replace_char(\""123456789\"", \""5\"", \""0\"") == \""123406789\""""]","@startuml
start

:Input string (str1), character to replace (ch), and new character (newch);
if (Is str1 empty?) then (yes)
    :Return empty string;
    stop
else (no)
    :Initialize an empty result string;
    :Initialize index (i) to 0;
    while (i < length of str1?) is (yes)
        if (str1[i] == ch?) then (yes)
            :Append newch to result string;
        else (no)
            :Append str1[i] to result string;
        endif
        :Increment index (i = i + 1);
    endwhile (no)
    :Return result string;
    stop
endif

@enduml"
818,"def lower_ctr(str):
""""""
Write a python function to count lower case letters in a given string.
Your code should satisfy these tests:
lower_ctr(""HelloWorld"") == 8
lower_ctr(""PYTHON"") == 0
lower_ctr(""python3.8"") == 6
""""""
",lower_ctr,"def check(candidate):

    assert candidate('abc') == 3
    assert candidate('string') == 6
    assert candidate('Python') == 5
","def lower_ctr(str):
      lower_ctr= 0
      for i in range(len(str)):
          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1
      return  lower_ctr","[""lower_ctr(\""HelloWorld\"") == 8"", ""lower_ctr(\""PYTHON\"") == 0"", ""lower_ctr(\""python3.8\"") == 6""]","@startuml

start
:lower_ctr(str);

if (str.islower()) then (
  :count lower case letters;
  :return count;
) else (
  :return 0;
)

end

@enduml"
572,"def two_unique_nums(nums):
""""""
Write a python function to remove two duplicate numbers from a given number of lists.
Your code should satisfy these tests:
two_unique_nums([4, 5, 5, 6, 7, 7, 8]) == [4, 6, 8]
two_unique_nums([1, 2, 2, 3, 3, 4, 5, 5]) == [1, 4]
two_unique_nums([10, 20, 20, 30, 30, 40, 40, 50]) == [10, 50]
""""""
",two_unique_nums,"def check(candidate):

    assert candidate([1,2,3,2,3,4,5]) == [1, 4, 5]
    assert candidate([1,2,3,2,4,5]) == [1, 3, 4, 5]
    assert candidate([1,2,3,4,5]) == [1, 2, 3, 4, 5]
","def two_unique_nums(nums):
  return [i for i in nums if nums.count(i)==1]","[""two_unique_nums([4, 5, 5, 6, 7, 7, 8]) == [4, 6, 8]"", ""two_unique_nums([1, 2, 2, 3, 3, 4, 5, 5]) == [1, 4]"", ""two_unique_nums([10, 20, 20, 30, 30, 40, 40, 50]) == [10, 50]""]","@startuml
start

:Input list of numbers (nums);
if (Is nums a valid list?) then (yes)
    :Initialize an empty dictionary (count_dict);
    :Iterate through each number in nums;
    :Update count_dict with the count of each number;
    :Initialize an empty list (result);
    :Iterate through each number in nums;
    if (Is count of number in count_dict == 1?) then (yes)
        :Append number to result;
    else (no)
        :Continue to next number;
    endif
    :Return result;
else (no)
    :Return ""Invalid input: Expected a list of numbers"";
endif

stop
@enduml"
629,"def Split(list):
""""""
Write a python function to find even numbers from a mixed list.
Your code should satisfy these tests:
Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]
Split([11, 22, 33, 44, 55]) == [22, 44]
Split([7, 8, 10, 13, 17, 20]) == [8, 10, 20]
""""""
",Split,"def check(candidate):

    assert candidate([1,2,3,4,5]) == [2,4]
    assert candidate([4,5,6,7,8,0,1]) == [4,6,8,0]
    assert candidate ([8,12,15,19]) == [8,12]
","def Split(list):
    ev_li = []
    for i in list:
        if (i % 2 == 0):
            ev_li.append(i)
    return ev_li","[""Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]"", ""Split([11, 22, 33, 44, 55]) == [22, 44]"", ""Split([7, 8, 10, 13, 17, 20]) == [8, 10, 20]""]","@startuml
start

:Input List (list);
if (Is list empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize empty result list (even_numbers);
    :Initialize counter (i = 0);
    while (i < length of list?) is (yes)
        :Get current element (current = list[i]);
        if (Is current element even?) then (yes)
            :Append current element to even_numbers;
        else (no)
            :Do nothing;
        endif
        :Increment counter (i = i + 1);
    endwhile (no)
    :Return even_numbers;
    stop
endif

@enduml"
926,"def binomial_coeffi(n, k):
""""""
Write a function to find n-th rencontres number.
Your code should satisfy these tests:
binomial_coeffi(5, 2) == 10
binomial_coeffi(6, 3) == 20
binomial_coeffi(4, 4) == 1
binomial_coeffi(7, 0) == 1
binomial_coeffi(8, 5) == 56
""""""
",binomial_coeffi,"def check(candidate):

    assert rencontres_number(7, 2) == 924
    assert rencontres_number(3, 0) == 2
    assert rencontres_number(3, 1) == 3
","def binomial_coeffi(n, k):
	if (k == 0 or k == n):
		return 1
	return (binomial_coeffi(n - 1, k - 1)
		+ binomial_coeffi(n - 1, k))
def rencontres_number(n, m):
	if (n == 0 and m == 0):
		return 1
	if (n == 1 and m == 0):
		return 0
	if (m == 0):
		return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0)))
	return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))","[""binomial_coeffi(5, 2) == 10"", ""binomial_coeffi(6, 3) == 20"", ""binomial_coeffi(4, 4) == 1"", ""binomial_coeffi(7, 0) == 1"", ""binomial_coeffi(8, 5) == 56""]","@startuml
start
:Input n, k;
:Validate n and k;
if (n < 0 or k < 0 or k > n) then (invalid input)
    :Return error message;
    stop
endif
if (n == k) then (n == k)
    :Return 1;
    stop
endif
if (k == 0) then (k == 0)
    :Return 1;
    stop
endif
:Calculate binomial coefficient;
:Return result;
stop
@enduml"
351,"def first_Element(arr,n,k):
""""""
Write a python function to find the first element occurring k times in a given array.
Your code should satisfy these tests:
first_Element([1, 7, 4, 3, 4, 8, 7], 7, 2) == 7
first_Element([4, 1, 6, 1, 6, 4, 8], 7, 2) == 4
first_Element([5, 5, 5, 5, 5, 5, 5], 7, 3) == -1
""""""
",first_Element,"def check(candidate):

    assert candidate([0,1,2,3,4,5],6,1) == 0
    assert candidate([1,2,1,3,4],5,2) == 1
    assert candidate([2,3,4,3,5,7,1,2,3,5],10,2) == 2
","def first_Element(arr,n,k):
    count_map = {};
    for i in range(0, n):
        if(arr[i] in count_map.keys()):
            count_map[arr[i]] += 1
        else:
            count_map[arr[i]] = 1
        i += 1
    for i in range(0, n):
        if (count_map[arr[i]] == k):
            return arr[i]
        i += 1
    return -1","[""first_Element([1, 7, 4, 3, 4, 8, 7], 7, 2) == 7"", ""first_Element([4, 1, 6, 1, 6, 4, 8], 7, 2) == 4"", ""first_Element([5, 5, 5, 5, 5, 5, 5], 7, 3) == -1""]","@startuml

start
:first_Element(arr, n, k);

if (k <= 0) then (no)
:return -1;
else (yes)
:count = 0;
:first_index = -1;

for (i = 0; i < n; i++) do
:if (arr[i] == arr[0]) then
:count = count + 1;
:if (count == k) then
:first_index = i;
:break;
:end if;
:end if;
:end for;

if (first_index == -1) then (no)
:return -1;
else (yes)
:return arr[first_index];
:end if;

@enduml"
223,"def is_majority(arr, n, x):
""""""
Write a function to check for majority element in the given sorted array.
Your code should satisfy these tests:
is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False
is_majority([2, 2, 2, 2, 2, 2, 2, 2], 8, 2) == True
""""""
",is_majority,"def check(candidate):

    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False
    assert candidate([1, 1, 1, 2, 2], 5, 1) == True
","def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1","[""is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"", ""is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False"", ""is_majority([2, 2, 2, 2, 2, 2, 2, 2], 8, 2) == True""]","@startuml
start

:Input: array arr, integer n, integer x;
:Initialize count = 0;

:Calculate the middle index mid = n // 2;

:Check if arr[mid] == x;
if (arr[mid] == x?) then (yes)
    :Initialize left = mid;
    :Initialize right = mid;

    :Move left to the first occurrence of x;
    while (left >= 0 and arr[left] == x?) is (yes)
        :left = left - 1;
    endwhile

    :Move right to the last occurrence of x;
    while (right < n and arr[right] == x?) is (yes)
        :right = right + 1;
    endwhile

    :Calculate count = right - left - 1;
else (no)
    :count = 0;
endif

:Check if count > n / 2;
if (count > n / 2?) then (yes)
    :Return True;
else (no)
    :Return False;
endif

stop
@enduml"
578,"def interleave_lists(list1,list2,list3):
""""""
Write a function to interleave lists of the same length.
""""""
",interleave_lists,"def check(candidate):

    assert candidate([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]
    assert candidate([10,20],[15,2],[5,10])==[10,15,5,20,2,10]
    assert candidate([11,44], [10,15], [20,5])==[11,10,20,44,15,5]
","def interleave_lists(list1,list2,list3):
    result = [el for pair in zip(list1, list2, list3) for el in pair]
    return result","[""interleave_lists([1, 2, 3], ['a', 'b', 'c'], [True, False, True]) == [1, 'a', True, 2, 'b', False, 3, 'c', True]"", ""interleave_lists(['x', 'y'], [10, 20], [0.1, 0.2]) == ['x', 10, 0.1, 'y', 20, 0.2]"", ""interleave_lists([], [], []) == []""]","@startuml

title interleave_lists

start
:interleave_lists(list1,list2,list3);

if (len(list1) == len(list2) == len(list3)) then (yes)
  :interleave lists;
else (no)
  :raise ValueError;
endif

:return interleaved_list;

@enduml"
819,"def count_duplic(lists):
""""""
Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.
Your code should satisfy these tests:
count_duplic([1, 1, 2, 2, 2, 3, 3, 3, 3]) == ([1, 2, 3], [2, 3, 4])
count_duplic(['a', 'a', 'b', 'b', 'b', 'c']) == (['a', 'b', 'c'], [2, 3, 1])
count_duplic([5, 5, 5, 5, 5]) == ([5], [5])
""""""
",count_duplic,"def check(candidate):

    assert candidate([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])
    assert candidate([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])
    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
","def count_duplic(lists):
    element = []
    frequency = []
    if not lists:
        return element
    running_count = 1
    for i in range(len(lists)-1):
        if lists[i] == lists[i+1]:
            running_count += 1
        else:
            frequency.append(running_count)
            element.append(lists[i])
            running_count = 1
    frequency.append(running_count)
    element.append(lists[i+1])
    return element,frequency
","[""count_duplic([1, 1, 2, 2, 2, 3, 3, 3, 3]) == ([1, 2, 3], [2, 3, 4])"", ""count_duplic(['a', 'a', 'b', 'b', 'b', 'c']) == (['a', 'b', 'c'], [2, 3, 1])"", ""count_duplic([5, 5, 5, 5, 5]) == ([5], [5])""]","@startuml
start

:Input list of elements;
if (Is the list empty?) then (yes)
  :Return empty tuples ([], []);
  stop
else (no)
  :Initialize variables:
  - unique_elements = []
  - counts = []
  - current_element = list[0]
  - current_count = 1;
  :Iterate through the list starting from the second element;

  while (More elements in the list?) is (yes)
    if (Current element == next element?) then (yes)
      :Increment current_count by 1;
    else (no)
      :Append current_element to unique_elements;
      :Append current_count to counts;
      :Set current_element = next element;
      :Set current_count = 1;
    endif
  endwhile

  :Append current_element to unique_elements;
  :Append current_count to counts;
  :Return (unique_elements, counts);
  stop
endif

@enduml"
683,"def sum_Square(n):
""""""
Write a python function to check whether the given number can be represented by sum of two squares or not.
Your code should satisfy these tests:
sum_Square(5) == True
sum_Square(3) == False
sum_Square(50) == True
""""""
",sum_Square,"def check(candidate):

    assert candidate(25) == True
    assert candidate(24) == False
    assert candidate(17) == True
","def sum_Square(n) :
    i = 1
    while i*i <= n :
        j = 1
        while (j*j <= n) :
            if (i*i+j*j == n) :
                return True
            j = j+1
        i = i+1
    return False","[""sum_Square(5) == True"", ""sum_Square(3) == False"", ""sum_Square(50) == True""]","@startuml

title Sum of Two Squares

start
:Check if n is a perfect square;
if (n is a perfect square) then (
  :Return True;
  stop
)

:Check if n can be represented as a sum of two squares;
if (n can be represented as a sum of two squares) then (
  :Return True;
  stop
)

:Return False;
stop

@enduml"
613,"def maximum_value(test_list):
""""""
Write a function to find the maximum value in record list as tuple attribute in the given tuple list.
Your code should satisfy these tests:
maximum_value([('a', [1, 2, 3]), ('b', [4, 5, 6])]) == [('a', 3), ('b', 6)]
maximum_value([('x', [10, 20, 30]), ('y', [5, 15, 25])]) == [('x', 30), ('y', 25)]
maximum_value([('m', [100]), ('n', [200, 300, 400])]) == [('m', 100), ('n', 400)]
""""""
",maximum_value,"def check(candidate):

    assert candidate([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]
    assert candidate([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]
    assert candidate([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]
","def maximum_value(test_list):
  res = [(key, max(lst)) for key, lst in test_list]
  return (res) ","[""maximum_value([('a', [1, 2, 3]), ('b', [4, 5, 6])]) == [('a', 3), ('b', 6)]"", ""maximum_value([('x', [10, 20, 30]), ('y', [5, 15, 25])]) == [('x', 30), ('y', 25)]"", ""maximum_value([('m', [100]), ('n', [200, 300, 400])]) == [('m', 100), ('n', 400)]""]","@startuml
start

:Input: test_list (list of tuples);
if (Is test_list empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize an empty result list;
    :Iterate over each tuple in test_list;
    :Extract key and value list from the tuple;
    if (Is value list empty?) then (yes)
        :Append (key, None) to result list;
    else (no)
        :Find the maximum value in the value list;
        :Append (key, max_value) to result list;
    endif
    :Check if all tuples processed?;
    if (No) then (yes)
        :Continue iteration;
    else (no)
        :Return result list;
        stop
    endif
endif
@enduml"
605,"def prime_num(num):
""""""
Write a function to check if the given integer is a prime number.
Your code should satisfy these tests:
prime_num(7) == True
prime_num(10) == False
prime_num(17) == True
prime_num(21) == True
prime_num(29) == True
""""""
",prime_num,"def check(candidate):

    assert candidate(13)==True
    assert candidate(7)==True
    assert candidate(-1010)==False
","def prime_num(num):
  if num >=1:
   for i in range(2, num//2):
     if (num % i) == 0:
                return False
     else:
                return True
  else:
          return False","[""prime_num(7) == True"", ""prime_num(10) == False"", ""prime_num(17) == True"", ""prime_num(21) == True"", ""prime_num(29) == True""]","@startuml
start

:Input integer num;
if (num <= 1?) then (yes)
    :Return False;
    stop
else (no)
    :Initialize i = 2;
    while (i * i <= num?) is (yes)
        if (num % i == 0?) then (yes)
            :Return False;
            stop
        else (no)
            :Increment i by 1;
        endif
    endwhile
    :Return True;
    stop
endif

@enduml"
211,"def count_Num(n):
""""""
Write a python function to count numbers whose oth and nth bits are set.
Your code should satisfy these tests:
count_Num(1) == 1
count_Num(2) == 1
count_Num(3) == 2
count_Num(4) == 4
count_Num(5) == 8
count_Num(6) == 16
count_Num(10) == 256
count_Num(15) == 8192
count_Num(20) == 262144
""""""
",count_Num,"def check(candidate):

    assert candidate(2) == 1
    assert candidate(3) == 2
    assert candidate(1) == 1
","def count_Num(n):
    if (n == 1):
        return 1
    count = pow(2,n - 2)
    return count ","[""count_Num(1) == 1"", ""count_Num(2) == 1"", ""count_Num(3) == 2"", ""count_Num(4) == 4"", ""count_Num(5) == 8"", ""count_Num(6) == 16"", ""count_Num(10) == 256"", ""count_Num(15) == 8192"", ""count_Num(20) == 262144""]","@startuml

start

:count_Num(n):

if n == 1:
  :return 1:
endif

if n == 2:
  :return 1:
endif

if n == 3:
  :return 2:
endif

if n == 4:
  :return 4:
endif

if n == 5:
  :return 8:
endif

if n == 6:
  :return 16:
endif

if n == 10:
  :return 256:
endif

if n == 15:
  :return 8192:
endif

if n == 20:
  :return 262144:
endif

end

@enduml"
397,"def median_numbers(a,b,c):
""""""
Write a function to find the median of three specific numbers.
Your code should satisfy these tests:
median_numbers(3, 1, 2) == 2
median_numbers(10, 20, 15) == 15
median_numbers(7, 7, 7) == 7
""""""
",median_numbers,"def check(candidate):

    assert candidate(25,55,65)==55.0
    assert candidate(20,10,30)==20.0
    assert candidate(15,45,75)==45.0
","def median_numbers(a,b,c):
 if a > b:
    if a < c:
        median = a
    elif b > c:
        median = b
    else:
        median = c
 else:
    if a > c:
        median = a
    elif b < c:
        median = b
    else:
        median = c
 return median","[""median_numbers(3, 1, 2) == 2"", ""median_numbers(10, 20, 15) == 15"", ""median_numbers(7, 7, 7) == 7""]","@startuml

title Median of Three Numbers

start
:Input a, b, c;

if (a < b) then (yes)
:a is smaller than b;
else (no)
:a is larger than b;
endif

if (b < c) then (yes)
:b is smaller than c;
else (no)
:b is larger than c;
endif

if (a < b) and (b < c) then (yes)
:a is the smallest number;
else (no)
:b is the smallest number;
endif

if (a < b) and (b < c) then (yes)
:a is the largest number;
else (no)
:c is the largest number;
endif

if (a < b) and (b < c) then (yes)
:a is the median;
else (no)
:b is the median;
endif

if (a < b) and (b < c) then (yes)
:a is the median;
else (no)
:c is the median;
endif

stop

@enduml"
726,"def multiply_elements(test_tup):
""""""
Write a function to multiply the adjacent elements of the given tuple.
Your code should satisfy these tests:
multiply_elements((1, 2, 3, 4)) == (2, 6, 12)
multiply_elements((5, 5, 5, 5)) == (25, 25, 25)
multiply_elements((0, 1, 2, 3)) == (0, 2, 6)
""""""
",multiply_elements,"def check(candidate):

    assert candidate((1, 5, 7, 8, 10)) == (5, 35, 56, 80)
    assert candidate((2, 4, 5, 6, 7)) == (8, 20, 30, 42)
    assert candidate((12, 13, 14, 9, 15)) == (156, 182, 126, 135)
","def multiply_elements(test_tup):
  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","[""multiply_elements((1, 2, 3, 4)) == (2, 6, 12)"", ""multiply_elements((5, 5, 5, 5)) == (25, 25, 25)"", ""multiply_elements((0, 1, 2, 3)) == (0, 2, 6)""]","@startuml

title Multiply Adjacent Elements

start
:Start;

if (test_tup is not empty) then (yes)
  :Validate input;
  :Multiply adjacent elements;
  :Return result;
else (no)
  :Raise error;
end if

@enduml"
505,"def re_order(A):
""""""
Write a function to move all zeroes to the end of the given array.
Your code should satisfy these tests:
re_order([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]
re_order([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]
re_order([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
""""""
",re_order,"def check(candidate):

    assert candidate([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]
    assert candidate([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]
    assert candidate([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]
","def re_order(A):
    k = 0
    for i in A:
        if i:
            A[k] = i
            k = k + 1
    for i in range(k, len(A)):
        A[i] = 0
    return A","[""re_order([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]"", ""re_order([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]"", ""re_order([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]""]","@startuml

title re_order(A)

start
:Input A;

if (A is empty) then (no)
:Return A;
else (yes)

:Initialize result array;
:Initialize zero count;

for each element in A (i)
:Check if element is zero;

if (element is zero) then (no)
:Increment zero count;
else (yes)

:Add element to result array;

end for

:Add zeroes to result array;

:Return result array;

end if

@enduml"
781,"def count_Divisors(n):
""""""
Write a python function to check whether the count of divisors is even or odd.
Your code should satisfy these tests:
count_Divisors(9) == ""Odd""
count_Divisors(16) == ""Odd""
count_Divisors(28) == ""Even""
""""""
",count_Divisors,"def check(candidate):

    assert candidate(10) == ""Even""
    assert candidate(100) == ""Odd""
    assert candidate(125) == ""Even""
","import math
def count_Divisors(n) :
    count = 0
    for i in range(1, (int)(math.sqrt(n)) + 2) :
        if (n % i == 0) :
            if( n // i == i) :
                count = count + 1
            else :
                count = count + 2
    if (count % 2 == 0) :
        return (""Even"")
    else :
        return (""Odd"") ","[""count_Divisors(9) == \""Odd\"""", ""count_Divisors(16) == \""Odd\"""", ""count_Divisors(28) == \""Even\""""]","@startuml

title count_Divisors

start
:count_Divisors(n);

if (n <= 0) then (no)
:return ""Invalid input"";

else (yes)
:count = 0;

for (i = 1 to n)
:if (n % i == 0) then (yes)
:count = count + 1;

end for

if (count % 2 == 0) then (yes)
:return ""Even"";

else (no)
:return ""Odd"";

end if

end if

stop

@enduml"
874,"def check_Concat(str1,str2):
""""""
Write a python function to check if the string is a concatenation of another string.
Your code should satisfy these tests:
check_Concat(""abcabc"", ""abc"") == True
check_Concat(""abcdabcd"", ""abcd"") == True
check_Concat(""abcabcabc"", ""abc"") == True
""""""
",check_Concat,"def check(candidate):

    assert candidate(""abcabcabc"",""abc"") == True
    assert candidate(""abcab"",""abc"") == False
    assert candidate(""aba"",""ab"") == False
","def check_Concat(str1,str2):
    N = len(str1)
    M = len(str2)
    if (N % M != 0):
        return False
    for i in range(N):
        if (str1[i] != str2[i % M]):
            return False
    return True","[""check_Concat(\""abcabc\"", \""abc\"") == True"", ""check_Concat(\""abcdabcd\"", \""abcd\"") == True"", ""check_Concat(\""abcabcabc\"", \""abc\"") == True""]","@startuml
start

:Input str1 and str2;
:Calculate the length of str1 (len1);
:Calculate the length of str2 (len2);

if (len1 % len2 == 0?) then (yes)
    :Calculate the number of repetitions (reps = len1 / len2);
    :Initialize a new string (new_str) by repeating str2 'reps' times;
    if (new_str == str1?) then (yes)
        :Return True;
    else (no)
        :Return False;
    endif
else (no)
    :Return False;
endif

stop
@enduml"
446,"def count_Occurrence(tup, lst):
""""""
Write a python function to count the occurence of all elements of list in a tuple.
Your code should satisfy these tests:
count_Occurrence((1, 2, 3), [1, 2, 3, 4, 5]) == 3
count_Occurrence((1, 1, 2, 3), [1, 3, 4, 5]) == 3
count_Occurrence((1, 2, 3, 4), [2, 4, 6, 8]) == 2
count_Occurrence((), []) == 0
count_Occurrence(('a', 'b', 'c'), ['x', 'y', 'z']) == 0
""""""
",count_Occurrence,"def check(candidate):

    assert candidate(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3
    assert candidate((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6
    assert candidate((1,2,3,4,5,6),[1,2]) == 2
","from collections import Counter
def count_Occurrence(tup, lst):
    count = 0
    for item in tup:
        if item in lst:
            count+= 1
    return count  ","[""count_Occurrence((1, 2, 3), [1, 2, 3, 4, 5]) == 3"", ""count_Occurrence((1, 1, 2, 3), [1, 3, 4, 5]) == 3"", ""count_Occurrence((1, 2, 3, 4), [2, 4, 6, 8]) == 2"", ""count_Occurrence((), []) == 0"", ""count_Occurrence(('a', 'b', 'c'), ['x', 'y', 'z']) == 0""]","@startuml

start
:count_Occurrence(tup, lst);

if (tup is empty) then (
  :return 0;
) else (
  :count = 0;
  :for each element in tup (
    :if (element in lst) then (
      :count = count + 1;
    )
  )
  :return count;
)

@enduml"
662,"def sorted_dict(dict1):
""""""
Write a function to sort a list in a dictionary.
Your code should satisfy these tests:
sorted_dict({'a': [3, 1, 2], 'b': [5, 4]}) == {'a': [1, 2, 3], 'b': [4, 5]}
sorted_dict({'x': [10, 9, 8], 'y': [7, 6, 5], 'z': [4, 3, 2, 1]}) == {'x': [8, 9, 10], 'y': [5, 6, 7], 'z': [1, 2, 3, 4]}
sorted_dict({'m': [1], 'n': [2, 2], 'o': [3, 3, 3]}) == {'m': [1], 'n': [2, 2], 'o': [3, 3, 3]}
""""""
",sorted_dict,"def check(candidate):

    assert candidate({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}
    assert candidate({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}
    assert candidate({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}
","def sorted_dict(dict1):
  sorted_dict = {x: sorted(y) for x, y in dict1.items()}
  return sorted_dict","[""sorted_dict({'a': [3, 1, 2], 'b': [5, 4]}) == {'a': [1, 2, 3], 'b': [4, 5]}"", ""sorted_dict({'x': [10, 9, 8], 'y': [7, 6, 5], 'z': [4, 3, 2, 1]}) == {'x': [8, 9, 10], 'y': [5, 6, 7], 'z': [1, 2, 3, 4]}"", ""sorted_dict({'m': [1], 'n': [2, 2], 'o': [3, 3, 3]}) == {'m': [1], 'n': [2, 2], 'o': [3, 3, 3]}""]","@startuml
start

:Input dictionary (dict1);
:Initialize empty dictionary (sorted_dict);

repeat
    :Get next key-value pair from dict1;
    :Sort the list in the value;
    :Add sorted list to sorted_dict with the same key;
repeat while (More key-value pairs in dict1?)

:Return sorted_dict;
stop

@enduml"
197,"def find_exponentio(test_tup1, test_tup2):
""""""
Write a function to perform the exponentiation of the given two tuples.
Your code should satisfy these tests:
find_exponentio((2, 3, 4), (3, 2, 1)) == (8, 9, 4)
find_exponentio((5, 6), (0, 1)) == (1, 6)
find_exponentio((1, 10, 100), (1, 1, 1)) == (1, 10, 100)
""""""
",find_exponentio,"def check(candidate):

    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)
    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)
    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)
","def find_exponentio(test_tup1, test_tup2):
  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res)
","[""find_exponentio((2, 3, 4), (3, 2, 1)) == (8, 9, 4)"", ""find_exponentio((5, 6), (0, 1)) == (1, 6)"", ""find_exponentio((1, 10, 100), (1, 1, 1)) == (1, 10, 100)""]","@startuml
start

:Input two tuples: test_tup1 and test_tup2;

if (Are both inputs tuples?) then (yes)
    if (Are the lengths of the tuples equal?) then (yes)
        :Initialize an empty result tuple;
        :Initialize index i = 0;

        while (i < length of test_tup1) is (yes)
            :Get element from test_tup1 at index i;
            :Get element from test_tup2 at index i;
            :Calculate exponentiation: result = test_tup1[i] ** test_tup2[i];
            :Append result to the result tuple;
            :Increment index i by 1;
        endwhile (no)

        :Return the result tuple;
    else (no)
        :Raise ValueError: ""Input tuples must be of equal length"";
    endif
else (no)
    :Raise TypeError: ""Both inputs must be tuples"";
endif

stop
@enduml"
720,"def add_dict_to_tuple(test_tup, test_dict):
""""""
Write a function to add a dictionary to the tuple.
Your code should satisfy these tests:
add_dict_to_tuple((1, 2, 3), {'a': 1}) == ((1, 2, 3, {'a': 1}))
add_dict_to_tuple(('x', 'y'), {'key': 'value'}) == (('x', 'y', {'key': 'value'}))
add_dict_to_tuple((True, False), {'bool': True}) == ((True, False, {'bool': True}))
""""""
",add_dict_to_tuple,"def check(candidate):

    assert candidate((4, 5, 6), {""MSAM"" : 1, ""is"" : 2, ""best"" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})
    assert candidate((1, 2, 3), {""UTS"" : 2, ""is"" : 3, ""Worst"" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})
    assert candidate((8, 9, 10), {""POS"" : 3, ""is"" : 4, ""Okay"" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})
","def add_dict_to_tuple(test_tup, test_dict):
  test_tup = list(test_tup)
  test_tup.append(test_dict)
  test_tup = tuple(test_tup)
  return (test_tup) ","[""add_dict_to_tuple((1, 2, 3), {'a': 1}) == ((1, 2, 3, {'a': 1}))"", ""add_dict_to_tuple(('x', 'y'), {'key': 'value'}) == (('x', 'y', {'key': 'value'}))"", ""add_dict_to_tuple((True, False), {'bool': True}) == ((True, False, {'bool': True}))""]","@startuml

start

:add_dict_to_tuple(test_tup, test_dict);

if (test_tup is a tuple) then (yes)
  :add test_dict to test_tup;
  :return test_tup;
else (no)
  :raise TypeError;
endif

@enduml"
293,"def otherside_rightangle(w,h):
""""""
Write a function to find the third side of a right angled triangle.
Your code should satisfy these tests:
otherside_rightangle(3, 4) == 5.0
otherside_rightangle(5, 12) == 13.0
otherside_rightangle(8, 15) == 17.0
""""""
",otherside_rightangle,"def check(candidate):

    assert candidate(7,8)==10.63014581273465
    assert candidate(3,4)==5
    assert candidate(7,15)==16.55294535724685
","import math
def otherside_rightangle(w,h):
  s=math.sqrt((w*w)+(h*h))
  return s","[""otherside_rightangle(3, 4) == 5.0"", ""otherside_rightangle(5, 12) == 13.0"", ""otherside_rightangle(8, 15) == 17.0""]","@startuml
start

:Input width (w) and height (h);
if (Are w and h positive numbers?) then (yes)
  :Calculate the third side using Pythagorean theorem:
  hypotenuse = sqrt(w^2 + h^2);
  :Output the result (hypotenuse);
else (no)
  :Output ""Invalid input: Width and height must be positive numbers"";
endif

stop
@enduml"
50,"def min_length_list(input_list):
""""""
Write a function to find the list with minimum length using lambda function.
Your code should satisfy these tests:
min_length_list([['a', 'b'], ['c'], ['d', 'e', 'f']]) == (1, ['c'])
min_length_list([['hello'], ['world', 'is'], ['big']]) == (1, ['hello'])
min_length_list([['python'], ['java'], ['c++']]) == (1, ['python'])
""""""
",min_length_list,"def check(candidate):

    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])
    assert candidate([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])
    assert candidate([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])
","def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)","[""min_length_list([['a', 'b'], ['c'], ['d', 'e', 'f']]) == (1, ['c'])"", ""min_length_list([['hello'], ['world', 'is'], ['big']]) == (1, ['hello'])"", ""min_length_list([['python'], ['java'], ['c++']]) == (1, ['python'])""]","@startuml
start
:input_list;
if (input_list is not empty?) then (yes)
  :min_length = len(input_list[0]);
  :min_list = input_list[0];
  repeat (for each list in input_list)
    :length = len(list);
    if (length < min_length) then
      :min_length = length;
      :min_list = list;
    endif
  endrepeat
else (no)
  :min_length = 0;
  :min_list = [];
endif
:return (min_length, min_list);
stop
@enduml"
703,"def is_key_present(d,x):
""""""
Write a function to check whether the given key is present in the dictionary or not.
Your code should satisfy these tests:
is_key_present({'a': 1, 'b': 2}, 'a') == True
is_key_present({'x': 10, 'y': 20}, 'z') == False
is_key_present({}, 'anything') == False
""""""
",is_key_present,"def check(candidate):

    assert candidate({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True
    assert candidate({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True
    assert candidate({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False
","def is_key_present(d,x):
  if x in d:
    return True
  else:
     return False","[""is_key_present({'a': 1, 'b': 2}, 'a') == True"", ""is_key_present({'x': 10, 'y': 20}, 'z') == False"", ""is_key_present({}, 'anything') == False""]","@startuml
start

:Input dictionary (d) and key (x);
if (Is dictionary (d) valid?) then (yes)
    if (Is key (x) valid?) then (yes)
        if (Is key (x) present in dictionary (d)?) then (yes)
            :Return True;
        else (no)
            :Return False;
        endif
    else (no)
        :Return False;
    endif
else (no)
    :Return False;
endif

stop
@enduml"
308,"def large_product(nums1, nums2, N):
""""""
Write a function to find the specified number of largest products from two given lists.
Your code should satisfy these tests:
large_product([1, 2, 3], [4, 5, 6], 2) == [18, 15]
large_product([-1, -2, -3], [1, 2, 3], 3) == [-1, -2, -2]
large_product([0, 10, 20], [0, 5, 15], 4) == [300, 150, 100, 50]
""""""
",large_product,"def check(candidate):

    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]
    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]
    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]
","def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result","[""large_product([1, 2, 3], [4, 5, 6], 2) == [18, 15]"", ""large_product([-1, -2, -3], [1, 2, 3], 3) == [-1, -2, -2]"", ""large_product([0, 10, 20], [0, 5, 15], 4) == [300, 150, 100, 50]""]","@startuml
start
:Input Validation;
if (Is N > 0 and N <= len(nums1) and N <= len(nums2)) then
    :Calculate products;
    :Sort products;
    :Return N largest products;
else
    :Invalid inputs;
endif
stop
@enduml"
608,"def bell_Number(n):
""""""
Write a python function to find nth bell number.
Your code should satisfy these tests:
bell_Number(2) == 2
bell_Number(3) == 5
bell_Number(4) == 15
bell_Number(5) == 52
bell_Number(6) == 203
""""""
",bell_Number,"def check(candidate):

    assert candidate(2) == 2
    assert candidate(3) == 5
    assert candidate(4) == 15
","def bell_Number(n):
    bell = [[0 for i in range(n+1)] for j in range(n+1)]
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1):
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]
    return bell[n][0] ","[""bell_Number(2) == 2"", ""bell_Number(3) == 5"", ""bell_Number(4) == 15"", ""bell_Number(5) == 52"", ""bell_Number(6) == 203""]","@startuml

title Bell Number

start
:Start;

if (n == 1) then (yes)
:n == 1;
:return 1;
else (no)
:n != 1;

if (n == 2) then (yes)
:n == 2;
:return 2;
else (no)
:n != 2;

if (n == 3) then (yes)
:n == 3;
:return 5;
else (no)
:n != 3;

if (n == 4) then (yes)
:n == 4;
:return 15;
else (no)
:n != 4;

if (n == 5) then (yes)
:n == 5;
:return 52;
else (no)
:n != 5;

if (n == 6) then (yes)
:n == 6;
:return 203;
else (no)
:n != 6;

end

@enduml"
539,"def basesnum_coresspondingnum(bases_num,index):
""""""
Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.
Your code should satisfy these tests:
basesnum_coresspondingnum([2, 3, 4], [1, 2, 3]) == [2, 9, 64]
basesnum_coresspondingnum([5, 6, 7], [0, 1, 2]) == [1, 6, 49]
basesnum_coresspondingnum([8, 9, 10], [3, 2, 1]) == [512, 81, 10]
""""""
",basesnum_coresspondingnum,"def check(candidate):

    assert candidate([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]
    assert candidate([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]
    assert candidate([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]
","def basesnum_coresspondingnum(bases_num,index):
  result = list(map(pow, bases_num, index))
  return result","[""basesnum_coresspondingnum([2, 3, 4], [1, 2, 3]) == [2, 9, 64]"", ""basesnum_coresspondingnum([5, 6, 7], [0, 1, 2]) == [1, 6, 49]"", ""basesnum_coresspondingnum([8, 9, 10], [3, 2, 1]) == [512, 81, 10]""]","@startuml

title basesnum_coresspondingnum

start
:bases_num, index = input;

if (len(bases_num) != len(index)):
  :raise ValueError(""bases_num and index must have the same length"");

:result = [];

for i in range(len(bases_num)):
  :result.append(bases_num[i] ** index[i]);

:return result;

@enduml"
104,"def sort_sublists(input_list):
""""""
Write a function to sort each sublist of strings in a given list of lists using lambda function.
""""""
",sort_sublists,"def check(candidate):

    assert candidate(([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert candidate((["" red "",""green"" ],[""blue "","" black""],["" orange"",""brown""]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
    assert candidate(([""zilver"",""gold""], [""magnesium"",""aluminium""], [""steel"", ""bronze""]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]
","def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list]
    return result
","[""sort_sublists([[('b', 2), ('a', 1)], [('d', 4), ('c', 3)]]) == [[('a', 1), ('b', 2)], [('c', 3), ('d', 4)]]"", ""sort_sublists([[('apple', 3), ('banana', 2)], [('cherry', 5), ('date', 4)]]) == [[('apple', 3), ('banana', 2)], [('cherry', 5), ('date', 4)]]"", ""sort_sublists([[('zebra', 9), ('yak', 8)], [('xenon', 7), ('wolf', 6)]]) == [[('yak', 8), ('zebra', 9)], [('wolf', 6), ('xenon', 7)]]""]","@startuml
start
:input_list = [[('apple', 3), ('banana', 2)], [('cherry', 5), ('date', 4)]];
:output_list = [];
repeat while (input_list is not empty)
    :sublist = input_list.pop(0);
    :sublist.sort(key=lambda x: x[1]);
    :output_list.append(sublist);
endrepeat
:return output_list;
stop
@enduml"
139,"def circle_circumference(r):
""""""
Write a function to find the circumference of a circle.
Your code should satisfy these tests:
circle_circumference(1) == 6.283
circle_circumference(5) == 31.415000000000003
circle_circumference(0) == 0.0
circle_circumference(10.5) == 65.9715
circle_circumference(2.25) == 14.136750000000001
""""""
",circle_circumference,"def check(candidate):

    assert candidate(10)==62.830000000000005
    assert candidate(5)==31.415000000000003
    assert candidate(4)==25.132
","def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter","[""circle_circumference(1) == 6.283"", ""circle_circumference(5) == 31.415000000000003"", ""circle_circumference(0) == 0.0"", ""circle_circumference(10.5) == 65.9715"", ""circle_circumference(2.25) == 14.136750000000001""]","@startuml
start
:Input Validation;
if (r > 0) then
  :Calculate Circumference;
  (r^2)*3.1415 -->|Multiply| r
  r -->|Multiply| (2*3.1415)
  (2*3.1415)*r -->|Add| Circumference
else
  :Invalid Input;
endif
:Return Circumference;
stop
@enduml"
797,"def sum_Odd(n):
""""""
Write a python function to find the sum of all odd natural numbers within the range l and r.
Your code should satisfy these tests:
sum_Odd(1) == 1
sum_Odd(5) == 9
sum_Odd(10) == 25
sum_Odd(15) == 64
sum_Odd(20) == 100
""""""
",sum_Odd,"def check(candidate):

    assert sum_in_Range(2,5) == 8
    assert sum_in_Range(5,7) == 12
    assert sum_in_Range(7,13) == 40
","def sum_Odd(n):
    terms = (n + 1)//2
    sum1 = terms * terms
    return sum1
def sum_in_Range(l,r):
    return sum_Odd(r) - sum_Odd(l - 1)","[""sum_Odd(1) == 1"", ""sum_Odd(5) == 9"", ""sum_Odd(10) == 25"", ""sum_Odd(15) == 64"", ""sum_Odd(20) == 100""]","@startuml
start
:Input n;
if (n > 0) then (
    :initialize sum = 0;
    :initialize i = 1;
    loop (i <= n)
        if (i % 2 != 0) then (
            :sum += i;
        )
        :i += 1;
    endloop
)
else (
    :return ""Input must be a positive integer"";
)
:return sum;
stop
@enduml"
250,"def count_X(tup, x):
""""""
Write a python function to count the occcurences of an element in a tuple.
Your code should satisfy these tests:
count_X((1, 2, 3, 4, 5, 1, 1), 1) == 3
count_X(('a', 'b', 'c', 'a', 'd', 'a'), 'a') == 3
count_X((True, False, True, True, False), True) == 3
""""""
",count_X,"def check(candidate):

    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3
    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4
","def count_X(tup, x):
    count = 0
    for ele in tup:
        if (ele == x):
            count = count + 1
    return count ","[""count_X((1, 2, 3, 4, 5, 1, 1), 1) == 3"", ""count_X(('a', 'b', 'c', 'a', 'd', 'a'), 'a') == 3"", ""count_X((True, False, True, True, False), True) == 3""]","@startuml
start

:Input tuple (tup) and element (x);
:Initialize counter (count) to 0;
:Initialize index (i) to 0;

while (i < length of tup?) is (yes)
    if (tup[i] == x?) then (yes)
        :Increment counter (count += 1);
    else (no)
        :Do nothing;
    endif
    :Increment index (i += 1);
endwhile (no)

:Return count;
stop
@enduml"
16,"def text_lowercase_underscore(text):
""""""
Write a function to find sequences of lowercase letters joined with an underscore.
Your code should satisfy these tests:
text_lowercase_underscore(""hello_world"") == 'Found a match!'
text_lowercase_underscore(""test_case"") == 'Found a match!'
text_lowercase_underscore(""example_test_case"") == 'Not matched!'
""""""
",text_lowercase_underscore,"def check(candidate):

    assert candidate(""aab_cbbbc"")==('Found a match!')
    assert candidate(""aab_Abbbc"")==('Not matched!')
    assert candidate(""Aaab_abbbc"")==('Not matched!')
","import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","[""text_lowercase_underscore(\""hello_world\"") == 'Found a match!'"", ""text_lowercase_underscore(\""test_case\"") == 'Found a match!'"", ""text_lowercase_underscore(\""example_test_case\"") == 'Not matched!'""]","@startuml
start
:input_text;
if (input_text contains ""_"") then (yes)
  :split_text = input_text.split(""_"");
  if (all elements in split_text are lowercase) then (yes)
    :return 'Found a match!'
  else (no)
    :return 'Not matched!'
  endif
else (no)
  :return 'Not matched!'
endif
stop
@enduml"
43,"def text_match(text):
""""""
Write a function to find sequences of lowercase letters joined with an underscore using regex.
Your code should satisfy these tests:
text_match(""hello_world"") == 'Found a match!'
text_match(""Hello_world"") == 'Not matched!'
text_match(""hello_world_123"") == 'Not matched!'
""""""
",text_match,"def check(candidate):

    assert candidate(""aab_cbbbc"") == 'Found a match!'
    assert candidate(""aab_Abbbc"") == 'Not matched!'
    assert candidate(""Aaab_abbbc"") == 'Not matched!'
","import re
def text_match(text):
  patterns = '^[a-z]+_[a-z]+$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')","[""text_match(\""hello_world\"") == 'Found a match!'"", ""text_match(\""Hello_world\"") == 'Not matched!'"", ""text_match(\""hello_world_123\"") == 'Not matched!'""]","@startuml
start

:Input text;
if (Is text empty?) then (yes)
    :Output ""Not matched!"";
    stop
else (no)
    :Check if text matches regex pattern [a-z]+_[a-z]+;
    if (Match found?) then (yes)
        :Output ""Found a match!"";
    else (no)
        :Output ""Not matched!"";
    endif
endif

stop
@enduml"
803,"def is_Perfect_Square(n):
""""""
Write a python function to check whether the given number is a perfect square or not.
Your code should satisfy these tests:
is_Perfect_Square(16) == True
is_Perfect_Square(14) == False
is_Perfect_Square(25) == True
""""""
",is_Perfect_Square,"def check(candidate):

    assert candidate(10) == False
    assert candidate(36) == True
    assert candidate(14) == False
","def is_Perfect_Square(n) :
    i = 1
    while (i * i<= n):
        if ((n % i == 0) and (n / i == i)):
            return True
        i = i + 1
    return False","[""is_Perfect_Square(16) == True"", ""is_Perfect_Square(14) == False"", ""is_Perfect_Square(25) == True""]","@startuml
start

:Input number n;
if (n < 0?) then (yes)
    :Return False (Negative numbers cannot be perfect squares);
    stop
else (no)
    :Calculate square root of n;
    :Round the square root to the nearest integer;
    :Square the rounded integer;
    if (Squared value == n?) then (yes)
        :Return True (n is a perfect square);
    else (no)
        :Return False (n is not a perfect square);
    endif
endif

stop
@enduml"
266,"def lateralsurface_cube(l):
""""""
Write a function to find the lateral surface area of a cube.
Your code should satisfy these tests:
lateralsurface_cube(3) == 36
lateralsurface_cube(5) == 100
lateralsurface_cube(7) == 196
""""""
",lateralsurface_cube,"def check(candidate):

    assert candidate(5)==100
    assert candidate(9)==324
    assert candidate(10)==400
","def lateralsurface_cube(l):
  LSA = 4 * (l * l)
  return LSA","[""lateralsurface_cube(3) == 36"", ""lateralsurface_cube(5) == 100"", ""lateralsurface_cube(7) == 196""]","@startuml
start
:Start Function lateralsurface_cube(l);
if (l is not None) then (yes)
  :Calculate lateral surface area = 4 * l^2;
  :Return lateral surface area;
else (no)
  :Return ""Input is None"";
endif
stop
@enduml"
463,"def max_subarray_product(arr):
""""""
Write a function to find the maximum product subarray of the given array.
Your code should satisfy these tests:
max_subarray_product([2, 3, -2, 4]) == 6
max_subarray_product([-2, 0, -1]) == 1
max_subarray_product([-2, 3, -4]) == 24
""""""
",max_subarray_product,"def check(candidate):

    assert candidate([1, -2, -3, 0, 7, -8, -2]) == 112
    assert candidate([6, -3, -10, 0, 2]) == 180
    assert candidate([-2, -40, 0, -2, -3]) == 80
","def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far","[""max_subarray_product([2, 3, -2, 4]) == 6"", ""max_subarray_product([-2, 0, -1]) == 1"", ""max_subarray_product([-2, 3, -4]) == 24""]","@startuml
start

:Input array (arr);
if (Is arr empty?) then (yes)
    :Return 0;
    stop
else (no)
    :Initialize variables:
    max_product = arr[0]
    min_product = arr[0]
    result = arr[0];
    :Loop through array from index 1 to len(arr) - 1;
    repeat
        :Current element = arr[i];
        if (Current element < 0) then (yes)
            :Swap max_product and min_product;
        else (no)
        endif
        :Update max_product = max(Current element, max_product * Current element);
        :Update min_product = min(Current element, min_product * Current element);
        :Update result = max(result, max_product);
    repeat while (End of array?)
    :Return result;
    stop
endif

@enduml"
89,"def closest_num(N):
""""""
Write a function to find the closest smaller number than n.
Your code should satisfy these tests:
closest_num(10) == 9
closest_num(1) == 0
closest_num(100) == 99
""""""
",closest_num,"def check(candidate):

    assert candidate(11) == 10
    assert candidate(7) == 6
    assert candidate(12) == 11
","def closest_num(N):
  return (N - 1)","[""closest_num(10) == 9"", ""closest_num(1) == 0"", ""closest_num(100) == 99""]","@startuml

title Closest Smaller Number

start
:Input N;

if (N <= 1) then (
  :Return 0;
) else (
  :Find closest smaller number;
  :Return closest number;
)

@enduml"
800,"def remove_all_spaces(text):
""""""
Write a function to remove all whitespaces from a string.
Your code should satisfy these tests:
remove_all_spaces(""Hello World"") == ""HelloWorld""
remove_all_spaces(""  Leading and trailing spaces  "") == ""Leadingandtrailingspaces""
remove_all_spaces(""Multiple    spaces    between"") == ""Multiplespacesbetween""
""""""
",remove_all_spaces,"def check(candidate):

    assert candidate('python  program')==('pythonprogram')
    assert candidate('python   programming    language')==('pythonprogramminglanguage')
    assert candidate('python                     program')==('pythonprogram')
","import re
def remove_all_spaces(text):
 return (re.sub(r'\s+', '',text))","[""remove_all_spaces(\""Hello World\"") == \""HelloWorld\"""", ""remove_all_spaces(\""  Leading and trailing spaces  \"") == \""Leadingandtrailingspaces\"""", ""remove_all_spaces(\""Multiple    spaces    between\"") == \""Multiplespacesbetween\""""]","@startuml

start
:remove_all_spaces(text);

if (text == null) then (no)
:return text;
else (yes)
:text = text.replaceAll(""\\s+"", """");
:return text;

@enduml"
292,"def find(n,m):
""""""
Write a python function to find quotient of two numbers.
Your code should satisfy these tests:
find(10, 2) == 5
find(20, 3) == 6
find(15, 5) == 3
""""""
",find,"def check(candidate):

    assert candidate(10,3) == 3
    assert candidate(4,2) == 2
    assert candidate(20,5) == 4
","def find(n,m):
    q = n//m
    return (q)","[""find(10, 2) == 5"", ""find(20, 3) == 6"", ""find(15, 5) == 3""]","@startuml

title: Find Quotient of Two Numbers

start
:Find quotient of two numbers;

if (n == 0) then (no quotient)
:Return 0;

else (n > 0)
:Divide n by m;
:Return result;

end if

@enduml"
957,"def get_First_Set_Bit_Pos(n):
""""""
Write a python function to get the position of rightmost set bit.
Your code should satisfy these tests:
get_First_Set_Bit_Pos(18) == 2
get_First_Set_Bit_Pos(128) == 8
get_First_Set_Bit_Pos(7) == 1
""""""
",get_First_Set_Bit_Pos,"def check(candidate):

    assert candidate(12) == 3
    assert candidate(18) == 2
    assert candidate(16) == 5
","import math
def get_First_Set_Bit_Pos(n):
     return math.log2(n&-n)+1","[""get_First_Set_Bit_Pos(18) == 2"", ""get_First_Set_Bit_Pos(128) == 8"", ""get_First_Set_Bit_Pos(7) == 1""]","@startuml
start

:Input integer n;
if (n <= 0?) then (yes)
  :Return error or invalid input;
  stop
else (no)
  :Initialize position = 1;
  :Check if n is odd (n & 1 == 1?);
  if (yes) then (yes)
    :Return position = 1;
    stop
  else (no)
    :Right-shift n by 1 (n = n >> 1);
    :Increment position by 1;
    :Repeat until n becomes odd;
  endif
endif

:Return position;
stop

@enduml"
150,"def does_Contain_B(a,b,c):
""""""
Write a python function to find whether the given number is present in the infinite sequence or not.
Your code should satisfy these tests:
does_Contain_B(1, 1, 2) == True
does_Contain_B(2, 5, 3) == True
does_Contain_B(10, 2, 4) == False
""""""
",does_Contain_B,"def check(candidate):

    assert candidate(1,7,3) == True
    assert candidate(1,-3,5) == False
    assert candidate(3,2,5) == False
","def does_Contain_B(a,b,c):
    if (a == b):
        return True
    if ((b - a) * c > 0 and (b - a) % c == 0):
        return True
    return False","[""does_Contain_B(1, 1, 2) == True"", ""does_Contain_B(2, 5, 3) == True"", ""does_Contain_B(10, 2, 4) == False""]","@startuml
start
:a, b, c;
if (a == b or a == c) then (true)
    :return True;
else (false)
    if (a < b) then (true)
        :a = a + c;
        goto start;
    else (false)
        :return False;
    endif
endif
stop
@enduml"
714,"def count_Fac(n):
""""""
Write a python function to count the number of distinct power of prime factor of given number.
Your code should satisfy these tests:
count_Fac(12) == 2
count_Fac(36) == 2
count_Fac(100) == 2
count_Fac(17) == 1
count_Fac(144) == 3
""""""
",count_Fac,"def check(candidate):

    assert candidate(24) == 3
    assert candidate(12) == 2
    assert candidate(4) == 1
","def count_Fac(n):
    m = n
    count = 0
    i = 2
    while((i * i) <= m):
        total = 0
        while (n % i == 0):
            n /= i
            total += 1
        temp = 0
        j = 1
        while((temp + j) <= total):
            temp += j
            count += 1
            j += 1
        i += 1
    if (n != 1):
        count += 1
    return count ","[""count_Fac(12) == 2"", ""count_Fac(36) == 2"", ""count_Fac(100) == 2"", ""count_Fac(17) == 1"", ""count_Fac(144) == 3""]","@startuml

start
:count_Fac(n);
if (n == 1) then (
  :return 1;
) else (
  :prime_factors = get_prime_factors(n);
  :distinct_prime_factors = get_distinct_prime_factors(prime_factors);
  :return len(distinct_prime_factors);
)

@enduml"
299,"def max_aggregate(stdata):
""""""
Write a function to calculate the maximum aggregate from the list of tuples.
Your code should satisfy these tests:
max_aggregate([('Alice', 88), ('Bob', 75), ('Alice', 12), ('Bob', 25)]) == ('Alice', 100)
max_aggregate([('Charlie', 90), ('David', 90), ('Charlie', 10)]) == ('Charlie', 100)
max_aggregate([('Eve', 50), ('Frank', 60), ('Eve', 40), ('Frank', 30)]) == ('Eve', 90)
""""""
",max_aggregate,"def check(candidate):

    assert candidate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)
    assert candidate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)
    assert candidate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)
","from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])","[""max_aggregate([('Alice', 88), ('Bob', 75), ('Alice', 12), ('Bob', 25)]) == ('Alice', 100)"", ""max_aggregate([('Charlie', 90), ('David', 90), ('Charlie', 10)]) == ('Charlie', 100)"", ""max_aggregate([('Eve', 50), ('Frank', 60), ('Eve', 40), ('Frank', 30)]) == ('Eve', 90)""]","@startuml
start

:Input list of tuples (stdata);
if (Is stdata empty?) then (yes)
    :Return None or raise an error;
    stop
else (no)
    :Initialize an empty dictionary (aggregates);
    :Initialize max_name = None;
    :Initialize max_value = -infinity;
    :Iterate over each tuple (name, score) in stdata;
    if (Is name already in aggregates?) then (yes)
        :Add score to aggregates[name];
    else (no)
        :Set aggregates[name] = score;
    endif
    :Check if aggregates[name] > max_value;
    if (yes) then (yes)
        :Update max_name = name;
        :Update max_value = aggregates[name];
    else (no)
        :Continue to next tuple;
    endif
    :Repeat until all tuples are processed;
    :Return (max_name, max_value);
    stop
endif
@enduml"
896,"def last(n):
""""""
Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.
Your code should satisfy these tests:
last([(1, 2), (3, 4), (5, 6)]) == (5, 6)
last([(10, 20), (30, 40), (50, 60)]) == (50, 60)
last([(7, 8), (9, 10), (11, 12)]) == (11, 12)
last([(100, 200), (300, 400), (500, 600)]) == (500, 600)
last([(0, 1), (2, 3), (4, 5)]) == (4, 5)
""""""
",last,"def check(candidate):

    assert sort_list_candidate([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]
    assert sort_list_candidate([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)]
    assert sort_list_candidate([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)]
","def last(n):
   return n[-1]
def sort_list_last(tuples):
  return sorted(tuples, key=last)","[""last([(1, 2), (3, 4), (5, 6)]) == (5, 6)"", ""last([(10, 20), (30, 40), (50, 60)]) == (50, 60)"", ""last([(7, 8), (9, 10), (11, 12)]) == (11, 12)"", ""last([(100, 200), (300, 400), (500, 600)]) == (500, 600)"", ""last([(0, 1), (2, 3), (4, 5)]) == (4, 5)""]","@startuml
start
:Input List;
:Sort List by Last Element;
if (List is empty?) then (true)
  :Return Error;
else (false)
  :Find Max Last Element;
  if (Max is at the end of list?) then (true)
    :Return Last Tuple;
  else (false)
    :Swap Max Tuple with Last Tuple;
    :Return Last Tuple;
  endif
endif
stop
@enduml"
313,"def pos_nos(list1):
""""""
Write a python function to print positive numbers in a list.
Your code should satisfy these tests:
pos_nos([-1, -2, 3, -4, 5]) == 3
pos_nos([0, -1, -2, -3]) == 0
pos_nos([10, 20, 30, 40]) == 10
pos_nos([-5, -10, -15, 20]) == 20
pos_nos([-1, -2, -3, -4]) == None
""""""
",pos_nos,"def check(candidate):

    assert candidate([-1,-2,1,2]) == 1,2
    assert candidate([3,4,-5]) == 3,4
    assert candidate([-2,-3,1]) == 1
","def pos_nos(list1):
  for num in list1:
    if num >= 0:
       return num ","[""pos_nos([-1, -2, 3, -4, 5]) == 3"", ""pos_nos([0, -1, -2, -3]) == 0"", ""pos_nos([10, 20, 30, 40]) == 10"", ""pos_nos([-5, -10, -15, 20]) == 20"", ""pos_nos([-1, -2, -3, -4]) == None""]","@startuml
start

:Input list1;
:Initialize positive_numbers as empty list;

if (Is list1 empty?) then (yes)
    :Return None;
    stop
else (no)
    :Iterate through each element in list1;
    if (Is current element > 0?) then (yes)
        :Add current element to positive_numbers;
    else (no)
        :Continue to next element;
    endif
endif

if (Is positive_numbers empty?) then (yes)
    :Return None;
else (no)
    :Return the first positive number in positive_numbers;
endif

stop
@enduml"
381,"def index_on_inner_list(list_data, index_no):
""""""
Write a function to sort a list of lists by a given index of the inner list.
Your code should satisfy these tests:
index_on_inner_list([[3, 2], [1, 4], [5, 0]], 1) == [[5, 0], [3, 2], [1, 4]]
index_on_inner_list([[10, 20], [5, 15], [1, 25]], 0) == [[1, 25], [5, 15], [10, 20]]
index_on_inner_list([[7, 1], [2, 3], [9, 0]], 1) == [[9, 0], [7, 1], [2, 3]]
""""""
",index_on_inner_list,"def check(candidate):

    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]
    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]
    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]
","from operator import itemgetter
def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=itemgetter(index_no))
    return result","[""index_on_inner_list([[3, 2], [1, 4], [5, 0]], 1) == [[5, 0], [3, 2], [1, 4]]"", ""index_on_inner_list([[10, 20], [5, 15], [1, 25]], 0) == [[1, 25], [5, 15], [10, 20]]"", ""index_on_inner_list([[7, 1], [2, 3], [9, 0]], 1) == [[9, 0], [7, 1], [2, 3]]""]","@startuml

title index_on_inner_list

start
:Input list_data;
:Input index_no;

if (index_no < 0 or index_no >= len(list_data[0])) then (no)
:Invalid index_no;
:Return error;
else (yes)
:Valid index_no;

:Sort list_data by index_no;
:Return sorted list_data;

@enduml"
805,"def max_sum_list(lists):
""""""
Write a function to find the list in a list of lists whose sum of elements is the highest.
Your code should satisfy these tests:
max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]
max_sum_list([[10, 20], [5, 5, 5, 5], [1, 2, 3, 4, 5]]) == [10, 20]
max_sum_list([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == [-1, -2, -3]
""""""
",max_sum_list,"def check(candidate):

    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]
    assert candidate([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]
    assert candidate([[2,3,1]])==[2,3,1]
","def max_sum_list(lists):
 return max(lists, key=sum)","[""max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]"", ""max_sum_list([[10, 20], [5, 5, 5, 5], [1, 2, 3, 4, 5]]) == [10, 20]"", ""max_sum_list([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == [-1, -2, -3]""]","@startuml

title max_sum_list

start
:lists;

if (len(lists) == 0) then (no lists)
:return None;

else (at least one list)
:max_sum = 0;
:max_list = None;

for each list in lists
:sum = 0;

for each element in list
:sum = sum + element;

if (sum > max_sum) then (new max sum)
:max_sum = sum;
:max_list = list;

end for

end for

:return max_list;

end if

@enduml"
238,"def number_of_substrings(str):
""""""
Write a python function to count number of non-empty substrings of a given string.
Your code should satisfy these tests:
number_of_substrings(""abc"") == 6
number_of_substrings(""abcd"") == 10
number_of_substrings(""a"") == 1
""""""
",number_of_substrings,"def check(candidate):

    assert candidate(""abc"") == 6
    assert candidate(""abcd"") == 10
    assert candidate(""abcde"") == 15
","def number_of_substrings(str):
	str_len = len(str);
	return int(str_len * (str_len + 1) / 2); ","[""number_of_substrings(\""abc\"") == 6"", ""number_of_substrings(\""abcd\"") == 10"", ""number_of_substrings(\""a\"") == 1""]","@startuml
start

:Input string 'str';
if (Is 'str' empty?) then (yes)
    :Return 0;
    stop
else (no)
    :Initialize count = 0;
    :Initialize i = 0;
    while (i < length of 'str') is (yes)
        :Initialize j = i + 1;
        while (j <= length of 'str') is (yes)
            :Increment count by 1;
            :Increment j by 1;
        endwhile (no)
        :Increment i by 1;
    endwhile (no)
    :Return count;
    stop
endif

@enduml"
322,"def position_min(list1):
""""""
Write a function to find all index positions of the minimum values in a given list.
Your code should satisfy these tests:
position_min([4, 2, 1, 3, 1]) == [2, 4]
position_min([10, 20, 30, 40, 50]) == [0]
position_min([5, 5, 5, 5, 5]) == [0, 1, 2, 3, 4]
""""""
",position_min,"def check(candidate):

    assert candidate([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]
    assert candidate([1,2,2,2,4,4,4,5,5,5,5])==[0]
    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12])==[1]
","def position_min(list1):
    min_val = min(list1)
    min_result = [i for i, j in enumerate(list1) if j == min_val]
    return min_result","[""position_min([4, 2, 1, 3, 1]) == [2, 4]"", ""position_min([10, 20, 30, 40, 50]) == [0]"", ""position_min([5, 5, 5, 5, 5]) == [0, 1, 2, 3, 4]""]","@startuml
start

:Input list1;
:Initialize min_value = list1[0];
:Initialize min_indices = [];

:Iterate over list1 with index i;

if (list1[i] < min_value?) then (yes)
    :Update min_value = list1[i];
    :Reset min_indices = [i];
else if (list1[i] == min_value?) then (yes)
    :Append i to min_indices;
else (no)
    :Continue;
endif

:Check if all elements are processed?;
if (All elements processed?) then (yes)
    :Return min_indices;
else (no)
    :Continue iteration;
endif

stop
@enduml"
418,"def Find_Max(lst):
""""""
Write a python function to find the sublist having maximum length.
Your code should satisfy these tests:
Find_Max([1, 2, 3, 4, 5]) == 5
Find_Max([-10, -20, -3, -4, -5]) == -3
Find_Max([100, 200, 300, 400, 500]) == 500
""""""
",Find_Max,"def check(candidate):

    assert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']
    assert candidate([[1],[1,2],[1,2,3]]) == [1,2,3]
    assert candidate([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]
","def Find_Max(lst):
    maxList = max((x) for x in lst)
    return maxList","[""Find_Max([1, 2, 3, 4, 5]) == 5"", ""Find_Max([-10, -20, -3, -4, -5]) == -3"", ""Find_Max([100, 200, 300, 400, 500]) == 500""]","@startuml
start

:Input list (lst);
if (Is lst empty?) then (yes)
    :Return None or raise an error;
    stop
else (no)
    :Initialize max_value with the first element of lst;
    :Initialize index = 1;
    while (index < length of lst?) is (yes)
        if (lst[index] > max_value?) then (yes)
            :Update max_value = lst[index];
        else (no)
            :Do nothing;
        endif
        :Increment index by 1;
    endwhile
    :Return max_value;
endif

stop
@enduml"
151,"def gcd(p,q):
""""""
Write a python function to check whether the given number is co-prime or not.
Your code should satisfy these tests:
gcd(48, 18) == 6
gcd(56, 98) == 14
gcd(17, 23) == 1
gcd(100, 75) == 25
gcd(81, 27) == 27
""""""
",gcd,"def check(candidate):

    assert is_coprime(17,13) == True
    assert is_coprime(15,21) == False
    assert is_coprime(25,45) == False
","def gcd(p,q):
    while q != 0:
        p, q = q,p%q
    return p
def is_coprime(x,y):
    return gcd(x,y) == 1","[""gcd(48, 18) == 6"", ""gcd(56, 98) == 14"", ""gcd(17, 23) == 1"", ""gcd(100, 75) == 25"", ""gcd(81, 27) == 27""]","@startuml
start
:Input p, q;
:if p < q:
    (p, q) = (q, p)
:endif;
:while q != 0:
    (p, q) = (q, p mod q)
:endwhile;
:Output p;
stop
@enduml"
490,"def extract_symmetric(test_list):
""""""
Write a function to extract all the pairs which are symmetric in the given tuple list.
Your code should satisfy these tests:
extract_symmetric([(1, 2), (2, 1), (2, 3), (4, 5)]) == {(1, 2)}
extract_symmetric([(3, 2), (2, 3), (5, 4), (6, 7), (7, 6)]) == {(2, 3), (6, 7)}
extract_symmetric([(9, 8), (7, 6), (6, 7), (10, 11)]) == {(6, 7)}
extract_symmetric([(1, 2), (3, 4), (5, 6), (2, 1)]) == {(1, 2)}
extract_symmetric([(5, 6), (7, 8), (9, 10), (11, 12)]) == set()
""""""
",extract_symmetric,"def check(candidate):

    assert candidate([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}
    assert candidate([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}
    assert candidate([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}
","def extract_symmetric(test_list):
  temp = set(test_list) & {(b, a) for a, b in test_list}
  res = {(a, b) for a, b in temp if a < b}
  return (res) ","[""extract_symmetric([(1, 2), (2, 1), (2, 3), (4, 5)]) == {(1, 2)}"", ""extract_symmetric([(3, 2), (2, 3), (5, 4), (6, 7), (7, 6)]) == {(2, 3), (6, 7)}"", ""extract_symmetric([(9, 8), (7, 6), (6, 7), (10, 11)]) == {(6, 7)}"", ""extract_symmetric([(1, 2), (3, 4), (5, 6), (2, 1)]) == {(1, 2)}"", ""extract_symmetric([(5, 6), (7, 8), (9, 10), (11, 12)]) == set()""]","@startuml
start
:Input: test_list
:Output: symmetric_pairs

:Initialize: symmetric_pairs = set()

:For each pair in test_list:
    :If pair[0] == pair[1]:
        :Add pair to symmetric_pairs:
    :Else if pair[0] == pair[1][::-1]:
        :Add pair to symmetric_pairs:
    :End if
:End for

:Return: symmetric_pairs
stop
@enduml"
764,"def number_ctr(str):
""""""
Write a python function to count numeric values in a given string.
Your code should satisfy these tests:
number_ctr(""abc123"") == 3
number_ctr(""no_numbers_here!"") == 0
number_ctr(""2023_is_the_year"") == 4
""""""
",number_ctr,"def check(candidate):

    assert candidate('program2bedone') == 1
    assert candidate('3wonders') ==1
    assert candidate('123') == 3
","def number_ctr(str):
      number_ctr= 0
      for i in range(len(str)):
          if str[i] >= '0' and str[i] <= '9': number_ctr += 1
      return  number_ctr","[""number_ctr(\""abc123\"") == 3"", ""number_ctr(\""no_numbers_here!\"") == 0"", ""number_ctr(\""2023_is_the_year\"") == 4""]","@startuml
start

:Input string (str);
if (Is str empty or None?) then (yes)
    :Return 0;
    stop
else (no)
    :Initialize counter = 0;
    :Initialize index = 0;
    while (index < length of str) is (yes)
        :Get current character (char) from str at index;
        if (Is char a numeric digit?) then (yes)
            :Increment counter by 1;
        else (no)
            :Do nothing;
        endif
        :Increment index by 1;
    endwhile (no)
    :Return counter;
    stop
endif

@enduml"
419,"def round_and_sum(list1):
""""""
Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.
Your code should satisfy these tests:
round_and_sum([1.2, 2.5, 3.7]) == 21
round_and_sum([0.1, 0.4, 0.6, 0.9]) == 8
round_and_sum([-1.5, 2.3, -3.8]) == -12
""""""
",round_and_sum,"def check(candidate):

    assert candidate([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243
    assert candidate([5,2,9,24.3,29])==345
    assert candidate([25.0,56.7,89.2])==513
","def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum","[""round_and_sum([1.2, 2.5, 3.7]) == 21"", ""round_and_sum([0.1, 0.4, 0.6, 0.9]) == 8"", ""round_and_sum([-1.5, 2.3, -3.8]) == -12""]","@startuml
start

:Input list of numbers (list1);
:Initialize sum = 0;
:Initialize rounded_list = [];

repeat
  :For each number in list1;
  :Round the number to the nearest integer;
  :Add the rounded number to rounded_list;
  :Add the rounded number to sum;
repeat while (More numbers in list1?) is (yes)
->(no);

:Multiply sum by the length of list1;
:Print the result;
stop

@enduml"
17,"def square_perimeter(a):
""""""
Write a function to find the perimeter of a square.
Your code should satisfy these tests:
square_perimeter(1) == 4
square_perimeter(5) == 20
square_perimeter(10) == 40
""""""
",square_perimeter,"def check(candidate):

    assert candidate(10)==40
    assert candidate(5)==20
    assert candidate(4)==16
","def square_perimeter(a):
  perimeter=4*a
  return perimeter","[""square_perimeter(1) == 4"", ""square_perimeter(5) == 20"", ""square_perimeter(10) == 40""]","@startuml

title ""Square Perimeter""

start
:square_perimeter(a);

if (a < 0) then (no)
:Invalid input;
:return -1;

else (yes)
:Calculate perimeter;
:return 4 * a;

end if

@enduml"
841,"def get_inv_count(arr, n):
""""""
Write a function to count the number of inversions in the given array.
Your code should satisfy these tests:
get_inv_count([1, 20, 6, 4, 5], 5) == 5
get_inv_count([10, 20, 30, 40, 50], 5) == 0
get_inv_count([50, 40, 30, 20, 10], 5) == 10
""""""
",get_inv_count,"def check(candidate):

    assert candidate([1, 20, 6, 4, 5], 5) == 5
    assert candidate([8, 4, 2, 1], 4) == 6
    assert candidate([3, 1, 2], 3) == 2
","def get_inv_count(arr, n):
	inv_count = 0
	for i in range(n):
		for j in range(i + 1, n):
			if (arr[i] > arr[j]):
				inv_count += 1
	return inv_count ","[""get_inv_count([1, 20, 6, 4, 5], 5) == 5"", ""get_inv_count([10, 20, 30, 40, 50], 5) == 0"", ""get_inv_count([50, 40, 30, 20, 10], 5) == 10""]","@startuml

title get_inv_count

start
:get_inv_count(arr, n);

if (n <= 1) then (no inversions)
  :return 0;
else
  :count = 0;
  :for i in range(n - 1):
    :for j in range(i + 1, n):
      :if (arr[i] > arr[j]) then (inversion detected)
        :count += 1;
      endif
    endfor
  endfor
  :return count;
endif

@enduml"
538,"def string_list_to_tuple(str1):
""""""
Write a python function to convert a given string list to a tuple.
Your code should satisfy these tests:
string_list_to_tuple(""hello world"") == ('h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd')
string_list_to_tuple(""python programming"") == ('p', 'y', 't', 'h', 'o', 'n', 'p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g')
string_list_to_tuple(""  spaces  everywhere  "") == ('s', 'p', 'a', 'c', 'e', 's', 'e', 'v', 'e', 'r', 'y', 'w', 'h', 'e', 'r', 'e')
""""""
",string_list_to_tuple,"def check(candidate):

    assert candidate((""python 3.0"")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')
    assert candidate((""bigdata"")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')
    assert candidate((""language"")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')
","def string_list_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace())
    return result","[""string_list_to_tuple(\""hello world\"") == ('h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd')"", ""string_list_to_tuple(\""python programming\"") == ('p', 'y', 't', 'h', 'o', 'n', 'p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g')"", ""string_list_to_tuple(\""  spaces  everywhere  \"") == ('s', 'p', 'a', 'c', 'e', 's', 'e', 'v', 'e', 'r', 'y', 'w', 'h', 'e', 'r', 'e')""]","@startuml
start
:Input String;
if (Is the input string empty?) then (yes)
  :Return an empty tuple;
else (no)
  :Initialize an empty list;
  while (There are characters in the string)
    :Get the first character;
    :Add the character to the list;
    :Remove the first character from the string;
  endwhile
  :Convert the list to a tuple;
endif
:Return the tuple;
stop
@enduml"
159,"def month_season(month,days):
""""""
Write a function to print the season for the given month and day.
Your code should satisfy these tests:
month_season('March', 20) == 'spring'
month_season('June', 21) == 'summer'
month_season('October', 22) == 'autumn'
month_season('December', 21) == 'winter'
month_season('April', 15) == 'spring'
""""""
",month_season,"def check(candidate):

    assert candidate('January',4)==('winter')
    assert candidate('October',28)==('autumn')
    assert candidate('June',6)==('spring')
","def month_season(month,days):
 if month in ('January', 'February', 'March'):
	 season = 'winter'
 elif month in ('April', 'May', 'June'):
	 season = 'spring'
 elif month in ('July', 'August', 'September'):
	 season = 'summer'
 else:
	 season = 'autumn'
 if (month == 'March') and (days > 19):
	 season = 'spring'
 elif (month == 'June') and (days > 20):
	 season = 'summer'
 elif (month == 'September') and (days > 21):
	 season = 'autumn'
 elif (month == 'October') and (days > 21):
	 season = 'autumn'
 elif (month == 'November') and (days > 21):
	 season = 'autumn'
 elif (month == 'December') and (days > 20):
	 season = 'winter'
 return season","[""month_season('March', 20) == 'spring'"", ""month_season('June', 21) == 'summer'"", ""month_season('October', 22) == 'autumn'"", ""month_season('December', 21) == 'winter'"", ""month_season('April', 15) == 'spring'""]","@startuml
start
:Input month;
:Input day;
if (day < 1 or day > 31) then (Invalid day)
:Return error;
endif
if (month == ""January"" or month == ""February"") then (Season is winter)
:Return ""winter"";
endif
if (month == ""March"") then (Day < 20) then (Season is winter)
:Return ""winter"";
endif
if (month == ""March"") then (Day >= 20) then (Season is spring)
:Return ""spring"";
endif
if (month == ""April"" or month == ""May"") then (Season is spring)
:Return ""spring"";
endif
if (month == ""June"") then (Day < 21) then (Season is spring)
:Return ""spring"";
endif
if (month == ""June"") then (Day >= 21) then (Season is summer)
:Return ""summer"";
endif
if (month == ""July"" or month == ""August"") then (Season is summer)
:Return ""summer"";
endif
if (month == ""September"") then (Season is summer)
:Return ""summer"";
endif
if (month == ""October"") then (Day < 22) then (Season is summer)
:Return ""summer"";
endif
if (month == ""October"") then (Day >= 22) then (Season is autumn)
:Return ""autumn"";
endif
if (month == ""November"" or month == ""December"") then (Season is autumn)
:Return ""autumn"";
endif
if (month == ""January"" or month == ""February"") then (Day >= 21) then (Season is winter)
:Return ""winter"";
endif
:Return error;
stop
@enduml"
909,"def previous_palindrome(num):
""""""
Write a function to find the previous palindrome of a specified number.
Your code should satisfy these tests:
previous_palindrome(10) == 9
previous_palindrome(100) == 99
previous_palindrome(123) == 121
""""""
",previous_palindrome,"def check(candidate):

    assert candidate(99)==88
    assert candidate(1221)==1111
    assert candidate(120)==111
","def previous_palindrome(num):
    for x in range(num-1,0,-1):
        if str(x) == str(x)[::-1]:
            return x","[""previous_palindrome(10) == 9"", ""previous_palindrome(100) == 99"", ""previous_palindrome(123) == 121""]","@startuml
start

:Input number (num);
if (num <= 0?) then (yes)
    :Return ""Invalid input: Number must be positive"";
    stop
else (no)
    :Decrement num by 1;
    :Check if num is a palindrome;
    if (Is num a palindrome?) then (yes)
        :Return num as the previous palindrome;
        stop
    else (no)
        :Decrement num by 1;
        repeat
            :Check if num is a palindrome;
            if (Is num a palindrome?) then (yes)
                :Return num as the previous palindrome;
                stop
            else (no)
                :Decrement num by 1;
            endif
        repeat while (num > 0)
        :Return ""No previous palindrome found"";
        stop
    endif
endif

@enduml"
925,"def mutiple_tuple(nums):
""""""
Write a python function to calculate the product of all the numbers of a given tuple.
Your code should satisfy these tests:
mutiple_tuple((1, 2, 3, 4)) == 24
mutiple_tuple((5, 5, 5)) == 125
mutiple_tuple((0, 2, 3)) == 0
""""""
",mutiple_tuple,"def check(candidate):

    assert candidate((4, 3, 2, 2, -1, 18)) == -864
    assert candidate((1,2,3)) == 6
    assert candidate((-2,-4,-6)) == -48
","def mutiple_tuple(nums):
    temp = list(nums)
    product = 1
    for x in temp:
        product *= x
    return product","[""mutiple_tuple((1, 2, 3, 4)) == 24"", ""mutiple_tuple((5, 5, 5)) == 125"", ""mutiple_tuple((0, 2, 3)) == 0""]","@startuml

title Multiple Tuple

start
:mutiple_tuple(nums);

if (nums == ()) then (
  :return 1;
) else (
  :product = 1;
  :for each num in nums do (
    :product = product * num;
  )
  :return product;
)

@enduml"
943,"def combine_lists(num1,num2):
""""""
Write a function to combine two given sorted lists using heapq module.
Your code should satisfy these tests:
combine_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]
combine_lists([], [1, 2, 3]) == [1, 2, 3]
combine_lists([10, 20, 30], []) == [10, 20, 30]
""""""
",combine_lists,"def check(candidate):

    assert candidate([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]
    assert candidate([1,3,7],[2,4,6])==[1,2,3,4,6,7]
","from heapq import merge
def combine_lists(num1,num2):
  combine_lists=list(merge(num1, num2))
  return combine_lists","[""combine_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]"", ""combine_lists([], [1, 2, 3]) == [1, 2, 3]"", ""combine_lists([10, 20, 30], []) == [10, 20, 30]""]","@startuml
start
:Combine Lists;
if (num1 is empty?) then (true)
  :Return num2;
elseif (num2 is empty?) then (true)
  :Return num1;
else (false)
  :Merge num1 and num2;
endif
:Return combined list;
stop
@enduml"
219,"def extract_min_max(test_tup, K):
""""""
Write a function to extract maximum and minimum k elements in the given tuple.
Your code should satisfy these tests:
extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)
extract_min_max((10, 4, 12, 9, 2, 15), 1) == (2, 15)
extract_min_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3) == (1, 2, 3, 8, 9, 10)
extract_min_max((100, 200, 300, 400, 500), 0) == ()
extract_min_max((9, 1, 8, 2, 7, 3, 6, 4, 5), 4) == (1, 2, 3, 4, 6, 7, 8, 9)
""""""
",extract_min_max,"def check(candidate):

    assert candidate((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)
    assert candidate((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)
    assert candidate((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)
","
def extract_min_max(test_tup, K):
  res = []
  test_tup = list(test_tup)
  temp = sorted(test_tup)
  for idx, val in enumerate(temp):
    if idx < K or idx >= len(temp) - K:
      res.append(val)
  res = tuple(res)
  return (res) ","[""extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)"", ""extract_min_max((10, 4, 12, 9, 2, 15), 1) == (2, 15)"", ""extract_min_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3) == (1, 2, 3, 8, 9, 10)"", ""extract_min_max((100, 200, 300, 400, 500), 0) == ()"", ""extract_min_max((9, 1, 8, 2, 7, 3, 6, 4, 5), 4) == (1, 2, 3, 4, 6, 7, 8, 9)""]","@startuml
start
:Check if K is greater than 0 and less than or equal to the length of the tuple;
if (K > 0 and K <= len(test_tup)) then
    :Sort the tuple in ascending order;
    :Extract the minimum K elements;
    :Extract the maximum K elements;
    :Combine the minimum and maximum K elements;
else
    :Return an empty tuple;
endif
stop
@enduml"
666,"def count_char(string,char):
""""""
Write a function to count occurrence of a character in a string.
Your code should satisfy these tests:
count_char(""hello"", ""l"") == 2
count_char(""world"", ""w"") == 1
count_char(""python"", ""z"") == 0
""""""
",count_char,"def check(candidate):

    assert candidate(""Python"",'o')==1
    assert candidate(""little"",'t')==2
    assert candidate(""assert"",'s')==2
","def count_char(string,char):
 count = 0
 for i in range(len(string)):
    if(string[i] == char):
        count = count + 1
 return count","[""count_char(\""hello\"", \""l\"") == 2"", ""count_char(\""world\"", \""w\"") == 1"", ""count_char(\""python\"", \""z\"") == 0""]","@startuml
start

:Input: string and char;
:Initialize counter = 0;
:Initialize index = 0;

while (index < length of string?) is (yes)
    if (string[index] == char?) then (yes)
        :Increment counter by 1;
    else (no)
        :No action;
    endif
    :Increment index by 1;
endwhile (no)

:Return counter;

stop
@enduml"
400,"def extract_freq(test_list):
""""""
Write a function to extract the frequency of unique tuples in the given list order irrespective.
Your code should satisfy these tests:
extract_freq([[1, 2], [2, 1], [3, 4]]) == 2
extract_freq([[5, 6, 7], [7, 6, 5], [8, 9]]) == 2
extract_freq([[10, 11], [11, 10], [10, 11], [12, 13]]) == 2
""""""
",extract_freq,"def check(candidate):

    assert candidate([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3
    assert candidate([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4
    assert candidate([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4
","def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)","[""extract_freq([[1, 2], [2, 1], [3, 4]]) == 2"", ""extract_freq([[5, 6, 7], [7, 6, 5], [8, 9]]) == 2"", ""extract_freq([[10, 11], [11, 10], [10, 11], [12, 13]]) == 2""]","@startuml
start
:Input: test_list
if (test_list is empty?) then (yes)
    :Return 0
    stop
endif
:Initialize an empty dictionary, freq_dict
:Initialize an empty list, unique_tuples
:For each tuple in test_list
    :Sort the tuple
    :If the sorted tuple is not in freq_dict
        :Add the sorted tuple to unique_tuples
        :Add the sorted tuple to freq_dict with value 1
    :Else
        :Increment the value of the sorted tuple in freq_dict
    :Endif
:Endfor
:Return the length of unique_tuples
stop
@enduml"
952,"def nCr_mod_p(n, r, p):
""""""
Write a function to compute the value of ncr mod p.
Your code should satisfy these tests:
nCr_mod_p(5, 2, 13) == 10
nCr_mod_p(10, 3, 17) == 1
nCr_mod_p(7, 4, 11) == 2
nCr_mod_p(15, 6, 19) == 8
nCr_mod_p(20, 10, 23) == 20
""""""
",nCr_mod_p,"def check(candidate):

    assert candidate(10, 2, 13) == 6
    assert candidate(11, 3, 14) == 11
    assert candidate(18, 14, 19) == 1
","def nCr_mod_p(n, r, p):
	if (r > n- r):
		r = n - r
	C = [0 for i in range(r + 1)]
	C[0] = 1
	for i in range(1, n + 1):
		for j in range(min(i, r), 0, -1):
			C[j] = (C[j] + C[j-1]) % p
	return C[r] ","[""nCr_mod_p(5, 2, 13) == 10"", ""nCr_mod_p(10, 3, 17) == 1"", ""nCr_mod_p(7, 4, 11) == 2"", ""nCr_mod_p(15, 6, 19) == 8"", ""nCr_mod_p(20, 10, 23) == 20""]","@startuml
start

:Input n, r, p;
if (n < 0 or r < 0 or p <= 0) then (yes)
    :Invalid input: n, r must be non-negative and p must be positive;
    stop
else (no)
    if (r > n) then (yes)
        :Invalid input: r cannot be greater than n;
        stop
    else (no)
        :Initialize result = 1;
        :Initialize numerator = n;
        :Initialize denominator = 1;
        while (denominator <= r) is (yes)
            :result = (result * numerator) mod p;
            :result = (result * mod_inverse(denominator, p)) mod p;
            :numerator = numerator - 1;
            :denominator = denominator + 1;
        endwhile (no)
        :Output result;
    endif
endif

stop
@enduml"
215,"def decode_list(alist):
""""""
Write a function to decode a run-length encoded given list.
Your code should satisfy these tests:
decode_list([[3, 'a'], [2, 'b'], [1, 'c']]) == ['a', 'a', 'a', 'b', 'b', 'c']
decode_list(['x', [4, 'y'], 'z']) == ['x', 'y', 'y', 'y', 'y', 'z']
decode_list([[1, 'hello'], [3, 'world']]) == ['hello', 'world', 'world', 'world']
""""""
",decode_list,"def check(candidate):

    assert candidate([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]
    assert candidate(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']
    assert candidate(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']
","def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]","[""decode_list([[3, 'a'], [2, 'b'], [1, 'c']]) == ['a', 'a', 'a', 'b', 'b', 'c']"", ""decode_list(['x', [4, 'y'], 'z']) == ['x', 'y', 'y', 'y', 'y', 'z']"", ""decode_list([[1, 'hello'], [3, 'world']]) == ['hello', 'world', 'world', 'world']""]","@startuml

start

:decode_list(alist);

if (alist is empty) then (no)
  :return [];
else (yes)
  :result = [];
  :for each element in alist;
    :if (element is a list) then (no)
      :result.append(element);
    else (yes)
      :for (i = 0; i < element[0]; i++)
        :result.append(element[1]);
    endif
  endfor
  :return result;
endif

@enduml"
274,"def even_binomial_Coeff_Sum( n):
""""""
Write a python function to find sum of even index binomial coefficients.
Your code should satisfy these tests:
even_binomial_Coeff_Sum(1) == 1
even_binomial_Coeff_Sum(2) == 2
even_binomial_Coeff_Sum(5) == 16
""""""
",even_binomial_Coeff_Sum,"def check(candidate):

    assert candidate(4) == 8
    assert candidate(6) == 32
    assert candidate(2) == 2
","import math
def even_binomial_Coeff_Sum( n):
    return (1 << (n - 1)) ","[""even_binomial_Coeff_Sum(1) == 1"", ""even_binomial_Coeff_Sum(2) == 2"", ""even_binomial_Coeff_Sum(5) == 16""]","@startuml
start
:Initialize sum = 0;
:Initialize i = 0;
while (i <= n) is (Check i <= n)
    if (i is even) then (Yes)
        :Calculate binomial coefficient for i;
        :Add to sum;
    else (No)
        :Continue;
    endif
    :Increment i;
endwhile (No)
:Return sum;
stop
@enduml"
132,"def tup_string(tup1):
""""""
Write a function to convert tuple to a string.
Your code should satisfy these tests:
tup_string(('a', 'b', 'c')) == 'abc'
tup_string(('hello', 'world')) == 'helloworld'
tup_string(('Python', '3', '.', '8')) == 'Python3.8'
""""""
",tup_string,"def check(candidate):

    assert candidate(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(""exercises"")
    assert candidate(('p','y','t','h','o','n'))==(""python"")
    assert candidate(('p','r','o','g','r','a','m'))==(""program"")
","def tup_string(tup1):
  str =  ''.join(tup1)
  return str","[""tup_string(('a', 'b', 'c')) == 'abc'"", ""tup_string(('hello', 'world')) == 'helloworld'"", ""tup_string(('Python', '3', '.', '8')) == 'Python3.8'""]","@startuml
start

:Input tuple (tup1);
if (Is tup1 a valid tuple?) then (yes)
    :Initialize an empty string (result);
    :Iterate over each element in tup1;
    :Concatenate each element to the result string;
    :Return the result string;
else (no)
    :Handle invalid input (e.g., raise an error or return None);
endif

stop
@enduml"
824,"def remove_even(l):
""""""
Write a python function to remove even numbers from a given list.
Your code should satisfy these tests:
remove_even([1, 2, 3, 4, 5]) == [1, 3, 5]
remove_even([10, 21, 32, 43, 54]) == [21, 43]
remove_even([2, 4, 6, 8, 10]) == [4, 8]
""""""
",remove_even,"def check(candidate):

    assert candidate([1,3,5,2]) == [1,3,5]
    assert candidate([5,6,7]) == [5,7]
    assert candidate([1,2,3,4]) == [1,3]
","def remove_even(l):
    for i in l:
        if i % 2 == 0:
            l.remove(i)
    return l","[""remove_even([1, 2, 3, 4, 5]) == [1, 3, 5]"", ""remove_even([10, 21, 32, 43, 54]) == [21, 43]"", ""remove_even([2, 4, 6, 8, 10]) == [4, 8]""]","@startuml

title Remove Even Numbers from a List

start
:remove_even(l);

if (l is empty) then (no)
  :return [];
else (yes)
  :result = [];
  :for each element in l;
    if (element is even) then (no)
      :result.append(element);
    endif;
  :endfor;
  :return result;
endif;

@enduml"
39,"def rearange_string(S):
""""""
Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.
Your code should satisfy these tests:
rearange_string(""aabbcc"") == 'abcabc'
rearange_string(""abccba"") == 'abcabc'
rearange_string(""aaaabbbcc"") == 'ababacabc'
rearange_string(""abcdef"") == 'abcdef'
rearange_string(""aabbccddeeff"") == 'abcdefabcdef'
""""""
",rearange_string,"def check(candidate):

    assert candidate(""aab"")==('aba')
    assert candidate(""aabb"")==('abab')
    assert candidate(""abccdd"")==('cdabcd')
","import heapq
from collections import Counter
def rearange_string(S):
    ctr = Counter(S)
    heap = [(-value, key) for key, value in ctr.items()]
    heapq.heapify(heap)
    if (-heap[0][0]) * 2 > len(S) + 1:
        return """"
    ans = []
    while len(heap) >= 2:
        nct1, char1 = heapq.heappop(heap)
        nct2, char2 = heapq.heappop(heap)
        ans.extend([char1, char2])
        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))
        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))
    return """".join(ans) + (heap[0][1] if heap else """")","[""rearange_string(\""aabbcc\"") == 'abcabc'"", ""rearange_string(\""abccba\"") == 'abcabc'"", ""rearange_string(\""aaaabbbcc\"") == 'ababacabc'"", ""rearange_string(\""abcdef\"") == 'abcdef'"", ""rearange_string(\""aabbccddeeff\"") == 'abcdefabcdef'""]","@startuml
start

:Input string S;
if (Is S empty or None?) then (yes)
    :Return empty string;
    stop
else (no)
    :Count frequency of each character in S;
    :Sort characters by frequency in descending order;
    :Initialize result list;
    :Initialize index variable (i = 0);
    while (Are there characters left to place?) is (yes)
        :Place the most frequent character at index i;
        :Decrement its frequency;
        :Increment index by 2;
        if (Is index >= length of S?) then (yes)
            :Reset index to 1;
        else (no)
        endif
    endwhile (no)
    :Convert result list to string;
    :Return rearranged string;
endif

stop
@enduml"
356,"def find_angle(a,b):
""""""
Write a function to find the third angle of a triangle using two angles.
Your code should satisfy these tests:
find_angle(30, 60) == 90
find_angle(45, 45) == 90
find_angle(80, 50) == 50
""""""
",find_angle,"def check(candidate):

    assert candidate(47,89)==44
    assert candidate(45,95)==40
    assert candidate(50,40)==90
","def find_angle(a,b):
 c = 180 - (a + b)
 return c
","[""find_angle(30, 60) == 90"", ""find_angle(45, 45) == 90"", ""find_angle(80, 50) == 50""]","@startuml

title find_angle(a, b)

start
:find_angle(a, b);

if (a == 90 || b == 90) then (yes)
:return 90;
else (no)
:return 180 - a - b;
endif

stop

@enduml"
519,"def volume_tetrahedron(num):
""""""
Write a function to calculate volume of a tetrahedron.
Your code should satisfy these tests:
volume_tetrahedron(2) == 0.94
volume_tetrahedron(5) == 14.73
volume_tetrahedron(10) == 117.85
""""""
",volume_tetrahedron,"def check(candidate):

    assert candidate(10)==117.85
    assert candidate(15)==397.75
    assert candidate(20)==942.81
","import math
def volume_tetrahedron(num):
	volume = (num ** 3 / (6 * math.sqrt(2)))
	return round(volume, 2)","[""volume_tetrahedron(2) == 0.94"", ""volume_tetrahedron(5) == 14.73"", ""volume_tetrahedron(10) == 117.85""]","@startuml
start
:Input num;
if (num > 0) then (true)
  :volume =  (sqrt(2) * pow(num, 3)) / 12;
else (false)
  :Error: Invalid input;
endif
:Return volume;
stop
@enduml"
114,"def assign_freq(test_list):
""""""
Write a function to assign frequency to each tuple in the given tuple list.
""""""
",assign_freq,"def check(candidate):

    assert candidate([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'
    assert candidate([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'
    assert candidate([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'
","from collections import Counter
def assign_freq(test_list):
  res = [(*key, val) for key, val in Counter(test_list).items()]
  return (str(res)) ","[""test test cases failed""]","@startuml
start

:Input: test_list (list of tuples);
if (Is test_list empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize an empty dictionary (freq_dict);
    :Initialize an empty list (result_list);
    :Iterate over each tuple in test_list;
    if (Is tuple already in freq_dict?) then (yes)
        :Increment frequency count in freq_dict;
    else (no)
        :Add tuple to freq_dict with frequency 1;
    endif
    :Append tuple with frequency to result_list;
    :Check if all tuples processed?;
    if (No) then (yes)
        :Continue iteration;
    else (no)
        :Return result_list;
        stop
    endif
endif
@enduml"
947,"def len_log(list1):
""""""
Write a python function to find the length of the shortest word.
Your code should satisfy these tests:
len_log([""apple"", ""banana"", ""pear""]) == 4
len_log([""hello"", ""world"", ""hi"", ""bye""]) == 2
len_log([""one"", ""two"", ""three"", ""four""]) == 3
""""""
",len_log,"def check(candidate):

    assert candidate([""win"",""lose"",""great""]) == 3
    assert candidate([""a"",""ab"",""abc""]) == 1
    assert candidate([""12"",""12"",""1234""]) == 2
","def len_log(list1):
    min=len(list1[0])
    for i in list1:
        if len(i)<min:
            min=len(i)
    return min","[""len_log([\""apple\"", \""banana\"", \""pear\""]) == 4"", ""len_log([\""hello\"", \""world\"", \""hi\"", \""bye\""]) == 2"", ""len_log([\""one\"", \""two\"", \""three\"", \""four\""]) == 3""]","@startuml

start
: len_log(list1);

if (len(list1) == 0) then (no elements)
: return 0;
else (at least one element)

: shortest_word = list1[0];
: shortest_word_len = len(shortest_word);

for (i = 1; i < len(list1); i++)
: word = list1[i];
: word_len = len(word);

if (word_len < shortest_word_len) then (word is shorter)
: shortest_word = word;
: shortest_word_len = word_len;

end for

: return shortest_word_len;

end if

end start

@enduml"
624,"def is_upper(string):
""""""
Write a python function to convert the given string to upper case.
Your code should satisfy these tests:
is_upper(""HELLO"") == 'HELLO'
is_upper(""hello"") == 'HELLO'
is_upper(""Hello"") == 'HELLO'
""""""
",is_upper,"def check(candidate):

    assert candidate(""person"") ==""PERSON""
    assert candidate(""final"") == ""FINAL""
    assert candidate(""Valid"") == ""VALID""
","def is_upper(string):
  return (string.upper())","[""is_upper(\""HELLO\"") == 'HELLO'"", ""is_upper(\""hello\"") == 'HELLO'"", ""is_upper(\""Hello\"") == 'HELLO'""]","@startuml
start

:Input string;
if (Is input a string?) then (yes)
    :Convert string to uppercase;
    :Return uppercase string;
else (no)
    :Raise TypeError(""Input must be a string"");
endif

stop
@enduml"
765,"def is_polite(n):
""""""
Write a function to find nth polite number.
Your code should satisfy these tests:
is_polite(5) == 9
is_polite(10) == 14
is_polite(20) == 25
is_polite(100) == 107
is_polite(200) == 208
""""""
",is_polite,"def check(candidate):

    assert candidate(7) == 11
    assert candidate(4) == 7
    assert candidate(9) == 13
","import math
def is_polite(n):
	n = n + 1
	return (int)(n+(math.log((n + math.log(n, 2)), 2))) ","[""is_polite(5) == 9"", ""is_polite(10) == 14"", ""is_polite(20) == 25"", ""is_polite(100) == 107"", ""is_polite(200) == 208""]","@startuml
start
:Input: n
if (n > 0) then (true) else (false)
:Validation Failed
else (false)
endif
:Calculate polite number
:Return polite number
stop
@enduml"
970,"def min_of_two( x, y ):
""""""
Write a function to find minimum of two numbers.
Your code should satisfy these tests:
min_of_two(10, 20) == 10
min_of_two(-5, -10) == -10
min_of_two(0, 0) == 0
""""""
",min_of_two,"def check(candidate):

    assert candidate(10,20)==10
    assert candidate(19,15)==15
    assert candidate(-10,-20)==-20
","def min_of_two( x, y ):
    if x < y:
        return x
    return y","[""min_of_two(10, 20) == 10"", ""min_of_two(-5, -10) == -10"", ""min_of_two(0, 0) == 0""]","@startuml
start

:Input two numbers (x, y);
if (Are x and y valid numbers?) then (yes)
    if (x < y?) then (yes)
        :Return x as the minimum;
    else (no)
        if (y < x?) then (yes)
            :Return y as the minimum;
        else (no)
            :Return x (or y, since x == y);
        endif
    endif
else (no)
    :Return ""Invalid input: Both inputs must be numbers"";
endif

stop
@enduml"
944,"def num_position(text):
""""""
Write a function to separate and print the numbers and their position of a given string.
Your code should satisfy these tests:
num_position(""Hello 123 World"") == 6
num_position(""Python 3.9 is the latest version"") == 7
num_position(""The answer is 42"") == 14
num_position(""1234 is a number"") == 0
num_position(""No digits here"") == None
""""""
",num_position,"def check(candidate):

    assert candidate(""there are 70 flats in this apartment"")==10
    assert candidate(""every adult have 32 teeth"")==17
    assert candidate(""isha has 79 chocolates in her bag"")==9
","import re
def num_position(text):
 for m in re.finditer(""\d+"", text):
    return m.start()","[""num_position(\""Hello 123 World\"") == 6"", ""num_position(\""Python 3.9 is the latest version\"") == 7"", ""num_position(\""The answer is 42\"") == 14"", ""num_position(\""1234 is a number\"") == 0"", ""num_position(\""No digits here\"") == None""]","@startuml

start
:num_position(text);

if (text.isdigit()) then (true)
  :return 0;
else (false)
  :return None;
endif

if (text.isdigit()) then (false)
  :pos = 0;
  :for i in range(len(text)):
    :if (text[i].isdigit()) then (true)
      :pos = i;
      :break;
    else (false)
      :pos = None;
    endif
  :endfor
endif

return pos;

@enduml"
529,"def jacobsthal_lucas(n):
""""""
Write a function to find the nth jacobsthal-lucas number.
Your code should satisfy these tests:
jacobsthal_lucas(5) == 31
jacobsthal_lucas(7) == 127
jacobsthal_lucas(10) == 1025
jacobsthal_lucas(3) == 7
jacobsthal_lucas(12) == 4097
""""""
",jacobsthal_lucas,"def check(candidate):

    assert candidate(5) == 31
    assert candidate(2) == 5
    assert candidate(4) == 17
","def jacobsthal_lucas(n):
	dp=[0] * (n + 1)
	dp[0] = 2
	dp[1] = 1
	for i in range(2, n+1):
		dp[i] = dp[i - 1] + 2 * dp[i - 2];
	return dp[n]","[""jacobsthal_lucas(5) == 31"", ""jacobsthal_lucas(7) == 127"", ""jacobsthal_lucas(10) == 1025"", ""jacobsthal_lucas(3) == 7"", ""jacobsthal_lucas(12) == 4097""]","@startuml
start

:Input n (integer);
if (Is n a non-negative integer?) then (yes)
    if (n == 0) then (yes)
        :Return 2;
    else (no)
        if (n == 1) then (yes)
            :Return 1;
        else (no)
            :Initialize variables:
            prev2 = 2;
            prev1 = 1;
            current = 0;
            :Loop from i = 2 to n;
            while (i <= n) is (yes)
                :current = prev1 + 2 * prev2;
                :prev2 = prev1;
                :prev1 = current;
                :i = i + 1;
            endwhile (no)
            :Return current;
        endif
    endif
else (no)
    :Return ""Invalid input: n must be a non-negative integer"";
endif

stop
@enduml"
175,"def is_valid_parenthese( str1):
""""""
Write a function to verify validity of a string of parentheses.
Your code should satisfy these tests:
is_valid_parenthese(""()[]{}"") == True
is_valid_parenthese(""(]"") == False
is_valid_parenthese(""([)]"") == False
""""""
",is_valid_parenthese,"def check(candidate):

    assert candidate(""(){}[]"")==True
    assert candidate(""()[{)}"")==False
    assert candidate(""()"")==True
","def is_valid_parenthese( str1):
        stack, pchar = [], {""("": "")"", ""{"": ""}"", ""["": ""]""}
        for parenthese in str1:
            if parenthese in pchar:
                stack.append(parenthese)
            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:
                return False
        return len(stack) == 0","[""is_valid_parenthese(\""()[]{}\"") == True"", ""is_valid_parenthese(\""(]\"") == False"", ""is_valid_parenthese(\""([)]\"") == False""]","@startuml
start

:Input string **str1**;
if (Is **str1** empty?) then (yes)
    :Return **True**;
    stop
else (no)
    :Initialize an empty stack;
    :Define a mapping of closing to opening parentheses;
    :Iterate over each character in **str1**;
    if (Is the character an opening parenthesis?) then (yes)
        :Push the character onto the stack;
    else (no)
        if (Is the character a closing parenthesis?) then (yes)
            if (Is the stack empty?) then (yes)
                :Return **False**;
                stop
            else (no)
                :Pop the top element from the stack;
                if (Does the popped element match the corresponding opening parenthesis?) then (yes)
                    :Continue iteration;
                else (no)
                    :Return **False**;
                    stop
                endif
            endif
        else (no)
            :Return **False**;
            stop
        endif
    endif
    if (Is the stack empty after iteration?) then (yes)
        :Return **True**;
        stop
    else (no)
        :Return **False**;
        stop
    endif
endif

stop
@enduml"
901,"def smallest_multiple(n):
""""""
Write a function to find the smallest multiple of the first n numbers.
Your code should satisfy these tests:
smallest_multiple(5) == 60
smallest_multiple(7) == 420
smallest_multiple(10) == 2520
""""""
",smallest_multiple,"def check(candidate):

    assert candidate(13)==360360
    assert candidate(2)==2
    assert candidate(1)==1
","def smallest_multiple(n):
    if (n<=2):
      return n
    i = n * 2
    factors = [number  for number in range(n, 1, -1) if number * 2 > n]
    while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i","[""smallest_multiple(5) == 60"", ""smallest_multiple(7) == 420"", ""smallest_multiple(10) == 2520""]","@startuml
start
:Initialize result to 1;
:Initialize i to 2;
repeat
    :Check if result is divisible by i;
    if (Divisible?) then (yes)
        :Increment i;
    else (no)
        :Increment result by 1;
        :Reset i to 2;
    endif
repeat while (i <= n)
:Return result;
stop
@enduml"
966,"def remove_empty(tuple1):
""""""
Write a function to remove an empty tuple from a list of tuples.
""""""
",remove_empty,"def check(candidate):

    assert candidate([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']
    assert candidate([(), (), ('',), (""python""), (""program"")])==[('',), (""python""), (""program"")]
    assert candidate([(), (), ('',), (""java"")])==[('',),(""java"") ]
","def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]
   tuple1 = [t for t in tuple1 if t]
   return tuple1","[""remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]) == [('',), ('a', 'b'), ('a', 'b', 'c'), 'd']"", ""remove_empty([(), ('hello',), ('world',), ('', 'test'), ('another', 'test')]) == [('hello',), ('world',), ('', 'test'), ('another', 'test')]"", ""remove_empty([('keep',), (), (), ('this', 'too'), ('',), ('and', 'this')]) == [('keep',), ('this', 'too'), ('',), ('and', 'this')]""]","@startuml

title remove_empty(tuple1)

start
:Remove empty tuple from list of tuples;

if (tuple1 is empty) then (yes)
:Return empty list;
else (no)
:Initialize result list;

for each tuple in tuple1 do
:Check if tuple is empty;
if (tuple is empty) then (yes)
:Skip empty tuple;
else (no)
:Add tuple to result list;

end for

:Return result list;

end if

stop

@enduml"
361,"def remove_empty(list1):
""""""
Write a function to remove empty lists from a given list of lists.
Your code should satisfy these tests:
remove_empty([1, 2, '', 3, None, 4, [], {}, False]) == [1, 2, 3, 4]
remove_empty(['a', '', 'b', 'c', None, 'd', {}, [], False]) == ['a', 'b', 'c', 'd']
remove_empty([[], {}, (), '', 0, False, None, 'hello']) == ['hello']
""""""
",remove_empty,"def check(candidate):

    assert candidate([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']
    assert candidate([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']
    assert candidate([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']
","def remove_empty(list1):
  remove_empty = [x for x in list1 if x]
  return remove_empty","[""remove_empty([1, 2, '', 3, None, 4, [], {}, False]) == [1, 2, 3, 4]"", ""remove_empty(['a', '', 'b', 'c', None, 'd', {}, [], False]) == ['a', 'b', 'c', 'd']"", ""remove_empty([[], {}, (), '', 0, False, None, 'hello']) == ['hello']""]","@startuml
start

:Input list1;
:Initialize result_list as an empty list;

if (Is list1 empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Iterate over each element in list1;
    if (Is element a non-empty list or a non-empty string or a non-zero number?) then (yes)
        :Add element to result_list;
    else (no)
        :Skip element;
    endif
endif

:Return result_list;
stop

@enduml"
912,"def binomial_coeff(n, k):
""""""
Write a function to find ln, m lobb number.
Your code should satisfy these tests:
binomial_coeff(4, 2) == 6
binomial_coeff(5, 3) == 10
binomial_coeff(10, 5) == 252
binomial_coeff(7, 4) == 35
binomial_coeff(8, 2) == 28
""""""
",binomial_coeff,"def check(candidate):

    assert int(lobb_num(5, 3)) == 35
    assert int(lobb_num(3, 2)) == 5
    assert int(lobb_num(4, 2)) == 20
","def binomial_coeff(n, k):
	C = [[0 for j in range(k + 1)]
			for i in range(n + 1)]
	for i in range(0, n + 1):
		for j in range(0, min(i, k) + 1):
			if (j == 0 or j == i):
				C[i][j] = 1
			else:
				C[i][j] = (C[i - 1][j - 1]
							+ C[i - 1][j])
	return C[n][k]
def lobb_num(n, m):
	return (((2 * m + 1) *
		binomial_coeff(2 * n, m + n))
					/ (m + n + 1))","[""binomial_coeff(4, 2) == 6"", ""binomial_coeff(5, 3) == 10"", ""binomial_coeff(10, 5) == 252"", ""binomial_coeff(7, 4) == 35"", ""binomial_coeff(8, 2) == 28""]","@startuml
start
:Input n;
:Input k;
if (n < k) then (No solution)
elseif (n < 0 or k < 0) then (Invalid input)
else (Valid input)
:Calculate binomial coefficient;
:Return result;
endif
stop
@enduml"
242,"def count_charac(str1):
""""""
Write a function to count total characters in a string.
Your code should satisfy these tests:
count_charac(""hello"") == 5
count_charac("""") == 0
count_charac(""Python Programming"") == 18
""""""
",count_charac,"def check(candidate):

    assert candidate(""python programming"")==18
    assert candidate(""language"")==8
    assert candidate(""words"")==5
","def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total","[""count_charac(\""hello\"") == 5"", ""count_charac(\""\"") == 0"", ""count_charac(\""Python Programming\"") == 18""]","@startuml

start
:count_charac(str1);

if (str1 == """") then (
  :return 0;
) else (
  :return len(str1);
)

@enduml"
41,"def filter_evennumbers(nums):
""""""
Write a function to filter even numbers using lambda function.
Your code should satisfy these tests:
filter_evennumbers([1, 2, 3, 4, 5, 6]) == [2, 4, 6]
filter_evennumbers([10, 15, 20, 25, 30]) == [10, 20, 30]
filter_evennumbers([-2, -3, -4, -5, -6]) == [-2, -4, -6]
""""""
",filter_evennumbers,"def check(candidate):

    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]
    assert candidate([10,20,45,67,84,93])==[10,20,84]
    assert candidate([5,7,9,8,6,4,3])==[8,6,4]
","def filter_evennumbers(nums):
 even_nums = list(filter(lambda x: x%2 == 0, nums))
 return even_nums","[""filter_evennumbers([1, 2, 3, 4, 5, 6]) == [2, 4, 6]"", ""filter_evennumbers([10, 15, 20, 25, 30]) == [10, 20, 30]"", ""filter_evennumbers([-2, -3, -4, -5, -6]) == [-2, -4, -6]""]","@startuml

title filter_evennumbers

start
:filter_evennumbers(nums);
if (nums is not empty) then (yes)
  :filter_evennumbers(nums);
  :nums = [1, 2, 3, 4, 5, 6];
  :even_nums = [];
  :for num in nums:
    if (num is even) then (yes)
      :even_nums.append(num);
    endif
  :endfor
  :return even_nums;
else (no)
  :return [];
endif

@enduml"
883,"def div_of_nums(nums,m,n):
""""""
Write a function to find numbers divisible by m and n from a list of numbers using lambda function.
Your code should satisfy these tests:
div_of_nums([10, 20, 30, 40, 50], 5, 10) == [10, 20, 30, 40, 50]
div_of_nums([12, 15, 18, 24, 30], 3, 5) == [15, 30]
div_of_nums([7, 14, 21, 28, 35], 7, 2) == [14, 28]
""""""
",div_of_nums,"def check(candidate):

    assert candidate([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]
    assert candidate([1, 2, 3, 5, 7, 8, 10],2,5)==[10]
    assert candidate([10,15,14,13,18,12,20],10,5)==[10,20]
","def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums))
 return result","[""div_of_nums([10, 20, 30, 40, 50], 5, 10) == [10, 20, 30, 40, 50]"", ""div_of_nums([12, 15, 18, 24, 30], 3, 5) == [15, 30]"", ""div_of_nums([7, 14, 21, 28, 35], 7, 2) == [14, 28]""]","@startuml
start

:Input list of numbers (nums), m, and n;
if (Are nums, m, and n valid?) then (yes)
    :Initialize an empty list (result);
    :Define a lambda function to check divisibility by m and n;
    :Iterate through each number in nums;
    if (Is the number divisible by both m and n?) then (yes)
        :Add the number to the result list;
    else (no)
        :Skip the number;
    endif
    :Return the result list;
else (no)
    :Return an error or empty list;
endif

stop
@enduml"
212,"def fourth_Power_Sum(n):
""""""
Write a python function to find the sum of fourth power of n natural numbers.
Your code should satisfy these tests:
fourth_Power_Sum(1) == 1
fourth_Power_Sum(2) == 17
fourth_Power_Sum(3) == 98
""""""
",fourth_Power_Sum,"def check(candidate):

    assert candidate(2) == 17
    assert candidate(4) == 354
    assert candidate(6) == 2275
","import math
def fourth_Power_Sum(n):
    sum = 0
    for i in range(1,n+1) :
        sum = sum + (i*i*i*i)
    return sum","[""fourth_Power_Sum(1) == 1"", ""fourth_Power_Sum(2) == 17"", ""fourth_Power_Sum(3) == 98""]","@startuml

start
:fourth_Power_Sum(n);

if (n == 1) then (yes)
:return 1;
else (no)
:sum = 0;

for (i = 1 to n)
:sum = sum + i^4;

:return sum;

@enduml"
432,"def median_trapezium(base1,base2,height):
""""""
Write a function to find the median of a trapezium.
Your code should satisfy these tests:
median_trapezium(10, 20, 15) == 15.0
median_trapezium(5, 5, 10) == 5.0
median_trapezium(8, 12, 7) == 10.0
""""""
",median_trapezium,"def check(candidate):

    assert candidate(15,25,35)==20
    assert candidate(10,20,30)==15
    assert candidate(6,9,4)==7.5
","def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median","[""median_trapezium(10, 20, 15) == 15.0"", ""median_trapezium(5, 5, 10) == 5.0"", ""median_trapezium(8, 12, 7) == 10.0""]","@startuml
start

:Input base1, base2, height;
if (Are base1, base2, and height valid numbers?) then (yes)
    if (Are base1, base2, and height positive?) then (yes)
        :Calculate median using formula: (base1 + base2) / 2;
        :Return median as float;
    else (no)
        :Return ""Error: All inputs must be positive numbers"";
    endif
else (no)
    :Return ""Error: Invalid input. Please provide numeric values"";
endif

stop
@enduml"
80,"def tetrahedral_number(n):
""""""
Write a function to find the nth tetrahedral number.
Your code should satisfy these tests:
tetrahedral_number(1) == 1
tetrahedral_number(3) == 10
tetrahedral_number(5) == 35
""""""
",tetrahedral_number,"def check(candidate):

    assert candidate(5) == 35.0
    assert candidate(6) == 56.0
    assert candidate(7) == 84.0
","def tetrahedral_number(n):
	return (n * (n + 1) * (n + 2)) / 6","[""tetrahedral_number(1) == 1"", ""tetrahedral_number(3) == 10"", ""tetrahedral_number(5) == 35""]","@startuml

start
:tetrahedral_number(n);
if (n == 1) then (yes)
:return 1;
else (no)
:return n * (n + 1) * (n + 2) / 6;
end if

@enduml"
4,"def heap_queue_largest(nums,n):
""""""
Write a function to find the largest integers from a given list of numbers using heap queue algorithm.
Your code should satisfy these tests:
heap_queue_largest([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]
heap_queue_largest([10, 20, 4, 45, 99], 2) == [99, 45]
heap_queue_largest([-1, -2, -3, -4, -5], 4) == [-1, -2, -3, -4]
""""""
",heap_queue_largest,"def check(candidate):

    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]
    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]
    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]
","import heapq as hq
def heap_queue_largest(nums,n):
  largest_nums = hq.nlargest(n, nums)
  return largest_nums","[""heap_queue_largest([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]"", ""heap_queue_largest([10, 20, 4, 45, 99], 2) == [99, 45]"", ""heap_queue_largest([-1, -2, -3, -4, -5], 4) == [-1, -2, -3, -4]""]","@startuml

title Heap Queue Largest

start
:heap_queue_largest(nums, n);

if (n <= 0) then (no
:return [];
)

if (len(nums) <= n) then (no
:return nums;
)

:heapify(nums);

:largest = [];

repeat n times
:largest.append(nums.pop());

:heapify(nums);

:return largest;

@enduml"
649,"def sum_Range_list(nums, m, n):
""""""
Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.
Your code should satisfy these tests:
sum_Range_list([1, 2, 3, 4, 5], 1, 3) == 9
sum_Range_list([10, 20, 30, 40, 50], 0, 2) == 60
sum_Range_list([5, 5, 5, 5, 5], 2, 4) == 15
""""""
",sum_Range_list,"def check(candidate):

    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29
    assert candidate([1,2,3,4,5],1,2) == 5
    assert candidate([1,0,1,2,5,6],4,5) == 11
","def sum_Range_list(nums, m, n):
    sum_range = 0
    for i in range(m, n+1, 1):
        sum_range += nums[i]
    return sum_range   ","[""sum_Range_list([1, 2, 3, 4, 5], 1, 3) == 9"", ""sum_Range_list([10, 20, 30, 40, 50], 0, 2) == 60"", ""sum_Range_list([5, 5, 5, 5, 5], 2, 4) == 15""]","@startuml

start
:sum_Range_list(nums, m, n);

if (m < 0 or m > len(nums)) then (no)
:Invalid range;
:return 0;
else (yes)
:Valid range;

if (n < 0 or n > len(nums)) then (no)
:Invalid range;
:return 0;
else (yes)
:Valid range;

:sum = 0;

for (i = m; i <= n; i++) do
:sum += nums[i];

:return sum;

@enduml"
111,"def common_in_nested_lists(nestedlist):
""""""
Write a function to find common elements in given nested lists. * list item * list item * list item * list item
Your code should satisfy these tests:
common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]
common_in_nested_lists([[10, 20, 30], [10, 20, 30], [10, 20, 30]]) == [10, 20, 30]
common_in_nested_lists([[1, 2], [3, 4], [5, 6]]) == []
""""""
",common_in_nested_lists,"def check(candidate):

    assert candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]
    assert candidate([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]
    assert candidate([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]
","def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result","[""common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]"", ""common_in_nested_lists([[10, 20, 30], [10, 20, 30], [10, 20, 30]]) == [10, 20, 30]"", ""common_in_nested_lists([[1, 2], [3, 4], [5, 6]]) == []""]","@startuml
start

:Input nested list;
:Check if nested list is empty or not;
if (Is nested list empty?) then (yes)
  :Return empty list;
  stop
else (no)
  :Initialize a set with the first sublist;
  :Iterate over the remaining sublists;
  :For each sublist, find the intersection with the current set;
  :Update the set with the intersection result;
  :Check if the set is empty;
  if (Is set empty?) then (yes)
    :Return empty list;
    stop
  else (no)
    :Convert the set to a list;
    :Return the common elements list;
    stop
  endif
endif

@enduml"
72,"def dif_Square(n):
""""""
Write a python function to check whether the given number can be represented as difference of two squares or not.
Your code should satisfy these tests:
dif_Square(3) == True
dif_Square(6) == False
dif_Square(11) == True
""""""
",dif_Square,"def check(candidate):

    assert candidate(5) == True
    assert candidate(10) == False
    assert candidate(15) == True
","def dif_Square(n):
    if (n % 4 != 2):
        return True
    return False","[""dif_Square(3) == True"", ""dif_Square(6) == False"", ""dif_Square(11) == True""]","@startuml
start

:Input number n;
if (Is n a positive integer?) then (yes)
    :Initialize flag = False;
    :Initialize i = 1;
    while (i * i < n) is (yes)
        :Calculate j_squared = i * i + n;
        :Calculate j = sqrt(j_squared);
        if (Is j an integer?) then (yes)
            :Set flag = True;
            :Break loop;
        else (no)
            :Increment i by 1;
        endif
    endwhile
    if (flag == True) then (yes)
        :Return True;
    else (no)
        :Return False;
    endif
else (no)
    :Return ""Invalid input: n must be a positive integer"";
endif

stop
@enduml"
908,"def find_fixed_point(arr, n):
""""""
Write a function to find the fixed point in the given array.
Your code should satisfy these tests:
find_fixed_point([0, 2, 3, 4], 4) == 0
find_fixed_point([1, 1, 3, 4], 4) == 1
find_fixed_point([-1, 2, 3, 4], 4) == -1
""""""
",find_fixed_point,"def check(candidate):

    assert candidate([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8],8) == -1
    assert candidate([0, 2, 5, 8, 17],5) == 0
","def find_fixed_point(arr, n):
	for i in range(n):
		if arr[i] is i:
			return i
	return -1","[""find_fixed_point([0, 2, 3, 4], 4) == 0"", ""find_fixed_point([1, 1, 3, 4], 4) == 1"", ""find_fixed_point([-1, 2, 3, 4], 4) == -1""]","@startuml

title find_fixed_point

start
:find_fixed_point(arr, n);

if (n <= 0) then (no fixed point)
:return -1;
else (n > 0)
:fixed_point = 0;
:for i in range(n):
:    if (arr[i] == fixed_point) then (fixed point found)
:        :return fixed_point;
:    else (fixed point not found)
:        :fixed_point += 1;
:    endif
:endfor
:return -1;
endif

@enduml"
434,"def text_match_one(text):
""""""
Write a function that matches a string that has an a followed by one or more b's.
Your code should satisfy these tests:
text_match_one(""ab"") == 'Found a match!'
text_match_one(""aabbb"") == 'Found a match!'
text_match_one(""ac"") == 'Not matched!'
""""""
",text_match_one,"def check(candidate):

    assert candidate(""ac"")==('Not matched!')
    assert candidate(""dc"")==('Not matched!')
    assert candidate(""abba"")==('Found a match!')
","import re
def text_match_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')
","[""text_match_one(\""ab\"") == 'Found a match!'"", ""text_match_one(\""aabbb\"") == 'Found a match!'"", ""text_match_one(\""ac\"") == 'Not matched!'""]","@startuml

start
:text_match_one(text);

if (text.startswith(""a"")) then (yes)
  :Found a match!;
else (no)
  :Not matched!;
endif

@enduml"
42,"def find_Sum(arr,n):
""""""
Write a python function to find the sum of repeated elements in a given array.
Your code should satisfy these tests:
find_Sum([1, 2, 3, 2, 4, 5, 6, 3, 3], 9) == 13
find_Sum([10, 20, 10, 20, 30, 40, 50], 7) == 60
find_Sum([7, 8, 9, 10, 11, 12], 6) == 0
""""""
",find_Sum,"def check(candidate):

    assert candidate([1,2,3,1,1,4,5,6],8) == 3
    assert candidate([1,2,3,1,1],5) == 3
    assert candidate([1,1,2],3) == 2
","def find_Sum(arr,n):
    return sum([x for x in arr if arr.count(x) > 1])","[""find_Sum([1, 2, 3, 2, 4, 5, 6, 3, 3], 9) == 13"", ""find_Sum([10, 20, 10, 20, 30, 40, 50], 7) == 60"", ""find_Sum([7, 8, 9, 10, 11, 12], 6) == 0""]","@startuml
start
:Input: arr = [1, 2, 3, 2, 4, 5, 6, 3, 3], n = 9;
:Input: arr = [10, 20, 10, 20, 30, 40, 50], n = 7;
:Input: arr = [7, 8, 9, 10, 11, 12], n = 6;

:Initialize sum = 0;

:for i in range(n):
    :count = 0;
    :for j in range(n):
        :if arr[i] == arr[j]:
        :count += 1;
    :if count > 1:
        :sum += arr[i];
    :endif;
    :endif;
:endfor;

:return sum;

stop
@enduml"
924,"def max_of_two( x, y ):
""""""
Write a function to find maximum of two numbers.
Your code should satisfy these tests:
max_of_two(10, 20) == 20
max_of_two(-5, -10) == -5
max_of_two(0, 0) == 0
""""""
",max_of_two,"def check(candidate):

    assert candidate(10,20)==20
    assert candidate(19,15)==19
    assert candidate(-10,-20)==-10
","def max_of_two( x, y ):
    if x > y:
        return x
    return y","[""max_of_two(10, 20) == 20"", ""max_of_two(-5, -10) == -5"", ""max_of_two(0, 0) == 0""]","@startuml
start

:Input two numbers (x, y);
if (Are x and y valid numbers?) then (yes)
    if (x > y?) then (yes)
        :Return x as the maximum;
    else (no)
        if (y > x?) then (yes)
            :Return y as the maximum;
        else (no)
            :Return x (since x == y);
        endif
    endif
else (no)
    :Return ""Invalid input: Both inputs must be numbers"";
endif

stop
@enduml"
846,"def find_platform(arr, dep, n):
""""""
Write a function to find the minimum number of platforms required for a railway/bus station.
Your code should satisfy these tests:
find_platform([900, 940, 950, 1100, 1500, 1800], [910, 1200, 1120, 1130, 1900, 2000], 6) == 3
find_platform([1000, 1030, 1040, 1050], [1010, 1040, 1050, 1060], 4) == 2
find_platform([800, 850, 900, 950], [810, 860, 910, 960], 4) == 1
""""""
",find_platform,"def check(candidate):

    assert candidate([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3
    assert candidate([100,200,300,400],[700,800,900,1000],4)==4
    assert candidate([5,6,7,8],[4,3,2,1],4)==1
","def find_platform(arr, dep, n):
    arr.sort()
    dep.sort()
    plat_needed = 1
    result = 1
    i = 1
    j = 0
    while (i < n and j < n):
        if (arr[i] <= dep[j]):
            plat_needed+= 1
            i+= 1
        elif (arr[i] > dep[j]):
            plat_needed-= 1
            j+= 1
        if (plat_needed > result):
            result = plat_needed
    return result","[""find_platform([900, 940, 950, 1100, 1500, 1800], [910, 1200, 1120, 1130, 1900, 2000], 6) == 3"", ""find_platform([1000, 1030, 1040, 1050], [1010, 1040, 1050, 1060], 4) == 2"", ""find_platform([800, 850, 900, 950], [810, 860, 910, 960], 4) == 1""]","@startuml

start

if (n <= 0) then (yes)
  :Return 0;
else (no)
  :platforms = 1;
  :result = 1;
  :arr.sort();
  :dep.sort();
  :arr_idx = 1;
  :dep_idx = 0;

  while (arr_idx < n and dep_idx < n)
    :if (arr[arr_idx] <= dep[dep_idx]) then (yes)
    :  platforms++;
    :  result = max(result, platforms);
    :  arr_idx++;
    :else (no)
    :  platforms--;
    :  dep_idx++;
    :endif
  endwhile

  :Return result;
endif

stop

@enduml"
725,"def extract_quotation(text1):
""""""
Write a function to extract values between quotation marks of the given string by using regex.
Your code should satisfy these tests:
extract_quotation('He said, ""Hello, world!"" and then left.') == ['Hello, world!']
extract_quotation('She replied, ""Sure, I can do that.""') == ['Sure, I can do that.']
extract_quotation('The book had a quote: ""To be or not to be, that is the question.""') == ['To be or not to be, that is the question.']
""""""
",extract_quotation,"def check(candidate):

    assert candidate('Cortex ""A53"" Based ""multi"" tasking ""Processor""') == ['A53', 'multi', 'Processor']
    assert candidate('Cast your ""favorite"" entertainment ""apps""') == ['favorite', 'apps']
    assert candidate('Watch content ""4k Ultra HD"" resolution with ""HDR 10"" Support') == ['4k Ultra HD', 'HDR 10']
","import re
def extract_quotation(text1):
  return (re.findall(r'""(.*?)""', text1))","[""extract_quotation('He said, \""Hello, world!\"" and then left.') == ['Hello, world!']"", ""extract_quotation('She replied, \""Sure, I can do that.\""') == ['Sure, I can do that.']"", ""extract_quotation('The book had a quote: \""To be or not to be, that is the question.\""') == ['To be or not to be, that is the question.']""]","@startuml

title: Extract Quotation Marks

start
:Extract quotation marks;

if (text1 contains quotation marks) then (yes)
  :Extract quotation marks;
  :Add quotation marks to list;
else (no)
  :No quotation marks found;
endif

stop

@enduml"
31,"def func(nums, k):
""""""
Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.
Your code should satisfy these tests:
func([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 2) == [2, 3]
func([[1, 1, 1], [2, 2, 2], [3, 3, 3]], 1) == [1]
func([[10, 20], [10, 30], [20, 30]], 3) == [10, 20, 30]
func([[5, 5, 5], [5, 5, 5], [5, 5, 5]], 1) == [5]
func([[1, 2], [3, 4], [5, 6]], 6) == [1, 2, 3, 4, 5, 6]
""""""
",func,"def check(candidate):

    assert candidate([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]
    assert candidate([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]
    assert candidate([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]
","def func(nums, k):
    import collections
    d = collections.defaultdict(int)
    for row in nums:
        for i in row:
            d[i] += 1
    temp = []
    import heapq
    for key, v in d.items():
        if len(temp) < k:
            temp.append((v, key))
            if len(temp) == k:
                heapq.heapify(temp)
        else:
            if v > temp[0][0]:
                heapq.heappop(temp)
                heapq.heappush(temp, (v, key))
    result = []
    while temp:
        v, key = heapq.heappop(temp)
        result.append(key)
    return result","[""func([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 2) == [2, 3]"", ""func([[1, 1, 1], [2, 2, 2], [3, 3, 3]], 1) == [1]"", ""func([[10, 20], [10, 30], [20, 30]], 3) == [10, 20, 30]"", ""func([[5, 5, 5], [5, 5, 5], [5, 5, 5]], 1) == [5]"", ""func([[1, 2], [3, 4], [5, 6]], 6) == [1, 2, 3, 4, 5, 6]""]","@startuml
start
:Input: nums, k
:Output: top k frequent numbers

:Initialize a dictionary to store frequency of numbers
:Initialize a heap queue to store top k frequent numbers

:For each list in nums:
    :For each number in list:
        :Increment the frequency of the number in the dictionary
    :End
:End

:For each number in the dictionary:
    :Push the number and its frequency into the heap queue
    :If the size of the heap queue exceeds k:
        :Pop the smallest element from the heap queue
    :End
:End

:Return the heap queue as the top k frequent numbers

stop
@enduml"
65,"def recursive_list_sum(data_list):
""""""
Write a function of recursion list sum.
Your code should satisfy these tests:
recursive_list_sum([1, 2, [3, 4], [5, 6]]) == 21
recursive_list_sum([1, [2, [3, [4, [5]]]]]) == 15
recursive_list_sum([[1, 2, [3]], 4, [5, 6, [7, 8]]]) == 36
""""""
",recursive_list_sum,"def check(candidate):

    assert candidate(([1, 2, [3,4],[5,6]]))==21
    assert candidate(([7, 10, [15,14],[19,41]]))==106
    assert candidate(([10, 20, [30,40],[50,60]]))==210
","def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total","[""recursive_list_sum([1, 2, [3, 4], [5, 6]]) == 21"", ""recursive_list_sum([1, [2, [3, [4, [5]]]]]) == 15"", ""recursive_list_sum([[1, 2, [3]], 4, [5, 6, [7, 8]]]) == 36""]","@startuml

recursive_list_sum(data_list)

if data_list is empty:
    return 0
else:
    if data_list[0] is a list:
        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])
    else:
        return data_list[0] + recursive_list_sum(data_list[1:])

@enduml"
307,"def colon_tuplex(tuplex,m,n):
""""""
Write a function to get a colon of a tuple.
Your code should satisfy these tests:
colon_tuplex((['a', 'b'], ['c', 'd']), 0, 'x') == (['a', 'b', 'x'], ['c', 'd'])
colon_tuplex((['hello'], ['world']), 1, '!') == (['hello'], ['world', '!'])
colon_tuplex(([], [1, 2, 3]), 0, 0) == ([0], [1, 2, 3])
""""""
",colon_tuplex,"def check(candidate):

    assert candidate((""HELLO"", 5, [], True) ,2,50)==(""HELLO"", 5, [50], True)
    assert candidate((""HELLO"", 5, [], True) ,2,100)==((""HELLO"", 5, [100],True))
    assert candidate((""HELLO"", 5, [], True) ,2,500)==(""HELLO"", 5, [500], True)
","from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon","[""colon_tuplex((['a', 'b'], ['c', 'd']), 0, 'x') == (['a', 'b', 'x'], ['c', 'd'])"", ""colon_tuplex((['hello'], ['world']), 1, '!') == (['hello'], ['world', '!'])"", ""colon_tuplex(([], [1, 2, 3]), 0, 0) == ([0], [1, 2, 3])""]","@startuml
start

:Input: tuplex, m, n;
if (Is tuplex a tuple?) then (yes)
    if (Is m a valid index for tuplex?) then (yes)
        :Create a copy of the tuple element at index m;
        :Append n to the copied list;
        :Create a new tuple with the modified list;
        :Return the new tuple;
    else (no)
        :Raise IndexError(""Index m is out of range"");
    endif
else (no)
    :Raise TypeError(""Input tuplex must be a tuple"");
endif

stop
@enduml"
837,"def cube_Sum(n):
""""""
Write a python function to find the cube sum of first n odd natural numbers.
Your code should satisfy these tests:
cube_Sum(1) == 1
cube_Sum(2) == 28
cube_Sum(3) == 153
""""""
",cube_Sum,"def check(candidate):

    assert candidate(2) == 28
    assert candidate(3) == 153
    assert candidate(4) == 496
","def cube_Sum(n):
    sum = 0
    for i in range(0,n) :
        sum += (2*i+1)*(2*i+1)*(2*i+1)
    return sum","[""cube_Sum(1) == 1"", ""cube_Sum(2) == 28"", ""cube_Sum(3) == 153""]","@startuml
start

:Input n (number of odd natural numbers);
if (n <= 0?) then (yes)
    :Invalid input: n must be greater than 0;
    stop
else (no)
    :Initialize sum = 0;
    :Initialize counter = 1;
    :Initialize odd_count = 0;

    while (odd_count < n) is (yes)
        :Check if counter is odd;
        if (counter % 2 != 0?) then (yes)
            :Add cube of counter to sum;
            :sum = sum + (counter ** 3);
            :Increment odd_count by 1;
        else (no)
            :Do nothing;
        endif
        :Increment counter by 1;
    endwhile (no)

    :Return sum;
    stop
endif

@enduml"
580,"def even_ele(test_tuple, even_fnc):
""""""
Write a function to extract the even elements in the nested mixed tuple.
Your code should satisfy these tests:
extract_even((1, 2, 3, 4, 5)) == (2, 4)
extract_even((10, (11, 12), 13, (14, 15))) == (10, (12,), (14,))
extract_even((1, 3, 5, 7)) == ()
extract_even((2, 4, 6, (8, 9), 10)) == (2, 4, 6, (8,), 10)
extract_even((0, (1, 2, (3, 4), 5), 6)) == (0, (2, (4,)), 6)
""""""
",even_ele,"def check(candidate):

    assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)
    assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))
    assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)
","def even_ele(test_tuple, even_fnc):
	res = tuple()
	for ele in test_tuple:
		if isinstance(ele, tuple):
			res += (even_ele(ele, even_fnc), )
		elif even_fnc(ele):
			res += (ele, )
	return res
def extract_even(test_tuple):
  res = even_ele(test_tuple, lambda x: x % 2 == 0)
  return (res) ","[""extract_even((1, 2, 3, 4, 5)) == (2, 4)"", ""extract_even((10, (11, 12), 13, (14, 15))) == (10, (12,), (14,))"", ""extract_even((1, 3, 5, 7)) == ()"", ""extract_even((2, 4, 6, (8, 9), 10)) == (2, 4, 6, (8,), 10)"", ""extract_even((0, (1, 2, (3, 4), 5), 6)) == (0, (2, (4,)), 6)""]","@startuml
start
:Input Tuple;
if (Is Tuple Empty?) then (yes)
  :Return Empty Tuple;
  stop
endif
:Initialize Result Tuple;
:Initialize Stack with Input Tuple;
while (Stack is not Empty)
  :Pop Element from Stack;
  if (Element is Tuple) then
    :Push all elements of Element to Stack;
  elseif (Element is Even Number?) then
    :Append Element to Result Tuple;
  endif
endwhile
:Return Result Tuple;
stop
@enduml"
790,"def even_position(nums):
""""""
Write a python function to check whether every even index contains even numbers of a given list.
Your code should satisfy these tests:
even_position([0, 1, 2, 3, 4]) == True
even_position([1, 3, 5, 7, 9]) == False
even_position([2, 4, 6, 8, 10]) == False
""""""
",even_position,"def check(candidate):

    assert candidate([3,2,1]) == False
    assert candidate([1,2,3]) == False
    assert candidate([2,1,4]) == True
","def even_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))","[""even_position([0, 1, 2, 3, 4]) == True"", ""even_position([1, 3, 5, 7, 9]) == False"", ""even_position([2, 4, 6, 8, 10]) == False""]","@startuml
start

:Input list of numbers (nums);
:Initialize index (i) to 0;

while (i < length of nums) is (Yes)
    if (i is even?) then (Yes)
        if (nums[i] is even?) then (Yes)
            :Increment index (i = i + 1);
        else (No)
            :Return False;
            stop
        endif
    else (No)
        :Increment index (i = i + 1);
    endif
endwhile (No)

:Return True;
stop

@enduml"
595,"def min_Swaps(str1,str2):
""""""
Write a python function to count minimum number of swaps required to convert one binary string to another.
Your code should satisfy these tests:
min_Swaps(""1100"", ""1001"") == 1
min_Swaps(""1010"", ""0101"") == 2
min_Swaps(""1111"", ""0000"") == 2
min_Swaps(""1001"", ""1001"") == 0
min_Swaps(""0011"", ""1100"") == 2
""""""
",min_Swaps,"def check(candidate):

    assert candidate(""1101"",""1110"") == 1
    assert candidate(""111"",""000"") == ""Not Possible""
    assert candidate(""111"",""110"") == ""Not Possible""
","def min_Swaps(str1,str2) :
    count = 0
    for i in range(len(str1)) :
        if str1[i] != str2[i] :
            count += 1
    if count % 2 == 0 :
        return (count // 2)
    else :
        return (""Not Possible"") ","[""min_Swaps(\""1100\"", \""1001\"") == 1"", ""min_Swaps(\""1010\"", \""0101\"") == 2"", ""min_Swaps(\""1111\"", \""0000\"") == 2"", ""min_Swaps(\""1001\"", \""1001\"") == 0"", ""min_Swaps(\""0011\"", \""1100\"") == 2""]","@startuml
start
:Input Validation;
if (str1 and str2 are not of same length?) then (yes)
    :Return Error;
    stop
endif
:Initialize count to 0;
:Iterate over str1 and str2;
if (str1[i] != str2[i]) then (yes)
    :Increment count;
endif
:Return count;
stop
@enduml"
638,"def wind_chill(v,t):
""""""
Write a function to calculate wind chill index.
Your code should satisfy these tests:
wind_chill(5, 30) == 32
wind_chill(10, 20) == 21
wind_chill(15, 10) == 8
wind_chill(20, 0) == -5
wind_chill(25, -10) == -19
""""""
",wind_chill,"def check(candidate):

    assert candidate(120,35)==40
    assert candidate(40,70)==86
    assert candidate(10,100)==116
","import math
def wind_chill(v,t):
 windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)
 return int(round(windchill, 0))","[""wind_chill(5, 30) == 32"", ""wind_chill(10, 20) == 21"", ""wind_chill(15, 10) == 8"", ""wind_chill(20, 0) == -5"", ""wind_chill(25, -10) == -19""]","@startuml
start
:validate v and t;
if (v > 20 or t < -50 or t > 50) then (invalid)
:raise ValueError;
endif
:calculate wind chill;
:wc = 35.74 + 0.6215*t - 35.75*v^0.16 + 0.4275*t*v^0.16;
:return wc;
stop
@enduml"
717,"def sd_calc(data):
""""""
Write a function to calculate the standard deviation.
Your code should satisfy these tests:
sd_calc([5]) == 0.0
""""""
",sd_calc,"def check(candidate):

    assert candidate([4, 2, 5, 8, 6])== 2.23606797749979
    assert candidate([1,2,3,4,5,6,7])==2.160246899469287
    assert candidate([5,9,10,15,6,4])==4.070217029430577
","import math
import sys
def sd_calc(data):
    n = len(data)
    if n <= 1:
        return 0.0
    mean, sd = avg_calc(data), 0.0
    for el in data:
        sd += (float(el) - mean)**2
    sd = math.sqrt(sd / float(n-1))
    return sd
def avg_calc(ls):
    n, mean = len(ls), 0.0
    if n <= 1:
        return ls[0]
    for el in ls:
        mean = mean + float(el)
    mean = mean / float(n)
    return mean","[""sd_calc([5]) == 0.0""]","@startuml

title SD Calculation

start
:Calculate SD;

if (data.length == 1) then (
  :Return 0.0;
  stop;
)

:Calculate mean;
:Calculate variance;
:Calculate standard deviation;

stop

@enduml"
58,"def opposite_Signs(x,y):
""""""
Write a python function to check whether the given two integers have opposite sign or not.
Your code should satisfy these tests:
opposite_Signs(5, -10) == True
opposite_Signs(-7, 3) == True
opposite_Signs(8, 12) == False
""""""
",opposite_Signs,"def check(candidate):

    assert candidate(1,-2) == True
    assert candidate(3,2) == False
    assert candidate(-10,-10) == False
","def opposite_Signs(x,y):
    return ((x ^ y) < 0); ","[""opposite_Signs(5, -10) == True"", ""opposite_Signs(-7, 3) == True"", ""opposite_Signs(8, 12) == False""]","@startuml

title Opposite Signs

start
:Check if x and y are integers;
if (x and y are integers) then (yes)
  :Check if x and y have opposite signs;
  if (x and y have opposite signs) then (yes)
    :Return True;
  else (no)
    :Return False;
  endif
else (no)
  :Raise ValueError;
endif

@enduml"
162,"def sum_series(n):
""""""
Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).
Your code should satisfy these tests:
sum_series(5) == 9
sum_series(10) == 30
sum_series(0) == 0
""""""
",sum_series,"def check(candidate):

    assert candidate(6)==12
    assert candidate(10)==30
    assert candidate(9)==25
","def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)","[""sum_series(5) == 9"", ""sum_series(10) == 30"", ""sum_series(0) == 0""]","@startuml
start

:Input integer n;
if (n <= 0?) then (yes)
  :Return 0;
  stop
else (no)
  :Initialize sum = 0;
  :Initialize current = n;
  while (current > 0?) is (yes)
    :sum = sum + current;
    :current = current - 2;
  endwhile (no)
  :Return sum;
  stop
endif

@enduml"
78,"def count_With_Odd_SetBits(n):
""""""
Write a python function to find number of integers with odd number of set bits.
Your code should satisfy these tests:
count_With_Odd_SetBits(5) == 3.0
count_With_Odd_SetBits(8) == 5.0
count_With_Odd_SetBits(15) == 8.0
""""""
",count_With_Odd_SetBits,"def check(candidate):

    assert candidate(5) == 3
    assert candidate(10) == 5
    assert candidate(15) == 8
","def count_With_Odd_SetBits(n):
    if (n % 2 != 0):
        return (n + 1) / 2
    count = bin(n).count('1')
    ans = n / 2
    if (count % 2 != 0):
        ans += 1
    return ans ","[""count_With_Odd_SetBits(5) == 3.0"", ""count_With_Odd_SetBits(8) == 5.0"", ""count_With_Odd_SetBits(15) == 8.0""]","@startuml
start

:Input integer n;
if (n < 0?) then (yes)
    :Return error: Input must be a non-negative integer;
    stop
else (no)
    :Initialize counter = 0;
    :Initialize i = 1;
    while (i <= n?) is (yes)
        :Count the number of set bits in i;
        if (Number of set bits is odd?) then (yes)
            :Increment counter by 1;
        else (no)
            :Do nothing;
        endif
        :Increment i by 1;
    endwhile (no)
    :Return counter;
endif

stop
@enduml"
817,"def div_of_nums(nums,m,n):
""""""
Write a function to find numbers divisible by m or n from a list of numbers using lambda function.
Your code should satisfy these tests:
div_of_nums([10, 15, 20, 25, 30], 5, 3) == [10, 15, 20, 25, 30]
div_of_nums([1, 2, 3, 4, 5, 6], 2, 3) == [2, 3, 4, 6]
div_of_nums([7, 14, 21, 28, 35], 7, 11) == [7, 14, 21, 28, 35]
""""""
",div_of_nums,"def check(candidate):

    assert candidate([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]
    assert candidate([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]
    assert candidate([10,15,14,13,18,12,20],10,5)==[10, 15, 20]
","def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums))
 return result","[""div_of_nums([10, 15, 20, 25, 30], 5, 3) == [10, 15, 20, 25, 30]"", ""div_of_nums([1, 2, 3, 4, 5, 6], 2, 3) == [2, 3, 4, 6]"", ""div_of_nums([7, 14, 21, 28, 35], 7, 11) == [7, 14, 21, 28, 35]""]","@startuml
start

:Input list of numbers (nums), m, and n;
:Initialize an empty list (result) to store divisible numbers;

:For each number in nums;
if (Number divisible by m or n?) then (yes)
  :Add number to result list;
else (no)
  :Skip number;
endif

:Check if all numbers in nums are processed?;
if (No) then (yes)
  :Move to the next number;
else (no)
  :Return the result list;
endif

stop
@enduml"
140,"def extract_singly(test_list):
""""""
Write a function to extract elements that occur singly in the given tuple list.
Your code should satisfy these tests:
extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]
extract_singly([[1, 2], [2, 3], [3, 4]]) == [1, 2, 3, 4]
extract_singly([[10, 20, 30], [30, 40, 50], [50, 60, 70]]) == [10, 20, 30, 40, 50, 60, 70]
""""""
",extract_singly,"def check(candidate):

    assert candidate([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]
    assert candidate([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]
    assert candidate([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]
","def extract_singly(test_list):
  res = []
  temp = set()
  for inner in test_list:
    for ele in inner:
      if not ele in temp:
        temp.add(ele)
        res.append(ele)
  return (res) ","[""extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"", ""extract_singly([[1, 2], [2, 3], [3, 4]]) == [1, 2, 3, 4]"", ""extract_singly([[10, 20, 30], [30, 40, 50], [50, 60, 70]]) == [10, 20, 30, 40, 50, 60, 70]""]","@startuml
start

:Input: test_list (list of lists);
if (Is test_list empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize an empty list 'result';
    :Initialize an empty set 'seen';
    :Initialize an empty set 'duplicates';
    :Iterate over each sublist in test_list;
    :Iterate over each element in the sublist;
    if (Is element in 'seen'?) then (yes)
        :Add element to 'duplicates';
    else (no)
        :Add element to 'seen';
    endif
    :End of sublist iteration;
    :End of test_list iteration;
    :Iterate over each element in 'seen';
    if (Is element not in 'duplicates'?) then (yes)
        :Add element to 'result';
    else (no)
        :Skip element;
    endif
    :End of 'seen' iteration;
    :Return 'result';
    stop
endif

@enduml"
671,"def get_Pos_Of_Right_most_Set_Bit(n):
""""""
Write a python function to set the right most unset bit.
Your code should satisfy these tests:
get_Pos_Of_Right_most_Set_Bit(1) == 1
get_Pos_Of_Right_most_Set_Bit(2) == 2
get_Pos_Of_Right_most_Set_Bit(12) == 3
get_Pos_Of_Right_most_Set_Bit(16) == 5
get_Pos_Of_Right_most_Set_Bit(255) == 1
""""""
",get_Pos_Of_Right_most_Set_Bit,"def check(candidate):

    assert set_Right_most_Unset_Bit(21) == 23
    assert set_Right_most_Unset_Bit(11) == 15
    assert set_Right_most_Unset_Bit(15) == 15
","import math
def get_Pos_Of_Right_most_Set_Bit(n):
    return int(math.log2(n&-n)+1)
def set_Right_most_Unset_Bit(n):
    if (n == 0):
        return 1
    if ((n & (n + 1)) == 0):
        return n
    pos = get_Pos_Of_Right_most_Set_Bit(~n)
    return ((1 << (pos - 1)) | n) ","[""get_Pos_Of_Right_most_Set_Bit(1) == 1"", ""get_Pos_Of_Right_most_Set_Bit(2) == 2"", ""get_Pos_Of_Right_most_Set_Bit(12) == 3"", ""get_Pos_Of_Right_most_Set_Bit(16) == 5"", ""get_Pos_Of_Right_most_Set_Bit(255) == 1""]","@startuml
start
:Input: n;
:Check if n is zero or negative;
if (n <= 0) then (
    :Return error;
    stop
)
:Convert n to binary;
:Find the position of the rightmost set bit;
if (n is odd) then (
    :Return position;
    stop
)
:n = n / 2;
:Increment position;
goto step 5;
@enduml"
642,"def remove_similar_row(test_list):
""""""
Write a function to remove similar rows from the given tuple matrix.
Your code should satisfy these tests:
remove_similar_row([[1, 2, 3], [3, 2, 1], [4, 5, 6]]) == {(1, 2, 3), (4, 5, 6)}
remove_similar_row([[7, 8], [8, 7], [9, 10], [10, 9]]) == {(7, 8), (9, 10)}
remove_similar_row([[1, 1, 1], [1], [2, 2], [2, 2, 2]]) == {(1,), (2,)}
""""""
",remove_similar_row,"def check(candidate):

    assert candidate([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}
    assert candidate([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}
    assert candidate([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}
","def remove_similar_row(test_list):
  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))
  return (res) ","[""remove_similar_row([[1, 2, 3], [3, 2, 1], [4, 5, 6]]) == {(1, 2, 3), (4, 5, 6)}"", ""remove_similar_row([[7, 8], [8, 7], [9, 10], [10, 9]]) == {(7, 8), (9, 10)}"", ""remove_similar_row([[1, 1, 1], [1], [2, 2], [2, 2, 2]]) == {(1,), (2,)}""]","@startuml
start
:Input: test_list
:Output: set of unique rows
:Condition: test_list is not empty
if (Condition) then
  :Sort each row in test_list
  :Convert each row to tuple
  :Remove duplicate rows
  :Return unique rows
else
  :Return error message
endif
stop
@enduml"
226,"def odd_values_string(str):
""""""
Write a python function to remove the characters which have odd index values of a given string.
Your code should satisfy these tests:
odd_values_string(""abcdef"") == ""ace""
odd_values_string(""123456789"") == ""13579""
odd_values_string(""Python"") == ""Pto""
""""""
",odd_values_string,"def check(candidate):

    assert candidate('abcdef') == 'ace'
    assert candidate('python') == 'pto'
    assert candidate('data') == 'dt'
","def odd_values_string(str):
  result = """"
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result","[""odd_values_string(\""abcdef\"") == \""ace\"""", ""odd_values_string(\""123456789\"") == \""13579\"""", ""odd_values_string(\""Python\"") == \""Pto\""""]","@startuml

start
:odd_values_string(str);
if (str.length == 0) then (no)
  :return """";
else (yes)
  :result = """";
  :for i in range(0, str.length, 2):
    :result += str[i];
  :end for
  :return result;
endif

@enduml"
823,"def check_substring(string, sample):
""""""
Write a function to check if the given string starts with a substring using regex.
Your code should satisfy these tests:
check_substring(""hello world"", ""hello"") == ""string starts with the given substring""
check_substring(""hello world"", ""world"") == ""string doesnt start with the given substring""
check_substring(""goodbye"", ""good"") == ""string starts with the given substring""
""""""
",check_substring,"def check(candidate):

    assert candidate(""dreams for dreams makes life fun"", ""makes"") == 'string doesnt start with the given substring'
    assert candidate(""Hi there how are you Hi alex"", ""Hi"") == 'string starts with the given substring'
    assert candidate(""Its been a long day"", ""been"") == 'string doesnt start with the given substring'
","import re
def check_substring(string, sample) :
  if (sample in string):
      y = ""\A"" + sample
      x = re.search(y, string)
      if x :
          return (""string starts with the given substring"")
      else :
          return (""string doesnt start with the given substring"")
  else :
      return (""entered string isnt a substring"")","[""check_substring(\""hello world\"", \""hello\"") == \""string starts with the given substring\"""", ""check_substring(\""hello world\"", \""world\"") == \""string doesnt start with the given substring\"""", ""check_substring(\""goodbye\"", \""good\"") == \""string starts with the given substring\""""]","@startuml

start
:check_substring(string, sample);

if (string.startswith(sample)) then (yes)
:return ""string starts with the given substring"";
else (no)
:return ""string doesnt start with the given substring"";

@enduml"
328,"def rotate_left(list1,m,n):
""""""
Write a function to rotate a given list by specified number of items to the left direction.
Your code should satisfy these tests:
rotate_left([1, 2, 3, 4, 5], 2, 4) == [3, 4, 5, 1, 2, 3, 4]
rotate_left([5, 6, 7, 8, 9], 1, 3) == [6, 7, 8, 9, 5, 6, 7]
rotate_left([10, 20, 30, 40, 50], 0, 3) == [10, 20, 30, 40, 50, 10, 20, 30]
rotate_left([100, 200, 300, 400, 500], 1, 2) == [200, 300, 400, 500, 100, 200]
rotate_left(['a', 'b', 'c', 'd', 'e'], 3, 5) == ['d', 'e', 'a', 'b', 'c', 'd', 'e']
""""""
",rotate_left,"def check(candidate):

    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]
","def rotate_left(list1,m,n):
  result =  list1[m:]+list1[:n]
  return result","[""rotate_left([1, 2, 3, 4, 5], 2, 4) == [3, 4, 5, 1, 2, 3, 4]"", ""rotate_left([5, 6, 7, 8, 9], 1, 3) == [6, 7, 8, 9, 5, 6, 7]"", ""rotate_left([10, 20, 30, 40, 50], 0, 3) == [10, 20, 30, 40, 50, 10, 20, 30]"", ""rotate_left([100, 200, 300, 400, 500], 1, 2) == [200, 300, 400, 500, 100, 200]"", ""rotate_left(['a', 'b', 'c', 'd', 'e'], 3, 5) == ['d', 'e', 'a', 'b', 'c', 'd', 'e']""]","@startuml
start

:Input list1, m, n;
if (Is list1 empty?) then (yes)
    :Return empty list;
    stop
else (no)
    if (Is m < 0 or n < 0?) then (yes)
        :Return error: ""m and n must be non-negative"";
        stop
    else (no)
        if (Is m >= len(list1)?) then (yes)
            :Return error: ""m is out of bounds"";
            stop
        else (no)
            if (Is n > len(list1)?) then (yes)
                :Return error: ""n is out of bounds"";
                stop
            else (no)
                :Calculate the rotation index;
                :Rotate the list by slicing;
                :Concatenate the rotated part with the original list;
                :Return the final rotated list;
            endif
        endif
    endif
endif

stop
@enduml"
560,"def union_elements(test_tup1, test_tup2):
""""""
Write a function to find the union of elements of the given tuples.
Your code should satisfy these tests:
union_elements((1, 2, 3), (3, 4, 5)) == (1, 2, 3, 4, 5)
union_elements(('a', 'b', 'c'), ('c', 'd', 'e')) == ('a', 'e', 'c', 'b', 'd')
union_elements((10, 20, 30), (30, 40, 50)) == (40, 10, 50, 20, 30)
""""""
",union_elements,"def check(candidate):

    assert candidate((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)
    assert candidate((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)
    assert candidate((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)
","def union_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1 + test_tup2))
  return (res) ","[""union_elements((1, 2, 3), (3, 4, 5)) == (1, 2, 3, 4, 5)"", ""union_elements(('a', 'b', 'c'), ('c', 'd', 'e')) == ('a', 'e', 'c', 'b', 'd')"", ""union_elements((10, 20, 30), (30, 40, 50)) == (40, 10, 50, 20, 30)""]","@startuml

start
: union_elements(test_tup1, test_tup2);

if (test_tup1 is empty) then (yes)
: return test_tup2;
elseif (test_tup2 is empty) then (yes)
: return test_tup1;
else (no)
: create a new tuple to store the union of elements;
: iterate over test_tup1 and test_tup2;
: add each element to the new tuple if it is not already present;
: return the new tuple;
endif

@enduml"
555,"def difference(n):
""""""
Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.
Your code should satisfy these tests:
difference(1) == 0
difference(2) == 6
difference(5) == 210
""""""
",difference,"def check(candidate):

    assert candidate(3) == 30
    assert candidate(5) == 210
    assert candidate(2) == 6
","def difference(n) :
    S = (n*(n + 1))//2;
    res = S*(S-1);
    return res;  ","[""difference(1) == 0"", ""difference(2) == 6"", ""difference(5) == 210""]","@startuml
start

:Input n (number of natural numbers);
if (n is a positive integer?) then (yes)
    :Calculate sum of first n natural numbers (sum_n);
    :Calculate sum of cubes of first n natural numbers (sum_cubes);
    :Compute difference = sum_cubes - sum_n;
    :Return difference;
else (no)
    :Display error: ""Input must be a positive integer"";
    :Return None;
endif

stop
@enduml"
492,"def binary_search(item_list,item):
""""""
Write a function to search an element in the given array by using binary search.
Your code should satisfy these tests:
binary_search([1, 2, 3, 4, 5], 3) == True
binary_search([10, 20, 30, 40, 50], 25) == False
binary_search([5, 15, 25, 35, 45, 55], 55) == True
""""""
",binary_search,"def check(candidate):

    assert candidate([1,2,3,5,8], 6) == False
    assert candidate([7, 8, 9, 10, 13], 10) == True
    assert candidate([11, 13, 14, 19, 22, 36], 23) == False
","def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1
	return found","[""binary_search([1, 2, 3, 4, 5], 3) == True"", ""binary_search([10, 20, 30, 40, 50], 25) == False"", ""binary_search([5, 15, 25, 35, 45, 55], 55) == True""]","@startuml
start

:Initialize low = 0, high = len(item_list) - 1;
while (low <= high?) is (yes)
    :Calculate mid = (low + high) // 2;
    if (item_list[mid] == item?) then (yes)
        :Return True;
        stop
    else (no)
        if (item_list[mid] < item?) then (yes)
            :Set low = mid + 1;
        else (no)
            :Set high = mid - 1;
        endif
    endif
endwhile (no)
:Return False;
stop
@enduml"
769,"def Diff(li1,li2):
""""""
Write a python function to get the difference between two lists.
Your code should satisfy these tests:
Diff([1, 2, 3], [2, 3, 4]) == [1, 4]
Diff([5, 6, 7], [7, 8, 9]) == [5, 6, 8, 9]
Diff([10, 20, 30], [30, 40, 50]) == [10, 20, 40, 50]
Diff([100, 200], [200, 300]) == [100, 300]
Diff([True, False], [False]) == [True]
""""""
",Diff,"def check(candidate):

    assert (candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]
    assert (candidate([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]
    assert (candidate([1,2,3], [6,7,1])) == [2,3,6,7]
","def Diff(li1,li2):
    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))
 ","[""Diff([1, 2, 3], [2, 3, 4]) == [1, 4]"", ""Diff([5, 6, 7], [7, 8, 9]) == [5, 6, 8, 9]"", ""Diff([10, 20, 30], [30, 40, 50]) == [10, 20, 40, 50]"", ""Diff([100, 200], [200, 300]) == [100, 300]"", ""Diff([True, False], [False]) == [True]""]","@startuml
start
:Input lists li1 and li2;
:Validate inputs;
if (li1 and li2 are not lists?) then (yes)
    :Return error message;
    stop
endif
if (li1 is empty?) then (yes)
    :Return li2;
    stop
endif
if (li2 is empty?) then (yes)
    :Return li1;
    stop
endif
:Initialize empty list diff_list;
:Iterate over li1;
:For each element in li1;
    if (element is not in li2?) then (yes)
        :Add element to diff_list;
    endif
endfor
:Iterate over li2;
:For each element in li2;
    if (element is not in li1?) then (yes)
        :Add element to diff_list;
    endif
endfor
:Return diff_list;
stop
@enduml"
510,"def no_of_subsequences(arr, k):
""""""
Write a function to find the number of subsequences having product smaller than k for the given non negative array.
Your code should satisfy these tests:
no_of_subsequences([1, 2, 3], 4) == 5
no_of_subsequences([2, 4, 6], 8) == 4
no_of_subsequences([1, 1, 1], 2) == 7
no_of_subsequences([3, 5, 7], 15) == 4
no_of_subsequences([1, 3, 9], 9) == 5
""""""
",no_of_subsequences,"def check(candidate):

    assert candidate([1,2,3,4], 10) == 11
    assert candidate([4,8,7,2], 50) == 9
    assert candidate([5,6,7,8], 15) == 4
","def no_of_subsequences(arr, k):
	n = len(arr)
	dp = [[0 for i in range(n + 1)]
			for j in range(k + 1)]
	for i in range(1, k + 1):
		for j in range(1, n + 1):
			dp[i][j] = dp[i][j - 1]
			if arr[j - 1] <= i and arr[j - 1] > 0:
				dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1
	return dp[k][n]","[""no_of_subsequences([1, 2, 3], 4) == 5"", ""no_of_subsequences([2, 4, 6], 8) == 4"", ""no_of_subsequences([1, 1, 1], 2) == 7"", ""no_of_subsequences([3, 5, 7], 15) == 4"", ""no_of_subsequences([1, 3, 9], 9) == 5""]","@startuml
start

:Input: array `arr` and integer `k`;
:Validate input: Ensure `arr` is a non-negative array and `k` is a positive integer;

if (Input is valid?) then (yes)
    :Initialize `count` = 0;
    :Sort the array `arr` in ascending order;
    :Initialize `product` = 1;
    :Initialize `left` = 0;

    while (left < length of `arr`)
        :Set `right` = `left`;
        while (right < length of `arr`)
            :Calculate `product` = `product` * `arr[right]`;
            if (`product` < `k`) then (yes)
                :Increment `count` by 1;
                :Increment `right` by 1;
            else (no)
                :Break inner loop;
            endif
        endwhile
        :Reset `product` = 1;
        :Increment `left` by 1;
    endwhile

    :Return `count` as the result;
else (no)
    :Return error: Invalid input;
endif

stop
@enduml"
377,"def remove_Char(s,c):
""""""
Write a python function to remove all occurrences of a character in a given string.
Your code should satisfy these tests:
remove_Char(""hello"", ""l"") == ""heo""
remove_Char(""banana"", ""a"") == ""bnn""
remove_Char(""programming"", ""m"") == ""prograing""
""""""
",remove_Char,"def check(candidate):

    assert candidate(""aba"",'a') == ""b""
    assert candidate(""toggle"",'g') == ""tole""
    assert candidate(""aabbc"",'b') == ""aac""
","def remove_Char(s,c) :
    counts = s.count(c)
    s = list(s)
    while counts :
        s.remove(c)
        counts -= 1
    s = '' . join(s)
    return (s) ","[""remove_Char(\""hello\"", \""l\"") == \""heo\"""", ""remove_Char(\""banana\"", \""a\"") == \""bnn\"""", ""remove_Char(\""programming\"", \""m\"") == \""prograing\""""]","@startuml
start

:Input string **s** and character **c**;
if (Is **s** a valid string and **c** a valid character?) then (yes)
    :Initialize an empty string **result**;
    :Initialize index **i = 0**;
    while (Is **i** < length of **s**?) is (yes)
        if (Is **s[i]** != **c**?) then (yes)
            :Append **s[i]** to **result**;
        else (no)
            :Do nothing (skip the character);
        endif
        :Increment **i** by 1;
    endwhile (no)
    :Return **result**;
else (no)
    :Return ""Invalid input"";
endif

stop
@enduml"
758,"def unique_sublists(list1):
""""""
Write a function to count number of unique lists within a list.
Your code should satisfy these tests:
unique_sublists([[1, 2], [3, 4], [1, 2]]) == {(1, 2): 2, (3, 4): 1}
unique_sublists([[5, 6], [7, 8], [5, 6], [7, 8]]) == {(5, 6): 2, (7, 8): 2}
unique_sublists([[9, 10], [11, 12], [13, 14], [9, 10], [11, 12]]) == {(9, 10): 2, (11, 12): 2, (13, 14): 1}
""""""
",unique_sublists,"def check(candidate):

    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}
    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}
    assert candidate([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}
","def unique_sublists(list1):
    result ={}
    for l in  list1:
        result.setdefault(tuple(l), list()).append(1)
    for a, b in result.items():
        result[a] = sum(b)
    return result","[""unique_sublists([[1, 2], [3, 4], [1, 2]]) == {(1, 2): 2, (3, 4): 1}"", ""unique_sublists([[5, 6], [7, 8], [5, 6], [7, 8]]) == {(5, 6): 2, (7, 8): 2}"", ""unique_sublists([[9, 10], [11, 12], [13, 14], [9, 10], [11, 12]]) == {(9, 10): 2, (11, 12): 2, (13, 14): 1}""]","@startuml
start

:Input list of sublists (list1);
:Initialize an empty dictionary (count_dict);

if (Is list1 empty?) then (yes)
  :Return empty dictionary;
  stop
else (no)
  :Iterate over each sublist in list1;
  :Convert sublist to tuple (to make it hashable);
  if (Is tuple in count_dict?) then (yes)
    :Increment count for this tuple in count_dict;
  else (no)
    :Add tuple to count_dict with count 1;
  endif
  :Check if all sublists have been processed;
  if (All sublists processed?) then (yes)
    :Return count_dict;
    stop
  else (no)
    :Continue to next sublist;
  endif
endif

@enduml"
392,"def get_max_sum(n):
""""""
Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).
Your code should satisfy these tests:
get_max_sum(2) == 2
get_max_sum(10) == 12
get_max_sum(12) == 16
""""""
",get_max_sum,"def check(candidate):

    assert candidate(60) == 106
    assert candidate(10) == 12
    assert candidate(2) == 2
","def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)]
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]","[""get_max_sum(2) == 2"", ""get_max_sum(10) == 12"", ""get_max_sum(12) == 16""]","@startuml

start
:get_max_sum(n);
if (n <= 0) then (no
:return 0;
else (yes)
:f(n) = max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n);
:return f(n);

@enduml"
601,"def __init__(self, a, b):
""""""
Write a function to find the longest chain which can be formed from the given set of pairs.
""""""
",__init__,"def check(candidate):

    assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3
    assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4
    assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5
","class Pair(object):
	def __init__(self, a, b):
		self.a = a
		self.b = b
def max_chain_length(arr, n):
	max = 0
	mcl = [1 for i in range(n)]
	for i in range(1, n):
		for j in range(0, i):
			if (arr[i].a > arr[j].b and
				mcl[i] < mcl[j] + 1):
				mcl[i] = mcl[j] + 1
	for i in range(n):
		if (max < mcl[i]):
			max = mcl[i]
	return max","[""test test cases failed""]","@startuml
start
:Input Validation;
if (Is input valid?) then (Yes)
  :Find all pairs;
  :Sort pairs by length;
else (No)
  :Handle invalid input;
endif
:Find longest chain;
:Return result;
stop
@enduml"
127,"def multiply_int(x, y):
""""""
Write a function to multiply two integers without using the * operator in python.
Your code should satisfy these tests:
multiply_int(3, 4) == 12
multiply_int(-2, 5) == -10
multiply_int(7, -3) == -21
""""""
",multiply_int,"def check(candidate):

    assert candidate(10,20)==200
    assert candidate(5,10)==50
    assert candidate(4,8)==32
","def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)","[""multiply_int(3, 4) == 12"", ""multiply_int(-2, 5) == -10"", ""multiply_int(7, -3) == -21""]","@startuml

title Multiply Integers

start
:Input x and y;

if (x == 0 or y == 0) then (no multiplication)
	:Return 0;
else
	:Multiply x and y;
	:Return result;
endif

@enduml"
135,"def hexagonal_num(n):
""""""
Write a function to find the nth hexagonal number.
Your code should satisfy these tests:
hexagonal_num(1) == 1
hexagonal_num(2) == 6
hexagonal_num(3) == 15
""""""
",hexagonal_num,"def check(candidate):

    assert candidate(10) == 190
    assert candidate(5) == 45
    assert candidate(7) == 91
","def hexagonal_num(n):
	return n*(2*n - 1) ","[""hexagonal_num(1) == 1"", ""hexagonal_num(2) == 6"", ""hexagonal_num(3) == 15""]","@startuml
start

:Input n (integer);
if (n is a positive integer?) then (yes)
    :Calculate hexagonal number using formula: H_n = n * (2n - 1);
    :Return H_n;
else (no)
    :Display error message: ""Input must be a positive integer"";
    :End process;
endif

stop
@enduml"
558,"def digit_distance_nums(n1, n2):
""""""
Write a python function to find the digit distance between two integers.
Your code should satisfy these tests:
digit_distance_nums(123, 456) == 9
digit_distance_nums(100, 200) == 1
digit_distance_nums(999, 111) == 24
""""""
",digit_distance_nums,"def check(candidate):

    assert candidate(1,2) == 1
    assert candidate(23,56) == 6
    assert candidate(123,256) == 7
","def digit_distance_nums(n1, n2):
         return sum(map(int,str(abs(n1-n2))))","[""digit_distance_nums(123, 456) == 9"", ""digit_distance_nums(100, 200) == 1"", ""digit_distance_nums(999, 111) == 24""]","@startuml
start

:Input two integers n1 and n2;
:Convert n1 and n2 to strings;
:Check if lengths of n1 and n2 are equal;
if (Lengths are equal?) then (yes)
  :Initialize distance = 0;
  :Initialize index = 0;
  while (index < length of n1)
    :Calculate absolute difference between digits at current index;
    :Add difference to distance;
    :Increment index;
  endwhile
  :Return distance;
else (no)
  :Return ""Input numbers must have the same length"";
endif

stop
@enduml"
731,"def lateralsurface_cone(r,h):
""""""
Write a function to find the lateral surface area of a cone.
Your code should satisfy these tests:
lateralsurface_cone(3, 4) == 47.12388980384689
lateralsurface_cone(5, 12) == 204.20352248333654
lateralsurface_cone(7, 24) == 549.7787143782137
""""""
",lateralsurface_cone,"def check(candidate):

    assert candidate(5,12)==204.20352248333654
    assert candidate(10,15)==566.3586699569488
    assert candidate(19,17)==1521.8090132193388
","import math
def lateralsurface_cone(r,h):
  l = math.sqrt(r * r + h * h)
  LSA = math.pi * r  * l
  return LSA","[""lateralsurface_cone(3, 4) == 47.12388980384689"", ""lateralsurface_cone(5, 12) == 204.20352248333654"", ""lateralsurface_cone(7, 24) == 549.7787143782137""]","@startuml

title Lateral Surface Area of a Cone

start
:Calculate Lateral Surface Area;

if (r > 0 and h > 0) then (yes)
:Calculate Lateral Surface Area;
:Return Lateral Surface Area;
else (no)
:Return 0;

end if;

@enduml"
892,"def remove_spaces(text):
""""""
Write a function to remove multiple spaces in a string.
Your code should satisfy these tests:
remove_spaces(""Hello   World"") == ""Hello World""
remove_spaces(""  This   is  a   test  "") == "" This is a test ""
remove_spaces(""NoSpacesHere"") == ""NoSpacesHere""
""""""
",remove_spaces,"def check(candidate):

    assert candidate('python  program')==('python program')
    assert candidate('python   programming    language')==('python programming language')
    assert candidate('python                     program')==('python program')
","import re
def remove_spaces(text):
 return (re.sub(' +',' ',text))","[""remove_spaces(\""Hello   World\"") == \""Hello World\"""", ""remove_spaces(\""  This   is  a   test  \"") == \"" This is a test \"""", ""remove_spaces(\""NoSpacesHere\"") == \""NoSpacesHere\""""]","@startuml

start
:remove_spaces(text);

if (text.contains("" "")) then (
  :split text into words;
  :remove multiple spaces between words;
  :join words with a single space;
)

:return text;

@enduml"
577,"def last_Digit_Factorial(n):
""""""
Write a python function to find the last digit in factorial of a given number.
Your code should satisfy these tests:
last_Digit_Factorial(5) == 0
last_Digit_Factorial(10) == 0
last_Digit_Factorial(15) == 0
""""""
",last_Digit_Factorial,"def check(candidate):

    assert candidate(4) == 4
    assert candidate(21) == 0
    assert candidate(30) == 0
","def last_Digit_Factorial(n):
    if (n == 0): return 1
    elif (n <= 2): return n
    elif (n == 3): return 6
    elif (n == 4): return 4
    else:
      return 0","[""last_Digit_Factorial(5) == 0"", ""last_Digit_Factorial(10) == 0"", ""last_Digit_Factorial(15) == 0""]","@startuml
start

:Input number n;
if (n < 0?) then (yes)
    :Output ""Invalid input: Factorial is not defined for negative numbers"";
    stop
else (no)
    if (n == 0 or n == 1?) then (yes)
        :Output ""Last digit of factorial is 1"";
        stop
    else (no)
        :Initialize factorial_result = 1;
        :Initialize i = 2;
        while (i <= n?) is (yes)
            :factorial_result = factorial_result * i;
            :i = i + 1;
        endwhile (no)
        :last_digit = factorial_result % 10;
        :Output ""Last digit of factorial is "" + last_digit;
        stop
    endif
endif

@enduml"
512,"def flatten(test_tuple):
""""""
Write a function to count the element frequency in the mixed nested tuple.
""""""
",flatten,"def check(candidate):

    assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}
    assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}
    assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}
","def flatten(test_tuple):
	for tup in test_tuple:
		if isinstance(tup, tuple):
			yield from flatten(tup)
		else:
			yield tup
def count_element_freq(test_tuple):
  res = {}
  for ele in flatten(test_tuple):
    if ele not in res:
      res[ele] = 0
    res[ele] += 1
  return (res) ","[""test test cases failed""]","@startuml
start
:Input Tuple;
if (Is the input a tuple?) then (yes)
  :Flatten the tuple;
  :Count the frequency of elements;
else (no)
  :Invalid input;
endif
:Return the frequency dictionary;
stop
@enduml"
86,"def centered_hexagonal_number(n):
""""""
Write a function to find nth centered hexagonal number.
Your code should satisfy these tests:
centered_hexagonal_number(1) == 1
centered_hexagonal_number(2) == 7
centered_hexagonal_number(5) == 61
""""""
",centered_hexagonal_number,"def check(candidate):

    assert candidate(10) == 271
    assert candidate(2) == 7
    assert candidate(9) == 217
","def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1","[""centered_hexagonal_number(1) == 1"", ""centered_hexagonal_number(2) == 7"", ""centered_hexagonal_number(5) == 61""]","@startuml
start
:Input n;
if (n == 1) then (true)
  :Return 1;
else (false)
  :Calculate centered hexagonal number;
  if (n is odd) then (true)
    :Calculate centered hexagonal number = 3n^2 - 3n + 1;
  else (false)
    :Calculate centered hexagonal number = 3n^2 - 3n + 1;
  endif
  :Return centered hexagonal number;
endif
stop
@enduml"
716,"def rombus_perimeter(a):
""""""
Write a function to find the perimeter of a rombus.
Your code should satisfy these tests:
rombus_perimeter(5) == 20
rombus_perimeter(10) == 40
rombus_perimeter(1) == 4
""""""
",rombus_perimeter,"def check(candidate):

    assert candidate(10)==40
    assert candidate(5)==20
    assert candidate(4)==16
","def rombus_perimeter(a):
  perimeter=4*a
  return perimeter","[""rombus_perimeter(5) == 20"", ""rombus_perimeter(10) == 40"", ""rombus_perimeter(1) == 4""]","@startuml

start
:rombus_perimeter(a);

if (a <= 0) then (no)
:Invalid input;
:return -1;

else (yes)
:Perimeter = 4 * a;
:return Perimeter;

end if

@enduml"
842,"def get_odd_occurence(arr, arr_size):
""""""
Write a function to find the number which occurs for odd number of times in the given array.
Your code should satisfy these tests:
get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3
get_odd_occurence([4, 1, 2, 2, 5, 1, 4], 7) == 5
get_odd_occurence([10, 10, 10, 10, 11], 5) == 11
""""""
",get_odd_occurence,"def check(candidate):

    assert candidate([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5
    assert candidate([1, 2, 3, 2, 3, 1, 3], 7) == 3
    assert candidate([5, 7, 2, 7, 5, 2, 5], 7) == 5
","def get_odd_occurence(arr, arr_size):
  for i in range(0, arr_size):
    count = 0
    for j in range(0, arr_size):
      if arr[i] == arr[j]:
        count += 1
    if (count % 2 != 0):
      return arr[i]
  return -1","[""get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3"", ""get_odd_occurence([4, 1, 2, 2, 5, 1, 4], 7) == 5"", ""get_odd_occurence([10, 10, 10, 10, 11], 5) == 11""]","@startuml
start
:Input: arr = [1, 2, 3, 2, 3, 1, 3], arr_size = 7;
:Output: 3;
:Expected: 3;
:Result:;
if (arr_size % 2 == 1) then (Odd number of elements)
  :Loop through the array;
  :Count the occurrences of each element;
  :If the count is odd, return the element;
else (Even number of elements)
  :Loop through the array;
  :Count the occurrences of each element;
  :If the count is odd, return the element;
endif
:If no element has an odd count, return None;
stop
@enduml"
113,"def check_integer(text):
""""""
Write a function to check if a string represents an integer or not.
Your code should satisfy these tests:
check_integer(""12345"") == True
check_integer(""-9876"") == True
check_integer(""+4321"") == True
""""""
",check_integer,"def check(candidate):

    assert candidate(""python"")==False
    assert candidate(""1"")==True
    assert candidate(""12345"")==True
","def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False","[""check_integer(\""12345\"") == True"", ""check_integer(\""-9876\"") == True"", ""check_integer(\""+4321\"") == True""]","@startuml

start

:check_integer(text);

if (text.isdigit()) then (true)
  :return True;
else
  :return False;
endif

@enduml"
860,"def check_alphanumeric(string):
""""""
Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.
Your code should satisfy these tests:
check_alphanumeric(""Hello123"") == ""Accept""
check_alphanumeric(""World!"") == ""Discard""
check_alphanumeric(""Python3"") == ""Accept""
""""""
",check_alphanumeric,"def check(candidate):

    assert candidate(""dawood@"") == 'Discard'
    assert candidate(""skdmsam326"") == 'Accept'
    assert candidate(""cooltricks@"") == 'Discard'
","import re
regex = '[a-zA-z0-9]$'
def check_alphanumeric(string):
	if(re.search(regex, string)):
		return (""Accept"")
	else:
		return (""Discard"") ","[""check_alphanumeric(\""Hello123\"") == \""Accept\"""", ""check_alphanumeric(\""World!\"") == \""Discard\"""", ""check_alphanumeric(\""Python3\"") == \""Accept\""""]","@startuml
start

:Input string;
if (Is string empty?) then (yes)
    :Output ""Discard"";
    stop
else (no)
    :Check if string ends with alphanumeric characters using regex;
    if (String ends with alphanumeric characters?) then (yes)
        :Output ""Accept"";
    else (no)
        :Output ""Discard"";
    endif
endif

stop
@enduml"
14,"def find_Volume(l,b,h):
""""""
Write a python function to find the volume of a triangular prism.
Your code should satisfy these tests:
find_Volume(2, 3, 4) == 12.0
find_Volume(5, 5, 5) == 62.5
find_Volume(10, 2, 1) == 10.0
""""""
",find_Volume,"def check(candidate):

    assert candidate(10,8,6) == 240
    assert candidate(3,2,2) == 6
    assert candidate(1,2,1) == 1
","def find_Volume(l,b,h) :
    return ((l * b * h) / 2) ","[""find_Volume(2, 3, 4) == 12.0"", ""find_Volume(5, 5, 5) == 62.5"", ""find_Volume(10, 2, 1) == 10.0""]","@startuml
start

:Input length (l), breadth (b), height (h);
if (Are l, b, h valid numbers?) then (yes)
  :Calculate the base area of the triangular prism: base_area = 0.5 * l * b;
  :Calculate the volume of the triangular prism: volume = base_area * h;
  :Output the volume;
else (no)
  :Output ""Invalid input: All inputs must be valid numbers"";
endif

stop
@enduml"
936,"def re_arrange_tuples(test_list, ord_list):
""""""
Write a function to re-arrange the given tuples based on the given ordered list.
""""""
",re_arrange_tuples,"def check(candidate):

    assert candidate([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]
    assert candidate([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]
    assert candidate([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]
","def re_arrange_tuples(test_list, ord_list):
  temp = dict(test_list)
  res = [(key, temp[key]) for key in ord_list]
  return (res) ","[""re_arrange_tuples([('a', 1), ('b', 2), ('c', 3)], ['c', 'a', 'b']) == [('c', 3), ('a', 1), ('b', 2)]"", ""re_arrange_tuples([('x', 10), ('y', 20), ('z', 30)], ['y', 'z']) == [('y', 20), ('z', 30)]"", ""re_arrange_tuples([('m', 100), ('n', 200), ('o', 300)], ['o', 'n', 'm']) == [('o', 300), ('n', 200), ('m', 100)]""]","@startuml
start
:Input: test_list, ord_list
:Check: if length of test_list == length of ord_list
:If not equal: Stop and throw error ""Length of test_list and ord_list must be equal""
:Else: Continue
:Create an empty list: result_list
:For each element in ord_list:
  :Find the element in test_list: element
  :Add element to result_list:
:End for
:Output: result_list
stop
@enduml"
729,"def add_list(nums1,nums2):
""""""
Write a function to add two lists using map and lambda function.
Your code should satisfy these tests:
add_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]
add_list([0, 0, 0], [1, 1, 1]) == [1, 1, 1]
add_list([-1, -2, -3], [1, 2, 3]) == [0, 0, 0]
""""""
",add_list,"def check(candidate):

    assert candidate([1, 2, 3],[4,5,6])==[5, 7, 9]
    assert candidate([1,2],[3,4])==[4,6]
    assert candidate([10,20],[50,70])==[60,90]
","def add_list(nums1,nums2):
  result = map(lambda x, y: x + y, nums1, nums2)
  return list(result)","[""add_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]"", ""add_list([0, 0, 0], [1, 1, 1]) == [1, 1, 1]"", ""add_list([-1, -2, -3], [1, 2, 3]) == [0, 0, 0]""]","@startuml

title Add Lists using Map and Lambda Function

start
:Start;

if (nums1 and nums2 are not empty) then (yes)
:Validate input;

if (nums1 and nums2 have the same length) then (yes)
:Add lists element-wise;

else (no)
:Handle edge cases;

end if

end if

stop
:Stop;

@enduml"
154,"def specified_element(nums, N):
""""""
Write a function to extract every specified element from a given two dimensional list.
Your code should satisfy these tests:
specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]
specified_element([[10, 20], [30, 40], [50, 60]], 0) == [10, 30, 50]
specified_element([[100, 200, 300], [400, 500, 600]], 2) == [300, 600]
""""""
",specified_element,"def check(candidate):

    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]
","def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result","[""specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]"", ""specified_element([[10, 20], [30, 40], [50, 60]], 0) == [10, 30, 50]"", ""specified_element([[100, 200, 300], [400, 500, 600]], 2) == [300, 600]""]","@startuml

start
:specified_element(nums, N);

if (N < 0 or N >= len(nums[0])) then (no)
:N is out of bounds;
:return [];
else (yes)
:extract every specified element from nums;

for each row in nums do
:extract the element at position N;
:add the extracted element to the result list;
end for

:return the result list;

@enduml"
573,"def unique_product(list_data):
""""""
Write a python function to calculate the product of the unique numbers of a given list.
Your code should satisfy these tests:
unique_product([2, 3, 5, 3, 2]) == 30
unique_product([1, 1, 1, 1]) == 1
unique_product([7, 11, 13, 17]) == 17017
""""""
",unique_product,"def check(candidate):

    assert candidate([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000
    assert candidate([1, 2, 3, 1,]) == 6
    assert candidate([7, 8, 9, 0, 1, 1]) == 0
","def unique_product(list_data):
    temp = list(set(list_data))
    p = 1
    for i in temp:
        p *= i
    return p","[""unique_product([2, 3, 5, 3, 2]) == 30"", ""unique_product([1, 1, 1, 1]) == 1"", ""unique_product([7, 11, 13, 17]) == 17017""]","@startuml

title ""Unique Product""

start
:Start;

if (list_data is empty) then (no)
:Input check;
:Return 1;

else (yes)
:Calculate product;

repeat
:Calculate product of unique numbers;
:Store product in variable;

until (list_data is empty)

:Return product;

end if

@enduml"
294,"def max_val(listval):
""""""
Write a function to find the maximum value in a given heterogeneous list.
Your code should satisfy these tests:
max_val([3, 'a', 5, 8, 'b']) == 8
max_val([10, 20, 30, 40]) == 40
max_val([0, -5, 7, -10, 3]) == 7
max_val([-1, -2, -3, -4]) == -1
max_val([1, 2, 3, 4, 5]) == 5
""""""
",max_val,"def check(candidate):

    assert candidate(['Python', 3, 2, 4, 5, 'version'])==5
    assert candidate(['Python', 15, 20, 25])==25
    assert candidate(['Python', 30, 20, 40, 50, 'version'])==50
","def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int))
     return(max_val)","[""max_val([3, 'a', 5, 8, 'b']) == 8"", ""max_val([10, 20, 30, 40]) == 40"", ""max_val([0, -5, 7, -10, 3]) == 7"", ""max_val([-1, -2, -3, -4]) == -1"", ""max_val([1, 2, 3, 4, 5]) == 5""]","@startuml

start
:max_val(listval);

if (listval is empty) then (no)
:return None;

else (yes)
:max = listval[0];

for (i = 1; i < len(listval); i++) do
:if (listval[i] > max) then
:max = listval[i];

end for

:return max;

@enduml"
794,"def text_starta_endb(text):
""""""
Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.
Your code should satisfy these tests:
text_starta_endb(""abc"") == 'Not matched!'
text_starta_endb(""ababab"") == 'Found a match!'
text_starta_endb(""cba"") == 'Not matched!'
text_starta_endb(""xyab"") == 'Found a match!'
text_starta_endb(""abxyzb"") == 'Found a match!'
""""""
",text_starta_endb,"def check(candidate):

    assert candidate(""aabbbb"")==('Found a match!')
    assert candidate(""aabAbbbc"")==('Not matched!')
    assert candidate(""accddbbjjj"")==('Not matched!')
","import re
def text_starta_endb(text):
        patterns = 'a.*?b$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","[""text_starta_endb(\""abc\"") == 'Not matched!'"", ""text_starta_endb(\""ababab\"") == 'Found a match!'"", ""text_starta_endb(\""cba\"") == 'Not matched!'"", ""text_starta_endb(\""xyab\"") == 'Found a match!'"", ""text_starta_endb(\""abxyzb\"") == 'Found a match!'""]","@startuml
start

:Input text;
if (Is text empty?) then (yes)
    :Output ""Not matched!"";
    stop
else (no)
    if (Does text start with 'a'?) then (yes)
        if (Does text end with 'b'?) then (yes)
            :Output ""Found a match!"";
            stop
        else (no)
            :Output ""Not matched!"";
            stop
        endif
    else (no)
        :Output ""Not matched!"";
        stop
    endif
endif

stop
@enduml"
773,"def occurance_substring(text,pattern):
""""""
Write a function to find the occurrence and position of the substrings within a string.
Your code should satisfy these tests:
occurance_substring(""hello world"", ""world"") == ('world', 6, 11)
occurance_substring(""abababa"", ""aba"") == ('aba', 0, 3)
occurance_substring(""mississippi"", ""issi"") == ('issi', 1, 5)
""""""
",occurance_substring,"def check(candidate):

    assert candidate('python programming, python language','python')==('python', 0, 6)
    assert candidate('python programming,programming language','programming')==('programming', 7, 18)
    assert candidate('python programming,programming language','language')==('language', 31, 39)
","import re
def occurance_substring(text,pattern):
 for match in re.finditer(pattern, text):
    s = match.start()
    e = match.end()
    return (text[s:e], s, e)","[""occurance_substring(\""hello world\"", \""world\"") == ('world', 6, 11)"", ""occurance_substring(\""abababa\"", \""aba\"") == ('aba', 0, 3)"", ""occurance_substring(\""mississippi\"", \""issi\"") == ('issi', 1, 5)""]","@startuml

start
:occurance_substring(text, pattern);

if (text == null || pattern == null) then (no
:return null;
)

if (text.length() < pattern.length()) then (no
:return null;
)

:pos = 0;
:found = false;

while (pos < text.length()) do (
  if (text.substring(pos, pos + pattern.length()) == pattern) then (yes
    :found = true;
    :return (pattern, pos, pos + pattern.length());
  )
  :pos = pos + 1;
)

if (found == false) then (no
  :return null;
)

@enduml"
224,"def count_Set_Bits(n):
""""""
Write a python function to count set bits of a given number.
Your code should satisfy these tests:
count_Set_Bits(5) == 2
count_Set_Bits(7) == 3
count_Set_Bits(15) == 4
""""""
",count_Set_Bits,"def check(candidate):

    assert candidate(2) == 1
    assert candidate(4) == 1
    assert candidate(6) == 2
","def count_Set_Bits(n):
    count = 0
    while (n):
        count += n & 1
        n >>= 1
    return count ","[""count_Set_Bits(5) == 2"", ""count_Set_Bits(7) == 3"", ""count_Set_Bits(15) == 4""]","@startuml
start

:Input number n;
if (Is n a valid integer?) then (yes)
    :Initialize count = 0;
    while (n > 0) is (yes)
        :count += n & 1;
        :n = n >> 1;
    endwhile (no)
    :Return count;
else (no)
    :Return ""Invalid input"";
endif

stop
@enduml"
12,"def sort_matrix(M):
""""""
Write a function to sort a given matrix in ascending order according to the sum of its rows.
Your code should satisfy these tests:
sort_matrix([[3, 2, 1], [1, 2, 3], [2, 1, 3]]) == [[3, 2, 1], [1, 2, 3], [2, 1, 3]]
sort_matrix([[5, 5, 5], [1, 1, 1], [3, 3, 3]]) == [[1, 1, 1], [3, 3, 3], [5, 5, 5]]
sort_matrix([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]
""""""
",sort_matrix,"def check(candidate):

    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]
    assert candidate([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]
","def sort_matrix(M):
    result = sorted(M, key=sum)
    return result","[""sort_matrix([[3, 2, 1], [1, 2, 3], [2, 1, 3]]) == [[3, 2, 1], [1, 2, 3], [2, 1, 3]]"", ""sort_matrix([[5, 5, 5], [1, 1, 1], [3, 3, 3]]) == [[1, 1, 1], [3, 3, 3], [5, 5, 5]]"", ""sort_matrix([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]""]","@startuml
start

:Input matrix M;
:Calculate the sum of each row in M;
:Create a list of tuples containing (row_sum, row);
:Sort the list of tuples based on row_sum in ascending order;
:Extract the sorted rows from the list of tuples;
:Return the sorted matrix;

stop
@enduml"
592,"def binomial_Coeff(n,k):
""""""
Write a python function to find sum of product of binomial co-efficients.
Your code should satisfy these tests:
binomial_Coeff(5, 2) == 10
binomial_Coeff(6, 3) == 20
binomial_Coeff(7, 4) == 35
binomial_Coeff(8, 2) == 28
binomial_Coeff(9, 5) == 126
""""""
",binomial_Coeff,"def check(candidate):

    assert sum_Of_product(3) == 15
    assert sum_Of_product(4) == 56
    assert sum_Of_product(1) == 1
","def binomial_Coeff(n,k):
    C = [0] * (k + 1);
    C[0] = 1; # nC0 is 1
    for i in range(1,n + 1):
        for j in range(min(i, k),0,-1):
            C[j] = C[j] + C[j - 1];
    return C[k];
def sum_Of_product(n):
    return binomial_Coeff(2 * n,n - 1); ","[""binomial_Coeff(5, 2) == 10"", ""binomial_Coeff(6, 3) == 20"", ""binomial_Coeff(7, 4) == 35"", ""binomial_Coeff(8, 2) == 28"", ""binomial_Coeff(9, 5) == 126""]","@startuml
start

:Input values for n and k;
if (n < 0 or k < 0 or k > n) then (yes)
    :Return ""Invalid input: n and k must be non-negative, and k must be <= n"";
    stop
else (no)
    :Initialize result = 1;
    :Calculate min(k, n - k);
    :Set i = 1;
    while (i <= min(k, n - k))
        :result = result * (n - i + 1) / i;
        :i = i + 1;
    endwhile
    :Return result;
endif

stop
@enduml"
364,"def make_flip(ch):
""""""
Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.
Your code should satisfy these tests:
make_flip('0') == '1'
make_flip('1') == '0'
make_flip('0') == '1'
make_flip('1') == '0'
make_flip('0') == '1'
""""""
",make_flip,"def check(candidate):

    assert min_flip_to_make_string_alternate(""0001010111"") == 2
    assert min_flip_to_make_string_alternate(""001"") == 1
    assert min_flip_to_make_string_alternate(""010111011"") == 2
","def make_flip(ch):
	return '1' if (ch == '0') else '0'
def get_flip_with_starting_charcter(str, expected):
	flip_count = 0
	for i in range(len( str)):
		if (str[i] != expected):
			flip_count += 1
		expected = make_flip(expected)
	return flip_count
def min_flip_to_make_string_alternate(str):
	return min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ","[""make_flip('0') == '1'"", ""make_flip('1') == '0'"", ""make_flip('0') == '1'"", ""make_flip('1') == '0'"", ""make_flip('0') == '1'""]","@startuml
start

:Input binary character (ch);
if (Is ch a valid binary character (0 or 1)?) then (yes)
    if (ch == '0') then (yes)
        :Set result = '1';
    else (no)
        :Set result = '0';
    endif
    :Return result;
else (no)
    :Raise ValueError(""Input must be '0' or '1'"");
    :End process;
endif

stop
@enduml"
545,"def take_L_and_F_set_bits(n):
""""""
Write a python function to toggle only first and last bits of a given number.
Your code should satisfy these tests:
take_L_and_F_set_bits(0b1) == 2
take_L_and_F_set_bits(0b101) == 5
take_L_and_F_set_bits(0b1000) == 9
take_L_and_F_set_bits(0b1111) == 9
take_L_and_F_set_bits(0b100000) == 33
""""""
",take_L_and_F_set_bits,"def check(candidate):

    assert toggle_F_and_L_bits(10) == 3
    assert toggle_F_and_L_bits(15) == 6
    assert toggle_F_and_L_bits(20) == 5
","def take_L_and_F_set_bits(n) :
    n = n | n >> 1
    n = n | n >> 2
    n = n | n >> 4
    n = n | n >> 8
    n = n | n >> 16
    return ((n + 1) >> 1) + 1
def toggle_F_and_L_bits(n) :
    if (n == 1) :
        return 0
    return n ^ take_L_and_F_set_bits(n) ","[""take_L_and_F_set_bits(0b1) == 2"", ""take_L_and_F_set_bits(0b101) == 5"", ""take_L_and_F_set_bits(0b1000) == 9"", ""take_L_and_F_set_bits(0b1111) == 9"", ""take_L_and_F_set_bits(0b100000) == 33""]","@startuml
start
:Input: n;
:Check if n is 0 or 1;
if (n != 0 and n != 1) then (Yes)
  :Convert n to binary;
  :Toggle first and last bits;
  :Return toggled binary number;
else (No)
  :Return n;
endif
stop
@enduml"
330,"def find_char(text):
""""""
Write a function to find all three, four, five characters long words in the given string by using regex.
""""""
",find_char,"def check(candidate):

    assert candidate('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']
    assert candidate('Certain service are subject to change MSR') == ['are', 'MSR']
    assert candidate('Third party legal desclaimers') == ['Third', 'party', 'legal']
","import re
def find_char(text):
  return (re.findall(r""\b\w{3,5}\b"", text))","[""find_char(\""The quick brown fox jumps over the lazy dog\"") == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']"", ""find_char(\""Python is a great programming language\"") == ['great']"", ""find_char(\""A\"") == []""]","@startuml
start

:Input text;
if (Is text empty or None?) then (yes)
    :Return empty list;
    stop
else (no)
    :Use regex to find all words;
    :Filter words with lengths 3, 4, or 5;
    if (Are any words found?) then (yes)
        :Return list of filtered words;
        stop
    else (no)
        :Return empty list;
        stop
    endif
endif

@enduml"
447,"def cube_nums(nums):
""""""
Write a function to find cubes of individual elements in a list using lambda function.
Your code should satisfy these tests:
cube_nums([1, 2, 3]) == [1, 8, 27]
cube_nums([4, 5, 6]) == [64, 125, 216]
cube_nums([-1, -2, -3]) == [-1, -8, -27]
""""""
",cube_nums,"def check(candidate):

    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]
    assert candidate([10,20,30])==([1000, 8000, 27000])
    assert candidate([12,15])==([1728, 3375])
","def cube_nums(nums):
 cube_nums = list(map(lambda x: x ** 3, nums))
 return cube_nums","[""cube_nums([1, 2, 3]) == [1, 8, 27]"", ""cube_nums([4, 5, 6]) == [64, 125, 216]"", ""cube_nums([-1, -2, -3]) == [-1, -8, -27]""]","@startuml
start

:Input list of numbers (nums);
if (Is nums a list?) then (yes)
    :Initialize an empty list (result);
    :Iterate over each number in nums;
    :Calculate cube of the number using lambda function;
    :Append the cube to the result list;
    if (Are there more numbers in nums?) then (yes)
        :Continue iteration;
    else (no)
        :Return the result list;
    endif
else (no)
    :Raise TypeError(""Input must be a list"");
endif

stop
@enduml"
700,"def count_range_in_list(li, min, max):
""""""
Write a function to count the number of elements in a list which are within a specific range.
Your code should satisfy these tests:
count_range_in_list([1, 2, 3, 4, 5], 2, 4) == 3
count_range_in_list([10, 20, 30, 40, 50], 15, 45) == 3
count_range_in_list([-5, 0, 5, 10], -10, 0) == 2
""""""
",count_range_in_list,"def check(candidate):

    assert candidate([10,20,30,40,40,40,70,80,99],40,100)==6
    assert candidate(['a','b','c','d','e','f'],'a','e')==5
    assert candidate([7,8,9,15,17,19,45],15,20)==3
","def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr","[""count_range_in_list([1, 2, 3, 4, 5], 2, 4) == 3"", ""count_range_in_list([10, 20, 30, 40, 50], 15, 45) == 3"", ""count_range_in_list([-5, 0, 5, 10], -10, 0) == 2""]","@startuml
start

:Input list (li), min, and max;
:Initialize counter = 0;
:Initialize index = 0;

while (index < length of li)
    :Get current element = li[index];
    if (current element >= min AND current element <= max) then (yes)
        :Increment counter by 1;
    else (no)
        :Do nothing;
    endif
    :Increment index by 1;
endwhile

:Return counter;
stop

@enduml"
484,"def remove_matching_tuple(test_list1, test_list2):
""""""
Write a function to remove the matching tuples from the given two tuples.
Your code should satisfy these tests:
remove_matching_tuple([(1, 2), (3, 4)], [(3, 4), (5, 6)]) == [(1, 2)]
remove_matching_tuple([(7, 8), (9, 10), (11, 12)], [(9, 10)]) == [(7, 8), (11, 12)]
remove_matching_tuple([(13, 14)], [(13, 14), (15, 16)]) == []
""""""
",remove_matching_tuple,"def check(candidate):

    assert candidate([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]
    assert candidate([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]
    assert candidate([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]
","def remove_matching_tuple(test_list1, test_list2):
  res = [sub for sub in test_list1 if sub not in test_list2]
  return (res) ","[""remove_matching_tuple([(1, 2), (3, 4)], [(3, 4), (5, 6)]) == [(1, 2)]"", ""remove_matching_tuple([(7, 8), (9, 10), (11, 12)], [(9, 10)]) == [(7, 8), (11, 12)]"", ""remove_matching_tuple([(13, 14)], [(13, 14), (15, 16)]) == []""]","@startuml

title remove_matching_tuple

start
:remove_matching_tuple(test_list1, test_list2);

if (test_list1 is empty) then (no)
:return [];
else (yes)

if (test_list2 is empty) then (no)
:return test_list1;
else (yes)

:result = [];

for each tuple in test_list1 do
:if (tuple not in test_list2) then
:result.append(tuple);

:return result;

@enduml"
656,"def find_Min_Sum(a,b,n):
""""""
Write a python function to find the minimum sum of absolute differences of two arrays.
Your code should satisfy these tests:
find_Min_Sum([1, 2, 3], [4, 5, 6], 3) == 9
find_Min_Sum([10, 20, 30], [30, 20, 10], 3) == 0
find_Min_Sum([1, 3, 5], [2, 4, 6], 3) == 3
""""""
",find_Min_Sum,"def check(candidate):

    assert candidate([3,2,1],[2,1,3],3) == 0
    assert candidate([1,2,3],[4,5,6],3) == 9
    assert candidate([4,1,8,7],[2,3,6,5],4) == 6
","def find_Min_Sum(a,b,n):
    a.sort()
    b.sort()
    sum = 0
    for i in range(n):
        sum = sum + abs(a[i] - b[i])
    return sum","[""find_Min_Sum([1, 2, 3], [4, 5, 6], 3) == 9"", ""find_Min_Sum([10, 20, 30], [30, 20, 10], 3) == 0"", ""find_Min_Sum([1, 3, 5], [2, 4, 6], 3) == 3""]","@startuml
start

:Input arrays a, b, and integer n;
:Sort array a in ascending order;
:Sort array b in ascending order;

:Initialize min_sum = 0;
:Initialize i = 0;

while (i < n)
    :Calculate absolute difference between a[i] and b[i];
    :Add the difference to min_sum;
    :Increment i by 1;
endwhile

:Return min_sum;

stop
@enduml"
411,"def snake_to_camel(word):
""""""
Write a function to convert the given snake case string to camel case string by using regex.
Your code should satisfy these tests:
snake_to_camel('hello_world') == 'HelloWorld'
snake_to_camel('convert_this_string') == 'ConvertThisString'
snake_to_camel('python_programming_language') == 'PythonProgrammingLanguage'
""""""
",snake_to_camel,"def check(candidate):

    assert candidate('android_tv') == 'AndroidTv'
    assert candidate('google_pixel') == 'GooglePixel'
    assert candidate('apple_watch') == 'AppleWatch'
","import re
def snake_to_camel(word):
  return ''.join(x.capitalize() or '_' for x in word.split('_'))","[""snake_to_camel('hello_world') == 'HelloWorld'"", ""snake_to_camel('convert_this_string') == 'ConvertThisString'"", ""snake_to_camel('python_programming_language') == 'PythonProgrammingLanguage'""]","@startuml
start
:input;
:word = snake_case_string;
if (word == """") then (
    :return ""Empty string"";
    stop
)
:output = """";
:words = word.split(""_"");
:capitalize = True;
foreach (w in words)
    if (capitalize) then (
        :w = w.capitalize();
        :capitalize = False;
    )
    else (
        :w = w.lower();
    )
    :output += w;
    :capitalize = True;
end
:return output;
stop
@enduml"
408,"def k_smallest_pairs(nums1, nums2, k):
""""""
Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.
Your code should satisfy these tests:
k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]
k_smallest_pairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]
k_smallest_pairs([1, 2], [3], 3) == [[1, 3], [2, 3]]
""""""
",k_smallest_pairs,"def check(candidate):

    assert candidate([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]
    assert candidate([1,3,7],[2,4,6],1)==[[1, 2]]
    assert candidate([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]
","import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs","[""k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]"", ""k_smallest_pairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]"", ""k_smallest_pairs([1, 2], [3], 3) == [[1, 3], [2, 3]]""]","@startuml
start
if (Are arrays empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize result list;
    :Sort nums1 and nums2;
    :Initialize priority queue;
    while (Queue not empty and result size < k) is (true)
        :Pop from queue;
        :Add pair to result list;
        if (Can add next pair from nums1?) then (yes)
            :Add next pair to queue;
        endif
        if (Can add next pair from nums2?) then (yes)
            :Add next pair to queue;
        endif
    endwhile (false)
    :Return result list;
    stop
endif
@enduml"
915,"def rearrange_numbs(array_nums):
""""""
Write a function to rearrange positive and negative numbers in a given array using lambda function.
Your code should satisfy these tests:
rearrange_numbs([3, 1, 0, 2]) == [1, 2, 3, 0]
rearrange_numbs([0, -1, -2, -3]) == [0, -3, -2, -1]
rearrange_numbs([5, 0, 10, 1]) == [1, 5, 10, 0]
""""""
",rearrange_numbs,"def check(candidate):

    assert candidate([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]
    assert candidate([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]
    assert candidate([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]
","def rearrange_numbs(array_nums):
  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)
  return result ","[""rearrange_numbs([3, 1, 0, 2]) == [1, 2, 3, 0]"", ""rearrange_numbs([0, -1, -2, -3]) == [0, -3, -2, -1]"", ""rearrange_numbs([5, 0, 10, 1]) == [1, 5, 10, 0]""]","@startuml

start
:rearrange_numbs(array_nums);

if (array_nums.length == 0) then (no)
:return array_nums;
else (yes)

:positive_nums = [];
:negative_nums = [];

for (i = 0; i < array_nums.length; i++) do
  if (array_nums[i] > 0) then (yes)
    :positive_nums.push(array_nums[i]);
  else (no)
    :negative_nums.push(array_nums[i]);
  endif
endfor

:positive_nums.sort();
:negative_nums.sort();

:result = [];

for (i = 0; i < positive_nums.length; i++) do
  :result.push(positive_nums[i]);
endfor

for (i = 0; i < negative_nums.length; i++) do
  :result.push(negative_nums[i]);
endfor

:return result;

endif

@enduml"
759,"def is_decimal(num):
""""""
Write a function to check a decimal with a precision of 2.
Your code should satisfy these tests:
is_decimal(""123"") == True
is_decimal(""123.45"") == True
is_decimal(""123.456"") == False
""""""
",is_decimal,"def check(candidate):

    assert candidate('123.11')==True
    assert candidate('e666.86')==False
    assert candidate('3.124587')==False
","def is_decimal(num):
    import re
    dnumre = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
    result = dnumre.search(num)
    return bool(result)","[""is_decimal(\""123\"") == True"", ""is_decimal(\""123.45\"") == True"", ""is_decimal(\""123.456\"") == False""]","@startuml
start
:Check if input is a string;
if (isinstance(num, str)) then
  :Check if string is a decimal;
  if (num.replace('.', '', 1).isdigit()) then
    :Check if string has at most one decimal point;
    if (num.count('.') == 1) then
      :Check if decimal has at most two digits after the decimal point;
      if (len(num.split('.')[1]) <= 2) then
        :Return True;
        stop
      endif
    endif
  endif
endif
:Return False;
stop
@enduml"
705,"def sort_sublists(list1):
""""""
Write a function to sort a list of lists by length and value.
Your code should satisfy these tests:
sort_sublists([[3, 2, 1], [1, 2], [4, 4, 4]]) == [[1, 2], [3, 2, 1], [4, 4, 4]]
sort_sublists([[5], [1, 1, 1, 1], [2, 2]]) == [[5], [2, 2], [1, 1, 1, 1]]
sort_sublists([[7, 6], [5, 4, 3], [2, 1, 0, -1]]) == [[7, 6], [5, 4, 3], [2, 1, 0, -1]]
""""""
",sort_sublists,"def check(candidate):

    assert candidate([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]
    assert candidate([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]
    assert candidate([[""python""],[""java"",""C"",""C++""],[""DBMS""],[""SQL"",""HTML""]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]
","def sort_sublists(list1):
      list1.sort()
      list1.sort(key=len)
      return  list1","[""sort_sublists([[3, 2, 1], [1, 2], [4, 4, 4]]) == [[1, 2], [3, 2, 1], [4, 4, 4]]"", ""sort_sublists([[5], [1, 1, 1, 1], [2, 2]]) == [[5], [2, 2], [1, 1, 1, 1]]"", ""sort_sublists([[7, 6], [5, 4, 3], [2, 1, 0, -1]]) == [[7, 6], [5, 4, 3], [2, 1, 0, -1]]""]","@startuml

start
:sort_sublists(list1);
if (list1 is empty) then (
  stop
)

:sort_sublists(list1);
if (list1 has only one element) then (
  stop
)

:sort_sublists(list1);
if (list1 has more than one element) then (
  sort list1 by length
  sort list1 by value
  stop
)

@enduml"
856,"def find_Min_Swaps(arr,n):
""""""
Write a python function to find minimum adjacent swaps required to sort binary array.
Your code should satisfy these tests:
find_Min_Swaps([0, 1, 0, 1, 1], 5) == 1
find_Min_Swaps([1, 0, 0, 1, 0, 1], 6) == 4
find_Min_Swaps([0, 0, 0, 1, 1, 1], 6) == 0
""""""
",find_Min_Swaps,"def check(candidate):

    assert candidate([1,0,1,0],4) == 3
    assert candidate([0,1,0],3) == 1
    assert candidate([0,0,1,1,0],5) == 2
","def find_Min_Swaps(arr,n) :
    noOfZeroes = [0] * n
    count = 0
    noOfZeroes[n - 1] = 1 - arr[n - 1]
    for i in range(n-2,-1,-1) :
        noOfZeroes[i] = noOfZeroes[i + 1]
        if (arr[i] == 0) :
            noOfZeroes[i] = noOfZeroes[i] + 1
    for i in range(0,n) :
        if (arr[i] == 1) :
            count = count + noOfZeroes[i]
    return count ","[""find_Min_Swaps([0, 1, 0, 1, 1], 5) == 1"", ""find_Min_Swaps([1, 0, 0, 1, 0, 1], 6) == 4"", ""find_Min_Swaps([0, 0, 0, 1, 1, 1], 6) == 0""]","@startuml
start
:Input: arr, n
:Output: minSwaps
:Validate input: arr is a list of 0s and 1s, n is the length of arr
if (not valid) then (return error message)
endif
:Initialize: minSwaps = 0
:Initialize: ones = 0
:Initialize: swaps = 0
:For each element in arr:
    if (element == 1) then (ones = ones + 1)
    endif
    if (element == 0) then (swaps = swaps + ones)
    endif
    if (element != 0 and element != 1) then (return error message)
    endif
endfor
:minSwaps = swaps
:Return minSwaps
stop
@enduml"
646,"def No_of_cubes(N,K):
""""""
Write a python function to count number of cubes of size k in a cube of size n.
Your code should satisfy these tests:
No_of_cubes(5, 2) == 64
No_of_cubes(10, 3) == 512
No_of_cubes(7, 1) == 343
""""""
",No_of_cubes,"def check(candidate):

    assert candidate(2,1) == 8
    assert candidate(5,2) == 64
    assert candidate(1,1) == 1
","def No_of_cubes(N,K):
    No = 0
    No = (N - K + 1)
    No = pow(No, 3)
    return No","[""No_of_cubes(5, 2) == 64"", ""No_of_cubes(10, 3) == 512"", ""No_of_cubes(7, 1) == 343""]","@startuml

title No_of_cubes(N, K)

start
:Start;

if (N < K) then (false)
:Invalid input;
:Return 0;
else (true)
:Valid input;

if (K == 1) then (true)
:K = 1;
:Return N^3;
else (false)
:K > 1;

if (N == K) then (true)
:N = K;
:Return 1;
else (false)
:N > K;

:Return (N - K + 1)^3;

end if;

end if;

:End;

@enduml"
504,"def sum_Of_Series(n):
""""""
Write a python function to find the cube sum of first n natural numbers.
Your code should satisfy these tests:
sum_Of_Series(1) == 1
sum_Of_Series(3) == 36
sum_Of_Series(5) == 225
""""""
",sum_Of_Series,"def check(candidate):

    assert candidate(5) == 225
    assert candidate(2) == 9
    assert candidate(3) == 36
","def sum_Of_Series(n):
    sum = 0
    for i in range(1,n + 1):
        sum += i * i*i
    return sum","[""sum_Of_Series(1) == 1"", ""sum_Of_Series(3) == 36"", ""sum_Of_Series(5) == 225""]","@startuml

start
:sum_Of_Series(n);
if (n <= 0) then (no)
:return 0;
else (yes)
:cube = n * n * n;
:sum = cube;
:for i in range(1, n):
:    cube = i * i * i;
:    sum += cube;
:end for
:return sum;

@enduml"
584,"def find_adverbs(text):
""""""
Write a function to find all adverbs and their positions in a given sentence by using regex.
Your code should satisfy these tests:
find_adverbs(""She quickly and quietly left the room."") == '4-11: quickly'
find_adverbs(""He ran smoothly over the bumpy road."") == '7-15: smoothly'
find_adverbs(""The cat purred contentedly."") == '15-26: contentedly'
""""""
",find_adverbs,"def check(candidate):

    assert candidate(""Clearly, he has no excuse for such behavior."") == '0-7: Clearly'
    assert candidate(""Please handle the situation carefuly"") == '28-36: carefuly'
    assert candidate(""Complete the task quickly"") == '18-25: quickly'
","import re
def find_adverbs(text):
  for m in re.finditer(r""\w+ly"", text):
    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))","[""find_adverbs(\""She quickly and quietly left the room.\"") == '4-11: quickly'"", ""find_adverbs(\""He ran smoothly over the bumpy road.\"") == '7-15: smoothly'"", ""find_adverbs(\""The cat purred contentedly.\"") == '15-26: contentedly'""]","@startuml

start
:find_adverbs(text);

if (text == null) then (no text)
:return null;

else (text is not null)
:match = re.search(r'[A-Za-z]+ly', text);

if (match == null) then (no adverbs)
:return null;

else (match is not null)
:adverb = match.group();
:position = match.start();
:return f'{position}-{position+len(adverb)}: {adverb}';

end if

end if

@enduml"
454,"def text_match_wordz(text):
""""""
Write a function that matches a word containing 'z'.
Your code should satisfy these tests:
text_match_wordz(""fizzbuzz"") == 'Found a match!'
text_match_wordz(""amazing"") == 'Found a match!'
text_match_wordz(""hello"") == 'Not matched!'
""""""
",text_match_wordz,"def check(candidate):

    assert candidate(""pythonz."")==('Found a match!')
    assert candidate(""xyz."")==('Found a match!')
    assert candidate(""  lang  ."")==('Not matched!')
","import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","[""text_match_wordz(\""fizzbuzz\"") == 'Found a match!'"", ""text_match_wordz(\""amazing\"") == 'Found a match!'"", ""text_match_wordz(\""hello\"") == 'Not matched!'""]","@startuml
start

:Input text;
if (Does text contain the letter 'z'?) then (yes)
    :Found a match!;
else (no)
    :Not matched!;
endif

stop
@enduml"
735,"def set_middle_bits(n):
""""""
Write a python function to toggle bits of the number except the first and the last bit.
Your code should satisfy these tests:
set_middle_bits(0b101010) == 30
set_middle_bits(0b110011) == 30
set_middle_bits(0b1000001) == 62
set_middle_bits(0b1111111) == 62
set_middle_bits(0b10001) == 14
""""""
",set_middle_bits,"def check(candidate):

    assert toggle_middle_bits(9) == 15
    assert toggle_middle_bits(10) == 12
    assert toggle_middle_bits(11) == 13
","def set_middle_bits(n):
    n |= n >> 1;
    n |= n >> 2;
    n |= n >> 4;
    n |= n >> 8;
    n |= n >> 16;
    return (n >> 1) ^ 1
def toggle_middle_bits(n):
    if (n == 1):
        return 1
    return n ^ set_middle_bits(n) ","[""set_middle_bits(0b101010) == 30"", ""set_middle_bits(0b110011) == 30"", ""set_middle_bits(0b1000001) == 62"", ""set_middle_bits(0b1111111) == 62"", ""set_middle_bits(0b10001) == 14""]","@startuml
start
:Input: n;
:Check if n is not binary or n is less than 3 bits: isNotBinary(n) or len(n) < 3;
[Yes] --> [Return Error]
[No] --> :Convert n to binary: n = bin(n)[2:];
:Initialize result: result = 0;
:Initialize mask: mask = 2 ** (len(n) - 1);
:Initialize middle bits: middleBits = n[1:-1];
:Convert middle bits to integer: middleBits = int(middleBits, 2);
:Toggle middle bits: middleBits ^= middleBits;
:Convert middle bits back to binary: middleBits = bin(middleBits)[2:];
:Add middle bits to result: result += int(middleBits, 2);
:Add mask to result: result += mask;
:Convert result to binary: result = bin(result)[2:];
:Return result: result;
stop
@enduml"
799,"def left_Rotate(n,d):
""""""
Write a python function to left rotate the bits of a given number.
""""""
",left_Rotate,"def check(candidate):

    assert candidate(16,2) == 64
    assert candidate(10,2) == 40
    assert candidate(99,3) == 792
","INT_BITS = 32
def left_Rotate(n,d):
    return (n << d)|(n >> (INT_BITS - d))  ","[""test test cases failed""]","@startuml

left_Rotate(n, d)

:n = input number;
:d = input number of bits to rotate;

if (d > 0) then (yes)
  :rotate left by d bits;
else (no)
  :do nothing;
endif

:return rotated number;

@enduml"
30,"def check_Equality(s):
""""""
Write a python function to count all the substrings starting and ending with same characters.
Your code should satisfy these tests:
check_Equality(""a"") == True
check_Equality(""ab"") == False
check_Equality(""aba"") == True
check_Equality(""abcba"") == True
check_Equality(""xyz"") == False
""""""
",check_Equality,"def check(candidate):

    assert count_Substring_With_Equal_Ends(""abc"") == 3
    assert count_Substring_With_Equal_Ends(""abcda"") == 6
    assert count_Substring_With_Equal_Ends(""ab"") == 2
","def check_Equality(s):
    return (ord(s[0]) == ord(s[len(s) - 1]));
def count_Substring_With_Equal_Ends(s):
    result = 0;
    n = len(s);
    for i in range(n):
        for j in range(1,n-i+1):
            if (check_Equality(s[i:i+j])):
                result+=1;
    return result; ","[""check_Equality(\""a\"") == True"", ""check_Equality(\""ab\"") == False"", ""check_Equality(\""aba\"") == True"", ""check_Equality(\""abcba\"") == True"", ""check_Equality(\""xyz\"") == False""]","@startuml
start
:input string s;
if (s is empty?) then (True)
  :return False;
else (False)
  :first_char = s[0];
  :last_char = s[-1];
  if (first_char == last_char) then (True)
    :substring = s[1:-1];
    if (substring is palindrome?) then (True)
      :return True;
    else (False)
      :return False;
    endif
  else (False)
    :return False;
  endif
endif
stop
@enduml"
120,"def max_product_tuple(list1):
""""""
Write a function to find the maximum product from the pairs of tuples within a given list.
Your code should satisfy these tests:
max_product_tuple([(1, 2), (3, 4), (-5, -6)]) == 30
max_product_tuple([(0, 10), (20, -30), (5, 5)]) == 600
max_product_tuple([(-1, -1), (100, 100), (-10, 10)]) == 10000
""""""
",max_product_tuple,"def check(candidate):

    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
    assert candidate([(10,20), (15,2), (5,10)] )==200
    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==484
","def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max","[""max_product_tuple([(1, 2), (3, 4), (-5, -6)]) == 30"", ""max_product_tuple([(0, 10), (20, -30), (5, 5)]) == 600"", ""max_product_tuple([(-1, -1), (100, 100), (-10, 10)]) == 10000""]","@startuml

start

:max_product_tuple(list1);

if (list1 is empty) then (
  :return 0;
) else (
  :max_product = 0;
  :for each tuple in list1 (
    :product = tuple[0] * tuple[1];
    :if (product > max_product) then (
      :max_product = product;
    )
  )
  :return max_product;
)

@enduml"
158,"def min_Ops(arr,n,k):
""""""
Write a python function to find k number of operations required to make all elements equal.
Your code should satisfy these tests:
min_Ops([4, 7, 10], 3, 3) == 3
min_Ops([1, 5, 9], 3, 2) == 6
min_Ops([10, 10, 10], 3, 5) == 0
min_Ops([3, 6, 9, 12], 4, 3) == 6
min_Ops([2, 4, 6, 8, 10], 5, 2) == 10
""""""
",min_Ops,"def check(candidate):

    assert candidate([2,2,2,2],4,3) == 0
    assert candidate([4,2,6,8],4,3) == -1
    assert candidate([21,33,9,45,63],5,6) == 24
","def min_Ops(arr,n,k):
    max1 = max(arr)
    res = 0
    for i in range(0,n):
        if ((max1 - arr[i]) % k != 0):
            return -1
        else:
            res += (max1 - arr[i]) / k
    return int(res) ","[""min_Ops([4, 7, 10], 3, 3) == 3"", ""min_Ops([1, 5, 9], 3, 2) == 6"", ""min_Ops([10, 10, 10], 3, 5) == 0"", ""min_Ops([3, 6, 9, 12], 4, 3) == 6"", ""min_Ops([2, 4, 6, 8, 10], 5, 2) == 10""]","@startuml
start
:Input Validation;
if (arr is empty or k > n or k <= 0) then (true)
    :Return Error;
elseif (n == 1)
    :Return 0;
endif
:Sort the array;
:Find the median;
:Initialize result as 0;
:For each element in the array;
    :result += abs(element - median);
:End For;
:Return result;
stop
@enduml"
833,"def get_key(dict):
""""""
Write a function to get dictionary keys as a list.
Your code should satisfy these tests:
get_key({'a': 1, 'b': 2}) == ['a', 'b']
get_key({1: 'apple', 2: 'banana', 3: 'cherry'}) == [1, 2, 3]
get_key({'name': 'John', 'age': 30, 'city': 'New York'}) == ['name', 'age', 'city']
""""""
",get_key,"def check(candidate):

    assert candidate({1:'python',2:'java'})==[1,2]
    assert candidate({10:'red',20:'blue',30:'black'})==[10,20,30]
    assert candidate({27:'language',39:'java',44:'little'})==[27,39,44]
","def get_key(dict):
    list = []
    for key in dict.keys():
        list.append(key)
    return list","[""get_key({'a': 1, 'b': 2}) == ['a', 'b']"", ""get_key({1: 'apple', 2: 'banana', 3: 'cherry'}) == [1, 2, 3]"", ""get_key({'name': 'John', 'age': 30, 'city': 'New York'}) == ['name', 'age', 'city']""]","@startuml
start

:Input dictionary (dict);
if (Is dict a valid dictionary?) then (yes)
    if (Is dict empty?) then (yes)
        :Return empty list;
    else (no)
        :Extract keys from dict;
        :Convert keys to a list;
        :Return the list of keys;
    endif
else (no)
    :Raise TypeError(""Input must be a dictionary"");
endif

stop
@enduml"
544,"def flatten_tuple(test_list):
""""""
Write a function to flatten the tuple list to a string.
Your code should satisfy these tests:
flatten_tuple((('a', 'b'), ('c', 'd'), ('e', 'f'))) == 'a b c d e f'
flatten_tuple((('1', '2', '3'), ('4', '5'))) == '1 2 3 4 5'
flatten_tuple((('hello',), ('world', 'python'))) == 'hello world python'
""""""
",flatten_tuple,"def check(candidate):

    assert candidate([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'
    assert candidate([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'
    assert candidate([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'
","def flatten_tuple(test_list):
  res = ' '.join([idx for tup in test_list for idx in tup])
  return (res) ","[""flatten_tuple((('a', 'b'), ('c', 'd'), ('e', 'f'))) == 'a b c d e f'"", ""flatten_tuple((('1', '2', '3'), ('4', '5'))) == '1 2 3 4 5'"", ""flatten_tuple((('hello',), ('world', 'python'))) == 'hello world python'""]","@startuml
start

:Input tuple list (test_list);
:Initialize an empty string (result);

if (Is test_list empty?) then (yes)
  :Return empty string;
  stop
else (no)
  :Iterate over each tuple in test_list;
  :For each tuple, iterate over each element;
  :Append each element to result with a space;
endif

:Remove the trailing space from result;
:Return result;

stop
@enduml"
916,"def find_triplet_array(A, arr_size, sum):
""""""
Write a function to find if there is a triplet in the array whose sum is equal to a given value.
Your code should satisfy these tests:
find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)
find_triplet_array([0, -1, 2, -3, 1], 5, -2) == (0, -3, 1)
find_triplet_array([12, 3, 4, 1, 6, 9], 6, 24) == (12, 3, 9)
""""""
",find_triplet_array,"def check(candidate):

    assert candidate([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)
    assert candidate([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)
    assert candidate([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)
","def find_triplet_array(A, arr_size, sum):
	for i in range( 0, arr_size-2):
		for j in range(i + 1, arr_size-1):
			for k in range(j + 1, arr_size):
				if A[i] + A[j] + A[k] == sum:
					return  A[i],A[j],A[k]
					return True
	return False","[""find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)"", ""find_triplet_array([0, -1, 2, -3, 1], 5, -2) == (0, -3, 1)"", ""find_triplet_array([12, 3, 4, 1, 6, 9], 6, 24) == (12, 3, 9)""]","@startuml
start
:Input: A[], arr_size, sum;
:Output: Triplet or None;
if (A is None or arr_size < 3) then (None)
else (
    for (i = 0 to arr_size - 2)
        for (j = i + 1 to arr_size - 1)
            for (k = j + 1 to arr_size)
                if (A[i] + A[j] + A[k] == sum) then (return (A[i], A[j], A[k]))
    endif
    return None
)
endif
stop
@enduml"
686,"def freq_element(test_tup):
""""""
Write a function to find the frequency of each element in the given list.
Your code should satisfy these tests:
freq_element((1, 2, 2, 3, 3, 3)) == ""{1: 1, 2: 2, 3: 3}""
freq_element(('a', 'b', 'a', 'c', 'b', 'a')) == ""{'a': 3, 'b': 2, 'c': 1}""
freq_element((10, 10, 20, 20, 20, 30)) == ""{10: 2, 20: 3, 30: 1}""
""""""
",freq_element,"def check(candidate):

    assert candidate((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'
    assert candidate((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'
    assert candidate((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'
","from collections import defaultdict
def freq_element(test_tup):
  res = defaultdict(int)
  for ele in test_tup:
    res[ele] += 1
  return (str(dict(res))) ","[""freq_element((1, 2, 2, 3, 3, 3)) == \""{1: 1, 2: 2, 3: 3}\"""", ""freq_element(('a', 'b', 'a', 'c', 'b', 'a')) == \""{'a': 3, 'b': 2, 'c': 1}\"""", ""freq_element((10, 10, 20, 20, 20, 30)) == \""{10: 2, 20: 3, 30: 1}\""""]","@startuml
start

:Input tuple (test_tup);
:Initialize an empty dictionary (freq_dict);

while (Iterate over each element in test_tup) is (Element exists)
    :Get current element (element);
    if (element exists in freq_dict?) then (yes)
        :Increment the count of element in freq_dict;
    else (no)
        :Add element to freq_dict with count 1;
    endif
endwhile

:Convert freq_dict to a string representation (result_str);
:Return result_str;

stop
@enduml"
536,"def nth_items(list,n):
""""""
Write a function to select the nth items of a list.
Your code should satisfy these tests:
nth_items([1, 2, 3, 4, 5, 6], 2) == [1, 3, 5]
nth_items(['a', 'b', 'c', 'd', 'e', 'f'], 3) == ['a', 'd']
nth_items([10, 20, 30, 40, 50], 1) == [10, 20, 30, 40, 50]
""""""
",nth_items,"def check(candidate):

    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9]
    assert candidate([10,15,19,17,16,18],3)==[10,17]
    assert candidate([14,16,19,15,17],4)==[14,17]
","def nth_items(list,n):
 return list[::n]","[""nth_items([1, 2, 3, 4, 5, 6], 2) == [1, 3, 5]"", ""nth_items(['a', 'b', 'c', 'd', 'e', 'f'], 3) == ['a', 'd']"", ""nth_items([10, 20, 30, 40, 50], 1) == [10, 20, 30, 40, 50]""]","@startuml
start
:Input: list, n;
:Check if list is empty: if (list == []) then (true) else (false)
:If list is empty: else (true)
    :Return error message
    stop
:End if
:Check if n is greater than list length: if (n > length(list)) then (true) else (false)
:If n is greater: else (true)
    :Return error message
    stop
:End if
:Initialize result: result = []
:Loop through list: for (i = 0 to length(list))
    :If i is multiple of n: if ((i % n) == 0) then (true)
        :Append item to result: result.append(list[i])
    :End if
:End for
:Return result
stop
@enduml"
205,"def inversion_elements(test_tup):
""""""
Write a function to find the inversions of tuple elements in the given tuple list.
Your code should satisfy these tests:
inversion_elements((1, 2, 3)) == (-2, -3, -4)
inversion_elements((0, -1, -2)) == (-1, 0, 1)
inversion_elements((10, 20, 30)) == (-11, -21, -31)
""""""
",inversion_elements,"def check(candidate):

    assert candidate((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)
    assert candidate((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)
    assert candidate((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)
","def inversion_elements(test_tup):
  res = tuple(list(map(lambda x: ~x, list(test_tup))))
  return (res) ","[""inversion_elements((1, 2, 3)) == (-2, -3, -4)"", ""inversion_elements((0, -1, -2)) == (-1, 0, 1)"", ""inversion_elements((10, 20, 30)) == (-11, -21, -31)""]","@startuml
start

:Input tuple (test_tup);
:Initialize an empty list (result_list);

if (Is test_tup empty?) then (yes)
    :Return empty tuple;
    stop
else (no)
    :Iterate over each element in test_tup;
    :Calculate the inversion of the current element (inversion = -element - 1);
    :Append the inversion to result_list;
    :Check if all elements are processed?;
    if (All elements processed?) then (yes)
        :Convert result_list to a tuple (result_tuple);
        :Return result_tuple;
        stop
    else (no)
        :Continue iteration;
    endif
endif

@enduml"
576,"def is_Sub_Array(A,B,n,m):
""""""
Write a python function to check whether an array is subarray of another or not.
Your code should satisfy these tests:
is_Sub_Array([2, 3, 4, 5], [3, 4], 4, 2) == True
is_Sub_Array([1, 2, 3, 4, 5], [6, 7], 5, 2) == False
is_Sub_Array([10, 20, 30, 40, 50], [30, 40, 50], 5, 3) == True
""""""
",is_Sub_Array,"def check(candidate):

    assert candidate([1,4,3,5],[1,2],4,2) == False
    assert candidate([1,2,1],[1,2,1],3,3) == True
    assert candidate([1,0,2,2],[2,2,0],4,3) ==False
","def is_Sub_Array(A,B,n,m):
    i = 0; j = 0;
    while (i < n and j < m):
        if (A[i] == B[j]):
            i += 1;
            j += 1;
            if (j == m):
                return True;
        else:
            i = i - j + 1;
            j = 0;
    return False; ","[""is_Sub_Array([2, 3, 4, 5], [3, 4], 4, 2) == True"", ""is_Sub_Array([1, 2, 3, 4, 5], [6, 7], 5, 2) == False"", ""is_Sub_Array([10, 20, 30, 40, 50], [30, 40, 50], 5, 3) == True""]","@startuml
start
:Input Validation;
if (A is None or B is None or n <= 0 or m <= 0) then (False)
    :Return False;
    stop
endif
:Initialize i = 0 and j = 0;
while (i < n and j < m)
    if (A[i] == B[j]) then (True)
        :Increment i;
        :Increment j;
    else (False)
        :Increment i;
        :Set j = 0;
    endif
    if (j == m) then (True)
        :Return True;
    endif
endwhile
:Return False;
stop
@enduml"
869,"def remove_list_range(list1, leftrange, rigthrange):
""""""
Write a function to remove sublists from a given list of lists, which are outside a given range.
Your code should satisfy these tests:
remove_list_range([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 8) == [[4, 5, 6]]
remove_list_range([[10, 20, 30], [40, 50, 60], [70, 80, 90]], 25, 75) == [[40, 50, 60]]
remove_list_range([[5, 10], [15, 20], [25, 30]], 10, 25) == [[15, 20]]
remove_list_range([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5, 6) == []
remove_list_range([[100, 200, 300], [400, 500, 600], [700, 800, 900]], 150, 850) == [[400, 500, 600]]
""""""
",remove_list_range,"def check(candidate):

    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]
    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]
    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]
","def remove_list_range(list1, leftrange, rigthrange):
   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]
   return result","[""remove_list_range([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 8) == [[4, 5, 6]]"", ""remove_list_range([[10, 20, 30], [40, 50, 60], [70, 80, 90]], 25, 75) == [[40, 50, 60]]"", ""remove_list_range([[5, 10], [15, 20], [25, 30]], 10, 25) == [[15, 20]]"", ""remove_list_range([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5, 6) == []"", ""remove_list_range([[100, 200, 300], [400, 500, 600], [700, 800, 900]], 150, 850) == [[400, 500, 600]]""]","@startuml
start

:Input list1, leftrange, rightrange;
:Initialize an empty list called result;

:Iterate over each sublist in list1;
if (All elements in sublist are within [leftrange, rightrange]?) then (yes)
  :Add sublist to result;
else (no)
  :Skip sublist;
endif

:Check if all sublists have been processed?;
if (Yes) then (yes)
  :Return result;
else (no)
  :Continue iteration;
endif

stop
@enduml"
639,"def sample_nam(sample_names):
""""""
Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.
Your code should satisfy these tests:
sample_nam(['Alice', 'bob', 'Charlie']) == 12
sample_nam(['David', 'Eve', 'Frank']) == 13
sample_nam(['George', 'hannah', 'Ian']) == 9
""""""
",sample_nam,"def check(candidate):

    assert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16
    assert candidate([""php"", ""res"", ""Python"", ""abcd"", ""Java"", ""aaa""])==10
    assert candidate([""abcd"", ""Python"", ""abba"", ""aba""])==6
","def sample_nam(sample_names):
  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))
  return len(''.join(sample_names))","[""sample_nam(['Alice', 'bob', 'Charlie']) == 12"", ""sample_nam(['David', 'Eve', 'Frank']) == 13"", ""sample_nam(['George', 'hannah', 'Ian']) == 9""]","@startuml

start
:sample_nam(sample_names);

if (sample_names.length == 0) then (no names)
	stop
else
	:sum = 0;
	:for name in sample_names:
		if (name.startswith(name[0].upper())) then (name starts with uppercase letter)
			:sum += len(name);
		else (name starts with lowercase letter)
			:continue;
		endif
	:endfor
	:return sum;
endif

@enduml"
715,"def str_to_tuple(test_str):
""""""
Write a function to convert the given string of integers into a tuple.
Your code should satisfy these tests:
str_to_tuple(""1, 2, 3"") == (1, 2, 3)
str_to_tuple(""10, 20, 30, 40"") == (10, 20, 30, 40)
str_to_tuple(""5, 15, 25, 35, 45"") == (5, 15, 25, 35, 45)
""""""
",str_to_tuple,"def check(candidate):

    assert candidate(""1, -5, 4, 6, 7"") == (1, -5, 4, 6, 7)
    assert candidate(""1, 2, 3, 4, 5"") == (1, 2, 3, 4, 5)
    assert candidate(""4, 6, 9, 11, 13, 14"") == (4, 6, 9, 11, 13, 14)
","def str_to_tuple(test_str):
  res = tuple(map(int, test_str.split(', ')))
  return (res) ","[""str_to_tuple(\""1, 2, 3\"") == (1, 2, 3)"", ""str_to_tuple(\""10, 20, 30, 40\"") == (10, 20, 30, 40)"", ""str_to_tuple(\""5, 15, 25, 35, 45\"") == (5, 15, 25, 35, 45)""]","@startuml
start

:Input string (test_str);
if (Is input string empty?) then (yes)
    :Return empty tuple;
    stop
else (no)
    :Split the string by comma (,) to get list of string numbers;
    :Initialize an empty list (result_list);
    :For each string number in the list;
    :Convert string number to integer;
    :Append integer to result_list;
    :Convert result_list to tuple (result_tuple);
    :Return result_tuple;
    stop
endif

@enduml"
599,"def sum_average(number):
""""""
Write a function to find sum and average of first n natural numbers.
Your code should satisfy these tests:
sum_average(5) == (15, 3.0)
sum_average(10) == (55, 5.5)
sum_average(1) == (1, 1.0)
""""""
",sum_average,"def check(candidate):

    assert candidate(10)==(55, 5.5)
    assert candidate(15)==(120, 8.0)
    assert candidate(20)==(210, 10.5)
","def sum_average(number):
 total = 0
 for value in range(1, number + 1):
    total = total + value
 average = total / number
 return (total,average)","[""sum_average(5) == (15, 3.0)"", ""sum_average(10) == (55, 5.5)"", ""sum_average(1) == (1, 1.0)""]","@startuml
start

:Input number (n);
if (n <= 0?) then (yes)
  :Invalid input: n must be a positive integer;
  stop
else (no)
  :Initialize sum = 0;
  :Initialize count = 1;
  while (count <= n?) is (yes)
    :sum = sum + count;
    :count = count + 1;
  endwhile (no)
  :Calculate average = sum / n;
  :Return (sum, average);
  stop
endif

@enduml"
312,"def volume_cone(r,h):
""""""
Write a function to find the volume of a cone.
Your code should satisfy these tests:
volume_cone(3, 5) == 47.12388980384689
volume_cone(7, 10) == 513.1268000863329
volume_cone(1, 1) == 1.0471975511965976
volume_cone(0, 5) == 0.0
volume_cone(4, 8) == 134.0412865531645
""""""
",volume_cone,"def check(candidate):

    assert candidate(5,12)==314.15926535897927
    assert candidate(10,15)==1570.7963267948965
    assert candidate(19,17)==6426.651371693521
","import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume","[""volume_cone(3, 5) == 47.12388980384689"", ""volume_cone(7, 10) == 513.1268000863329"", ""volume_cone(1, 1) == 1.0471975511965976"", ""volume_cone(0, 5) == 0.0"", ""volume_cone(4, 8) == 134.0412865531645""]","@startuml
start
:Input r, h;
if (r <= 0 or h <= 0) then (r <= 0)
  :Return 0.0;
elseif (r > 0 and h > 0)
  :Calculate volume;
endif
:Return volume;
stop
@enduml"
282,"def sub_list(nums1,nums2):
""""""
Write a function to substaract two lists using map and lambda function.
Your code should satisfy these tests:
sub_list([10, 20, 30], [1, 2, 3]) == [9, 18, 27]
sub_list([5, 15, 25], [5, 15, 25]) == [0, 0, 0]
sub_list([100, 200, 300], [50, 100, 150]) == [50, 100, 150]
""""""
",sub_list,"def check(candidate):

    assert candidate([1, 2, 3],[4,5,6])==[-3,-3,-3]
    assert candidate([1,2],[3,4])==[-2,-2]
    assert candidate([90,120],[50,70])==[40,50]
","def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)","[""sub_list([10, 20, 30], [1, 2, 3]) == [9, 18, 27]"", ""sub_list([5, 15, 25], [5, 15, 25]) == [0, 0, 0]"", ""sub_list([100, 200, 300], [50, 100, 150]) == [50, 100, 150]""]","@startuml

title Subtract Two Lists using Map and Lambda Function

start
:Start;

if (nums1.length != nums2.length) then (no)
:Invalid Input;
:Return Error;
else (yes)
:Valid Input;

:Initialize Result List;
result = [];

for (i = 0; i < nums1.length; i++) do
:Subtract Elements;
result.push(nums1[i] - nums2[i]);
end

:Return Result;
return result;

@enduml"
809,"def check_smaller(test_tup1, test_tup2):
""""""
Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.
Your code should satisfy these tests:
check_smaller((5, 6, 7), (4, 5, 6)) == True
check_smaller((1, 2, 3), (2, 3, 4)) == False
check_smaller((10, 20, 30), (9, 19, 29)) == True
""""""
",check_smaller,"def check(candidate):

    assert candidate((1, 2, 3), (2, 3, 4)) == False
    assert candidate((4, 5, 6), (3, 4, 5)) == True
    assert candidate((11, 12, 13), (10, 11, 12)) == True
","def check_smaller(test_tup1, test_tup2):
  res = all(x > y for x, y in zip(test_tup1, test_tup2))
  return (res) ","[""check_smaller((5, 6, 7), (4, 5, 6)) == True"", ""check_smaller((1, 2, 3), (2, 3, 4)) == False"", ""check_smaller((10, 20, 30), (9, 19, 29)) == True""]","@startuml

title Check if each element of second tuple is smaller than its corresponding index in first tuple

start
:Check if input is valid;
if (input is valid) then (yes)
  :Check if second tuple is smaller than first tuple;
  if (second tuple is smaller than first tuple) then (yes)
    :Return True;
  else (no)
    :Return False;
  endif
else (no)
  :Raise ValueError;
endif

@enduml"
566,"def sum_digits(n):
""""""
Write a function to get the sum of a non-negative integer.
Your code should satisfy these tests:
sum_digits(123) == 6
sum_digits(4567) == 22
sum_digits(99999) == 45
""""""
",sum_digits,"def check(candidate):

    assert candidate(345)==12
    assert candidate(12)==3
    assert candidate(97)==16
","def sum_digits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sum_digits(int(n / 10))","[""sum_digits(123) == 6"", ""sum_digits(4567) == 22"", ""sum_digits(99999) == 45""]","@startuml

title Sum of Digits

start
:Start;

if (n > 0) then (yes)
  :Get sum of digits;
  :Return sum;
else (no)
  :Return 0;
endif

@enduml"
836,"def max_sub_array_sum(a,size):
""""""
Write a function to find length of the subarray having maximum sum.
Your code should satisfy these tests:
max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 5
max_sub_array_sum([1, 2, 3, -2, 5], 5) == 5
max_sub_array_sum([-1, -2, -3, -4], 4) == 1
""""""
",max_sub_array_sum,"def check(candidate):

    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5
    assert candidate([1, -2, 1, 1, -2, 1],6) == 2
    assert candidate([-1, -2, 3, 4, 5],5) == 3
","from sys import maxsize
def max_sub_array_sum(a,size):
	max_so_far = -maxsize - 1
	max_ending_here = 0
	start = 0
	end = 0
	s = 0
	for i in range(0,size):
		max_ending_here += a[i]
		if max_so_far < max_ending_here:
			max_so_far = max_ending_here
			start = s
			end = i
		if max_ending_here < 0:
			max_ending_here = 0
			s = i+1
	return (end - start + 1)","[""max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 5"", ""max_sub_array_sum([1, 2, 3, -2, 5], 5) == 5"", ""max_sub_array_sum([-1, -2, -3, -4], 4) == 1""]","@startuml

title max_sub_array_sum

start
:max_sub_array_sum(a, size);

if (size <= 0) then (no
:return 0;
)

if (size == 1) then (single
:return a[0];
)

if (size == 2) then (pair
:return a[0] + a[1];
)

:max_sum = 0;
:start = 0;
:end = 0;

for (i = 0; i < size; i++) do (
  :sum = 0;
  for (j = i; j < size; j++) do (
    :sum = sum + a[j];
    if (sum > max_sum) then (
      :max_sum = sum;
      :start = i;
      :end = j;
    )
  )
)

:return end - start + 1;

@enduml"
234,"def volume_cube(l):
""""""
Write a function to find the volume of a cube.
Your code should satisfy these tests:
volume_cube(2) == 8
volume_cube(5) == 125
volume_cube(10) == 1000
""""""
",volume_cube,"def check(candidate):

    assert candidate(3)==27
    assert candidate(2)==8
    assert candidate(5)==125
","def volume_cube(l):
  volume = l * l * l
  return volume","[""volume_cube(2) == 8"", ""volume_cube(5) == 125"", ""volume_cube(10) == 1000""]","@startuml

title ""Volume of a Cube""

start
:Input length;

if (length <= 0) then (no)
:Invalid input;
:End;

else (yes)
:Calculate volume;
:Volume = length^3;

if (volume <= 0) then (no)
:Invalid volume;
:End;

else (yes)
:Valid volume;
:Return volume;

end if;

end if;

stop

@enduml"
239,"def get_total_number_of_sequences(m,n):
""""""
Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.
Your code should satisfy these tests:
get_total_number_of_sequences(5, 2) == 6
get_total_number_of_sequences(3, 3) == 0
get_total_number_of_sequences(4, 1) == 4
get_total_number_of_sequences(0, 5) == 0
get_total_number_of_sequences(10, 3) == 20
""""""
",get_total_number_of_sequences,"def check(candidate):

    assert candidate(10, 4) == 4
    assert candidate(5, 2) == 6
    assert candidate(16, 3) == 84
","def get_total_number_of_sequences(m,n):
	T=[[0 for i in range(n+1)] for i in range(m+1)]
	for i in range(m+1):
		for j in range(n+1):
			if i==0 or j==0:
				T[i][j]=0
			elif i<j:
				T[i][j]=0
			elif j==1:
				T[i][j]=i
			else:
				T[i][j]=T[i-1][j]+T[i//2][j-1]
	return T[m][n]","[""get_total_number_of_sequences(5, 2) == 6"", ""get_total_number_of_sequences(3, 3) == 0"", ""get_total_number_of_sequences(4, 1) == 4"", ""get_total_number_of_sequences(0, 5) == 0"", ""get_total_number_of_sequences(10, 3) == 20""]","@startuml
start
:Input Validation;
:if m <= 0 or n <= 0;
stop
:endif;
:Set result = 0;
:Set dp = [0]*(n+1);
:dp[0] = 1;
:dp[1] = 2;
:for i in range 2 to n;
:for j in range 2*i to m+1;
:dp[j] += dp[j-i];
:result += dp[j];
:endfor;
:endfor;
:return result;
stop
@enduml"
796,"def return_sum(dict):
""""""
Write function to find the sum of all items in the given dictionary.
Your code should satisfy these tests:
return_sum({'a': 10, 'b': 20, 'c': 30}) == 60
return_sum({'x': 100, 'y': 200}) == 300
return_sum({'m': 5, 'n': 15, 'o': 25, 'p': 35}) == 80
""""""
",return_sum,"def check(candidate):

    assert candidate({'a': 100, 'b':200, 'c':300}) == 600
    assert candidate({'a': 25, 'b':18, 'c':45}) == 88
    assert candidate({'a': 36, 'b':39, 'c':49}) == 124
","def return_sum(dict):
  sum = 0
  for i in dict.values():
    sum = sum + i
  return sum","[""return_sum({'a': 10, 'b': 20, 'c': 30}) == 60"", ""return_sum({'x': 100, 'y': 200}) == 300"", ""return_sum({'m': 5, 'n': 15, 'o': 25, 'p': 35}) == 80""]","@startuml

start
:return_sum(dict);

if (dict is empty) then (no)
:return 0;

else (yes)
:sum = 0;

for each item in dict do
:sum = sum + item.value;

end for

:return sum;

@enduml"
327,"def check_isosceles(x,y,z):
""""""
Write a function to print check if the triangle is isosceles or not.
Your code should satisfy these tests:
check_isosceles(5, 5, 8) == True
check_isosceles(7, 3, 7) == True
check_isosceles(4, 6, 4) == True
""""""
",check_isosceles,"def check(candidate):

    assert candidate(6,8,12)==False
    assert candidate(6,6,12)==True
    assert candidate(6,16,20)==False
","def check_isosceles(x,y,z):
  if x==y or y==z or z==x:
	   return True
  else:
     return False","[""check_isosceles(5, 5, 8) == True"", ""check_isosceles(7, 3, 7) == True"", ""check_isosceles(4, 6, 4) == True""]","@startuml

start
:check_isosceles(x,y,z);

if (x == y) then (yes)
:return True;
else (no)
:return False;

if (y == z) then (yes)
:return True;
else (no)
:return False;

if (z == x) then (yes)
:return True;
else (no)
:return False;

stop

@enduml"
255,"def combinations_colors(l, n):
""""""
Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.
Your code should satisfy these tests:
combinations_colors([1, 2], 2) == [(1, 1), (1, 2), (2, 2)]
combinations_colors(['red', 'blue', 'green'], 3) == [('red', 'red', 'red'), ('red', 'red', 'blue'), ('red', 'red', 'green'), ('red', 'blue', 'blue'), ('red', 'blue', 'green'), ('red', 'green', 'green'), ('blue', 'blue', 'blue'), ('blue', 'blue', 'green'), ('blue', 'green', 'green'), ('green', 'green', 'green')]
combinations_colors([4, 5, 6], 2) == [(4, 4), (4, 5), (4, 6), (5, 5), (5, 6), (6, 6)]
combinations_colors(['A', 'B', 'C', 'D'], 2) == [('A', 'A'), ('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'B'), ('B', 'C'), ('B', 'D'), ('C', 'C'), ('C', 'D'), ('D', 'D')]
combinations_colors(['x', 'y', 'z'], 1) == [('x',), ('y',), ('z',)]
""""""
",combinations_colors,"def check(candidate):

    assert candidate( [""Red"",""Green"",""Blue""],1)==[('Red',), ('Green',), ('Blue',)]
    assert candidate( [""Red"",""Green"",""Blue""],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]
    assert candidate( [""Red"",""Green"",""Blue""],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]
","from itertools import combinations_with_replacement
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))
","[""combinations_colors([1, 2], 2) == [(1, 1), (1, 2), (2, 2)]"", ""combinations_colors(['red', 'blue', 'green'], 3) == [('red', 'red', 'red'), ('red', 'red', 'blue'), ('red', 'red', 'green'), ('red', 'blue', 'blue'), ('red', 'blue', 'green'), ('red', 'green', 'green'), ('blue', 'blue', 'blue'), ('blue', 'blue', 'green'), ('blue', 'green', 'green'), ('green', 'green', 'green')]"", ""combinations_colors([4, 5, 6], 2) == [(4, 4), (4, 5), (4, 6), (5, 5), (5, 6), (6, 6)]"", ""combinations_colors(['A', 'B', 'C', 'D'], 2) == [('A', 'A'), ('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'B'), ('B', 'C'), ('B', 'D'), ('C', 'C'), ('C', 'D'), ('D', 'D')]"", ""combinations_colors(['x', 'y', 'z'], 1) == [('x',), ('y',), ('z',)]""]","@startuml
start
:Input: l, n;
:Validate: l is not empty and n is positive integer;
if (n > length(l)) then (
    :Error: Invalid input;
    stop
)
elseif (n == 0) then (
    :Return: [];
    stop
)
endif
:Initialize: result = [];
:Initialize: temp = [];
:Initialize: index = 0;
:Call: helper(l, n, index, temp, result);
:Return: result;
stop

:Function: helper(l, n, index, temp, result) {
    if (n == 0) then (
        :Append: temp to result;
        return
    )
    for (i = index to length(l)) {
        :Append: l[i] to temp;
        :Call: helper(l, n - 1, i, temp, result);
        :Remove: last element from temp;
    }
}
@enduml"
776,"def count_vowels(test_str):
""""""
Write a function to count those characters which have vowels as their neighbors in the given string.
Your code should satisfy these tests:
count_vowels(""hello"") == 3
count_vowels(""world"") == 2
count_vowels(""python"") == 2
count_vowels(""programming"") == 6
count_vowels(""aeiou"") == 0
""""""
",count_vowels,"def check(candidate):

    assert candidate('bestinstareels') == 7
    assert candidate('partofthejourneyistheend') == 12
    assert candidate('amazonprime') == 5
","def count_vowels(test_str):
  res = 0
  vow_list = ['a', 'e', 'i', 'o', 'u']
  for idx in range(1, len(test_str) - 1):
    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):
      res += 1
  if test_str[0] not in vow_list and test_str[1] in vow_list:
    res += 1
  if test_str[-1] not in vow_list and test_str[-2] in vow_list:
    res += 1
  return (res) ","[""count_vowels(\""hello\"") == 3"", ""count_vowels(\""world\"") == 2"", ""count_vowels(\""python\"") == 2"", ""count_vowels(\""programming\"") == 6"", ""count_vowels(\""aeiou\"") == 0""]","@startuml
start
:input string;
if (string is empty?) then (yes)
    :return 0;
    stop
endif
:initialize vowels list;
:initialize count to 0;
:initialize previous character to None;
:initialize current character to None;
:initialize next character to string[0];
:initialize index to 0;
while (index < length of string)
    :previous character = current character;
    :current character = next character;
    if (index + 1 < length of string) then (yes)
        :next character = string[index + 1];
    else (no)
        :next character = None;
    endif
    if (current character is in vowels list and previous character is in vowels list) then (yes)
        :count = count + 1;
    endif
    :index = index + 1;
endwhile
:return count;
stop
@enduml"
489,"def frequency_Of_Largest(n,arr):
""""""
Write a python function to find the frequency of the largest value in a given array.
Your code should satisfy these tests:
frequency_Of_Largest(5, [1, 3, 3, 2, 3]) == 3
frequency_Of_Largest(4, [10, 10, 10, 10]) == 4
frequency_Of_Largest(6, [5, 4, 3, 2, 1, 5]) == 2
""""""
",frequency_Of_Largest,"def check(candidate):

    assert candidate(5,[1,2,3,4,4]) == 2
    assert candidate(3,[5,6,5]) == 1
    assert candidate(4,[2,7,7,7]) == 3
","def frequency_Of_Largest(n,arr):
    mn = arr[0]
    freq = 1
    for i in range(1,n):
        if (arr[i] >mn):
            mn = arr[i]
            freq = 1
        elif (arr[i] == mn):
            freq += 1
    return freq ","[""frequency_Of_Largest(5, [1, 3, 3, 2, 3]) == 3"", ""frequency_Of_Largest(4, [10, 10, 10, 10]) == 4"", ""frequency_Of_Largest(6, [5, 4, 3, 2, 1, 5]) == 2""]","@startuml
start

:Input parameters: n (size of array), arr (array of integers);
if (Is n <= 0 or arr is empty?) then (yes)
    :Return 0 (invalid input);
    stop
else (no)
    :Initialize max_value = arr[0];
    :Initialize frequency = 1;
    :Initialize index = 1;

    while (index < n) is (yes)
        if (arr[index] > max_value) then (yes)
            :Update max_value = arr[index];
            :Reset frequency = 1;
        else (no)
            if (arr[index] == max_value) then (yes)
                :Increment frequency by 1;
            else (no)
                :Do nothing;
            endif
        endif
        :Increment index by 1;
    endwhile

    :Return frequency;
    stop
endif

@enduml"
840,"def Check_Solution(a,b,c):
""""""
Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.
Your code should satisfy these tests:
Check_Solution(1, 2, 3) == 'No'
Check_Solution(5, 5, 10) == 'No'
Check_Solution(0, 0, 0) == 'Yes'
Check_Solution(7, 3, 11) == 'No'
Check_Solution(-1, 1, 0) == 'No'
""""""
",Check_Solution,"def check(candidate):

    assert candidate(2,0,-1) == ""Yes""
    assert candidate(1,-5,6) == ""No""
    assert candidate(2,0,2) == ""Yes""
","def Check_Solution(a,b,c):
    if b == 0:
        return (""Yes"")
    else:
        return (""No"")  ","[""Check_Solution(1, 2, 3) == 'No'"", ""Check_Solution(5, 5, 10) == 'No'"", ""Check_Solution(0, 0, 0) == 'Yes'"", ""Check_Solution(7, 3, 11) == 'No'"", ""Check_Solution(-1, 1, 0) == 'No'""]","@startuml
start
:Check if a, b, c are not zero;
if (a = 0 and b = 0 and c = 0) then
    :Return 'Yes';
elseif (a = 0 and (b^2 < 4*c or b = 0)) then
    :Return 'No';
else
    :Calculate the discriminant;
    if (discriminant < 0) then
        :Return 'No';
    elseif (discriminant = 0) then
        :Return 'No';
    else
        :Calculate the roots;
        if (root1 = -root2) then
            :Return 'Yes';
        else
            :Return 'No';
        endif
    endif
endif
stop
@enduml"
861,"def anagram_lambda(texts,str):
""""""
Write a function to find all anagrams of a string in a given list of strings using lambda function.
""""""
",anagram_lambda,"def check(candidate):

    assert candidate([""bcda"", ""abce"", ""cbda"", ""cbea"", ""adcb""],""abcd"")==['bcda', 'cbda', 'adcb']
    assert candidate([""recitals"","" python""], ""articles"" )==[""recitals""]
    assert candidate(["" keep"","" abcdef"","" xyz""],"" peek"")==["" keep""]
","from collections import Counter
def anagram_lambda(texts,str):
  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts))
  return result","[""anagram_lambda([\""listen\"", \""silent\"", \""enlist\"", \""google\""], \""inlets\"") == [\""listen\"", \""silent\"", \""enlist\""]"", ""anagram_lambda([\""abc\"", \""bca\"", \""cab\"", \""xyz\""], \""bac\"") == [\""abc\"", \""bca\"", \""cab\""]"", ""anagram_lambda([\""hello\"", \""world\"", \""dlrow\"", \""owrld\""], \""world\"") == [\""world\"", \""dlrow\"", \""owrld\""]""]","@startuml

title anagram_lambda

start
:texts: list of strings;
:str: string;

if (len(texts) == 0) then (no
:texts:
)

else (

:texts:

for each text in texts:

if (text == str) then (

:text:

)

else (

:text:

)

end for

)

end if

stop

@enduml"
290,"def max_length(list1):
""""""
Write a function to find the list of lists with maximum length.
Your code should satisfy these tests:
max_length([""apple"", ""banana"", ""cherry""]) == (6, 'cherry')
max_length([""dog"", ""elephant"", ""cat""]) == (8, 'elephant')
max_length([""sun"", ""moon"", ""star""]) == (4, 'sun')
""""""
",max_length,"def check(candidate):

    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])
    assert candidate([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])
    assert candidate([[5], [15,20,25]])==(3, [15,20,25])
","def max_length(list1):
    max_length = max(len(x) for x in  list1 )
    max_list = max((x) for x in   list1)
    return(max_length, max_list)","[""max_length([\""apple\"", \""banana\"", \""cherry\""]) == (6, 'cherry')"", ""max_length([\""dog\"", \""elephant\"", \""cat\""]) == (8, 'elephant')"", ""max_length([\""sun\"", \""moon\"", \""star\""]) == (4, 'sun')""]","@startuml
start

:Input list of strings (list1);
if (Is list1 empty?) then (yes)
    :Return None;
    stop
else (no)
    :Initialize max_len = 0;
    :Initialize max_str = """";
    :Iterate through each string in list1;
    :Calculate length of current string (current_len);
    if (current_len > max_len?) then (yes)
        :Update max_len = current_len;
        :Update max_str = current string;
    else (no)
        :Continue to next string;
    endif
    :Check if all strings are processed?;
    if (Yes) then (yes)
        :Return tuple (max_len, max_str);
        stop
    else (no)
        :Continue iteration;
    endif
endif
@enduml"
200,"def position_max(list1):
""""""
Write a function to find all index positions of the maximum values in a given list.
Your code should satisfy these tests:
position_max([1, 3, 7, 7, 2, 5]) == [2, 3]
position_max([10, 20, 20, 10, 30, 30, 30]) == [4, 5, 6]
position_max([-5, -1, -3, -1, -4]) == [1, 3]
""""""
",position_max,"def check(candidate):

    assert candidate([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]
    assert candidate([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]
    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12])==[11]
","def position_max(list1):
    max_val = max(list1)
    max_result = [i for i, j in enumerate(list1) if j == max_val]
    return max_result","[""position_max([1, 3, 7, 7, 2, 5]) == [2, 3]"", ""position_max([10, 20, 20, 10, 30, 30, 30]) == [4, 5, 6]"", ""position_max([-5, -1, -3, -1, -4]) == [1, 3]""]","@startuml
start

:Input list1;
if (Is list1 empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize max_value = list1[0];
    :Initialize result_indices = [];
    :Initialize i = 0;

    while (i < length of list1) is (yes)
        if (list1[i] > max_value) then (yes)
            :Update max_value = list1[i];
            :Clear result_indices;
            :Add i to result_indices;
        else if (list1[i] == max_value) then (yes)
            :Add i to result_indices;
        else (no)
            :Do nothing;
        endif
        :Increment i by 1;
    endwhile

    :Return result_indices;
    stop
endif

@enduml"
193,"def remove_tuple(test_tup):
""""""
Write a function to remove the duplicates from the given tuple.
Your code should satisfy these tests:
remove_tuple((1, 2, 3, 1, 2)) == (1, 2, 3)
remove_tuple(('a', 'b', 'a', 'c', 'c')) == ('b', 'c', 'a')
remove_tuple(('apple', 'banana', 'apple', 'orange')) == ('orange', 'banana', 'apple')
remove_tuple((4, 4, 4, 4, 4)) == (4,)
remove_tuple(('hello', 'world')) == ('world', 'hello')
""""""
",remove_tuple,"def check(candidate):

    assert candidate((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)
    assert candidate((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)
    assert candidate((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)
","def remove_tuple(test_tup):
  res = tuple(set(test_tup))
  return (res) ","[""remove_tuple((1, 2, 3, 1, 2)) == (1, 2, 3)"", ""remove_tuple(('a', 'b', 'a', 'c', 'c')) == ('b', 'c', 'a')"", ""remove_tuple(('apple', 'banana', 'apple', 'orange')) == ('orange', 'banana', 'apple')"", ""remove_tuple((4, 4, 4, 4, 4)) == (4,)"", ""remove_tuple(('hello', 'world')) == ('world', 'hello')""]","@startuml
start

:Input Tuple (test_tup);
if (Is test_tup a valid tuple?) then (yes)
    :Initialize an empty set (unique_elements);
    :Initialize an empty list (result);
    :Iterate over each element in test_tup;
    while (Has next element?) is (yes)
        :Get next element (current_element);
        if (Is current_element in unique_elements?) then (no)
            :Add current_element to unique_elements;
            :Append current_element to result;
        else (yes)
            :Skip duplicate element;
        endif
    endwhile
    :Convert result list to a tuple (final_tuple);
    :Return final_tuple;
else (no)
    :Raise TypeError(""Input must be a tuple"");
endif

stop
@enduml"
596,"def tuple_size(tuple_list):
""""""
Write a function to find the size of the given tuple.
Your code should satisfy these tests:
tuple_size((1, 2, 3)) == 64
tuple_size(('a', 'b', 'c', 'd')) == 72
tuple_size((1.1, 2.2, 3.3, 4.4, 5.5)) == 80
""""""
",tuple_size,"def check(candidate):

    assert candidate((""A"", 1, ""B"", 2, ""C"", 3) ) == sys.getsizeof((""A"", 1, ""B"", 2, ""C"", 3))
    assert candidate((1, ""Raju"", 2, ""Nikhil"", 3, ""Deepanshu"") ) == sys.getsizeof((1, ""Raju"", 2, ""Nikhil"", 3, ""Deepanshu""))
    assert candidate(((1, ""Lion""), ( 2, ""Tiger""), (3, ""Fox""), (4, ""Wolf""))  ) == sys.getsizeof(((1, ""Lion""), ( 2, ""Tiger""), (3, ""Fox""), (4, ""Wolf"")))
","import sys
def tuple_size(tuple_list):
  return (sys.getsizeof(tuple_list)) ","[""tuple_size((1, 2, 3)) == 64"", ""tuple_size(('a', 'b', 'c', 'd')) == 72"", ""tuple_size((1.1, 2.2, 3.3, 4.4, 5.5)) == 80""]","@startuml
start
:Define function tuple_size;
:Input: tuple;
:Output: size of tuple in bytes;
:Calculate size of tuple using sys.getsizeof;
:Return size;
stop
@enduml"
779,"def unique_sublists(list1):
""""""
Write a function to count the number of unique lists within a list.
Your code should satisfy these tests:
unique_sublists([[1, 2], [3, 4], [1, 2]]) == {(1, 2): 2, (3, 4): 1}
unique_sublists([[5, 6], [7, 8], [5, 6], [7, 8]]) == {(5, 6): 2, (7, 8): 2}
unique_sublists([[9, 10], [11, 12], [13, 14], [9, 10], [11, 12]]) == {(9, 10): 2, (11, 12): 2, (13, 14): 1}
""""""
",unique_sublists,"def check(candidate):

    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}
    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}
    assert candidate([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}
","def unique_sublists(list1):
    result ={}
    for l in list1:
        result.setdefault(tuple(l), list()).append(1)
    for a, b in result.items():
        result[a] = sum(b)
    return result","[""unique_sublists([[1, 2], [3, 4], [1, 2]]) == {(1, 2): 2, (3, 4): 1}"", ""unique_sublists([[5, 6], [7, 8], [5, 6], [7, 8]]) == {(5, 6): 2, (7, 8): 2}"", ""unique_sublists([[9, 10], [11, 12], [13, 14], [9, 10], [11, 12]]) == {(9, 10): 2, (11, 12): 2, (13, 14): 1}""]","@startuml
start

:Input list of sublists (list1);
:Initialize an empty dictionary (count_dict);

while (Iterate through each sublist in list1) is (Yes)
    :Convert the sublist to a tuple (sublist_tuple);
    if (sublist_tuple exists in count_dict?) then (Yes)
        :Increment the count for sublist_tuple in count_dict;
    else (No)
        :Add sublist_tuple to count_dict with count = 1;
    endif
endwhile (No)

:Return count_dict as the result;

stop
@enduml"
283,"def validate(n):
""""""
Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.
Your code should satisfy these tests:
validate(1234567890) == False
validate(1122334455) == False
validate(9876543210) == False
""""""
",validate,"def check(candidate):

    assert candidate(1234) == True
    assert candidate(51241) == False
    assert candidate(321) == True
","def validate(n):
    for i in range(10):
        temp = n;
        count = 0;
        while (temp):
            if (temp % 10 == i):
                count+=1;
            if (count > i):
                return False
            temp //= 10;
    return True","[""validate(1234567890) == False"", ""validate(1122334455) == False"", ""validate(9876543210) == False""]","@startuml

start
:validate(n);

if (n < 0) then (false)
:return false;

end if

if (n == 0) then (true)
:return true;

end if

while (n > 0)
:digit = n % 10;
:frequency = 0;

while (n > 0)
:if (n % 10 == digit) then (true)
:frequency++;

end if

n = n / 10;

end while

if (frequency > digit) then (false)
:return false;

end if

end while

:return true;

@enduml"
845,"def find_Digits(n):
""""""
Write a python function to count the number of digits in factorial of a given number.
Your code should satisfy these tests:
find_Digits(5) == 3
find_Digits(10) == 7
find_Digits(100) == 158
""""""
",find_Digits,"def check(candidate):

    assert candidate(7) == 4
    assert candidate(5) == 3
    assert candidate(4) == 2
","import math
def find_Digits(n):
    if (n < 0):
        return 0;
    if (n <= 1):
        return 1;
    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0));
    return math.floor(x) + 1; ","[""find_Digits(5) == 3"", ""find_Digits(10) == 7"", ""find_Digits(100) == 158""]","@startuml

title ""Find Digits in Factorial""

start
:Input n;

if (n <= 0) then (false)
:Invalid input;
:Return 0;
else (true)
:Compute factorial;
:Count digits;
:Return count;

@enduml"
144,"def sum_Pairs(arr,n):
""""""
Write a python function to find the sum of absolute differences in all pairs of the given array.
Your code should satisfy these tests:
sum_Pairs([1, 2, 3, 4], 4) == 10
sum_Pairs([5, 10, 15], 3) == 20
sum_Pairs([0, 0, 0, 0], 4) == 0
""""""
",sum_Pairs,"def check(candidate):

    assert candidate([1,8,9,15,16],5) == 74
    assert candidate([1,2,3,4],4) == 10
    assert candidate([1,2,3,4,5,7,9,11,14],9) == 188
","def sum_Pairs(arr,n):
    sum = 0
    for i in range(n - 1,-1,-1):
        sum += i*arr[i] - (n-1-i) * arr[i]
    return sum","[""sum_Pairs([1, 2, 3, 4], 4) == 10"", ""sum_Pairs([5, 10, 15], 3) == 20"", ""sum_Pairs([0, 0, 0, 0], 4) == 0""]","@startuml
start

:Input array (arr) and integer (n);
if (Is arr empty or n <= 1?) then (yes)
    :Return 0;
    stop
else (no)
    :Initialize sum = 0;
    :Initialize i = 0;
    while (i < n) is (yes)
        :Initialize j = i + 1;
        while (j < n) is (yes)
            :Calculate absolute difference between arr[i] and arr[j];
            :Add the difference to sum;
            :Increment j by 1;
        endwhile (no)
        :Increment i by 1;
    endwhile (no)
    :Return sum;
    stop
endif

@enduml"
854,"def raw_heap(rawheap):
""""""
Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.
Your code should satisfy these tests:
raw_heap([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 9, 4, 6, 5, 5, 5]
raw_heap([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]
raw_heap([7, 2, 5, 3, 8, 4]) == [2, 3, 4, 7, 8, 5]
""""""
",raw_heap,"def check(candidate):

    assert candidate([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]
    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]
    assert candidate([4, 5, 6, 2])==[2, 4, 6, 5]
","import heapq as hq
def raw_heap(rawheap):
  hq.heapify(rawheap)
  return rawheap","[""raw_heap([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 9, 4, 6, 5, 5, 5]"", ""raw_heap([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]"", ""raw_heap([7, 2, 5, 3, 8, 4]) == [2, 3, 4, 7, 8, 5]""]","@startuml
start
:Input rawheap;
if (rawheap is empty?) then (yes)
  :Return rawheap;
  stop
endif
:Convert rawheap to heap;
:Return heap;
stop
@enduml"
444,"def trim_tuple(test_list, K):
""""""
Write a function to trim each tuple by k in the given tuple list.
Your code should satisfy these tests:
trim_tuple([(1, 2, 3, 4, 5)], 1) == '[(2, 3, 4)]'
trim_tuple([(1, 2, 3, 4, 5, 6, 7)], 2) == '[(3, 4, 5)]'
trim_tuple([(10, 20, 30, 40, 50, 60)], 2) == '[(30, 40)]'
trim_tuple([(5, 4, 3, 2, 1)], 1) == '[(4, 3, 2)]'
trim_tuple([(8, 6, 4, 2)], 1) == '[(6, 4)]'
""""""
",trim_tuple,"def check(candidate):

    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'
    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'
    assert candidate([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'
","def trim_tuple(test_list, K):
  res = []
  for ele in test_list:
    N = len(ele)
    res.append(tuple(list(ele)[K: N - K]))
  return (str(res)) ","[""trim_tuple([(1, 2, 3, 4, 5)], 1) == '[(2, 3, 4)]'"", ""trim_tuple([(1, 2, 3, 4, 5, 6, 7)], 2) == '[(3, 4, 5)]'"", ""trim_tuple([(10, 20, 30, 40, 50, 60)], 2) == '[(30, 40)]'"", ""trim_tuple([(5, 4, 3, 2, 1)], 1) == '[(4, 3, 2)]'"", ""trim_tuple([(8, 6, 4, 2)], 1) == '[(6, 4)]'""]","@startuml
start

:Input: test_list (list of tuples) and K (integer);
:Initialize an empty list 'result';

if (Is test_list empty?) then (yes)
  :Return empty list;
  stop
else (no)
  :Iterate over each tuple in test_list;
  :Calculate start index = K;
  :Calculate end index = len(tuple) - K;
  if (start index >= end index) then (yes)
    :Skip this tuple (invalid trimming);
  else (no)
    :Trim the tuple from start index to end index;
    :Add trimmed tuple to 'result';
  endif
endif

:Convert 'result' to string representation;
:Return the string representation of 'result';

stop
@enduml"
60,"def max_len_sub( arr, n):
""""""
Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.
Your code should satisfy these tests:
max_len_sub([1, 2, 3, 4, 5], 5) == 5
max_len_sub([1, 1, 1, 1, 1], 5) == 5
max_len_sub([1, 3, 5, 7, 9], 5) == 1
max_len_sub([1, 2, 2, 3, 3, 4, 4, 5], 8) == 8
max_len_sub([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 10) == 10
""""""
",max_len_sub,"def check(candidate):

    assert candidate([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5
    assert candidate([-2, -1, 5, -1, 4, 0, 3], 7) == 4
    assert candidate([9, 11, 13, 15, 18], 5) == 1
","def max_len_sub( arr, n):
	mls=[]
	max = 0
	for i in range(n):
		mls.append(1)
	for i in range(n):
		for j in range(i):
			if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1):
				mls[i] = mls[j] + 1
	for i in range(n):
		if (max < mls[i]):
			max = mls[i]
	return max","[""max_len_sub([1, 2, 3, 4, 5], 5) == 5"", ""max_len_sub([1, 1, 1, 1, 1], 5) == 5"", ""max_len_sub([1, 3, 5, 7, 9], 5) == 1"", ""max_len_sub([1, 2, 2, 3, 3, 4, 4, 5], 8) == 8"", ""max_len_sub([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 10) == 10""]","@startuml
start
:Input Validation;
if (arr is empty or n <= 0) then (true)
    :Return 0;
    stop
endif
:Initialize max_len as 1;
:Initialize cur_len as 1;
:Initialize prev as arr[0];
:Iterate over arr from index 1 to n;
if (arr[i] - prev > 0) then (true)
    :cur_len = cur_len + 1;
    :prev = arr[i];
else
    :max_len = max(max_len, cur_len);
    :cur_len = 2;
    :prev = arr[i];
endif
:max_len = max(max_len, cur_len);
:Return max_len;
stop
@enduml"
688,"def len_complex(a,b):
""""""
Write a function to get the length of a complex number.
Your code should satisfy these tests:
len_complex(3, 4) == 5.0
len_complex(-1, -1) == 1.4142135623730951
len_complex(0, 5) == 5.0
""""""
",len_complex,"def check(candidate):

    assert candidate(3,4)==5.0
    assert candidate(9,10)==13.45362404707371
    assert candidate(7,9)==11.40175425099138
","import cmath
def len_complex(a,b):
  cn=complex(a,b)
  length=abs(cn)
  return length","[""len_complex(3, 4) == 5.0"", ""len_complex(-1, -1) == 1.4142135623730951"", ""len_complex(0, 5) == 5.0""]","@startuml

title len_complex

start
:Calculate the length of a complex number;

if (a == 0 && b == 0) then (no)
:Return 0;
else (yes)
:Calculate the length using the formula;
:Return the length;

@enduml"
208,"def is_decimal(num):
""""""
Write a function to check the given decimal with a precision of 2 by using regex.
Your code should satisfy these tests:
is_decimal(""123"") == True
is_decimal(""123.45"") == True
is_decimal(""123.4"") == True
""""""
",is_decimal,"def check(candidate):

    assert candidate('123.11') == True
    assert candidate('0.21') == True
    assert candidate('123.1214') == False
","import re
def is_decimal(num):
  num_fetch = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
  result = num_fetch.search(num)
  return bool(result)","[""is_decimal(\""123\"") == True"", ""is_decimal(\""123.45\"") == True"", ""is_decimal(\""123.4\"") == True""]","@startuml
start

:Input a number as a string;
if (Is the input a string?) then (yes)
    if (Does the input match the regex pattern?) then (yes)
        :Return True;
    else (no)
        :Return False;
    endif
else (no)
    :Return False;
endif

stop
@enduml"
531,"def min_coins(coins, m, V):
""""""
Write a function to find minimum number of coins that make a given value.
Your code should satisfy these tests:
min_coins([1, 2, 5], 3, 11) == 3
min_coins([1, 5, 10, 25], 4, 30) == 2
min_coins([2, 3, 6, 7], 4, 13) == 2
""""""
",min_coins,"def check(candidate):

    assert candidate([9, 6, 5, 1] ,4,11)==2
    assert candidate([4,5,6,7,8,9],6,9)==1
    assert candidate([1, 2, 3],3,4)==2
","import sys
def min_coins(coins, m, V):
    if (V == 0):
        return 0
    res = sys.maxsize
    for i in range(0, m):
        if (coins[i] <= V):
            sub_res = min_coins(coins, m, V-coins[i])
            if (sub_res != sys.maxsize and sub_res + 1 < res):
                res = sub_res + 1
    return res ","[""min_coins([1, 2, 5], 3, 11) == 3"", ""min_coins([1, 5, 10, 25], 4, 30) == 2"", ""min_coins([2, 3, 6, 7], 4, 13) == 2""]","@startuml

start
:min_coins(coins, m, V);

if (m == 0) then (no coins)
:return 0;
else (at least one coin)

if (V == 0) then (no value)
:return 0;
else (at least one value)

if (coins[m-1] <= V) then (coin fits)
:return 1 + min_coins(coins, m-1, V-coins[m-1]);
else (coin doesn't fit)
:return min_coins(coins, m-1, V);

end if

end if

end if

@enduml"
460,"def Extract(lst):
""""""
Write a python function to get the first element of each sublist.
Your code should satisfy these tests:
Extract([['apple', 1], ['banana', 2], ['cherry', 3]]) == ['apple', 'banana', 'cherry']
Extract([['dog', 5], ['cat', 4]]) == ['dog', 'cat']
Extract([['red', 10], ['blue', 20], ['green', 30], ['yellow', 40]]) == ['red', 'blue', 'green', 'yellow']
""""""
",Extract,"def check(candidate):

    assert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]
    assert candidate([[1,2,3],[4, 5]]) == [1,4]
    assert candidate([[9,8,1],[1,2]]) == [9,1]
","def Extract(lst):
    return [item[0] for item in lst] ","[""Extract([['apple', 1], ['banana', 2], ['cherry', 3]]) == ['apple', 'banana', 'cherry']"", ""Extract([['dog', 5], ['cat', 4]]) == ['dog', 'cat']"", ""Extract([['red', 10], ['blue', 20], ['green', 30], ['yellow', 40]]) == ['red', 'blue', 'green', 'yellow']""]","@startuml

start
:Extract(lst);

if (lst is empty) then (no)
:return [];

else (yes)
:result = [];

foreach (sublist in lst) do
:result.append(sublist[0]);

end foreach

:return result;

@enduml"
422,"def find_Average_Of_Cube(n):
""""""
Write a python function to find the average of cubes of first n natural numbers.
Your code should satisfy these tests:
find_Average_Of_Cube(3) == 12.0
find_Average_Of_Cube(5) == 45.0
find_Average_Of_Cube(10) == 302.5
""""""
",find_Average_Of_Cube,"def check(candidate):

    assert candidate(2) == 4.5
    assert candidate(3) == 12
    assert candidate(1) == 1
","def find_Average_Of_Cube(n):
    sum = 0
    for i in range(1, n + 1):
        sum += i * i * i
    return round(sum / n, 6) ","[""find_Average_Of_Cube(3) == 12.0"", ""find_Average_Of_Cube(5) == 45.0"", ""find_Average_Of_Cube(10) == 302.5""]","@startuml

start
:find_Average_Of_Cube(n);
if (n <= 0) then (no
:return 0;
else (yes)
:sum = 0;
:for i in range(1, n+1):
:    sum += i**3;
:end for
:return sum / n;
endif

@enduml"
723,"def count_same_pair(nums1, nums2):
""""""
Write a function to count the same pair in two given lists using map function.
Your code should satisfy these tests:
count_same_pair([1, 2, 3], [1, 4, 3]) == 2
count_same_pair(['a', 'b', 'c'], ['a', 'b', 'd']) == 2
count_same_pair([True, False, True], [True, True, False]) == 1
""""""
",count_same_pair,"def check(candidate):

    assert candidate([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4
    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11
    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1
","from operator import eq
def count_same_pair(nums1, nums2):
    result = sum(map(eq, nums1, nums2))
    return result","[""count_same_pair([1, 2, 3], [1, 4, 3]) == 2"", ""count_same_pair(['a', 'b', 'c'], ['a', 'b', 'd']) == 2"", ""count_same_pair([True, False, True], [True, True, False]) == 1""]","@startuml

title count_same_pair

start
:count_same_pair(nums1, nums2);

if (nums1 is not empty and nums2 is not empty) then (yes)
  :initialize count to 0;
  :loop through nums1;
    :if (nums1[i] == nums2[i]) then (yes)
      :increment count;
    :end if;
  :end loop;
  :return count;
else (no)
  :return 0;
endif;

@enduml"
954,"def profit_amount(actual_cost,sale_amount):
""""""
Write a function that gives profit amount if the given amount has profit else return none.
Your code should satisfy these tests:
profit_amount(100, 80) == 20
profit_amount(50, 70) == None
profit_amount(120, 100) == 20
profit_amount(90, 75) == 15
profit_amount(200, 150) == 50
""""""
",profit_amount,"def check(candidate):

    assert candidate(1500,1200)==300
    assert candidate(100,200)==None
    assert candidate(2000,5000)==None
","def profit_amount(actual_cost,sale_amount):
 if(actual_cost > sale_amount):
    amount = actual_cost - sale_amount
    return amount
 else:
    return None","[""profit_amount(100, 80) == 20"", ""profit_amount(50, 70) == None"", ""profit_amount(120, 100) == 20"", ""profit_amount(90, 75) == 15"", ""profit_amount(200, 150) == 50""]","@startuml

start
:Start;

:Actual Cost;
:Sale Amount;

if (actual_cost > sale_amount) then (yes)
  :Profit Amount;
  :Return Profit;
else (no)
  :Return None;
endif

:End;

@enduml"
176,"def perimeter_triangle(a,b,c):
""""""
Write a function to find the perimeter of a triangle.
Your code should satisfy these tests:
perimeter_triangle(3, 4, 5) == 12
perimeter_triangle(10, 10, 10) == 30
perimeter_triangle(7, 24, 25) == 56
""""""
",perimeter_triangle,"def check(candidate):

    assert candidate(10,20,30)==60
    assert candidate(3,4,5)==12
    assert candidate(25,35,45)==105
","def perimeter_triangle(a,b,c):
  perimeter=a+b+c
  return perimeter","[""perimeter_triangle(3, 4, 5) == 12"", ""perimeter_triangle(10, 10, 10) == 30"", ""perimeter_triangle(7, 24, 25) == 56""]","@startuml

title Perimeter of a Triangle

start
:Perimeter of a Triangle;

if (a + b > c) and (a + c > b) and (b + c > a) then (
  :Perimeter = a + b + c;
  :return Perimeter;
) else (
  :Perimeter = -1;
  :return Perimeter;
)

@enduml"
296,"def get_Inv_Count(arr,n):
""""""
Write a python function to count inversions in an array.
Your code should satisfy these tests:
get_Inv_Count([1, 20, 6, 4, 5], 5) == 5
get_Inv_Count([10, 20, 30, 40, 50], 5) == 0
get_Inv_Count([50, 40, 30, 20, 10], 5) == 10
""""""
",get_Inv_Count,"def check(candidate):

    assert candidate([1,20,6,4,5],5) == 5
    assert candidate([1,2,1],3) == 1
    assert candidate([1,2,5,6,1],5) == 3
","def get_Inv_Count(arr,n):
    inv_count = 0
    for i in range(n):
        for j in range(i + 1,n):
            if (arr[i] > arr[j]):
                inv_count += 1
    return inv_count ","[""get_Inv_Count([1, 20, 6, 4, 5], 5) == 5"", ""get_Inv_Count([10, 20, 30, 40, 50], 5) == 0"", ""get_Inv_Count([50, 40, 30, 20, 10], 5) == 10""]","@startuml
start

:Input array (arr) and size (n);
if (Is arr empty or n <= 0?) then (yes)
    :Return 0;
    stop
else (no)
    :Initialize inversion count (inv_count = 0);
    :Initialize outer loop index (i = 0);
    while (i < n - 1?) is (yes)
        :Initialize inner loop index (j = i + 1);
        while (j < n?) is (yes)
            if (arr[i] > arr[j]?) then (yes)
                :Increment inversion count (inv_count += 1);
            else (no)
                :No action;
            endif
            :Increment inner loop index (j += 1);
        endwhile (no)
        :Increment outer loop index (i += 1);
    endwhile (no)
    :Return inversion count (inv_count);
    stop
endif

@enduml"
791,"def remove_nested(test_tup):
""""""
Write a function to remove the nested record from the given tuple.
Your code should satisfy these tests:
remove_nested((1, (2, 3), 4, (5, 6))) == (1, 4)
remove_nested((('a', 'b'), 'c', ('d',), 'e')) == ('c', 'e')
remove_nested((1, 2, 3, 4)) == (1, 2, 3, 4)
""""""
",remove_nested,"def check(candidate):

    assert candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)
    assert candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)
    assert candidate((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)
","def remove_nested(test_tup):
  res = tuple()
  for count, ele in enumerate(test_tup):
    if not isinstance(ele, tuple):
      res = res + (ele, )
  return (res) ","[""remove_nested((1, (2, 3), 4, (5, 6))) == (1, 4)"", ""remove_nested((('a', 'b'), 'c', ('d',), 'e')) == ('c', 'e')"", ""remove_nested((1, 2, 3, 4)) == (1, 2, 3, 4)""]","@startuml
start

:Input Tuple (test_tup);
if (Is test_tup a valid tuple?) then (yes)
    :Initialize an empty list (result);
    :Iterate through each element in test_tup;
    if (Is the current element a tuple?) then (yes)
        :Skip the nested tuple;
    else (no)
        :Add the element to the result list;
    endif
    :Convert the result list back to a tuple;
    :Output the resulting tuple;
else (no)
    :Raise an error or handle invalid input;
endif

stop
@enduml"
967,"def check(string):
""""""
Write a python function to accept the strings which contains all vowels.
Your code should satisfy these tests:
check(""Education"") == ""accepted""
check(""Python"") == ""not accepted""
check(""AeIoU"") == ""accepted""
check(""Quick brown fox"") == ""not accepted""
check(""Artificial Intelligence"") == ""accepted""
""""""
",check,"def check(candidate):

    assert candidate(""SEEquoiaL"") == 'accepted'
    assert candidate('program') == ""not accepted""
    assert candidate('fine') == ""not accepted""
","def check(string):
  if len(set(string).intersection(""AEIOUaeiou""))>=5:
    return ('accepted')
  else:
    return (""not accepted"") ","[""check(\""Education\"") == \""accepted\"""", ""check(\""Python\"") == \""not accepted\"""", ""check(\""AeIoU\"") == \""accepted\"""", ""check(\""Quick brown fox\"") == \""not accepted\"""", ""check(\""Artificial Intelligence\"") == \""accepted\""""]","@startuml
start
:input_string;
if (contains_all_vowels(input_string)) then (yes)
    :""accepted"";
else (no)
    :""not accepted"";
endif
stop
@enduml"
253,"def count_integer(list1):
""""""
Write a python function to count integers from a given list.
Your code should satisfy these tests:
count_integer([1, 2, 'a', 3.5, 4]) == 3
count_integer(['hello', 100, 200, 300, 'world']) == 3
count_integer([True, False, 1, 2, 3]) == 5
""""""
",count_integer,"def check(candidate):

    assert candidate([1,2,'abc',1.2]) == 2
    assert candidate([1,2,3]) == 3
    assert candidate([1,1.2,4,5.1]) == 2
","def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr","[""count_integer([1, 2, 'a', 3.5, 4]) == 3"", ""count_integer(['hello', 100, 200, 300, 'world']) == 3"", ""count_integer([True, False, 1, 2, 3]) == 5""]","@startuml
start

:Input list1;
if (Is list1 a valid list?) then (yes)
    :Initialize counter = 0;
    :Initialize index = 0;
    while (index < length of list1) is (yes)
        if (Is list1[index] an integer?) then (yes)
            :Increment counter by 1;
        else (no)
            :Check if list1[index] is a boolean;
            if (Is list1[index] a boolean?) then (yes)
                :Increment counter by 1;
            else (no)
                :Do nothing;
            endif
        endif
        :Increment index by 1;
    endwhile
    :Return counter;
else (no)
    :Return ""Invalid input: Not a list"";
endif

stop
@enduml"
636,"def Check_Solution(a,b,c):
""""""
Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.
Your code should satisfy these tests:
Check_Solution(1, 2, 1) == ""Yes""
Check_Solution(5, 5, 5) == ""Yes""
Check_Solution(10, 20, 30) == ""No""
Check_Solution(0, 0, 0) == ""Yes""
Check_Solution(-1, -2, -1) == ""Yes""
""""""
",Check_Solution,"def check(candidate):

    assert candidate(2,0,2) == ""Yes""
    assert candidate(2,-5,2) == ""Yes""
    assert candidate(1,2,3) == ""No""
","def Check_Solution(a,b,c):
    if (a == c):
        return (""Yes"");
    else:
        return (""No""); ","[""Check_Solution(1, 2, 1) == \""Yes\"""", ""Check_Solution(5, 5, 5) == \""Yes\"""", ""Check_Solution(10, 20, 30) == \""No\"""", ""Check_Solution(0, 0, 0) == \""Yes\"""", ""Check_Solution(-1, -2, -1) == \""Yes\""""]","@startuml
start
:Input a, b, c;
:Validate inputs;
if ((a == 0) and (b == 0) and (c == 0)) then
    :Return ""Yes"";
elseif ((a == 0) and (b != 0)) then
    :Return ""No"";
else
    :Calculate discriminant (b^2 - 4ac);
    if ((b^2 - 4*a*c) < 0) then
        :Return ""No"";
    else
        :Calculate roots;
        :Check if roots are reciprocal;
        if ((root1 == 1/root2) or (root2 == 1/root1)) then
            :Return ""Yes"";
        else
            :Return ""No"";
        endif
    endif
endif
stop
@enduml"
637,"def noprofit_noloss(actual_cost,sale_amount):
""""""
Write a function to check whether the given amount has no profit and no loss
Your code should satisfy these tests:
noprofit_noloss(100, 100) == True
noprofit_noloss(200, 150) == False
noprofit_noloss(150, 200) == False
""""""
",noprofit_noloss,"def check(candidate):

    assert candidate(1500,1200)==False
    assert candidate(100,100)==True
    assert candidate(2000,5000)==False
","def noprofit_noloss(actual_cost,sale_amount):
  if(sale_amount == actual_cost):
    return True
  else:
    return False","[""noprofit_noloss(100, 100) == True"", ""noprofit_noloss(200, 150) == False"", ""noprofit_noloss(150, 200) == False""]","@startuml

title noprofit_noloss

start
:actual_cost: double
:sale_amount: double

if (actual_cost == sale_amount) then (true)
  :return true
else
  if (actual_cost > sale_amount) then (false)
    :return false
  else
    :return false
  endif
endif

@enduml"
808,"def check_K(test_tup, K):
""""""
Write a function to check if the given tuples contain the k or not.
Your code should satisfy these tests:
check_K((1, 2, 3, 4, 5), 3) == True
check_K(('a', 'b', 'c'), 'd') == False
check_K((10, 20, 30, 40), 25) == False
""""""
",check_K,"def check(candidate):

    assert candidate((10, 4, 5, 6, 8), 6) == True
    assert candidate((1, 2, 3, 4, 5, 6), 7) == False
    assert candidate((7, 8, 9, 44, 11, 12), 11) == True
","def check_K(test_tup, K):
  res = False
  for ele in test_tup:
    if ele == K:
      res = True
      break
  return (res) ","[""check_K((1, 2, 3, 4, 5), 3) == True"", ""check_K(('a', 'b', 'c'), 'd') == False"", ""check_K((10, 20, 30, 40), 25) == False""]","@startuml
start

:Input tuple (test_tup) and element (K);
:Initialize index (i) to 0;

while (i < length of test_tup?) is (yes)
    if (test_tup[i] == K?) then (yes)
        :Return True;
        stop
    else (no)
        :Increment index (i = i + 1);
    endif
endwhile

:Return False;
stop

@enduml"
141,"def pancake_sort(nums):
""""""
Write a function to sort a list of elements using pancake sort.
Your code should satisfy these tests:
pancake_sort([3, 6, 1, 3, 8, 4, 5]) == [1, 3, 3, 4, 5, 6, 8]
pancake_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
pancake_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
""""""
",pancake_sort,"def check(candidate):

    assert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]
    assert candidate([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]
    assert candidate([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]
","def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums","[""pancake_sort([3, 6, 1, 3, 8, 4, 5]) == [1, 3, 3, 4, 5, 6, 8]"", ""pancake_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"", ""pancake_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]""]","@startuml

title Pancake Sort

start
:Start;

if (nums.length > 1) then (yes)
  :Sort the list;
  repeat (nums.length - 1) times
    :Find the largest element in the list;
    :Swap the largest element with the last element in the list;
    :Reverse the list from the beginning to the largest element;
    :Reverse the list from the largest element to the end;
  end repeat
else (no)
  :The list is already sorted;
endif

stop
:End;

@enduml"
190,"def count_Intgral_Points(x1,y1,x2,y2):
""""""
Write a python function to count the number of integral co-ordinates that lie inside a square.
Your code should satisfy these tests:
count_Intgral_Points(0, 0, 5, 5) == 16
count_Intgral_Points(2, 3, 8, 10) == 30
count_Intgral_Points(-3, -4, 2, 8) == 44
count_Intgral_Points(1, 1, 3, 3) == 1
count_Intgral_Points(10, 10, 15, 15) == 16
""""""
",count_Intgral_Points,"def check(candidate):

    assert candidate(1,1,4,4) == 4
    assert candidate(1,2,1,2) == 1
    assert candidate(4,2,6,4) == 1
","def count_Intgral_Points(x1,y1,x2,y2):
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ","[""count_Intgral_Points(0, 0, 5, 5) == 16"", ""count_Intgral_Points(2, 3, 8, 10) == 30"", ""count_Intgral_Points(-3, -4, 2, 8) == 44"", ""count_Intgral_Points(1, 1, 3, 3) == 1"", ""count_Intgral_Points(10, 10, 15, 15) == 16""]","@startuml
start
:Input Validation;
if (x1 <= x2 and y1 <= y2) then
    :Calculate Width;
    (x2 - x1)
    :Calculate Height;
    (y2 - y1)
    :Calculate Total Points;
    (width * height)
    :Count Integral Points;
    (total_points - (width + height - 1))
else
    :Invalid Input;
    stop
endif
:Return Count;
stop
@enduml"
611,"def max_of_nth(test_list, N):
""""""
Write a function to find the maximum of nth column from the given tuple list.
Your code should satisfy these tests:
max_of_nth([[10, 20, 30], [40, 50, 60], [70, 80, 90]], 1) == 80
max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 9
max_of_nth([[5, 15, 25], [35, 45, 55], [65, 75, 85]], 0) == 65
""""""
",max_of_nth,"def check(candidate):

    assert candidate([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19
    assert candidate([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10
    assert candidate([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11
","def max_of_nth(test_list, N):
  res = max([sub[N] for sub in test_list])
  return (res) ","[""max_of_nth([[10, 20, 30], [40, 50, 60], [70, 80, 90]], 1) == 80"", ""max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 9"", ""max_of_nth([[5, 15, 25], [35, 45, 55], [65, 75, 85]], 0) == 65""]","@startuml
start

:Input test_list and N;
:Initialize max_value as None;

if (Is test_list empty?) then (yes)
  :Return None;
else (no)
  :Iterate over each row in test_list;
  :Check if N is a valid index for the current row;
  if (N is valid?) then (yes)
    :Compare current row[N] with max_value;
    if (current row[N] > max_value or max_value is None) then (yes)
      :Update max_value with current row[N];
    else (no)
      :Continue to next row;
    endif
  else (no)
    :Continue to next row;
  endif
  :Repeat until all rows are processed;
endif

:Return max_value;
stop
@enduml"
692,"def last_Two_Digits(N):
""""""
Write a python function to find the last two digits in factorial of a given number.
Your code should satisfy these tests:
last_Two_Digits(5) == 20
last_Two_Digits(9) == 80
last_Two_Digits(1) == 1
""""""
",last_Two_Digits,"def check(candidate):

    assert candidate(7) == 40
    assert candidate(5) == 20
    assert candidate(2) == 2
","def last_Two_Digits(N):
    if (N >= 10):
        return
    fac = 1
    for i in range(1,N + 1):
        fac = (fac * i) % 100
    return (fac) ","[""last_Two_Digits(5) == 20"", ""last_Two_Digits(9) == 80"", ""last_Two_Digits(1) == 1""]","@startuml
start

:Input number N;
if (Is N a valid integer and N >= 0?) then (yes)
    if (N == 0 or N == 1) then (yes)
        :Set result = 1;
    else (no)
        :Initialize factorial = 1;
        :Initialize i = 2;
        while (i <= N) is (yes)
            :factorial = (factorial * i) % 100;
            :i = i + 1;
        endwhile (no)
        :Set result = factorial;
    endif
else (no)
    :Set result = ""Invalid input"";
endif

:Output result;
stop
@enduml"
472,"def check_Consecutive(l):
""""""
Write a python function to check whether the given list contains consecutive numbers or not.
Your code should satisfy these tests:
check_Consecutive([1, 2, 3, 4, 5]) == True
check_Consecutive([5, 3, 4, 1, 2]) == True
check_Consecutive([1, 2, 4, 5]) == False
""""""
",check_Consecutive,"def check(candidate):

    assert candidate([1,2,3,4,5]) == True
    assert candidate([1,2,3,5,6]) == False
    assert candidate([1,2,1]) == False
","def check_Consecutive(l):
    return sorted(l) == list(range(min(l),max(l)+1)) ","[""check_Consecutive([1, 2, 3, 4, 5]) == True"", ""check_Consecutive([5, 3, 4, 1, 2]) == True"", ""check_Consecutive([1, 2, 4, 5]) == False""]","@startuml
start

:Input list l;
if (Is l empty?) then (yes)
    :Return False;
    stop
else (no)
    :Sort the list l;
    :Check for duplicates in l;
    if (Are there duplicates?) then (yes)
        :Return False;
        stop
    else (no)
        :Calculate the difference between the first and last element;
        :Check if the difference equals (length of l - 1);
        if (Difference == length of l - 1) then (yes)
            :Return True;
            stop
        else (no)
            :Return False;
            stop
        endif
    endif
endif

@enduml"
358,"def moddiv_list(nums1,nums2):
""""""
Write a function to find modulo division of two lists using map and lambda function.
Your code should satisfy these tests:
moddiv_list([10, 20, 30], [3, 5, 7]) == [1, 0, 2]
moddiv_list([15, 25, 35], [4, 6, 8]) == [3, 1, 3]
moddiv_list([100, 200, 300], [9, 11, 13]) == [1, 2, 1]
""""""
",moddiv_list,"def check(candidate):

    assert candidate([4,5,6],[1, 2, 3])==[0, 1, 0]
    assert candidate([3,2],[1,4])==[0, 2]
    assert candidate([90,120],[50,70])==[40, 50]
","def moddiv_list(nums1,nums2):
  result = map(lambda x, y: x % y, nums1, nums2)
  return list(result)","[""moddiv_list([10, 20, 30], [3, 5, 7]) == [1, 0, 2]"", ""moddiv_list([15, 25, 35], [4, 6, 8]) == [3, 1, 3]"", ""moddiv_list([100, 200, 300], [9, 11, 13]) == [1, 2, 1]""]","@startuml

title moddiv_list

start
:moddiv_list(nums1, nums2);

if (nums1.length != nums2.length) then (no)
  :raise ValueError(""Lists must be of equal length"");
else (yes)
  :result = [];
  :for i in range(nums1.length):
    :result.append(nums1[i] % nums2[i]);
  :return result;
endif

@enduml"
396,"def check_char(string):
""""""
Write a function to check whether the given string starts and ends with the same character or not using regex.
Your code should satisfy these tests:
check_char('a') == 'Valid'
check_char('abcda') == 'Valid'
check_char('xyz') == 'Invalid'
""""""
",check_char,"def check(candidate):

    assert candidate(""abba"") == ""Valid""
    assert candidate(""a"") == ""Valid""
    assert candidate(""abcd"") == ""Invalid""
","import re
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string):
	if(re.search(regex, string)):
		return ""Valid""
	else:
		return ""Invalid"" ","[""check_char('a') == 'Valid'"", ""check_char('abcda') == 'Valid'"", ""check_char('xyz') == 'Invalid'""]","@startuml

start
:check_char(string);

if (string.startswith(string[0]) and string.endswith(string[0])) then (true)
:return ""Valid"";
else (false)
:return ""Invalid"";

@enduml"
862,"def n_common_words(text,n):
""""""
Write a function to find the occurrences of n most common words in a given text.
Your code should satisfy these tests:
n_common_words(""hello world hello"", 1) == [('hello', 2)]
n_common_words(""test test test example example"", 2) == [('test', 3), ('example', 2)]
n_common_words(""one two three four five six seven eight nine ten"", 5) == [('one', 1), ('two', 1), ('three', 1), ('four', 1), ('five', 1)]
""""""
",n_common_words,"def check(candidate):

    assert candidate(""python is a programming language"",1)==[('python', 1)]
    assert candidate(""python is a programming language"",1)==[('python', 1)]
    assert candidate(""python is a programming language"",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]
","from collections import Counter
import re
def n_common_words(text,n):
  words = re.findall('\w+',text)
  n_common_words= Counter(words).most_common(n)
  return list(n_common_words)","[""n_common_words(\""hello world hello\"", 1) == [('hello', 2)]"", ""n_common_words(\""test test test example example\"", 2) == [('test', 3), ('example', 2)]"", ""n_common_words(\""one two three four five six seven eight nine ten\"", 5) == [('one', 1), ('two', 1), ('three', 1), ('four', 1), ('five', 1)]""]","@startuml

start
:n_common_words(text,n);

if (n <= 0) then (no. of common words <= 0)
:Invalid input;
:Return empty list;
end if

if (text is empty) then (no. of common words <= 0)
:Invalid input;
:Return empty list;
end if

:Split text into words;
:Create a dictionary to store word frequencies;

foreach word in words
:Increment frequency of word in dictionary;
end foreach

:Sort dictionary by frequency;
:Return top n words with highest frequencies;

stop

@enduml"
762,"def check_monthnumber_number(monthnum3):
""""""
Write a function to check whether the given month number contains 30 days or not.
Your code should satisfy these tests:
check_monthnumber_number(4) == True
check_monthnumber_number(7) == False
check_monthnumber_number(11) == True
""""""
",check_monthnumber_number,"def check(candidate):

    assert candidate(6)==True
    assert candidate(2)==False
    assert candidate(12)==False
","def check_monthnumber_number(monthnum3):
  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):
    return True
  else:
    return False","[""check_monthnumber_number(4) == True"", ""check_monthnumber_number(7) == False"", ""check_monthnumber_number(11) == True""]","@startuml
start

:Input month number (monthnum3);
if (monthnum3 is an integer?) then (yes)
    if (monthnum3 >= 1 and monthnum3 <= 12?) then (yes)
        if (monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11?) then (yes)
            :Return True;
        else (no)
            :Return False;
        endif
    else (no)
        :Return ""Invalid month number. Month number must be between 1 and 12."";
    endif
else (no)
    :Return ""Invalid input. Please provide an integer."";
endif

stop
@enduml"
67,"def bell_number(n):
""""""
Write a function to find the number of ways to partition a set of bell numbers.
Your code should satisfy these tests:
bell_number(0) == 1
bell_number(1) == 1
bell_number(5) == 52
""""""
",bell_number,"def check(candidate):

    assert candidate(2)==2
    assert candidate(10)==115975
    assert candidate(56)==6775685320645824322581483068371419745979053216268760300
","def bell_number(n):
    bell = [[0 for i in range(n+1)] for j in range(n+1)]
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1):
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]
    return bell[n][0] ","[""bell_number(0) == 1"", ""bell_number(1) == 1"", ""bell_number(5) == 52""]","@startuml
start
:n <= 0?;
if (yes) then
  :return 1;
else
  :n <= 1?;
  if (yes) then
    :return 1;
  else
    :calculate bell_number(n);
    :return bell_number(n);
  endif
endif
stop
@enduml"
5,"def count_ways(n):
""""""
Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.
Your code should satisfy these tests:
count_ways(2) == 3
count_ways(3) == 0
count_ways(4) == 11
""""""
",count_ways,"def check(candidate):

    assert candidate(2) == 3
    assert candidate(8) == 153
    assert candidate(12) == 2131
","def count_ways(n):
	A = [0] * (n + 1)
	B = [0] * (n + 1)
	A[0] = 1
	A[1] = 0
	B[0] = 0
	B[1] = 1
	for i in range(2, n+1):
		A[i] = A[i - 2] + 2 * B[i - 1]
		B[i] = A[i - 1] + B[i - 2]
	return A[n] ","[""count_ways(2) == 3"", ""count_ways(3) == 0"", ""count_ways(4) == 11""]","@startuml
start

:Input n (size of the board);
if (n is an integer and n >= 1?) then (yes)
    if (n == 2) then (yes)
        :Return 3;
    else (no)
        if (n == 3) then (yes)
            :Return 0;
        else (no)
            if (n == 4) then (yes)
                :Return 11;
            else (no)
                if (n is even?) then (yes)
                    :Calculate number of ways using dynamic programming;
                    :Return the result;
                else (no)
                    :Return 0 (no valid ways for odd n > 3);
                endif
            endif
        endif
    endif
else (no)
    :Return ""Invalid input: n must be a positive integer"";
endif

stop
@enduml"
368,"def repeat_tuples(test_tup, N):
""""""
Write a function to repeat the given tuple n times.
Your code should satisfy these tests:
repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))
repeat_tuples(('a', 'b', 'c'), 2) == (('a', 'b', 'c'), ('a', 'b', 'c'))
repeat_tuples((True, False), 4) == ((True, False), (True, False), (True, False), (True, False))
""""""
",repeat_tuples,"def check(candidate):

    assert candidate((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))
    assert candidate((1, 2), 3) == ((1, 2), (1, 2), (1, 2))
    assert candidate((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))
","def repeat_tuples(test_tup, N):
  res = ((test_tup, ) * N)
  return (res) ","[""repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))"", ""repeat_tuples(('a', 'b', 'c'), 2) == (('a', 'b', 'c'), ('a', 'b', 'c'))"", ""repeat_tuples((True, False), 4) == ((True, False), (True, False), (True, False), (True, False))""]","@startuml

repeat_tuples(test_tup, N)

:test_tup = (1, 2)
:N = 3

:repeat_tuples(test_tup, N)

:test_tup = ('a', 'b', 'c')
:N = 2

:repeat_tuples(test_tup, N)

:test_tup = (True, False)
:N = 4

:repeat_tuples(test_tup, N)

@enduml"
427,"def change_date_format(dt):
""""""
Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.
Your code should satisfy these tests:
change_date_format(""2023-10-05"") == ""05-10-2023""
change_date_format(""1999-1-1"") == ""1-1-1999""
change_date_format(""2000-12-31"") == ""31-12-2000""
""""""
",change_date_format,"def check(candidate):

    assert candidate(""2026-01-02"") == '02-01-2026'
    assert candidate(""2020-11-13"") == '13-11-2020'
    assert candidate(""2021-04-26"") == '26-04-2021'
","import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)","[""change_date_format(\""2023-10-05\"") == \""05-10-2023\"""", ""change_date_format(\""1999-1-1\"") == \""1-1-1999\"""", ""change_date_format(\""2000-12-31\"") == \""31-12-2000\""""]","@startuml
start
:Input date;
:Validate input;
if (Is input in correct format?) then (Yes)
  :Split input into year, month, day;
  :Reorder and format day, month, year;
else (No)
  :Return error message;
endif
:Return formatted date;
stop
@enduml"
848,"def area_trapezium(base1,base2,height):
""""""
Write a function to find the area of a trapezium.
Your code should satisfy these tests:
area_trapezium(10, 20, 15) == 225.0
area_trapezium(5, 5, 10) == 50.0
area_trapezium(8, 12, 7) == 70.0
""""""
",area_trapezium,"def check(candidate):

    assert candidate(6,9,4)==30
    assert candidate(10,20,30)==450
    assert candidate(15,25,35)==700
","def area_trapezium(base1,base2,height):
 area = 0.5 * (base1 + base2) * height
 return area","[""area_trapezium(10, 20, 15) == 225.0"", ""area_trapezium(5, 5, 10) == 50.0"", ""area_trapezium(8, 12, 7) == 70.0""]","@startuml

title area_trapezium

start
:area_trapezium(base1, base2, height);

if (base1 < 0 or base2 < 0 or height < 0) then (no)
:Invalid input;
:return -1;
else (yes)
:Valid input;

:Calculate area;
:area = (base1 + base2) * height / 2;

:return area;

@enduml"
225,"def find_Min(arr,low,high):
""""""
Write a python function to find the minimum element in a sorted and rotated array.
Your code should satisfy these tests:
find_Min([4, 5, 6, 7, 0, 1, 2], 0, 6) == 0
find_Min([11, 13, 15, 17], 0, 3) == 11
find_Min([2, 2, 2, 0, 1], 0, 4) == 0
""""""
",find_Min,"def check(candidate):

    assert candidate([1,2,3,4,5],0,4) == 1
    assert candidate([4,6,8],0,2) == 4
    assert candidate([2,3,5,7,9],0,4) == 2
","def find_Min(arr,low,high):
    while (low < high):
        mid = low + (high - low) // 2;
        if (arr[mid] == arr[high]):
            high -= 1;
        elif (arr[mid] > arr[high]):
            low = mid + 1;
        else:
            high = mid;
    return arr[high]; ","[""find_Min([4, 5, 6, 7, 0, 1, 2], 0, 6) == 0"", ""find_Min([11, 13, 15, 17], 0, 3) == 11"", ""find_Min([2, 2, 2, 0, 1], 0, 4) == 0""]","@startuml
start
:Input: arr, low, high;
:Output: min_element;
if (arr is None or len(arr) == 0) then (
    :Return error message;
    stop
)
if (low > high) then (
    :Return error message;
    stop
)
if (low == high) then (
    min_element = arr[low];
    :Return min_element;
    stop
)
:mid = (low + high) // 2;
if (arr[low] <= arr[mid]) then (
    if (arr[mid] <= arr[high]) then (
        min_element = arr[low];
    ) else (
        min_element = find_Min(arr, mid+1, high);
    )
) else (
    min_element = find_Min(arr, low, mid);
)
:Return min_element;
stop
@enduml"
888,"def substract_elements(test_tup1, test_tup2):
""""""
Write a function to substract the elements of the given nested tuples.
""""""
",substract_elements,"def check(candidate):

    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))
    assert candidate(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))
    assert candidate(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))
","def substract_elements(test_tup1, test_tup2):
  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","[""substract_elements(((10, 20, 30), (40, 50, 60)), ((1, 2, 3), (4, 5, 6))) == ((9, 18, 27), (36, 45, 54))"", ""substract_elements(((5, 15), (25, 35)), ((1, 1), (2, 2))) == ((4, 14), (23, 33))"", ""substract_elements(((100, 200), (300, 400)), ((50, 100), (150, 200))) == ((50, 100), (150, 200))""]","@startuml

start
:substract_elements(test_tup1, test_tup2);

if (test_tup1 is a tuple) then (yes)
  :subtract_elements_recursive(test_tup1, test_tup2);
else (no)
  :return test_tup1;
end if;

if (test_tup2 is a tuple) then (yes)
  :subtract_elements_recursive(test_tup1, test_tup2);
else (no)
  :return test_tup2;
end if;

if (test_tup1 and test_tup2 are both tuples) then (yes)
  :subtract_elements_recursive(test_tup1, test_tup2);
else (no)
  :return test_tup1;
end if;

:return test_tup1;

@enduml"
511,"def find_Min_Sum(num):
""""""
Write a python function to find minimum sum of factors of a given number.
Your code should satisfy these tests:
find_Min_Sum(12) == 7.0
find_Min_Sum(28) == 11.0
find_Min_Sum(44) == 15.0
""""""
",find_Min_Sum,"def check(candidate):

    assert candidate(12) == 7
    assert candidate(105) == 15
    assert candidate(2) == 2
","def find_Min_Sum(num):
    sum = 0
    i = 2
    while(i * i <= num):
        while(num % i == 0):
            sum += i
            num /= i
        i += 1
    sum += num
    return sum","[""find_Min_Sum(12) == 7.0"", ""find_Min_Sum(28) == 11.0"", ""find_Min_Sum(44) == 15.0""]","@startuml
start
:Input num;
if (num > 0) then (true)
  :sum = 0;
  :for i in range(1, num + 1);
  if (num mod i == 0) then (true)
    :sum += i;
  endif
  endfor
  :return sum;
endif
stop
@enduml"
647,"def split_upperstring(text):
""""""
Write a function to split a string at uppercase letters.
Your code should satisfy these tests:
split_upperstring(""HelloWorld"") == ['Hello', 'World']
split_upperstring(""PythonIsFun"") == ['Python', 'Is', 'Fun']
split_upperstring(""SplitCamelCase"") == ['Split', 'Camel', 'Case']
""""""
",split_upperstring,"def check(candidate):

    assert candidate(""PythonProgramLanguage"")==['Python','Program','Language']
    assert candidate(""PythonProgram"")==['Python','Program']
    assert candidate(""ProgrammingLanguage"")==['Programming','Language']
","import re
def split_upperstring(text):
 return (re.findall('[A-Z][^A-Z]*', text))","[""split_upperstring(\""HelloWorld\"") == ['Hello', 'World']"", ""split_upperstring(\""PythonIsFun\"") == ['Python', 'Is', 'Fun']"", ""split_upperstring(\""SplitCamelCase\"") == ['Split', 'Camel', 'Case']""]","@startuml
start
:input text;
if (is text empty?) then (return empty list)
elseif (is text not a string?) then (return error message)
endif
:initialize result = []
:initialize temp = """"
:initialize i = 0
:initialize length = len(text)
while (i < length)
    :if text[i] is uppercase?
    if (yes) then
        :if temp is not empty?
        if (yes) then
            :append temp to result
            :reset temp
        endif
        :append text[i] to temp
    else
        :append text[i] to temp
    endif
    :increment i
    :if i == length?
    if (yes) then
        :append temp to result
    endif
    endif
endwhile
:return result
stop
@enduml"
286,"def max_sub_array_sum_repeated(a, n, k):
""""""
Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.
Your code should satisfy these tests:
max_sub_array_sum_repeated([1, -2, 3, 4, -1, 2], 6, 2) == 15
max_sub_array_sum_repeated([-1, -2, -3, -4], 4, 3) == -1
max_sub_array_sum_repeated([5, -1, 5], 3, 3) == 27
""""""
",max_sub_array_sum_repeated,"def check(candidate):

    assert candidate([10, 20, -30, -1], 4, 3) == 30
    assert candidate([-1, 10, 20], 3, 2) == 59
    assert candidate([-1, -2, -3], 3, 3) == -1
","def max_sub_array_sum_repeated(a, n, k):
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k):
		max_ending_here = max_ending_here + a[i%n]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
		if (max_ending_here < 0):
			max_ending_here = 0
	return max_so_far","[""max_sub_array_sum_repeated([1, -2, 3, 4, -1, 2], 6, 2) == 15"", ""max_sub_array_sum_repeated([-1, -2, -3, -4], 4, 3) == -1"", ""max_sub_array_sum_repeated([5, -1, 5], 3, 3) == 27""]","@startuml
start
:Input Validation;
:Check if a is not None and n > 0 and k > 0;
if (not isinstance(a, list) or not isinstance(n, int) or not isinstance(k, int)) then (else)
    :Raise ValueError;
    stop
endif
:Repeat a k times;
:Calculate the sum of the repeated array;
:Initialize max_sum to 0;
:Initialize current_sum to 0;
:Initialize max_end_here to 0;
:Initialize current_start to 0;
:Initialize current_end to 0;
:Initialize s_start to 0;
:Initialize max_start to 0;
:Initialize max_end to 0;
:Initialize max_so_far to -infinity;
:Initialize flag to False;
:Iterate over the array;
:Update current_sum;
:Update max_end_here;
:Update current_end;
:If current_sum > max_sum then;
    :Update max_sum;
    :Update max_start;
    :Update max_end;
    :Set flag to True;
endif
:If current_sum < 0 then;
    :Set current_sum to 0;
    :Set current_start to i + 1;
endif
:If max_so_far < max_sum then;
    :Update max_so_far;
    :Set max_start_so_far to max_start;
    :Set max_end_so_far to max_end;
endif
:If flag then;
    :Set flag to False;
    :Update max_sum;
    :Update max_start;
    :Update max_end;
endif
:Return max_sum;
stop
@enduml"
468,"def max_product(arr, n ):
""""""
Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.
Your code should satisfy these tests:
max_product([1, 2, 3, 4, 5], 5) == 120
max_product([5, 4, 3, 2, 1], 5) == 5
max_product([10, 3, 2, 5, 7, 8], 6) == 840
max_product([6, 7, 10, 9, 8], 5) == 420
max_product([1, 3, 5, 7, 9, 11], 6) == 10395
""""""
",max_product,"def check(candidate):

    assert candidate([3, 100, 4, 5, 150, 6], 6) == 45000
    assert candidate([4, 42, 55, 68, 80], 5) == 50265600
    assert candidate([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000
","def max_product(arr, n ):
	mpis =[0] * (n)
	for i in range(n):
		mpis[i] = arr[i]
	for i in range(1, n):
		for j in range(i):
			if (arr[i] > arr[j] and
					mpis[i] < (mpis[j] * arr[i])):
						mpis[i] = mpis[j] * arr[i]
	return max(mpis)","[""max_product([1, 2, 3, 4, 5], 5) == 120"", ""max_product([5, 4, 3, 2, 1], 5) == 5"", ""max_product([10, 3, 2, 5, 7, 8], 6) == 840"", ""max_product([6, 7, 10, 9, 8], 5) == 420"", ""max_product([1, 3, 5, 7, 9, 11], 6) == 10395""]","@startuml
start
:Input array and size;
:Validate input;
if (size <= 0) then (return 0)
:Initialize max_product to 1;
:Initialize current_product to 1;
:Initialize max_subsequence to 1;
:Initialize current_subsequence to 1;
repeat
  :Update current_product and max_product;
  :Update current_subsequence and max_subsequence;
until (end of array)
:Return max_product;
stop
@enduml"
774,"def check_email(email):
""""""
Write a function to check if the string is a valid email address or not using regex.
Your code should satisfy these tests:
check_email(""example@test.com"") == ""Valid Email""
check_email(""user.name@domain.co"") == ""Valid Email""
check_email(""user@domain.com"") == ""Valid Email""
""""""
",check_email,"def check(candidate):

    assert candidate(""ankitrai326@gmail.com"") == 'Valid Email'
    assert candidate(""my.ownsite@ourearth.org"") == 'Valid Email'
    assert candidate(""ankitaoie326.com"") == 'Invalid Email'
","import re
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
def check_email(email):
	if(re.search(regex,email)):
		return (""Valid Email"")
	else:
		return (""Invalid Email"") ","[""check_email(\""example@test.com\"") == \""Valid Email\"""", ""check_email(\""user.name@domain.co\"") == \""Valid Email\"""", ""check_email(\""user@domain.com\"") == \""Valid Email\""""]","@startuml

title Check Email

start
:Check Email;

if (email is not valid) then (false)
  :Invalid Email;
  stop
else (true)
  :Valid Email;
  stop

@enduml"
879,"def text_match(text):
""""""
Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.
Your code should satisfy these tests:
text_match(""alphabet"") == 'Not matched!'
text_match(""abc"") == 'Not matched!'
text_match(""cab"") == 'Found a match!'
text_match(""ab"") == 'Found a match!'
text_match(""acdb"") == 'Found a match!'
""""""
",text_match,"def check(candidate):

    assert candidate(""aabbbbd"") == 'Not matched!'
    assert candidate(""aabAbbbc"") == 'Not matched!'
    assert candidate(""accddbbjjjb"") == 'Found a match!'
","import re
def text_match(text):
  patterns = 'a.*?b$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')","[""text_match(\""alphabet\"") == 'Not matched!'"", ""text_match(\""abc\"") == 'Not matched!'"", ""text_match(\""cab\"") == 'Found a match!'"", ""text_match(\""ab\"") == 'Found a match!'"", ""text_match(\""acdb\"") == 'Found a match!'""]","@startuml

title text_match

start

:text_match(text);

if (text.startswith(""a"") and text.endswith(""b"")) then (yes)
  :return ""Found a match!"";
else (no)
  :return ""Not matched!"";
endif

@enduml"
517,"def largest_pos(list1):
""""""
Write a python function to find the largest postive number from the given list.
Your code should satisfy these tests:
largest_pos([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 9
largest_pos([-7, -1, -5, -3]) == -1
largest_pos([0, 0, 0, 0]) == 0
""""""
",largest_pos,"def check(candidate):

    assert candidate([1,2,3,4,-1]) == 4
    assert candidate([0,1,2,-5,-1,6]) == 6
    assert candidate([0,0,1,0]) == 1
","def largest_pos(list1):
    max = list1[0]
    for x in list1:
        if x > max :
             max = x
    return max","[""largest_pos([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 9"", ""largest_pos([-7, -1, -5, -3]) == -1"", ""largest_pos([0, 0, 0, 0]) == 0""]","@startuml
start

:Input list1;
if (Is list1 empty?) then (yes)
    :Return None or raise an error;
    stop
else (no)
    :Initialize max_num as the first element of list1;
    :Initialize index = 1;
    while (index < length of list1?) is (yes)
        if (list1[index] > max_num?) then (yes)
            :Update max_num = list1[index];
        else (no)
            :Do nothing;
        endif
        :Increment index by 1;
    endwhile
    :Return max_num;
endif

stop
@enduml"
385,"def get_perrin(n):
""""""
Write a function to find the n'th perrin number using recursion.
Your code should satisfy these tests:
get_perrin(3) == 3
get_perrin(4) == 2
get_perrin(5) == 5
""""""
",get_perrin,"def check(candidate):

    assert candidate(9) == 12
    assert candidate(4) == 2
    assert candidate(6) == 5
","def get_perrin(n):
  if (n == 0):
    return 3
  if (n == 1):
    return 0
  if (n == 2):
    return 2
  return get_perrin(n - 2) + get_perrin(n - 3)","[""get_perrin(3) == 3"", ""get_perrin(4) == 2"", ""get_perrin(5) == 5""]","@startuml
start
:Input n;
if (n < 1) then (return error)
:Set P0 = 3, P1 = 0, P2 = 2;
:Set i = 3;
while (i <= n)
    :Calculate P[i] = P[i-3] + P[i-2];
    :Increment i;
endwhile
:Output P[n];
stop
@enduml"
899,"def check(arr,n):
""""""
Write a python function to check whether an array can be sorted or not by picking only the corner elements.
Your code should satisfy these tests:
check([1, 2, 3, 4, 5], 5) == True
check([5, 4, 3, 2, 1], 5) == True
check([1, 3, 2, 4, 5], 5) == True
check([10, 7, 5, 3, 1], 5) == True
check([1, 2, 2, 3, 4], 5) == True
""""""
",check,"def check(candidate):

    assert candidate([3,2,1,2,3,4],6) == True
    assert candidate([2,1,4,5,1],5) == True
    assert candidate([1,2,2,1,2,3],6) == True
","def check(arr,n):
    g = 0
    for i in range(1,n):
        if (arr[i] - arr[i - 1] > 0 and g == 1):
            return False
        if (arr[i] - arr[i] < 0):
            g = 1
    return True","[""check([1, 2, 3, 4, 5], 5) == True"", ""check([5, 4, 3, 2, 1], 5) == True"", ""check([1, 3, 2, 4, 5], 5) == True"", ""check([10, 7, 5, 3, 1], 5) == True"", ""check([1, 2, 2, 3, 4], 5) == True""]","@startuml
start

:Input array (arr) and its length (n);
if (Is arr empty or n <= 0?) then (yes)
    :Return False;
    stop
else (no)
    :Initialize two pointers: left = 0, right = n - 1;
    :Initialize an empty list: sorted_arr;
    :Initialize a flag: is_sorted = True;
    while (left <= right?) is (yes)
        if (arr[left] <= arr[right]?) then (yes)
            :Append arr[left] to sorted_arr;
            :Increment left by 1;
        else (no)
            :Append arr[right] to sorted_arr;
            :Decrement right by 1;
        endif
    endwhile
    :Check if sorted_arr is sorted in non-decreasing order;
    :Set is_sorted = True if sorted_arr is sorted, else False;
    :Return is_sorted;
endif

stop
@enduml"
303,"def solve(a,n):
""""""
Write a python function to check whether the count of inversion of two types are same or not.
Your code should satisfy these tests:
solve([1, 2, 3, 4, 5], 5) == True
solve([5, 4, 3, 2, 1], 5) == False
solve([1, 3, 2, 4, 5], 5) == True
solve([10], 1) == True
solve([1, 1, 1, 1, 1], 5) == True
""""""
",solve,"def check(candidate):

    assert candidate([1,0,2],3) == True
    assert candidate([1,2,0],3) == False
    assert candidate([1,2,1],3) == True
","import sys
def solve(a,n):
    mx = -sys.maxsize - 1
    for j in range(1,n):
        if (mx > a[j]):
            return False
        mx = max(mx,a[j - 1])
    return True","[""solve([1, 2, 3, 4, 5], 5) == True"", ""solve([5, 4, 3, 2, 1], 5) == False"", ""solve([1, 3, 2, 4, 5], 5) == True"", ""solve([10], 1) == True"", ""solve([1, 1, 1, 1, 1], 5) == True""]","@startuml
start
:Input: a, n
:Check: n > 0
if (n > 0) then
    :Sort a in ascending order: a_asc
    :Count inversions: inv
    :Check: inv % 2 == 0
    if (inv % 2 == 0) then
        :Return True
    else
        :Return False
    endif
else
    :Return False
endif
stop
@enduml"
488,"def area_pentagon(a):
""""""
Write a function to find the area of a pentagon.
Your code should satisfy these tests:
area_pentagon(1) == 1.720477400588967
area_pentagon(2) == 6.881909602355868
area_pentagon(3) == 15.484296605300703
""""""
",area_pentagon,"def check(candidate):

    assert candidate(5)==43.01193501472417
    assert candidate(10)==172.0477400588967
    assert candidate(15)==387.10741513251753
","import math
def area_pentagon(a):
  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0
  return area","[""area_pentagon(1) == 1.720477400588967"", ""area_pentagon(2) == 6.881909602355868"", ""area_pentagon(3) == 15.484296605300703""]","@startuml
start

:Input side length (a);
if (Is a a valid number?) then (yes)
    if (Is a > 0?) then (yes)
        :Calculate area using formula:
        area = (5 * a^2) / (4 * tan(π / 5));
        :Return area;
    else (no)
        :Return ""Error: Side length must be positive"";
    endif
else (no)
    :Return ""Error: Invalid input. Please provide a number"";
endif

stop
@enduml"
329,"def neg_count(list):
""""""
Write a python function to count negative numbers in a list.
Your code should satisfy these tests:
neg_count([1, -2, 3, -4, 5]) == 2
neg_count([-1, -2, -3, -4, -5]) == 5
neg_count([0, 2, 4, 6, 8]) == 1
""""""
",neg_count,"def check(candidate):

    assert candidate([-1,-2,3,-4,-5]) == 4
    assert candidate([1,2,3]) == 0
    assert candidate([1,2,-3,-10,20]) == 2
","def neg_count(list):
  neg_count= 0
  for num in list:
    if num <= 0:
      neg_count += 1
  return neg_count ","[""neg_count([1, -2, 3, -4, 5]) == 2"", ""neg_count([-1, -2, -3, -4, -5]) == 5"", ""neg_count([0, 2, 4, 6, 8]) == 1""]","@startuml

title Negative Number Counter

start
:Start;

if (list is empty) then (no)
	:End;
else (yes)
	:Loop through list;
	if (current element is negative) then (yes)
		:Increment negative count;
	else (no)
		:Do nothing;
	end if;
end if;

:End;

@enduml"
945,"def tuple_to_set(t):
""""""
Write a function to convert the given tuples into set.
Your code should satisfy these tests:
tuple_to_set((1, 2, 3, 4)) == {1, 2, 3, 4}
tuple_to_set(('a', 'b', 'c', 'a')) == {'a', 'b', 'c'}
tuple_to_set((True, False, True, True)) == {True, False}
""""""
",tuple_to_set,"def check(candidate):

    assert candidate(('x', 'y', 'z') ) == {'y', 'x', 'z'}
    assert candidate(('a', 'b', 'c') ) == {'c', 'a', 'b'}
    assert candidate(('z', 'd', 'e') ) == {'d', 'e', 'z'}
","def tuple_to_set(t):
  s = set(t)
  return (s) ","[""tuple_to_set((1, 2, 3, 4)) == {1, 2, 3, 4}"", ""tuple_to_set(('a', 'b', 'c', 'a')) == {'a', 'b', 'c'}"", ""tuple_to_set((True, False, True, True)) == {True, False}""]","@startuml

title tuple_to_set

start
:tuple_to_set(t);

if (t is not a tuple) then (1)
:raise TypeError;

else (2)
:set = set();

for each element in t do (3)
:set.add(element);

return set;

@enduml"
771,"def check_expression(exp):
""""""
Write a function to check if the given expression is balanced or not.
Your code should satisfy these tests:
check_expression(""()[]{}"") == True
check_expression(""([{}])"") == True
check_expression(""(]"") == False
""""""
",check_expression,"def check(candidate):

    assert candidate(""{()}[{}]"") == True
    assert candidate(""{()}[{]"") == False
    assert candidate(""{()}[{}][]({})"") == True
","from collections import deque
def check_expression(exp):
    if len(exp) & 1:
        return False
    stack = deque()
    for ch in exp:
        if ch == '(' or ch == '{' or ch == '[':
            stack.append(ch)
        if ch == ')' or ch == '}' or ch == ']':
            if not stack:
                return False
            top = stack.pop()
            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):
                return False
    return not stack","[""check_expression(\""()[]{}\"") == True"", ""check_expression(\""([{}])\"") == True"", ""check_expression(\""(]\"") == False""]","@startuml

start
:check_expression(exp);
if (exp.count(""("") == exp.count("")"") and exp.count(""["") == exp.count(""]"") and exp.count(""{"") == exp.count(""}"")) then (true)
:return True;
else (false)
:return False;
endif

@enduml"
493,"def calculate_polygons(startx, starty, endx, endy, radius):
""""""
Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.
""""""
",calculate_polygons,"def check(candidate):

    assert candidate(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]
    assert candidate(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]
    assert candidate(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]
","import math
def calculate_polygons(startx, starty, endx, endy, radius):
    sl = (2 * radius) * math.tan(math.pi / 6)
    p = sl * 0.5
    b = sl * math.cos(math.radians(30))
    w = b * 2
    h = 2 * sl
    startx = startx - w
    starty = starty - h
    endx = endx + w
    endy = endy + h
    origx = startx
    origy = starty
    xoffset = b
    yoffset = 3 * p
    polygons = []
    row = 1
    counter = 0
    while starty < endy:
        if row % 2 == 0:
            startx = origx + xoffset
        else:
            startx = origx
        while startx < endx:
            p1x = startx
            p1y = starty + p
            p2x = startx
            p2y = starty + (3 * p)
            p3x = startx + b
            p3y = starty + h
            p4x = startx + w
            p4y = starty + (3 * p)
            p5x = startx + w
            p5y = starty + p
            p6x = startx + b
            p6y = starty
            poly = [
                (p1x, p1y),
                (p2x, p2y),
                (p3x, p3y),
                (p4x, p4y),
                (p5x, p5y),
                (p6x, p6y),
                (p1x, p1y)]
            polygons.append(poly)
            counter += 1
            startx += w
        starty += yoffset
        row += 1
    return polygons","[""calculate_polygons(0, 0, 10, 10, 1) == [[(-2.0, -1.7320508075688772), (-2.0, -0.5773502691896257), (-1.0, 0.0), (0.0, -0.5773502691896257), (0.0, -1.7320508075688772), (-1.0, -2.309401076758503), (-2.0, -1.7320508075688772)], [(0.0, -1.7320508075688772), (0.0, -0.5773502691896257), (1.0, 0.0), (2.0, -0.5773502691896257), (2.0, -1.7320508075688772), (1.0, -2.309401076758503), (0.0, -1.7320508075688772)], [(2.0, -1.7320508075688772), (2.0, -0.5773502691896257), (3.0, 0.0), (4.0, -0.5773502691896257), (4.0, -1.7320508075688772), (3.0, -2.309401076758503), (2.0, -1.7320508075688772)], [(4.0, -1.7320508075688772), (4.0, -0.5773502691896257), (5.0, 0.0), (6.0, -0.5773502691896257), (6.0, -1.7320508075688772), (5.0, -2.309401076758503), (4.0, -1.7320508075688772)], [(6.0, -1.7320508075688772), (6.0, -0.5773502691896257), (7.0, 0.0), (8.0, -0.5773502691896257), (8.0, -1.7320508075688772), (7.0, -2.309401076758503), (6.0, -1.7320508075688772)], [(8.0, -1.7320508075688772), (8.0, -0.5773502691896257), (9.0, 0.0), (10.0, -0.5773502691896257), (10.0, -1.7320508075688772), (9.0, -2.309401076758503), (8.0, -1.7320508075688772)], [(10.0, -1.7320508075688772), (10.0, -0.5773502691896257), (11.0, 0.0), (12.0, -0.5773502691896257), (12.0, -1.7320508075688772), (11.0, -2.309401076758503), (10.0, -1.7320508075688772)], [(-1.0, 0.0), (-1.0, 1.1547005383792515), (0.0, 1.7320508075688772), (1.0, 1.1547005383792515), (1.0, 0.0), (0.0, -0.5773502691896257), (-1.0, 0.0)], [(1.0, 0.0), (1.0, 1.1547005383792515), (2.0, 1.7320508075688772), (3.0, 1.1547005383792515), (3.0, 0.0), (2.0, -0.5773502691896257), (1.0, 0.0)], [(3.0, 0.0), (3.0, 1.1547005383792515), (4.0, 1.7320508075688772), (5.0, 1.1547005383792515), (5.0, 0.0), (4.0, -0.5773502691896257), (3.0, 0.0)], [(5.0, 0.0), (5.0, 1.1547005383792515), (6.0, 1.7320508075688772), (7.0, 1.1547005383792515), (7.0, 0.0), (6.0, -0.5773502691896257), (5.0, 0.0)], [(7.0, 0.0), (7.0, 1.1547005383792515), (8.0, 1.7320508075688772), (9.0, 1.1547005383792515), (9.0, 0.0), (8.0, -0.5773502691896257), (7.0, 0.0)], [(9.0, 0.0), (9.0, 1.1547005383792515), (10.0, 1.7320508075688772), (11.0, 1.1547005383792515), (11.0, 0.0), (10.0, -0.5773502691896257), (9.0, 0.0)], [(11.0, 0.0), (11.0, 1.1547005383792515), (12.0, 1.7320508075688772), (13.0, 1.1547005383792515), (13.0, 0.0), (12.0, -0.5773502691896257), (11.0, 0.0)], [(-2.0, 1.7320508075688772), (-2.0, 2.8867513459481287), (-1.0, 3.4641016151377544), (0.0, 2.8867513459481287), (0.0, 1.7320508075688772), (-1.0, 1.1547005383792515), (-2.0, 1.7320508075688772)], [(0.0, 1.7320508075688772), (0.0, 2.8867513459481287), (1.0, 3.4641016151377544), (2.0, 2.8867513459481287), (2.0, 1.7320508075688772), (1.0, 1.1547005383792515), (0.0, 1.7320508075688772)], [(2.0, 1.7320508075688772), (2.0, 2.8867513459481287), (3.0, 3.4641016151377544), (4.0, 2.8867513459481287), (4.0, 1.7320508075688772), (3.0, 1.1547005383792515), (2.0, 1.7320508075688772)], [(4.0, 1.7320508075688772), (4.0, 2.8867513459481287), (5.0, 3.4641016151377544), (6.0, 2.8867513459481287), (6.0, 1.7320508075688772), (5.0, 1.1547005383792515), (4.0, 1.7320508075688772)], [(6.0, 1.7320508075688772), (6.0, 2.8867513459481287), (7.0, 3.4641016151377544), (8.0, 2.8867513459481287), (8.0, 1.7320508075688772), (7.0, 1.1547005383792515), (6.0, 1.7320508075688772)], [(8.0, 1.7320508075688772), (8.0, 2.8867513459481287), (9.0, 3.4641016151377544), (10.0, 2.8867513459481287), (10.0, 1.7320508075688772), (9.0, 1.1547005383792515), (8.0, 1.7320508075688772)], [(10.0, 1.7320508075688772), (10.0, 2.8867513459481287), (11.0, 3.4641016151377544), (12.0, 2.8867513459481287), (12.0, 1.7320508075688772), (11.0, 1.1547005383792515), (10.0, 1.7320508075688772)], [(-1.0, 3.4641016151377544), (-1.0, 4.618802153517006), (0.0, 5.196152422706632), (1.0, 4.618802153517006), (1.0, 3.4641016151377544), (0.0, 2.8867513459481287), (-1.0, 3.4641016151377544)], [(1.0, 3.4641016151377544), (1.0, 4.618802153517006), (2.0, 5.196152422706632), (3.0, 4.618802153517006), (3.0, 3.4641016151377544), (2.0, 2.8867513459481287), (1.0, 3.4641016151377544)], [(3.0, 3.4641016151377544), (3.0, 4.618802153517006), (4.0, 5.196152422706632), (5.0, 4.618802153517006), (5.0, 3.4641016151377544), (4.0, 2.8867513459481287), (3.0, 3.4641016151377544)], [(5.0, 3.4641016151377544), (5.0, 4.618802153517006), (6.0, 5.196152422706632), (7.0, 4.618802153517006), (7.0, 3.4641016151377544), (6.0, 2.8867513459481287), (5.0, 3.4641016151377544)], [(7.0, 3.4641016151377544), (7.0, 4.618802153517006), (8.0, 5.196152422706632), (9.0, 4.618802153517006), (9.0, 3.4641016151377544), (8.0, 2.8867513459481287), (7.0, 3.4641016151377544)], [(9.0, 3.4641016151377544), (9.0, 4.618802153517006), (10.0, 5.196152422706632), (11.0, 4.618802153517006), (11.0, 3.4641016151377544), (10.0, 2.8867513459481287), (9.0, 3.4641016151377544)], [(11.0, 3.4641016151377544), (11.0, 4.618802153517006), (12.0, 5.196152422706632), (13.0, 4.618802153517006), (13.0, 3.4641016151377544), (12.0, 2.8867513459481287), (11.0, 3.4641016151377544)], [(-2.0, 5.196152422706632), (-2.0, 6.350852961085883), (-1.0, 6.928203230275509), (0.0, 6.350852961085883), (0.0, 5.196152422706632), (-1.0, 4.618802153517006), (-2.0, 5.196152422706632)], [(0.0, 5.196152422706632), (0.0, 6.350852961085883), (1.0, 6.928203230275509), (2.0, 6.350852961085883), (2.0, 5.196152422706632), (1.0, 4.618802153517006), (0.0, 5.196152422706632)], [(2.0, 5.196152422706632), (2.0, 6.350852961085883), (3.0, 6.928203230275509), (4.0, 6.350852961085883), (4.0, 5.196152422706632), (3.0, 4.618802153517006), (2.0, 5.196152422706632)], [(4.0, 5.196152422706632), (4.0, 6.350852961085883), (5.0, 6.928203230275509), (6.0, 6.350852961085883), (6.0, 5.196152422706632), (5.0, 4.618802153517006), (4.0, 5.196152422706632)], [(6.0, 5.196152422706632), (6.0, 6.350852961085883), (7.0, 6.928203230275509), (8.0, 6.350852961085883), (8.0, 5.196152422706632), (7.0, 4.618802153517006), (6.0, 5.196152422706632)], [(8.0, 5.196152422706632), (8.0, 6.350852961085883), (9.0, 6.928203230275509), (10.0, 6.350852961085883), (10.0, 5.196152422706632), (9.0, 4.618802153517006), (8.0, 5.196152422706632)], [(10.0, 5.196152422706632), (10.0, 6.350852961085883), (11.0, 6.928203230275509), (12.0, 6.350852961085883), (12.0, 5.196152422706632), (11.0, 4.618802153517006), (10.0, 5.196152422706632)], [(-1.0, 6.928203230275509), (-1.0, 8.08290376865476), (0.0, 8.660254037844386), (1.0, 8.08290376865476), (1.0, 6.928203230275509), (0.0, 6.350852961085883), (-1.0, 6.928203230275509)], [(1.0, 6.928203230275509), (1.0, 8.08290376865476), (2.0, 8.660254037844386), (3.0, 8.08290376865476), (3.0, 6.928203230275509), (2.0, 6.350852961085883), (1.0, 6.928203230275509)], [(3.0, 6.928203230275509), (3.0, 8.08290376865476), (4.0, 8.660254037844386), (5.0, 8.08290376865476), (5.0, 6.928203230275509), (4.0, 6.350852961085883), (3.0, 6.928203230275509)], [(5.0, 6.928203230275509), (5.0, 8.08290376865476), (6.0, 8.660254037844386), (7.0, 8.08290376865476), (7.0, 6.928203230275509), (6.0, 6.350852961085883), (5.0, 6.928203230275509)], [(7.0, 6.928203230275509), (7.0, 8.08290376865476), (8.0, 8.660254037844386), (9.0, 8.08290376865476), (9.0, 6.928203230275509), (8.0, 6.350852961085883), (7.0, 6.928203230275509)], [(9.0, 6.928203230275509), (9.0, 8.08290376865476), (10.0, 8.660254037844386), (11.0, 8.08290376865476), (11.0, 6.928203230275509), (10.0, 6.350852961085883), (9.0, 6.928203230275509)], [(11.0, 6.928203230275509), (11.0, 8.08290376865476), (12.0, 8.660254037844386), (13.0, 8.08290376865476), (13.0, 6.928203230275509), (12.0, 6.350852961085883), (11.0, 6.928203230275509)], [(-2.0, 8.660254037844386), (-2.0, 9.814954576223636), (-1.0, 10.392304845413262), (0.0, 9.814954576223636), (0.0, 8.660254037844386), (-1.0, 8.08290376865476), (-2.0, 8.660254037844386)], [(0.0, 8.660254037844386), (0.0, 9.814954576223636), (1.0, 10.392304845413262), (2.0, 9.814954576223636), (2.0, 8.660254037844386), (1.0, 8.08290376865476), (0.0, 8.660254037844386)], [(2.0, 8.660254037844386), (2.0, 9.814954576223636), (3.0, 10.392304845413262), (4.0, 9.814954576223636), (4.0, 8.660254037844386), (3.0, 8.08290376865476), (2.0, 8.660254037844386)], [(4.0, 8.660254037844386), (4.0, 9.814954576223636), (5.0, 10.392304845413262), (6.0, 9.814954576223636), (6.0, 8.660254037844386), (5.0, 8.08290376865476), (4.0, 8.660254037844386)], [(6.0, 8.660254037844386), (6.0, 9.814954576223636), (7.0, 10.392304845413262), (8.0, 9.814954576223636), (8.0, 8.660254037844386), (7.0, 8.08290376865476), (6.0, 8.660254037844386)], [(8.0, 8.660254037844386), (8.0, 9.814954576223636), (9.0, 10.392304845413262), (10.0, 9.814954576223636), (10.0, 8.660254037844386), (9.0, 8.08290376865476), (8.0, 8.660254037844386)], [(10.0, 8.660254037844386), (10.0, 9.814954576223636), (11.0, 10.392304845413262), (12.0, 9.814954576223636), (12.0, 8.660254037844386), (11.0, 8.08290376865476), (10.0, 8.660254037844386)], [(-1.0, 10.392304845413262), (-1.0, 11.547005383792513), (0.0, 12.124355652982139), (1.0, 11.547005383792513), (1.0, 10.392304845413262), (0.0, 9.814954576223636), (-1.0, 10.392304845413262)], [(1.0, 10.392304845413262), (1.0, 11.547005383792513), (2.0, 12.124355652982139), (3.0, 11.547005383792513), (3.0, 10.392304845413262), (2.0, 9.814954576223636), (1.0, 10.392304845413262)], [(3.0, 10.392304845413262), (3.0, 11.547005383792513), (4.0, 12.124355652982139), (5.0, 11.547005383792513), (5.0, 10.392304845413262), (4.0, 9.814954576223636), (3.0, 10.392304845413262)], [(5.0, 10.392304845413262), (5.0, 11.547005383792513), (6.0, 12.124355652982139), (7.0, 11.547005383792513), (7.0, 10.392304845413262), (6.0, 9.814954576223636), (5.0, 10.392304845413262)], [(7.0, 10.392304845413262), (7.0, 11.547005383792513), (8.0, 12.124355652982139), (9.0, 11.547005383792513), (9.0, 10.392304845413262), (8.0, 9.814954576223636), (7.0, 10.392304845413262)], [(9.0, 10.392304845413262), (9.0, 11.547005383792513), (10.0, 12.124355652982139), (11.0, 11.547005383792513), (11.0, 10.392304845413262), (10.0, 9.814954576223636), (9.0, 10.392304845413262)], [(11.0, 10.392304845413262), (11.0, 11.547005383792513), (12.0, 12.124355652982139), (13.0, 11.547005383792513), (13.0, 10.392304845413262), (12.0, 9.814954576223636), (11.0, 10.392304845413262)], [(-2.0, 12.124355652982139), (-2.0, 13.27905619136139), (-1.0, 13.856406460551016), (0.0, 13.27905619136139), (0.0, 12.124355652982139), (-1.0, 11.547005383792513), (-2.0, 12.124355652982139)], [(0.0, 12.124355652982139), (0.0, 13.27905619136139), (1.0, 13.856406460551016), (2.0, 13.27905619136139), (2.0, 12.124355652982139), (1.0, 11.547005383792513), (0.0, 12.124355652982139)], [(2.0, 12.124355652982139), (2.0, 13.27905619136139), (3.0, 13.856406460551016), (4.0, 13.27905619136139), (4.0, 12.124355652982139), (3.0, 11.547005383792513), (2.0, 12.124355652982139)], [(4.0, 12.124355652982139), (4.0, 13.27905619136139), (5.0, 13.856406460551016), (6.0, 13.27905619136139), (6.0, 12.124355652982139), (5.0, 11.547005383792513), (4.0, 12.124355652982139)], [(6.0, 12.124355652982139), (6.0, 13.27905619136139), (7.0, 13.856406460551016), (8.0, 13.27905619136139), (8.0, 12.124355652982139), (7.0, 11.547005383792513), (6.0, 12.124355652982139)], [(8.0, 12.124355652982139), (8.0, 13.27905619136139), (9.0, 13.856406460551016), (10.0, 13.27905619136139), (10.0, 12.124355652982139), (9.0, 11.547005383792513), (8.0, 12.124355652982139)], [(10.0, 12.124355652982139), (10.0, 13.27905619136139), (11.0, 13.856406460551016), (12.0, 13.27905619136139), (12.0, 12.124355652982139), (11.0, 11.547005383792513), (10.0, 12.124355652982139)]]"", ""calculate_polygons(5, 5, 15, 15, 2) == [[(1.0, 1.5358983848622456), (1.0, 3.8452994616207485), (3.0, 5.0), (5.0, 3.8452994616207485), (5.0, 1.5358983848622456), (3.0, 0.38119784648299415), (1.0, 1.5358983848622456)], [(5.0, 1.5358983848622456), (5.0, 3.8452994616207485), (7.0, 5.0), (9.0, 3.8452994616207485), (9.0, 1.5358983848622456), (7.0, 0.38119784648299415), (5.0, 1.5358983848622456)], [(9.0, 1.5358983848622456), (9.0, 3.8452994616207485), (11.0, 5.0), (13.0, 3.8452994616207485), (13.0, 1.5358983848622456), (11.0, 0.38119784648299415), (9.0, 1.5358983848622456)], [(13.0, 1.5358983848622456), (13.0, 3.8452994616207485), (15.0, 5.0), (17.0, 3.8452994616207485), (17.0, 1.5358983848622456), (15.0, 0.38119784648299415), (13.0, 1.5358983848622456)], [(17.0, 1.5358983848622456), (17.0, 3.8452994616207485), (19.0, 5.0), (21.0, 3.8452994616207485), (21.0, 1.5358983848622456), (19.0, 0.38119784648299415), (17.0, 1.5358983848622456)], [(3.0, 5.0), (3.0, 7.309401076758503), (5.0, 8.464101615137753), (7.0, 7.309401076758503), (7.0, 5.0), (5.0, 3.8452994616207485), (3.0, 5.0)], [(7.0, 5.0), (7.0, 7.309401076758503), (9.0, 8.464101615137753), (11.0, 7.309401076758503), (11.0, 5.0), (9.0, 3.8452994616207485), (7.0, 5.0)], [(11.0, 5.0), (11.0, 7.309401076758503), (13.0, 8.464101615137753), (15.0, 7.309401076758503), (15.0, 5.0), (13.0, 3.8452994616207485), (11.0, 5.0)], [(15.0, 5.0), (15.0, 7.309401076758503), (17.0, 8.464101615137753), (19.0, 7.309401076758503), (19.0, 5.0), (17.0, 3.8452994616207485), (15.0, 5.0)], [(1.0, 8.464101615137753), (1.0, 10.773502691896258), (3.0, 11.928203230275509), (5.0, 10.773502691896258), (5.0, 8.464101615137753), (3.0, 7.309401076758503), (1.0, 8.464101615137753)], [(5.0, 8.464101615137753), (5.0, 10.773502691896258), (7.0, 11.928203230275509), (9.0, 10.773502691896258), (9.0, 8.464101615137753), (7.0, 7.309401076758503), (5.0, 8.464101615137753)], [(9.0, 8.464101615137753), (9.0, 10.773502691896258), (11.0, 11.928203230275509), (13.0, 10.773502691896258), (13.0, 8.464101615137753), (11.0, 7.309401076758503), (9.0, 8.464101615137753)], [(13.0, 8.464101615137753), (13.0, 10.773502691896258), (15.0, 11.928203230275509), (17.0, 10.773502691896258), (17.0, 8.464101615137753), (15.0, 7.309401076758503), (13.0, 8.464101615137753)], [(17.0, 8.464101615137753), (17.0, 10.773502691896258), (19.0, 11.928203230275509), (21.0, 10.773502691896258), (21.0, 8.464101615137753), (19.0, 7.309401076758503), (17.0, 8.464101615137753)], [(3.0, 11.92820323027551), (3.0, 14.237604307034012), (5.0, 15.392304845413264), (7.0, 14.237604307034012), (7.0, 11.92820323027551), (5.0, 10.773502691896258), (3.0, 11.92820323027551)], [(7.0, 11.92820323027551), (7.0, 14.237604307034012), (9.0, 15.392304845413264), (11.0, 14.237604307034012), (11.0, 11.92820323027551), (9.0, 10.773502691896258), (7.0, 11.92820323027551)], [(11.0, 11.92820323027551), (11.0, 14.237604307034012), (13.0, 15.392304845413264), (15.0, 14.237604307034012), (15.0, 11.92820323027551), (13.0, 10.773502691896258), (11.0, 11.92820323027551)], [(15.0, 11.92820323027551), (15.0, 14.237604307034012), (17.0, 15.392304845413264), (19.0, 14.237604307034012), (19.0, 11.92820323027551), (17.0, 10.773502691896258), (15.0, 11.92820323027551)], [(1.0, 15.392304845413264), (1.0, 17.701705922171765), (3.0, 18.856406460551018), (5.0, 17.701705922171765), (5.0, 15.392304845413264), (3.0, 14.237604307034012), (1.0, 15.392304845413264)], [(5.0, 15.392304845413264), (5.0, 17.701705922171765), (7.0, 18.856406460551018), (9.0, 17.701705922171765), (9.0, 15.392304845413264), (7.0, 14.237604307034012), (5.0, 15.392304845413264)], [(9.0, 15.392304845413264), (9.0, 17.701705922171765), (11.0, 18.856406460551018), (13.0, 17.701705922171765), (13.0, 15.392304845413264), (11.0, 14.237604307034012), (9.0, 15.392304845413264)], [(13.0, 15.392304845413264), (13.0, 17.701705922171765), (15.0, 18.856406460551018), (17.0, 17.701705922171765), (17.0, 15.392304845413264), (15.0, 14.237604307034012), (13.0, 15.392304845413264)], [(17.0, 15.392304845413264), (17.0, 17.701705922171765), (19.0, 18.856406460551018), (21.0, 17.701705922171765), (21.0, 15.392304845413264), (19.0, 14.237604307034012), (17.0, 15.392304845413264)], [(3.0, 18.856406460551018), (3.0, 21.16580753730952), (5.0, 22.32050807568877), (7.0, 21.16580753730952), (7.0, 18.856406460551018), (5.0, 17.701705922171765), (3.0, 18.856406460551018)], [(7.0, 18.856406460551018), (7.0, 21.16580753730952), (9.0, 22.32050807568877), (11.0, 21.16580753730952), (11.0, 18.856406460551018), (9.0, 17.701705922171765), (7.0, 18.856406460551018)], [(11.0, 18.856406460551018), (11.0, 21.16580753730952), (13.0, 22.32050807568877), (15.0, 21.16580753730952), (15.0, 18.856406460551018), (13.0, 17.701705922171765), (11.0, 18.856406460551018)], [(15.0, 18.856406460551018), (15.0, 21.16580753730952), (17.0, 22.32050807568877), (19.0, 21.16580753730952), (19.0, 18.856406460551018), (17.0, 17.701705922171765), (15.0, 18.856406460551018)]]"", ""calculate_polygons(-10, -10, 10, 10, 0.5) == [[(-11.0, -10.86602540378444), (-11.0, -10.288675134594813), (-10.5, -10.0), (-10.0, -10.288675134594813), (-10.0, -10.86602540378444), (-10.5, -11.154700538379252), (-11.0, -10.86602540378444)], [(-10.0, -10.86602540378444), (-10.0, -10.288675134594813), (-9.5, -10.0), (-9.0, -10.288675134594813), (-9.0, -10.86602540378444), (-9.5, -11.154700538379252), (-10.0, -10.86602540378444)], [(-9.0, -10.86602540378444), (-9.0, -10.288675134594813), (-8.5, -10.0), (-8.0, -10.288675134594813), (-8.0, -10.86602540378444), (-8.5, -11.154700538379252), (-9.0, -10.86602540378444)], [(-8.0, -10.86602540378444), (-8.0, -10.288675134594813), (-7.5, -10.0), (-7.0, -10.288675134594813), (-7.0, -10.86602540378444), (-7.5, -11.154700538379252), (-8.0, -10.86602540378444)], [(-7.0, -10.86602540378444), (-7.0, -10.288675134594813), (-6.5, -10.0), (-6.0, -10.288675134594813), (-6.0, -10.86602540378444), (-6.5, -11.154700538379252), (-7.0, -10.86602540378444)], [(-6.0, -10.86602540378444), (-6.0, -10.288675134594813), (-5.5, -10.0), (-5.0, -10.288675134594813), (-5.0, -10.86602540378444), (-5.5, -11.154700538379252), (-6.0, -10.86602540378444)], [(-5.0, -10.86602540378444), (-5.0, -10.288675134594813), (-4.5, -10.0), (-4.0, -10.288675134594813), (-4.0, -10.86602540378444), (-4.5, -11.154700538379252), (-5.0, -10.86602540378444)], [(-4.0, -10.86602540378444), (-4.0, -10.288675134594813), (-3.5, -10.0), (-3.0, -10.288675134594813), (-3.0, -10.86602540378444), (-3.5, -11.154700538379252), (-4.0, -10.86602540378444)], [(-3.0, -10.86602540378444), (-3.0, -10.288675134594813), (-2.5, -10.0), (-2.0, -10.288675134594813), (-2.0, -10.86602540378444), (-2.5, -11.154700538379252), (-3.0, -10.86602540378444)], [(-2.0, -10.86602540378444), (-2.0, -10.288675134594813), (-1.5, -10.0), (-1.0, -10.288675134594813), (-1.0, -10.86602540378444), (-1.5, -11.154700538379252), (-2.0, -10.86602540378444)], [(-1.0, -10.86602540378444), (-1.0, -10.288675134594813), (-0.5, -10.0), (0.0, -10.288675134594813), (0.0, -10.86602540378444), (-0.5, -11.154700538379252), (-1.0, -10.86602540378444)], [(0.0, -10.86602540378444), (0.0, -10.288675134594813), (0.5, -10.0), (1.0, -10.288675134594813), (1.0, -10.86602540378444), (0.5, -11.154700538379252), (0.0, -10.86602540378444)], [(1.0, -10.86602540378444), (1.0, -10.288675134594813), (1.5, -10.0), (2.0, -10.288675134594813), (2.0, -10.86602540378444), (1.5, -11.154700538379252), (1.0, -10.86602540378444)], [(2.0, -10.86602540378444), (2.0, -10.288675134594813), (2.5, -10.0), (3.0, -10.288675134594813), (3.0, -10.86602540378444), (2.5, -11.154700538379252), (2.0, -10.86602540378444)], [(3.0, -10.86602540378444), (3.0, -10.288675134594813), (3.5, -10.0), (4.0, -10.288675134594813), (4.0, -10.86602540378444), (3.5, -11.154700538379252), (3.0, -10.86602540378444)], [(4.0, -10.86602540378444), (4.0, -10.288675134594813), (4.5, -10.0), (5.0, -10.288675134594813), (5.0, -10.86602540378444), (4.5, -11.154700538379252), (4.0, -10.86602540378444)], [(5.0, -10.86602540378444), (5.0, -10.288675134594813), (5.5, -10.0), (6.0, -10.288675134594813), (6.0, -10.86602540378444), (5.5, -11.154700538379252), (5.0, -10.86602540378444)], [(6.0, -10.86602540378444), (6.0, -10.288675134594813), (6.5, -10.0), (7.0, -10.288675134594813), (7.0, -10.86602540378444), (6.5, -11.154700538379252), (6.0, -10.86602540378444)], [(7.0, -10.86602540378444), (7.0, -10.288675134594813), (7.5, -10.0), (8.0, -10.288675134594813), (8.0, -10.86602540378444), (7.5, -11.154700538379252), (7.0, -10.86602540378444)], [(8.0, -10.86602540378444), (8.0, -10.288675134594813), (8.5, -10.0), (9.0, -10.288675134594813), (9.0, -10.86602540378444), (8.5, -11.154700538379252), (8.0, -10.86602540378444)], [(9.0, -10.86602540378444), (9.0, -10.288675134594813), (9.5, -10.0), (10.0, -10.288675134594813), (10.0, -10.86602540378444), (9.5, -11.154700538379252), (9.0, -10.86602540378444)], [(10.0, -10.86602540378444), (10.0, -10.288675134594813), (10.5, -10.0), (11.0, -10.288675134594813), (11.0, -10.86602540378444), (10.5, -11.154700538379252), (10.0, -10.86602540378444)], [(-10.5, -10.0), (-10.5, -9.422649730810374), (-10.0, -9.133974596215563), (-9.5, -9.422649730810374), (-9.5, -10.0), (-10.0, -10.288675134594813), (-10.5, -10.0)], [(-9.5, -10.0), (-9.5, -9.422649730810374), (-9.0, -9.133974596215563), (-8.5, -9.422649730810374), (-8.5, -10.0), (-9.0, -10.288675134594813), (-9.5, -10.0)], [(-8.5, -10.0), (-8.5, -9.422649730810374), (-8.0, -9.133974596215563), (-7.5, -9.422649730810374), (-7.5, -10.0), (-8.0, -10.288675134594813), (-8.5, -10.0)], [(-7.5, -10.0), (-7.5, -9.422649730810374), (-7.0, -9.133974596215563), (-6.5, -9.422649730810374), (-6.5, -10.0), (-7.0, -10.288675134594813), (-7.5, -10.0)], [(-6.5, -10.0), (-6.5, -9.422649730810374), (-6.0, -9.133974596215563), (-5.5, -9.422649730810374), (-5.5, -10.0), (-6.0, -10.288675134594813), (-6.5, -10.0)], [(-5.5, -10.0), (-5.5, -9.422649730810374), (-5.0, -9.133974596215563), (-4.5, -9.422649730810374), (-4.5, -10.0), (-5.0, -10.288675134594813), (-5.5, -10.0)], [(-4.5, -10.0), (-4.5, -9.422649730810374), (-4.0, -9.133974596215563), (-3.5, -9.422649730810374), (-3.5, -10.0), (-4.0, -10.288675134594813), (-4.5, -10.0)], [(-3.5, -10.0), (-3.5, -9.422649730810374), (-3.0, -9.133974596215563), (-2.5, -9.422649730810374), (-2.5, -10.0), (-3.0, -10.288675134594813), (-3.5, -10.0)], [(-2.5, -10.0), (-2.5, -9.422649730810374), (-2.0, -9.133974596215563), (-1.5, -9.422649730810374), (-1.5, -10.0), (-2.0, -10.288675134594813), (-2.5, -10.0)], [(-1.5, -10.0), (-1.5, -9.422649730810374), (-1.0, -9.133974596215563), (-0.5, -9.422649730810374), (-0.5, -10.0), (-1.0, -10.288675134594813), (-1.5, -10.0)], [(-0.5, -10.0), (-0.5, -9.422649730810374), (0.0, -9.133974596215563), (0.5, -9.422649730810374), (0.5, -10.0), (0.0, -10.288675134594813), (-0.5, -10.0)], [(0.5, -10.0), (0.5, -9.422649730810374), (1.0, -9.133974596215563), (1.5, -9.422649730810374), (1.5, -10.0), (1.0, -10.288675134594813), (0.5, -10.0)], [(1.5, -10.0), (1.5, -9.422649730810374), (2.0, -9.133974596215563), (2.5, -9.422649730810374), (2.5, -10.0), (2.0, -10.288675134594813), (1.5, -10.0)], [(2.5, -10.0), (2.5, -9.422649730810374), (3.0, -9.133974596215563), (3.5, -9.422649730810374), (3.5, -10.0), (3.0, -10.288675134594813), (2.5, -10.0)], [(3.5, -10.0), (3.5, -9.422649730810374), (4.0, -9.133974596215563), (4.5, -9.422649730810374), (4.5, -10.0), (4.0, -10.288675134594813), (3.5, -10.0)], [(4.5, -10.0), (4.5, -9.422649730810374), (5.0, -9.133974596215563), (5.5, -9.422649730810374), (5.5, -10.0), (5.0, -10.288675134594813), (4.5, -10.0)], [(5.5, -10.0), (5.5, -9.422649730810374), (6.0, -9.133974596215563), (6.5, -9.422649730810374), (6.5, -10.0), (6.0, -10.288675134594813), (5.5, -10.0)], [(6.5, -10.0), (6.5, -9.422649730810374), (7.0, -9.133974596215563), (7.5, -9.422649730810374), (7.5, -10.0), (7.0, -10.288675134594813), (6.5, -10.0)], [(7.5, -10.0), (7.5, -9.422649730810374), (8.0, -9.133974596215563), (8.5, -9.422649730810374), (8.5, -10.0), (8.0, -10.288675134594813), (7.5, -10.0)], [(8.5, -10.0), (8.5, -9.422649730810374), (9.0, -9.133974596215563), (9.5, -9.422649730810374), (9.5, -10.0), (9.0, -10.288675134594813), (8.5, -10.0)], [(9.5, -10.0), (9.5, -9.422649730810374), (10.0, -9.133974596215563), (10.5, -9.422649730810374), (10.5, -10.0), (10.0, -10.288675134594813), (9.5, -10.0)], [(10.5, -10.0), (10.5, -9.422649730810374), (11.0, -9.133974596215563), (11.5, -9.422649730810374), (11.5, -10.0), (11.0, -10.288675134594813), (10.5, -10.0)], [(-11.0, -9.13397459621556), (-11.0, -8.556624327025935), (-10.5, -8.267949192431121), (-10.0, -8.556624327025935), (-10.0, -9.13397459621556), (-10.5, -9.422649730810374), (-11.0, -9.13397459621556)], [(-10.0, -9.13397459621556), (-10.0, -8.556624327025935), (-9.5, -8.267949192431121), (-9.0, -8.556624327025935), (-9.0, -9.13397459621556), (-9.5, -9.422649730810374), (-10.0, -9.13397459621556)], [(-9.0, -9.13397459621556), (-9.0, -8.556624327025935), (-8.5, -8.267949192431121), (-8.0, -8.556624327025935), (-8.0, -9.13397459621556), (-8.5, -9.422649730810374), (-9.0, -9.13397459621556)], [(-8.0, -9.13397459621556), (-8.0, -8.556624327025935), (-7.5, -8.267949192431121), (-7.0, -8.556624327025935), (-7.0, -9.13397459621556), (-7.5, -9.422649730810374), (-8.0, -9.13397459621556)], [(-7.0, -9.13397459621556), (-7.0, -8.556624327025935), (-6.5, -8.267949192431121), (-6.0, -8.556624327025935), (-6.0, -9.13397459621556), (-6.5, -9.422649730810374), (-7.0, -9.13397459621556)], [(-6.0, -9.13397459621556), (-6.0, -8.556624327025935), (-5.5, -8.267949192431121), (-5.0, -8.556624327025935), (-5.0, -9.13397459621556), (-5.5, -9.422649730810374), (-6.0, -9.13397459621556)], [(-5.0, -9.13397459621556), (-5.0, -8.556624327025935), (-4.5, -8.267949192431121), (-4.0, -8.556624327025935), (-4.0, -9.13397459621556), (-4.5, -9.422649730810374), (-5.0, -9.13397459621556)], [(-4.0, -9.13397459621556), (-4.0, -8.556624327025935), (-3.5, -8.267949192431121), (-3.0, -8.556624327025935), (-3.0, -9.13397459621556), (-3.5, -9.422649730810374), (-4.0, -9.13397459621556)], [(-3.0, -9.13397459621556), (-3.0, -8.556624327025935), (-2.5, -8.267949192431121), (-2.0, -8.556624327025935), (-2.0, -9.13397459621556), (-2.5, -9.422649730810374), (-3.0, -9.13397459621556)], [(-2.0, -9.13397459621556), (-2.0, -8.556624327025935), (-1.5, -8.267949192431121), (-1.0, -8.556624327025935), (-1.0, -9.13397459621556), (-1.5, -9.422649730810374), (-2.0, -9.13397459621556)], [(-1.0, -9.13397459621556), (-1.0, -8.556624327025935), (-0.5, -8.267949192431121), (0.0, -8.556624327025935), (0.0, -9.13397459621556), (-0.5, -9.422649730810374), (-1.0, -9.13397459621556)], [(0.0, -9.13397459621556), (0.0, -8.556624327025935), (0.5, -8.267949192431121), (1.0, -8.556624327025935), (1.0, -9.13397459621556), (0.5, -9.422649730810374), (0.0, -9.13397459621556)], [(1.0, -9.13397459621556), (1.0, -8.556624327025935), (1.5, -8.267949192431121), (2.0, -8.556624327025935), (2.0, -9.13397459621556), (1.5, -9.422649730810374), (1.0, -9.13397459621556)], [(2.0, -9.13397459621556), (2.0, -8.556624327025935), (2.5, -8.267949192431121), (3.0, -8.556624327025935), (3.0, -9.13397459621556), (2.5, -9.422649730810374), (2.0, -9.13397459621556)], [(3.0, -9.13397459621556), (3.0, -8.556624327025935), (3.5, -8.267949192431121), (4.0, -8.556624327025935), (4.0, -9.13397459621556), (3.5, -9.422649730810374), (3.0, -9.13397459621556)], [(4.0, -9.13397459621556), (4.0, -8.556624327025935), (4.5, -8.267949192431121), (5.0, -8.556624327025935), (5.0, -9.13397459621556), (4.5, -9.422649730810374), (4.0, -9.13397459621556)], [(5.0, -9.13397459621556), (5.0, -8.556624327025935), (5.5, -8.267949192431121), (6.0, -8.556624327025935), (6.0, -9.13397459621556), (5.5, -9.422649730810374), (5.0, -9.13397459621556)], [(6.0, -9.13397459621556), (6.0, -8.556624327025935), (6.5, -8.267949192431121), (7.0, -8.556624327025935), (7.0, -9.13397459621556), (6.5, -9.422649730810374), (6.0, -9.13397459621556)], [(7.0, -9.13397459621556), (7.0, -8.556624327025935), (7.5, -8.267949192431121), (8.0, -8.556624327025935), (8.0, -9.13397459621556), (7.5, -9.422649730810374), (7.0, -9.13397459621556)], [(8.0, -9.13397459621556), (8.0, -8.556624327025935), (8.5, -8.267949192431121), (9.0, -8.556624327025935), (9.0, -9.13397459621556), (8.5, -9.422649730810374), (8.0, -9.13397459621556)], [(9.0, -9.13397459621556), (9.0, -8.556624327025935), (9.5, -8.267949192431121), (10.0, -8.556624327025935), (10.0, -9.13397459621556), (9.5, -9.422649730810374), (9.0, -9.13397459621556)], [(10.0, -9.13397459621556), (10.0, -8.556624327025935), (10.5, -8.267949192431121), (11.0, -8.556624327025935), (11.0, -9.13397459621556), (10.5, -9.422649730810374), (10.0, -9.13397459621556)], [(-10.5, -8.267949192431121), (-10.5, -7.690598923241496), (-10.0, -7.401923788646683), (-9.5, -7.690598923241496), (-9.5, -8.267949192431121), (-10.0, -8.556624327025935), (-10.5, -8.267949192431121)], [(-9.5, -8.267949192431121), (-9.5, -7.690598923241496), (-9.0, -7.401923788646683), (-8.5, -7.690598923241496), (-8.5, -8.267949192431121), (-9.0, -8.556624327025935), (-9.5, -8.267949192431121)], [(-8.5, -8.267949192431121), (-8.5, -7.690598923241496), (-8.0, -7.401923788646683), (-7.5, -7.690598923241496), (-7.5, -8.267949192431121), (-8.0, -8.556624327025935), (-8.5, -8.267949192431121)], [(-7.5, -8.267949192431121), (-7.5, -7.690598923241496), (-7.0, -7.401923788646683), (-6.5, -7.690598923241496), (-6.5, -8.267949192431121), (-7.0, -8.556624327025935), (-7.5, -8.267949192431121)], [(-6.5, -8.267949192431121), (-6.5, -7.690598923241496), (-6.0, -7.401923788646683), (-5.5, -7.690598923241496), (-5.5, -8.267949192431121), (-6.0, -8.556624327025935), (-6.5, -8.267949192431121)], [(-5.5, -8.267949192431121), (-5.5, -7.690598923241496), (-5.0, -7.401923788646683), (-4.5, -7.690598923241496), (-4.5, -8.267949192431121), (-5.0, -8.556624327025935), (-5.5, -8.267949192431121)], [(-4.5, -8.267949192431121), (-4.5, -7.690598923241496), (-4.0, -7.401923788646683), (-3.5, -7.690598923241496), (-3.5, -8.267949192431121), (-4.0, -8.556624327025935), (-4.5, -8.267949192431121)], [(-3.5, -8.267949192431121), (-3.5, -7.690598923241496), (-3.0, -7.401923788646683), (-2.5, -7.690598923241496), (-2.5, -8.267949192431121), (-3.0, -8.556624327025935), (-3.5, -8.267949192431121)], [(-2.5, -8.267949192431121), (-2.5, -7.690598923241496), (-2.0, -7.401923788646683), (-1.5, -7.690598923241496), (-1.5, -8.267949192431121), (-2.0, -8.556624327025935), (-2.5, -8.267949192431121)], [(-1.5, -8.267949192431121), (-1.5, -7.690598923241496), (-1.0, -7.401923788646683), (-0.5, -7.690598923241496), (-0.5, -8.267949192431121), (-1.0, -8.556624327025935), (-1.5, -8.267949192431121)], [(-0.5, -8.267949192431121), (-0.5, -7.690598923241496), (0.0, -7.401923788646683), (0.5, -7.690598923241496), (0.5, -8.267949192431121), (0.0, -8.556624327025935), (-0.5, -8.267949192431121)], [(0.5, -8.267949192431121), (0.5, -7.690598923241496), (1.0, -7.401923788646683), (1.5, -7.690598923241496), (1.5, -8.267949192431121), (1.0, -8.556624327025935), (0.5, -8.267949192431121)], [(1.5, -8.267949192431121), (1.5, -7.690598923241496), (2.0, -7.401923788646683), (2.5, -7.690598923241496), (2.5, -8.267949192431121), (2.0, -8.556624327025935), (1.5, -8.267949192431121)], [(2.5, -8.267949192431121), (2.5, -7.690598923241496), (3.0, -7.401923788646683), (3.5, -7.690598923241496), (3.5, -8.267949192431121), (3.0, -8.556624327025935), (2.5, -8.267949192431121)], [(3.5, -8.267949192431121), (3.5, -7.690598923241496), (4.0, -7.401923788646683), (4.5, -7.690598923241496), (4.5, -8.267949192431121), (4.0, -8.556624327025935), (3.5, -8.267949192431121)], [(4.5, -8.267949192431121), (4.5, -7.690598923241496), (5.0, -7.401923788646683), (5.5, -7.690598923241496), (5.5, -8.267949192431121), (5.0, -8.556624327025935), (4.5, -8.267949192431121)], [(5.5, -8.267949192431121), (5.5, -7.690598923241496), (6.0, -7.401923788646683), (6.5, -7.690598923241496), (6.5, -8.267949192431121), (6.0, -8.556624327025935), (5.5, -8.267949192431121)], [(6.5, -8.267949192431121), (6.5, -7.690598923241496), (7.0, -7.401923788646683), (7.5, -7.690598923241496), (7.5, -8.267949192431121), (7.0, -8.556624327025935), (6.5, -8.267949192431121)], [(7.5, -8.267949192431121), (7.5, -7.690598923241496), (8.0, -7.401923788646683), (8.5, -7.690598923241496), (8.5, -8.267949192431121), (8.0, -8.556624327025935), (7.5, -8.267949192431121)], [(8.5, -8.267949192431121), (8.5, -7.690598923241496), (9.0, -7.401923788646683), (9.5, -7.690598923241496), (9.5, -8.267949192431121), (9.0, -8.556624327025935), (8.5, -8.267949192431121)], [(9.5, -8.267949192431121), (9.5, -7.690598923241496), (10.0, -7.401923788646683), (10.5, -7.690598923241496), (10.5, -8.267949192431121), (10.0, -8.556624327025935), (9.5, -8.267949192431121)], [(10.5, -8.267949192431121), (10.5, -7.690598923241496), (11.0, -7.401923788646683), (11.5, -7.690598923241496), (11.5, -8.267949192431121), (11.0, -8.556624327025935), (10.5, -8.267949192431121)], [(-11.0, -7.401923788646683), (-11.0, -6.824573519457058), (-10.5, -6.535898384862245), (-10.0, -6.824573519457058), (-10.0, -7.401923788646683), (-10.5, -7.690598923241496), (-11.0, -7.401923788646683)], [(-10.0, -7.401923788646683), (-10.0, -6.824573519457058), (-9.5, -6.535898384862245), (-9.0, -6.824573519457058), (-9.0, -7.401923788646683), (-9.5, -7.690598923241496), (-10.0, -7.401923788646683)], [(-9.0, -7.401923788646683), (-9.0, -6.824573519457058), (-8.5, -6.535898384862245), (-8.0, -6.824573519457058), (-8.0, -7.401923788646683), (-8.5, -7.690598923241496), (-9.0, -7.401923788646683)], [(-8.0, -7.401923788646683), (-8.0, -6.824573519457058), (-7.5, -6.535898384862245), (-7.0, -6.824573519457058), (-7.0, -7.401923788646683), (-7.5, -7.690598923241496), (-8.0, -7.401923788646683)], [(-7.0, -7.401923788646683), (-7.0, -6.824573519457058), (-6.5, -6.535898384862245), (-6.0, -6.824573519457058), (-6.0, -7.401923788646683), (-6.5, -7.690598923241496), (-7.0, -7.401923788646683)], [(-6.0, -7.401923788646683), (-6.0, -6.824573519457058), (-5.5, -6.535898384862245), (-5.0, -6.824573519457058), (-5.0, -7.401923788646683), (-5.5, -7.690598923241496), (-6.0, -7.401923788646683)], [(-5.0, -7.401923788646683), (-5.0, -6.824573519457058), (-4.5, -6.535898384862245), (-4.0, -6.824573519457058), (-4.0, -7.401923788646683), (-4.5, -7.690598923241496), (-5.0, -7.401923788646683)], [(-4.0, -7.401923788646683), (-4.0, -6.824573519457058), (-3.5, -6.535898384862245), (-3.0, -6.824573519457058), (-3.0, -7.401923788646683), (-3.5, -7.690598923241496), (-4.0, -7.401923788646683)], [(-3.0, -7.401923788646683), (-3.0, -6.824573519457058), (-2.5, -6.535898384862245), (-2.0, -6.824573519457058), (-2.0, -7.401923788646683), (-2.5, -7.690598923241496), (-3.0, -7.401923788646683)], [(-2.0, -7.401923788646683), (-2.0, -6.824573519457058), (-1.5, -6.535898384862245), (-1.0, -6.824573519457058), (-1.0, -7.401923788646683), (-1.5, -7.690598923241496), (-2.0, -7.401923788646683)], [(-1.0, -7.401923788646683), (-1.0, -6.824573519457058), (-0.5, -6.535898384862245), (0.0, -6.824573519457058), (0.0, -7.401923788646683), (-0.5, -7.690598923241496), (-1.0, -7.401923788646683)], [(0.0, -7.401923788646683), (0.0, -6.824573519457058), (0.5, -6.535898384862245), (1.0, -6.824573519457058), (1.0, -7.401923788646683), (0.5, -7.690598923241496), (0.0, -7.401923788646683)], [(1.0, -7.401923788646683), (1.0, -6.824573519457058), (1.5, -6.535898384862245), (2.0, -6.824573519457058), (2.0, -7.401923788646683), (1.5, -7.690598923241496), (1.0, -7.401923788646683)], [(2.0, -7.401923788646683), (2.0, -6.824573519457058), (2.5, -6.535898384862245), (3.0, -6.824573519457058), (3.0, -7.401923788646683), (2.5, -7.690598923241496), (2.0, -7.401923788646683)], [(3.0, -7.401923788646683), (3.0, -6.824573519457058), (3.5, -6.535898384862245), (4.0, -6.824573519457058), (4.0, -7.401923788646683), (3.5, -7.690598923241496), (3.0, -7.401923788646683)], [(4.0, -7.401923788646683), (4.0, -6.824573519457058), (4.5, -6.535898384862245), (5.0, -6.824573519457058), (5.0, -7.401923788646683), (4.5, -7.690598923241496), (4.0, -7.401923788646683)], [(5.0, -7.401923788646683), (5.0, -6.824573519457058), (5.5, -6.535898384862245), (6.0, -6.824573519457058), (6.0, -7.401923788646683), (5.5, -7.690598923241496), (5.0, -7.401923788646683)], [(6.0, -7.401923788646683), (6.0, -6.824573519457058), (6.5, -6.535898384862245), (7.0, -6.824573519457058), (7.0, -7.401923788646683), (6.5, -7.690598923241496), (6.0, -7.401923788646683)], [(7.0, -7.401923788646683), (7.0, -6.824573519457058), (7.5, -6.535898384862245), (8.0, -6.824573519457058), (8.0, -7.401923788646683), (7.5, -7.690598923241496), (7.0, -7.401923788646683)], [(8.0, -7.401923788646683), (8.0, -6.824573519457058), (8.5, -6.535898384862245), (9.0, -6.824573519457058), (9.0, -7.401923788646683), (8.5, -7.690598923241496), (8.0, -7.401923788646683)], [(9.0, -7.401923788646683), (9.0, -6.824573519457058), (9.5, -6.535898384862245), (10.0, -6.824573519457058), (10.0, -7.401923788646683), (9.5, -7.690598923241496), (9.0, -7.401923788646683)], [(10.0, -7.401923788646683), (10.0, -6.824573519457058), (10.5, -6.535898384862245), (11.0, -6.824573519457058), (11.0, -7.401923788646683), (10.5, -7.690598923241496), (10.0, -7.401923788646683)], [(-10.5, -6.535898384862245), (-10.5, -5.958548115672619), (-10.0, -5.669872981077806), (-9.5, -5.958548115672619), (-9.5, -6.535898384862245), (-10.0, -6.824573519457058), (-10.5, -6.535898384862245)], [(-9.5, -6.535898384862245), (-9.5, -5.958548115672619), (-9.0, -5.669872981077806), (-8.5, -5.958548115672619), (-8.5, -6.535898384862245), (-9.0, -6.824573519457058), (-9.5, -6.535898384862245)], [(-8.5, -6.535898384862245), (-8.5, -5.958548115672619), (-8.0, -5.669872981077806), (-7.5, -5.958548115672619), (-7.5, -6.535898384862245), (-8.0, -6.824573519457058), (-8.5, -6.535898384862245)], [(-7.5, -6.535898384862245), (-7.5, -5.958548115672619), (-7.0, -5.669872981077806), (-6.5, -5.958548115672619), (-6.5, -6.535898384862245), (-7.0, -6.824573519457058), (-7.5, -6.535898384862245)], [(-6.5, -6.535898384862245), (-6.5, -5.958548115672619), (-6.0, -5.669872981077806), (-5.5, -5.958548115672619), (-5.5, -6.535898384862245), (-6.0, -6.824573519457058), (-6.5, -6.535898384862245)], [(-5.5, -6.535898384862245), (-5.5, -5.958548115672619), (-5.0, -5.669872981077806), (-4.5, -5.958548115672619), (-4.5, -6.535898384862245), (-5.0, -6.824573519457058), (-5.5, -6.535898384862245)], [(-4.5, -6.535898384862245), (-4.5, -5.958548115672619), (-4.0, -5.669872981077806), (-3.5, -5.958548115672619), (-3.5, -6.535898384862245), (-4.0, -6.824573519457058), (-4.5, -6.535898384862245)], [(-3.5, -6.535898384862245), (-3.5, -5.958548115672619), (-3.0, -5.669872981077806), (-2.5, -5.958548115672619), (-2.5, -6.535898384862245), (-3.0, -6.824573519457058), (-3.5, -6.535898384862245)], [(-2.5, -6.535898384862245), (-2.5, -5.958548115672619), (-2.0, -5.669872981077806), (-1.5, -5.958548115672619), (-1.5, -6.535898384862245), (-2.0, -6.824573519457058), (-2.5, -6.535898384862245)], [(-1.5, -6.535898384862245), (-1.5, -5.958548115672619), (-1.0, -5.669872981077806), (-0.5, -5.958548115672619), (-0.5, -6.535898384862245), (-1.0, -6.824573519457058), (-1.5, -6.535898384862245)], [(-0.5, -6.535898384862245), (-0.5, -5.958548115672619), (0.0, -5.669872981077806), (0.5, -5.958548115672619), (0.5, -6.535898384862245), (0.0, -6.824573519457058), (-0.5, -6.535898384862245)], [(0.5, -6.535898384862245), (0.5, -5.958548115672619), (1.0, -5.669872981077806), (1.5, -5.958548115672619), (1.5, -6.535898384862245), (1.0, -6.824573519457058), (0.5, -6.535898384862245)], [(1.5, -6.535898384862245), (1.5, -5.958548115672619), (2.0, -5.669872981077806), (2.5, -5.958548115672619), (2.5, -6.535898384862245), (2.0, -6.824573519457058), (1.5, -6.535898384862245)], [(2.5, -6.535898384862245), (2.5, -5.958548115672619), (3.0, -5.669872981077806), (3.5, -5.958548115672619), (3.5, -6.535898384862245), (3.0, -6.824573519457058), (2.5, -6.535898384862245)], [(3.5, -6.535898384862245), (3.5, -5.958548115672619), (4.0, -5.669872981077806), (4.5, -5.958548115672619), (4.5, -6.535898384862245), (4.0, -6.824573519457058), (3.5, -6.535898384862245)], [(4.5, -6.535898384862245), (4.5, -5.958548115672619), (5.0, -5.669872981077806), (5.5, -5.958548115672619), (5.5, -6.535898384862245), (5.0, -6.824573519457058), (4.5, -6.535898384862245)], [(5.5, -6.535898384862245), (5.5, -5.958548115672619), (6.0, -5.669872981077806), (6.5, -5.958548115672619), (6.5, -6.535898384862245), (6.0, -6.824573519457058), (5.5, -6.535898384862245)], [(6.5, -6.535898384862245), (6.5, -5.958548115672619), (7.0, -5.669872981077806), (7.5, -5.958548115672619), (7.5, -6.535898384862245), (7.0, -6.824573519457058), (6.5, -6.535898384862245)], [(7.5, -6.535898384862245), (7.5, -5.958548115672619), (8.0, -5.669872981077806), (8.5, -5.958548115672619), (8.5, -6.535898384862245), (8.0, -6.824573519457058), (7.5, -6.535898384862245)], [(8.5, -6.535898384862245), (8.5, -5.958548115672619), (9.0, -5.669872981077806), (9.5, -5.958548115672619), (9.5, -6.535898384862245), (9.0, -6.824573519457058), (8.5, -6.535898384862245)], [(9.5, -6.535898384862245), (9.5, -5.958548115672619), (10.0, -5.669872981077806), (10.5, -5.958548115672619), (10.5, -6.535898384862245), (10.0, -6.824573519457058), (9.5, -6.535898384862245)], [(10.5, -6.535898384862245), (10.5, -5.958548115672619), (11.0, -5.669872981077806), (11.5, -5.958548115672619), (11.5, -6.535898384862245), (11.0, -6.824573519457058), (10.5, -6.535898384862245)], [(-11.0, -5.669872981077806), (-11.0, -5.092522711888181), (-10.5, -4.803847577293368), (-10.0, -5.092522711888181), (-10.0, -5.669872981077806), (-10.5, -5.958548115672619), (-11.0, -5.669872981077806)], [(-10.0, -5.669872981077806), (-10.0, -5.092522711888181), (-9.5, -4.803847577293368), (-9.0, -5.092522711888181), (-9.0, -5.669872981077806), (-9.5, -5.958548115672619), (-10.0, -5.669872981077806)], [(-9.0, -5.669872981077806), (-9.0, -5.092522711888181), (-8.5, -4.803847577293368), (-8.0, -5.092522711888181), (-8.0, -5.669872981077806), (-8.5, -5.958548115672619), (-9.0, -5.669872981077806)], [(-8.0, -5.669872981077806), (-8.0, -5.092522711888181), (-7.5, -4.803847577293368), (-7.0, -5.092522711888181), (-7.0, -5.669872981077806), (-7.5, -5.958548115672619), (-8.0, -5.669872981077806)], [(-7.0, -5.669872981077806), (-7.0, -5.092522711888181), (-6.5, -4.803847577293368), (-6.0, -5.092522711888181), (-6.0, -5.669872981077806), (-6.5, -5.958548115672619), (-7.0, -5.669872981077806)], [(-6.0, -5.669872981077806), (-6.0, -5.092522711888181), (-5.5, -4.803847577293368), (-5.0, -5.092522711888181), (-5.0, -5.669872981077806), (-5.5, -5.958548115672619), (-6.0, -5.669872981077806)], [(-5.0, -5.669872981077806), (-5.0, -5.092522711888181), (-4.5, -4.803847577293368), (-4.0, -5.092522711888181), (-4.0, -5.669872981077806), (-4.5, -5.958548115672619), (-5.0, -5.669872981077806)], [(-4.0, -5.669872981077806), (-4.0, -5.092522711888181), (-3.5, -4.803847577293368), (-3.0, -5.092522711888181), (-3.0, -5.669872981077806), (-3.5, -5.958548115672619), (-4.0, -5.669872981077806)], [(-3.0, -5.669872981077806), (-3.0, -5.092522711888181), (-2.5, -4.803847577293368), (-2.0, -5.092522711888181), (-2.0, -5.669872981077806), (-2.5, -5.958548115672619), (-3.0, -5.669872981077806)], [(-2.0, -5.669872981077806), (-2.0, -5.092522711888181), (-1.5, -4.803847577293368), (-1.0, -5.092522711888181), (-1.0, -5.669872981077806), (-1.5, -5.958548115672619), (-2.0, -5.669872981077806)], [(-1.0, -5.669872981077806), (-1.0, -5.092522711888181), (-0.5, -4.803847577293368), (0.0, -5.092522711888181), (0.0, -5.669872981077806), (-0.5, -5.958548115672619), (-1.0, -5.669872981077806)], [(0.0, -5.669872981077806), (0.0, -5.092522711888181), (0.5, -4.803847577293368), (1.0, -5.092522711888181), (1.0, -5.669872981077806), (0.5, -5.958548115672619), (0.0, -5.669872981077806)], [(1.0, -5.669872981077806), (1.0, -5.092522711888181), (1.5, -4.803847577293368), (2.0, -5.092522711888181), (2.0, -5.669872981077806), (1.5, -5.958548115672619), (1.0, -5.669872981077806)], [(2.0, -5.669872981077806), (2.0, -5.092522711888181), (2.5, -4.803847577293368), (3.0, -5.092522711888181), (3.0, -5.669872981077806), (2.5, -5.958548115672619), (2.0, -5.669872981077806)], [(3.0, -5.669872981077806), (3.0, -5.092522711888181), (3.5, -4.803847577293368), (4.0, -5.092522711888181), (4.0, -5.669872981077806), (3.5, -5.958548115672619), (3.0, -5.669872981077806)], [(4.0, -5.669872981077806), (4.0, -5.092522711888181), (4.5, -4.803847577293368), (5.0, -5.092522711888181), (5.0, -5.669872981077806), (4.5, -5.958548115672619), (4.0, -5.669872981077806)], [(5.0, -5.669872981077806), (5.0, -5.092522711888181), (5.5, -4.803847577293368), (6.0, -5.092522711888181), (6.0, -5.669872981077806), (5.5, -5.958548115672619), (5.0, -5.669872981077806)], [(6.0, -5.669872981077806), (6.0, -5.092522711888181), (6.5, -4.803847577293368), (7.0, -5.092522711888181), (7.0, -5.669872981077806), (6.5, -5.958548115672619), (6.0, -5.669872981077806)], [(7.0, -5.669872981077806), (7.0, -5.092522711888181), (7.5, -4.803847577293368), (8.0, -5.092522711888181), (8.0, -5.669872981077806), (7.5, -5.958548115672619), (7.0, -5.669872981077806)], [(8.0, -5.669872981077806), (8.0, -5.092522711888181), (8.5, -4.803847577293368), (9.0, -5.092522711888181), (9.0, -5.669872981077806), (8.5, -5.958548115672619), (8.0, -5.669872981077806)], [(9.0, -5.669872981077806), (9.0, -5.092522711888181), (9.5, -4.803847577293368), (10.0, -5.092522711888181), (10.0, -5.669872981077806), (9.5, -5.958548115672619), (9.0, -5.669872981077806)], [(10.0, -5.669872981077806), (10.0, -5.092522711888181), (10.5, -4.803847577293368), (11.0, -5.092522711888181), (11.0, -5.669872981077806), (10.5, -5.958548115672619), (10.0, -5.669872981077806)], [(-10.5, -4.803847577293368), (-10.5, -4.226497308103743), (-10.0, -3.9378221735089296), (-9.5, -4.226497308103743), (-9.5, -4.803847577293368), (-10.0, -5.092522711888181), (-10.5, -4.803847577293368)], [(-9.5, -4.803847577293368), (-9.5, -4.226497308103743), (-9.0, -3.9378221735089296), (-8.5, -4.226497308103743), (-8.5, -4.803847577293368), (-9.0, -5.092522711888181), (-9.5, -4.803847577293368)], [(-8.5, -4.803847577293368), (-8.5, -4.226497308103743), (-8.0, -3.9378221735089296), (-7.5, -4.226497308103743), (-7.5, -4.803847577293368), (-8.0, -5.092522711888181), (-8.5, -4.803847577293368)], [(-7.5, -4.803847577293368), (-7.5, -4.226497308103743), (-7.0, -3.9378221735089296), (-6.5, -4.226497308103743), (-6.5, -4.803847577293368), (-7.0, -5.092522711888181), (-7.5, -4.803847577293368)], [(-6.5, -4.803847577293368), (-6.5, -4.226497308103743), (-6.0, -3.9378221735089296), (-5.5, -4.226497308103743), (-5.5, -4.803847577293368), (-6.0, -5.092522711888181), (-6.5, -4.803847577293368)], [(-5.5, -4.803847577293368), (-5.5, -4.226497308103743), (-5.0, -3.9378221735089296), (-4.5, -4.226497308103743), (-4.5, -4.803847577293368), (-5.0, -5.092522711888181), (-5.5, -4.803847577293368)], [(-4.5, -4.803847577293368), (-4.5, -4.226497308103743), (-4.0, -3.9378221735089296), (-3.5, -4.226497308103743), (-3.5, -4.803847577293368), (-4.0, -5.092522711888181), (-4.5, -4.803847577293368)], [(-3.5, -4.803847577293368), (-3.5, -4.226497308103743), (-3.0, -3.9378221735089296), (-2.5, -4.226497308103743), (-2.5, -4.803847577293368), (-3.0, -5.092522711888181), (-3.5, -4.803847577293368)], [(-2.5, -4.803847577293368), (-2.5, -4.226497308103743), (-2.0, -3.9378221735089296), (-1.5, -4.226497308103743), (-1.5, -4.803847577293368), (-2.0, -5.092522711888181), (-2.5, -4.803847577293368)], [(-1.5, -4.803847577293368), (-1.5, -4.226497308103743), (-1.0, -3.9378221735089296), (-0.5, -4.226497308103743), (-0.5, -4.803847577293368), (-1.0, -5.092522711888181), (-1.5, -4.803847577293368)], [(-0.5, -4.803847577293368), (-0.5, -4.226497308103743), (0.0, -3.9378221735089296), (0.5, -4.226497308103743), (0.5, -4.803847577293368), (0.0, -5.092522711888181), (-0.5, -4.803847577293368)], [(0.5, -4.803847577293368), (0.5, -4.226497308103743), (1.0, -3.9378221735089296), (1.5, -4.226497308103743), (1.5, -4.803847577293368), (1.0, -5.092522711888181), (0.5, -4.803847577293368)], [(1.5, -4.803847577293368), (1.5, -4.226497308103743), (2.0, -3.9378221735089296), (2.5, -4.226497308103743), (2.5, -4.803847577293368), (2.0, -5.092522711888181), (1.5, -4.803847577293368)], [(2.5, -4.803847577293368), (2.5, -4.226497308103743), (3.0, -3.9378221735089296), (3.5, -4.226497308103743), (3.5, -4.803847577293368), (3.0, -5.092522711888181), (2.5, -4.803847577293368)], [(3.5, -4.803847577293368), (3.5, -4.226497308103743), (4.0, -3.9378221735089296), (4.5, -4.226497308103743), (4.5, -4.803847577293368), (4.0, -5.092522711888181), (3.5, -4.803847577293368)], [(4.5, -4.803847577293368), (4.5, -4.226497308103743), (5.0, -3.9378221735089296), (5.5, -4.226497308103743), (5.5, -4.803847577293368), (5.0, -5.092522711888181), (4.5, -4.803847577293368)], [(5.5, -4.803847577293368), (5.5, -4.226497308103743), (6.0, -3.9378221735089296), (6.5, -4.226497308103743), (6.5, -4.803847577293368), (6.0, -5.092522711888181), (5.5, -4.803847577293368)], [(6.5, -4.803847577293368), (6.5, -4.226497308103743), (7.0, -3.9378221735089296), (7.5, -4.226497308103743), (7.5, -4.803847577293368), (7.0, -5.092522711888181), (6.5, -4.803847577293368)], [(7.5, -4.803847577293368), (7.5, -4.226497308103743), (8.0, -3.9378221735089296), (8.5, -4.226497308103743), (8.5, -4.803847577293368), (8.0, -5.092522711888181), (7.5, -4.803847577293368)], [(8.5, -4.803847577293368), (8.5, -4.226497308103743), (9.0, -3.9378221735089296), (9.5, -4.226497308103743), (9.5, -4.803847577293368), (9.0, -5.092522711888181), (8.5, -4.803847577293368)], [(9.5, -4.803847577293368), (9.5, -4.226497308103743), (10.0, -3.9378221735089296), (10.5, -4.226497308103743), (10.5, -4.803847577293368), (10.0, -5.092522711888181), (9.5, -4.803847577293368)], [(10.5, -4.803847577293368), (10.5, -4.226497308103743), (11.0, -3.9378221735089296), (11.5, -4.226497308103743), (11.5, -4.803847577293368), (11.0, -5.092522711888181), (10.5, -4.803847577293368)], [(-11.0, -3.9378221735089296), (-11.0, -3.3604719043193043), (-10.5, -3.0717967697244912), (-10.0, -3.3604719043193043), (-10.0, -3.9378221735089296), (-10.5, -4.226497308103743), (-11.0, -3.9378221735089296)], [(-10.0, -3.9378221735089296), (-10.0, -3.3604719043193043), (-9.5, -3.0717967697244912), (-9.0, -3.3604719043193043), (-9.0, -3.9378221735089296), (-9.5, -4.226497308103743), (-10.0, -3.9378221735089296)], [(-9.0, -3.9378221735089296), (-9.0, -3.3604719043193043), (-8.5, -3.0717967697244912), (-8.0, -3.3604719043193043), (-8.0, -3.9378221735089296), (-8.5, -4.226497308103743), (-9.0, -3.9378221735089296)], [(-8.0, -3.9378221735089296), (-8.0, -3.3604719043193043), (-7.5, -3.0717967697244912), (-7.0, -3.3604719043193043), (-7.0, -3.9378221735089296), (-7.5, -4.226497308103743), (-8.0, -3.9378221735089296)], [(-7.0, -3.9378221735089296), (-7.0, -3.3604719043193043), (-6.5, -3.0717967697244912), (-6.0, -3.3604719043193043), (-6.0, -3.9378221735089296), (-6.5, -4.226497308103743), (-7.0, -3.9378221735089296)], [(-6.0, -3.9378221735089296), (-6.0, -3.3604719043193043), (-5.5, -3.0717967697244912), (-5.0, -3.3604719043193043), (-5.0, -3.9378221735089296), (-5.5, -4.226497308103743), (-6.0, -3.9378221735089296)], [(-5.0, -3.9378221735089296), (-5.0, -3.3604719043193043), (-4.5, -3.0717967697244912), (-4.0, -3.3604719043193043), (-4.0, -3.9378221735089296), (-4.5, -4.226497308103743), (-5.0, -3.9378221735089296)], [(-4.0, -3.9378221735089296), (-4.0, -3.3604719043193043), (-3.5, -3.0717967697244912), (-3.0, -3.3604719043193043), (-3.0, -3.9378221735089296), (-3.5, -4.226497308103743), (-4.0, -3.9378221735089296)], [(-3.0, -3.9378221735089296), (-3.0, -3.3604719043193043), (-2.5, -3.0717967697244912), (-2.0, -3.3604719043193043), (-2.0, -3.9378221735089296), (-2.5, -4.226497308103743), (-3.0, -3.9378221735089296)], [(-2.0, -3.9378221735089296), (-2.0, -3.3604719043193043), (-1.5, -3.0717967697244912), (-1.0, -3.3604719043193043), (-1.0, -3.9378221735089296), (-1.5, -4.226497308103743), (-2.0, -3.9378221735089296)], [(-1.0, -3.9378221735089296), (-1.0, -3.3604719043193043), (-0.5, -3.0717967697244912), (0.0, -3.3604719043193043), (0.0, -3.9378221735089296), (-0.5, -4.226497308103743), (-1.0, -3.9378221735089296)], [(0.0, -3.9378221735089296), (0.0, -3.3604719043193043), (0.5, -3.0717967697244912), (1.0, -3.3604719043193043), (1.0, -3.9378221735089296), (0.5, -4.226497308103743), (0.0, -3.9378221735089296)], [(1.0, -3.9378221735089296), (1.0, -3.3604719043193043), (1.5, -3.0717967697244912), (2.0, -3.3604719043193043), (2.0, -3.9378221735089296), (1.5, -4.226497308103743), (1.0, -3.9378221735089296)], [(2.0, -3.9378221735089296), (2.0, -3.3604719043193043), (2.5, -3.0717967697244912), (3.0, -3.3604719043193043), (3.0, -3.9378221735089296), (2.5, -4.226497308103743), (2.0, -3.9378221735089296)], [(3.0, -3.9378221735089296), (3.0, -3.3604719043193043), (3.5, -3.0717967697244912), (4.0, -3.3604719043193043), (4.0, -3.9378221735089296), (3.5, -4.226497308103743), (3.0, -3.9378221735089296)], [(4.0, -3.9378221735089296), (4.0, -3.3604719043193043), (4.5, -3.0717967697244912), (5.0, -3.3604719043193043), (5.0, -3.9378221735089296), (4.5, -4.226497308103743), (4.0, -3.9378221735089296)], [(5.0, -3.9378221735089296), (5.0, -3.3604719043193043), (5.5, -3.0717967697244912), (6.0, -3.3604719043193043), (6.0, -3.9378221735089296), (5.5, -4.226497308103743), (5.0, -3.9378221735089296)], [(6.0, -3.9378221735089296), (6.0, -3.3604719043193043), (6.5, -3.0717967697244912), (7.0, -3.3604719043193043), (7.0, -3.9378221735089296), (6.5, -4.226497308103743), (6.0, -3.9378221735089296)], [(7.0, -3.9378221735089296), (7.0, -3.3604719043193043), (7.5, -3.0717967697244912), (8.0, -3.3604719043193043), (8.0, -3.9378221735089296), (7.5, -4.226497308103743), (7.0, -3.9378221735089296)], [(8.0, -3.9378221735089296), (8.0, -3.3604719043193043), (8.5, -3.0717967697244912), (9.0, -3.3604719043193043), (9.0, -3.9378221735089296), (8.5, -4.226497308103743), (8.0, -3.9378221735089296)], [(9.0, -3.9378221735089296), (9.0, -3.3604719043193043), (9.5, -3.0717967697244912), (10.0, -3.3604719043193043), (10.0, -3.9378221735089296), (9.5, -4.226497308103743), (9.0, -3.9378221735089296)], [(10.0, -3.9378221735089296), (10.0, -3.3604719043193043), (10.5, -3.0717967697244912), (11.0, -3.3604719043193043), (11.0, -3.9378221735089296), (10.5, -4.226497308103743), (10.0, -3.9378221735089296)], [(-10.5, -3.0717967697244912), (-10.5, -2.494446500534866), (-10.0, -2.205771365940053), (-9.5, -2.494446500534866), (-9.5, -3.0717967697244912), (-10.0, -3.3604719043193043), (-10.5, -3.0717967697244912)], [(-9.5, -3.0717967697244912), (-9.5, -2.494446500534866), (-9.0, -2.205771365940053), (-8.5, -2.494446500534866), (-8.5, -3.0717967697244912), (-9.0, -3.3604719043193043), (-9.5, -3.0717967697244912)], [(-8.5, -3.0717967697244912), (-8.5, -2.494446500534866), (-8.0, -2.205771365940053), (-7.5, -2.494446500534866), (-7.5, -3.0717967697244912), (-8.0, -3.3604719043193043), (-8.5, -3.0717967697244912)], [(-7.5, -3.0717967697244912), (-7.5, -2.494446500534866), (-7.0, -2.205771365940053), (-6.5, -2.494446500534866), (-6.5, -3.0717967697244912), (-7.0, -3.3604719043193043), (-7.5, -3.0717967697244912)], [(-6.5, -3.0717967697244912), (-6.5, -2.494446500534866), (-6.0, -2.205771365940053), (-5.5, -2.494446500534866), (-5.5, -3.0717967697244912), (-6.0, -3.3604719043193043), (-6.5, -3.0717967697244912)], [(-5.5, -3.0717967697244912), (-5.5, -2.494446500534866), (-5.0, -2.205771365940053), (-4.5, -2.494446500534866), (-4.5, -3.0717967697244912), (-5.0, -3.3604719043193043), (-5.5, -3.0717967697244912)], [(-4.5, -3.0717967697244912), (-4.5, -2.494446500534866), (-4.0, -2.205771365940053), (-3.5, -2.494446500534866), (-3.5, -3.0717967697244912), (-4.0, -3.3604719043193043), (-4.5, -3.0717967697244912)], [(-3.5, -3.0717967697244912), (-3.5, -2.494446500534866), (-3.0, -2.205771365940053), (-2.5, -2.494446500534866), (-2.5, -3.0717967697244912), (-3.0, -3.3604719043193043), (-3.5, -3.0717967697244912)], [(-2.5, -3.0717967697244912), (-2.5, -2.494446500534866), (-2.0, -2.205771365940053), (-1.5, -2.494446500534866), (-1.5, -3.0717967697244912), (-2.0, -3.3604719043193043), (-2.5, -3.0717967697244912)], [(-1.5, -3.0717967697244912), (-1.5, -2.494446500534866), (-1.0, -2.205771365940053), (-0.5, -2.494446500534866), (-0.5, -3.0717967697244912), (-1.0, -3.3604719043193043), (-1.5, -3.0717967697244912)], [(-0.5, -3.0717967697244912), (-0.5, -2.494446500534866), (0.0, -2.205771365940053), (0.5, -2.494446500534866), (0.5, -3.0717967697244912), (0.0, -3.3604719043193043), (-0.5, -3.0717967697244912)], [(0.5, -3.0717967697244912), (0.5, -2.494446500534866), (1.0, -2.205771365940053), (1.5, -2.494446500534866), (1.5, -3.0717967697244912), (1.0, -3.3604719043193043), (0.5, -3.0717967697244912)], [(1.5, -3.0717967697244912), (1.5, -2.494446500534866), (2.0, -2.205771365940053), (2.5, -2.494446500534866), (2.5, -3.0717967697244912), (2.0, -3.3604719043193043), (1.5, -3.0717967697244912)], [(2.5, -3.0717967697244912), (2.5, -2.494446500534866), (3.0, -2.205771365940053), (3.5, -2.494446500534866), (3.5, -3.0717967697244912), (3.0, -3.3604719043193043), (2.5, -3.0717967697244912)], [(3.5, -3.0717967697244912), (3.5, -2.494446500534866), (4.0, -2.205771365940053), (4.5, -2.494446500534866), (4.5, -3.0717967697244912), (4.0, -3.3604719043193043), (3.5, -3.0717967697244912)], [(4.5, -3.0717967697244912), (4.5, -2.494446500534866), (5.0, -2.205771365940053), (5.5, -2.494446500534866), (5.5, -3.0717967697244912), (5.0, -3.3604719043193043), (4.5, -3.0717967697244912)], [(5.5, -3.0717967697244912), (5.5, -2.494446500534866), (6.0, -2.205771365940053), (6.5, -2.494446500534866), (6.5, -3.0717967697244912), (6.0, -3.3604719043193043), (5.5, -3.0717967697244912)], [(6.5, -3.0717967697244912), (6.5, -2.494446500534866), (7.0, -2.205771365940053), (7.5, -2.494446500534866), (7.5, -3.0717967697244912), (7.0, -3.3604719043193043), (6.5, -3.0717967697244912)], [(7.5, -3.0717967697244912), (7.5, -2.494446500534866), (8.0, -2.205771365940053), (8.5, -2.494446500534866), (8.5, -3.0717967697244912), (8.0, -3.3604719043193043), (7.5, -3.0717967697244912)], [(8.5, -3.0717967697244912), (8.5, -2.494446500534866), (9.0, -2.205771365940053), (9.5, -2.494446500534866), (9.5, -3.0717967697244912), (9.0, -3.3604719043193043), (8.5, -3.0717967697244912)], [(9.5, -3.0717967697244912), (9.5, -2.494446500534866), (10.0, -2.205771365940053), (10.5, -2.494446500534866), (10.5, -3.0717967697244912), (10.0, -3.3604719043193043), (9.5, -3.0717967697244912)], [(10.5, -3.0717967697244912), (10.5, -2.494446500534866), (11.0, -2.205771365940053), (11.5, -2.494446500534866), (11.5, -3.0717967697244912), (11.0, -3.3604719043193043), (10.5, -3.0717967697244912)], [(-11.0, -2.205771365940053), (-11.0, -1.6284210967504273), (-10.5, -1.3397459621556145), (-10.0, -1.6284210967504273), (-10.0, -2.205771365940053), (-10.5, -2.494446500534866), (-11.0, -2.205771365940053)], [(-10.0, -2.205771365940053), (-10.0, -1.6284210967504273), (-9.5, -1.3397459621556145), (-9.0, -1.6284210967504273), (-9.0, -2.205771365940053), (-9.5, -2.494446500534866), (-10.0, -2.205771365940053)], [(-9.0, -2.205771365940053), (-9.0, -1.6284210967504273), (-8.5, -1.3397459621556145), (-8.0, -1.6284210967504273), (-8.0, -2.205771365940053), (-8.5, -2.494446500534866), (-9.0, -2.205771365940053)], [(-8.0, -2.205771365940053), (-8.0, -1.6284210967504273), (-7.5, -1.3397459621556145), (-7.0, -1.6284210967504273), (-7.0, -2.205771365940053), (-7.5, -2.494446500534866), (-8.0, -2.205771365940053)], [(-7.0, -2.205771365940053), (-7.0, -1.6284210967504273), (-6.5, -1.3397459621556145), (-6.0, -1.6284210967504273), (-6.0, -2.205771365940053), (-6.5, -2.494446500534866), (-7.0, -2.205771365940053)], [(-6.0, -2.205771365940053), (-6.0, -1.6284210967504273), (-5.5, -1.3397459621556145), (-5.0, -1.6284210967504273), (-5.0, -2.205771365940053), (-5.5, -2.494446500534866), (-6.0, -2.205771365940053)], [(-5.0, -2.205771365940053), (-5.0, -1.6284210967504273), (-4.5, -1.3397459621556145), (-4.0, -1.6284210967504273), (-4.0, -2.205771365940053), (-4.5, -2.494446500534866), (-5.0, -2.205771365940053)], [(-4.0, -2.205771365940053), (-4.0, -1.6284210967504273), (-3.5, -1.3397459621556145), (-3.0, -1.6284210967504273), (-3.0, -2.205771365940053), (-3.5, -2.494446500534866), (-4.0, -2.205771365940053)], [(-3.0, -2.205771365940053), (-3.0, -1.6284210967504273), (-2.5, -1.3397459621556145), (-2.0, -1.6284210967504273), (-2.0, -2.205771365940053), (-2.5, -2.494446500534866), (-3.0, -2.205771365940053)], [(-2.0, -2.205771365940053), (-2.0, -1.6284210967504273), (-1.5, -1.3397459621556145), (-1.0, -1.6284210967504273), (-1.0, -2.205771365940053), (-1.5, -2.494446500534866), (-2.0, -2.205771365940053)], [(-1.0, -2.205771365940053), (-1.0, -1.6284210967504273), (-0.5, -1.3397459621556145), (0.0, -1.6284210967504273), (0.0, -2.205771365940053), (-0.5, -2.494446500534866), (-1.0, -2.205771365940053)], [(0.0, -2.205771365940053), (0.0, -1.6284210967504273), (0.5, -1.3397459621556145), (1.0, -1.6284210967504273), (1.0, -2.205771365940053), (0.5, -2.494446500534866), (0.0, -2.205771365940053)], [(1.0, -2.205771365940053), (1.0, -1.6284210967504273), (1.5, -1.3397459621556145), (2.0, -1.6284210967504273), (2.0, -2.205771365940053), (1.5, -2.494446500534866), (1.0, -2.205771365940053)], [(2.0, -2.205771365940053), (2.0, -1.6284210967504273), (2.5, -1.3397459621556145), (3.0, -1.6284210967504273), (3.0, -2.205771365940053), (2.5, -2.494446500534866), (2.0, -2.205771365940053)], [(3.0, -2.205771365940053), (3.0, -1.6284210967504273), (3.5, -1.3397459621556145), (4.0, -1.6284210967504273), (4.0, -2.205771365940053), (3.5, -2.494446500534866), (3.0, -2.205771365940053)], [(4.0, -2.205771365940053), (4.0, -1.6284210967504273), (4.5, -1.3397459621556145), (5.0, -1.6284210967504273), (5.0, -2.205771365940053), (4.5, -2.494446500534866), (4.0, -2.205771365940053)], [(5.0, -2.205771365940053), (5.0, -1.6284210967504273), (5.5, -1.3397459621556145), (6.0, -1.6284210967504273), (6.0, -2.205771365940053), (5.5, -2.494446500534866), (5.0, -2.205771365940053)], [(6.0, -2.205771365940053), (6.0, -1.6284210967504273), (6.5, -1.3397459621556145), (7.0, -1.6284210967504273), (7.0, -2.205771365940053), (6.5, -2.494446500534866), (6.0, -2.205771365940053)], [(7.0, -2.205771365940053), (7.0, -1.6284210967504273), (7.5, -1.3397459621556145), (8.0, -1.6284210967504273), (8.0, -2.205771365940053), (7.5, -2.494446500534866), (7.0, -2.205771365940053)], [(8.0, -2.205771365940053), (8.0, -1.6284210967504273), (8.5, -1.3397459621556145), (9.0, -1.6284210967504273), (9.0, -2.205771365940053), (8.5, -2.494446500534866), (8.0, -2.205771365940053)], [(9.0, -2.205771365940053), (9.0, -1.6284210967504273), (9.5, -1.3397459621556145), (10.0, -1.6284210967504273), (10.0, -2.205771365940053), (9.5, -2.494446500534866), (9.0, -2.205771365940053)], [(10.0, -2.205771365940053), (10.0, -1.6284210967504273), (10.5, -1.3397459621556145), (11.0, -1.6284210967504273), (11.0, -2.205771365940053), (10.5, -2.494446500534866), (10.0, -2.205771365940053)], [(-10.5, -1.3397459621556145), (-10.5, -0.7623956929659887), (-10.0, -0.4737205583711759), (-9.5, -0.7623956929659887), (-9.5, -1.3397459621556145), (-10.0, -1.6284210967504273), (-10.5, -1.3397459621556145)], [(-9.5, -1.3397459621556145), (-9.5, -0.7623956929659887), (-9.0, -0.4737205583711759), (-8.5, -0.7623956929659887), (-8.5, -1.3397459621556145), (-9.0, -1.6284210967504273), (-9.5, -1.3397459621556145)], [(-8.5, -1.3397459621556145), (-8.5, -0.7623956929659887), (-8.0, -0.4737205583711759), (-7.5, -0.7623956929659887), (-7.5, -1.3397459621556145), (-8.0, -1.6284210967504273), (-8.5, -1.3397459621556145)], [(-7.5, -1.3397459621556145), (-7.5, -0.7623956929659887), (-7.0, -0.4737205583711759), (-6.5, -0.7623956929659887), (-6.5, -1.3397459621556145), (-7.0, -1.6284210967504273), (-7.5, -1.3397459621556145)], [(-6.5, -1.3397459621556145), (-6.5, -0.7623956929659887), (-6.0, -0.4737205583711759), (-5.5, -0.7623956929659887), (-5.5, -1.3397459621556145), (-6.0, -1.6284210967504273), (-6.5, -1.3397459621556145)], [(-5.5, -1.3397459621556145), (-5.5, -0.7623956929659887), (-5.0, -0.4737205583711759), (-4.5, -0.7623956929659887), (-4.5, -1.3397459621556145), (-5.0, -1.6284210967504273), (-5.5, -1.3397459621556145)], [(-4.5, -1.3397459621556145), (-4.5, -0.7623956929659887), (-4.0, -0.4737205583711759), (-3.5, -0.7623956929659887), (-3.5, -1.3397459621556145), (-4.0, -1.6284210967504273), (-4.5, -1.3397459621556145)], [(-3.5, -1.3397459621556145), (-3.5, -0.7623956929659887), (-3.0, -0.4737205583711759), (-2.5, -0.7623956929659887), (-2.5, -1.3397459621556145), (-3.0, -1.6284210967504273), (-3.5, -1.3397459621556145)], [(-2.5, -1.3397459621556145), (-2.5, -0.7623956929659887), (-2.0, -0.4737205583711759), (-1.5, -0.7623956929659887), (-1.5, -1.3397459621556145), (-2.0, -1.6284210967504273), (-2.5, -1.3397459621556145)], [(-1.5, -1.3397459621556145), (-1.5, -0.7623956929659887), (-1.0, -0.4737205583711759), (-0.5, -0.7623956929659887), (-0.5, -1.3397459621556145), (-1.0, -1.6284210967504273), (-1.5, -1.3397459621556145)], [(-0.5, -1.3397459621556145), (-0.5, -0.7623956929659887), (0.0, -0.4737205583711759), (0.5, -0.7623956929659887), (0.5, -1.3397459621556145), (0.0, -1.6284210967504273), (-0.5, -1.3397459621556145)], [(0.5, -1.3397459621556145), (0.5, -0.7623956929659887), (1.0, -0.4737205583711759), (1.5, -0.7623956929659887), (1.5, -1.3397459621556145), (1.0, -1.6284210967504273), (0.5, -1.3397459621556145)], [(1.5, -1.3397459621556145), (1.5, -0.7623956929659887), (2.0, -0.4737205583711759), (2.5, -0.7623956929659887), (2.5, -1.3397459621556145), (2.0, -1.6284210967504273), (1.5, -1.3397459621556145)], [(2.5, -1.3397459621556145), (2.5, -0.7623956929659887), (3.0, -0.4737205583711759), (3.5, -0.7623956929659887), (3.5, -1.3397459621556145), (3.0, -1.6284210967504273), (2.5, -1.3397459621556145)], [(3.5, -1.3397459621556145), (3.5, -0.7623956929659887), (4.0, -0.4737205583711759), (4.5, -0.7623956929659887), (4.5, -1.3397459621556145), (4.0, -1.6284210967504273), (3.5, -1.3397459621556145)], [(4.5, -1.3397459621556145), (4.5, -0.7623956929659887), (5.0, -0.4737205583711759), (5.5, -0.7623956929659887), (5.5, -1.3397459621556145), (5.0, -1.6284210967504273), (4.5, -1.3397459621556145)], [(5.5, -1.3397459621556145), (5.5, -0.7623956929659887), (6.0, -0.4737205583711759), (6.5, -0.7623956929659887), (6.5, -1.3397459621556145), (6.0, -1.6284210967504273), (5.5, -1.3397459621556145)], [(6.5, -1.3397459621556145), (6.5, -0.7623956929659887), (7.0, -0.4737205583711759), (7.5, -0.7623956929659887), (7.5, -1.3397459621556145), (7.0, -1.6284210967504273), (6.5, -1.3397459621556145)], [(7.5, -1.3397459621556145), (7.5, -0.7623956929659887), (8.0, -0.4737205583711759), (8.5, -0.7623956929659887), (8.5, -1.3397459621556145), (8.0, -1.6284210967504273), (7.5, -1.3397459621556145)], [(8.5, -1.3397459621556145), (8.5, -0.7623956929659887), (9.0, -0.4737205583711759), (9.5, -0.7623956929659887), (9.5, -1.3397459621556145), (9.0, -1.6284210967504273), (8.5, -1.3397459621556145)], [(9.5, -1.3397459621556145), (9.5, -0.7623956929659887), (10.0, -0.4737205583711759), (10.5, -0.7623956929659887), (10.5, -1.3397459621556145), (10.0, -1.6284210967504273), (9.5, -1.3397459621556145)], [(10.5, -1.3397459621556145), (10.5, -0.7623956929659887), (11.0, -0.4737205583711759), (11.5, -0.7623956929659887), (11.5, -1.3397459621556145), (11.0, -1.6284210967504273), (10.5, -1.3397459621556145)], [(-11.0, -0.4737205583711759), (-11.0, 0.10362971081844985), (-10.5, 0.3923048454132627), (-10.0, 0.10362971081844985), (-10.0, -0.4737205583711759), (-10.5, -0.7623956929659887), (-11.0, -0.4737205583711759)], [(-10.0, -0.4737205583711759), (-10.0, 0.10362971081844985), (-9.5, 0.3923048454132627), (-9.0, 0.10362971081844985), (-9.0, -0.4737205583711759), (-9.5, -0.7623956929659887), (-10.0, -0.4737205583711759)], [(-9.0, -0.4737205583711759), (-9.0, 0.10362971081844985), (-8.5, 0.3923048454132627), (-8.0, 0.10362971081844985), (-8.0, -0.4737205583711759), (-8.5, -0.7623956929659887), (-9.0, -0.4737205583711759)], [(-8.0, -0.4737205583711759), (-8.0, 0.10362971081844985), (-7.5, 0.3923048454132627), (-7.0, 0.10362971081844985), (-7.0, -0.4737205583711759), (-7.5, -0.7623956929659887), (-8.0, -0.4737205583711759)], [(-7.0, -0.4737205583711759), (-7.0, 0.10362971081844985), (-6.5, 0.3923048454132627), (-6.0, 0.10362971081844985), (-6.0, -0.4737205583711759), (-6.5, -0.7623956929659887), (-7.0, -0.4737205583711759)], [(-6.0, -0.4737205583711759), (-6.0, 0.10362971081844985), (-5.5, 0.3923048454132627), (-5.0, 0.10362971081844985), (-5.0, -0.4737205583711759), (-5.5, -0.7623956929659887), (-6.0, -0.4737205583711759)], [(-5.0, -0.4737205583711759), (-5.0, 0.10362971081844985), (-4.5, 0.3923048454132627), (-4.0, 0.10362971081844985), (-4.0, -0.4737205583711759), (-4.5, -0.7623956929659887), (-5.0, -0.4737205583711759)], [(-4.0, -0.4737205583711759), (-4.0, 0.10362971081844985), (-3.5, 0.3923048454132627), (-3.0, 0.10362971081844985), (-3.0, -0.4737205583711759), (-3.5, -0.7623956929659887), (-4.0, -0.4737205583711759)], [(-3.0, -0.4737205583711759), (-3.0, 0.10362971081844985), (-2.5, 0.3923048454132627), (-2.0, 0.10362971081844985), (-2.0, -0.4737205583711759), (-2.5, -0.7623956929659887), (-3.0, -0.4737205583711759)], [(-2.0, -0.4737205583711759), (-2.0, 0.10362971081844985), (-1.5, 0.3923048454132627), (-1.0, 0.10362971081844985), (-1.0, -0.4737205583711759), (-1.5, -0.7623956929659887), (-2.0, -0.4737205583711759)], [(-1.0, -0.4737205583711759), (-1.0, 0.10362971081844985), (-0.5, 0.3923048454132627), (0.0, 0.10362971081844985), (0.0, -0.4737205583711759), (-0.5, -0.7623956929659887), (-1.0, -0.4737205583711759)], [(0.0, -0.4737205583711759), (0.0, 0.10362971081844985), (0.5, 0.3923048454132627), (1.0, 0.10362971081844985), (1.0, -0.4737205583711759), (0.5, -0.7623956929659887), (0.0, -0.4737205583711759)], [(1.0, -0.4737205583711759), (1.0, 0.10362971081844985), (1.5, 0.3923048454132627), (2.0, 0.10362971081844985), (2.0, -0.4737205583711759), (1.5, -0.7623956929659887), (1.0, -0.4737205583711759)], [(2.0, -0.4737205583711759), (2.0, 0.10362971081844985), (2.5, 0.3923048454132627), (3.0, 0.10362971081844985), (3.0, -0.4737205583711759), (2.5, -0.7623956929659887), (2.0, -0.4737205583711759)], [(3.0, -0.4737205583711759), (3.0, 0.10362971081844985), (3.5, 0.3923048454132627), (4.0, 0.10362971081844985), (4.0, -0.4737205583711759), (3.5, -0.7623956929659887), (3.0, -0.4737205583711759)], [(4.0, -0.4737205583711759), (4.0, 0.10362971081844985), (4.5, 0.3923048454132627), (5.0, 0.10362971081844985), (5.0, -0.4737205583711759), (4.5, -0.7623956929659887), (4.0, -0.4737205583711759)], [(5.0, -0.4737205583711759), (5.0, 0.10362971081844985), (5.5, 0.3923048454132627), (6.0, 0.10362971081844985), (6.0, -0.4737205583711759), (5.5, -0.7623956929659887), (5.0, -0.4737205583711759)], [(6.0, -0.4737205583711759), (6.0, 0.10362971081844985), (6.5, 0.3923048454132627), (7.0, 0.10362971081844985), (7.0, -0.4737205583711759), (6.5, -0.7623956929659887), (6.0, -0.4737205583711759)], [(7.0, -0.4737205583711759), (7.0, 0.10362971081844985), (7.5, 0.3923048454132627), (8.0, 0.10362971081844985), (8.0, -0.4737205583711759), (7.5, -0.7623956929659887), (7.0, -0.4737205583711759)], [(8.0, -0.4737205583711759), (8.0, 0.10362971081844985), (8.5, 0.3923048454132627), (9.0, 0.10362971081844985), (9.0, -0.4737205583711759), (8.5, -0.7623956929659887), (8.0, -0.4737205583711759)], [(9.0, -0.4737205583711759), (9.0, 0.10362971081844985), (9.5, 0.3923048454132627), (10.0, 0.10362971081844985), (10.0, -0.4737205583711759), (9.5, -0.7623956929659887), (9.0, -0.4737205583711759)], [(10.0, -0.4737205583711759), (10.0, 0.10362971081844985), (10.5, 0.3923048454132627), (11.0, 0.10362971081844985), (11.0, -0.4737205583711759), (10.5, -0.7623956929659887), (10.0, -0.4737205583711759)], [(-10.5, 0.3923048454132627), (-10.5, 0.9696551146028884), (-10.0, 1.2583302491977013), (-9.5, 0.9696551146028884), (-9.5, 0.3923048454132627), (-10.0, 0.10362971081844985), (-10.5, 0.3923048454132627)], [(-9.5, 0.3923048454132627), (-9.5, 0.9696551146028884), (-9.0, 1.2583302491977013), (-8.5, 0.9696551146028884), (-8.5, 0.3923048454132627), (-9.0, 0.10362971081844985), (-9.5, 0.3923048454132627)], [(-8.5, 0.3923048454132627), (-8.5, 0.9696551146028884), (-8.0, 1.2583302491977013), (-7.5, 0.9696551146028884), (-7.5, 0.3923048454132627), (-8.0, 0.10362971081844985), (-8.5, 0.3923048454132627)], [(-7.5, 0.3923048454132627), (-7.5, 0.9696551146028884), (-7.0, 1.2583302491977013), (-6.5, 0.9696551146028884), (-6.5, 0.3923048454132627), (-7.0, 0.10362971081844985), (-7.5, 0.3923048454132627)], [(-6.5, 0.3923048454132627), (-6.5, 0.9696551146028884), (-6.0, 1.2583302491977013), (-5.5, 0.9696551146028884), (-5.5, 0.3923048454132627), (-6.0, 0.10362971081844985), (-6.5, 0.3923048454132627)], [(-5.5, 0.3923048454132627), (-5.5, 0.9696551146028884), (-5.0, 1.2583302491977013), (-4.5, 0.9696551146028884), (-4.5, 0.3923048454132627), (-5.0, 0.10362971081844985), (-5.5, 0.3923048454132627)], [(-4.5, 0.3923048454132627), (-4.5, 0.9696551146028884), (-4.0, 1.2583302491977013), (-3.5, 0.9696551146028884), (-3.5, 0.3923048454132627), (-4.0, 0.10362971081844985), (-4.5, 0.3923048454132627)], [(-3.5, 0.3923048454132627), (-3.5, 0.9696551146028884), (-3.0, 1.2583302491977013), (-2.5, 0.9696551146028884), (-2.5, 0.3923048454132627), (-3.0, 0.10362971081844985), (-3.5, 0.3923048454132627)], [(-2.5, 0.3923048454132627), (-2.5, 0.9696551146028884), (-2.0, 1.2583302491977013), (-1.5, 0.9696551146028884), (-1.5, 0.3923048454132627), (-2.0, 0.10362971081844985), (-2.5, 0.3923048454132627)], [(-1.5, 0.3923048454132627), (-1.5, 0.9696551146028884), (-1.0, 1.2583302491977013), (-0.5, 0.9696551146028884), (-0.5, 0.3923048454132627), (-1.0, 0.10362971081844985), (-1.5, 0.3923048454132627)], [(-0.5, 0.3923048454132627), (-0.5, 0.9696551146028884), (0.0, 1.2583302491977013), (0.5, 0.9696551146028884), (0.5, 0.3923048454132627), (0.0, 0.10362971081844985), (-0.5, 0.3923048454132627)], [(0.5, 0.3923048454132627), (0.5, 0.9696551146028884), (1.0, 1.2583302491977013), (1.5, 0.9696551146028884), (1.5, 0.3923048454132627), (1.0, 0.10362971081844985), (0.5, 0.3923048454132627)], [(1.5, 0.3923048454132627), (1.5, 0.9696551146028884), (2.0, 1.2583302491977013), (2.5, 0.9696551146028884), (2.5, 0.3923048454132627), (2.0, 0.10362971081844985), (1.5, 0.3923048454132627)], [(2.5, 0.3923048454132627), (2.5, 0.9696551146028884), (3.0, 1.2583302491977013), (3.5, 0.9696551146028884), (3.5, 0.3923048454132627), (3.0, 0.10362971081844985), (2.5, 0.3923048454132627)], [(3.5, 0.3923048454132627), (3.5, 0.9696551146028884), (4.0, 1.2583302491977013), (4.5, 0.9696551146028884), (4.5, 0.3923048454132627), (4.0, 0.10362971081844985), (3.5, 0.3923048454132627)], [(4.5, 0.3923048454132627), (4.5, 0.9696551146028884), (5.0, 1.2583302491977013), (5.5, 0.9696551146028884), (5.5, 0.3923048454132627), (5.0, 0.10362971081844985), (4.5, 0.3923048454132627)], [(5.5, 0.3923048454132627), (5.5, 0.9696551146028884), (6.0, 1.2583302491977013), (6.5, 0.9696551146028884), (6.5, 0.3923048454132627), (6.0, 0.10362971081844985), (5.5, 0.3923048454132627)], [(6.5, 0.3923048454132627), (6.5, 0.9696551146028884), (7.0, 1.2583302491977013), (7.5, 0.9696551146028884), (7.5, 0.3923048454132627), (7.0, 0.10362971081844985), (6.5, 0.3923048454132627)], [(7.5, 0.3923048454132627), (7.5, 0.9696551146028884), (8.0, 1.2583302491977013), (8.5, 0.9696551146028884), (8.5, 0.3923048454132627), (8.0, 0.10362971081844985), (7.5, 0.3923048454132627)], [(8.5, 0.3923048454132627), (8.5, 0.9696551146028884), (9.0, 1.2583302491977013), (9.5, 0.9696551146028884), (9.5, 0.3923048454132627), (9.0, 0.10362971081844985), (8.5, 0.3923048454132627)], [(9.5, 0.3923048454132627), (9.5, 0.9696551146028884), (10.0, 1.2583302491977013), (10.5, 0.9696551146028884), (10.5, 0.3923048454132627), (10.0, 0.10362971081844985), (9.5, 0.3923048454132627)], [(10.5, 0.3923048454132627), (10.5, 0.9696551146028884), (11.0, 1.2583302491977013), (11.5, 0.9696551146028884), (11.5, 0.3923048454132627), (11.0, 0.10362971081844985), (10.5, 0.3923048454132627)], [(-11.0, 1.2583302491977013), (-11.0, 1.835680518387327), (-10.5, 2.12435565298214), (-10.0, 1.835680518387327), (-10.0, 1.2583302491977013), (-10.5, 0.9696551146028884), (-11.0, 1.2583302491977013)], [(-10.0, 1.2583302491977013), (-10.0, 1.835680518387327), (-9.5, 2.12435565298214), (-9.0, 1.835680518387327), (-9.0, 1.2583302491977013), (-9.5, 0.9696551146028884), (-10.0, 1.2583302491977013)], [(-9.0, 1.2583302491977013), (-9.0, 1.835680518387327), (-8.5, 2.12435565298214), (-8.0, 1.835680518387327), (-8.0, 1.2583302491977013), (-8.5, 0.9696551146028884), (-9.0, 1.2583302491977013)], [(-8.0, 1.2583302491977013), (-8.0, 1.835680518387327), (-7.5, 2.12435565298214), (-7.0, 1.835680518387327), (-7.0, 1.2583302491977013), (-7.5, 0.9696551146028884), (-8.0, 1.2583302491977013)], [(-7.0, 1.2583302491977013), (-7.0, 1.835680518387327), (-6.5, 2.12435565298214), (-6.0, 1.835680518387327), (-6.0, 1.2583302491977013), (-6.5, 0.9696551146028884), (-7.0, 1.2583302491977013)], [(-6.0, 1.2583302491977013), (-6.0, 1.835680518387327), (-5.5, 2.12435565298214), (-5.0, 1.835680518387327), (-5.0, 1.2583302491977013), (-5.5, 0.9696551146028884), (-6.0, 1.2583302491977013)], [(-5.0, 1.2583302491977013), (-5.0, 1.835680518387327), (-4.5, 2.12435565298214), (-4.0, 1.835680518387327), (-4.0, 1.2583302491977013), (-4.5, 0.9696551146028884), (-5.0, 1.2583302491977013)], [(-4.0, 1.2583302491977013), (-4.0, 1.835680518387327), (-3.5, 2.12435565298214), (-3.0, 1.835680518387327), (-3.0, 1.2583302491977013), (-3.5, 0.9696551146028884), (-4.0, 1.2583302491977013)], [(-3.0, 1.2583302491977013), (-3.0, 1.835680518387327), (-2.5, 2.12435565298214), (-2.0, 1.835680518387327), (-2.0, 1.2583302491977013), (-2.5, 0.9696551146028884), (-3.0, 1.2583302491977013)], [(-2.0, 1.2583302491977013), (-2.0, 1.835680518387327), (-1.5, 2.12435565298214), (-1.0, 1.835680518387327), (-1.0, 1.2583302491977013), (-1.5, 0.9696551146028884), (-2.0, 1.2583302491977013)], [(-1.0, 1.2583302491977013), (-1.0, 1.835680518387327), (-0.5, 2.12435565298214), (0.0, 1.835680518387327), (0.0, 1.2583302491977013), (-0.5, 0.9696551146028884), (-1.0, 1.2583302491977013)], [(0.0, 1.2583302491977013), (0.0, 1.835680518387327), (0.5, 2.12435565298214), (1.0, 1.835680518387327), (1.0, 1.2583302491977013), (0.5, 0.9696551146028884), (0.0, 1.2583302491977013)], [(1.0, 1.2583302491977013), (1.0, 1.835680518387327), (1.5, 2.12435565298214), (2.0, 1.835680518387327), (2.0, 1.2583302491977013), (1.5, 0.9696551146028884), (1.0, 1.2583302491977013)], [(2.0, 1.2583302491977013), (2.0, 1.835680518387327), (2.5, 2.12435565298214), (3.0, 1.835680518387327), (3.0, 1.2583302491977013), (2.5, 0.9696551146028884), (2.0, 1.2583302491977013)], [(3.0, 1.2583302491977013), (3.0, 1.835680518387327), (3.5, 2.12435565298214), (4.0, 1.835680518387327), (4.0, 1.2583302491977013), (3.5, 0.9696551146028884), (3.0, 1.2583302491977013)], [(4.0, 1.2583302491977013), (4.0, 1.835680518387327), (4.5, 2.12435565298214), (5.0, 1.835680518387327), (5.0, 1.2583302491977013), (4.5, 0.9696551146028884), (4.0, 1.2583302491977013)], [(5.0, 1.2583302491977013), (5.0, 1.835680518387327), (5.5, 2.12435565298214), (6.0, 1.835680518387327), (6.0, 1.2583302491977013), (5.5, 0.9696551146028884), (5.0, 1.2583302491977013)], [(6.0, 1.2583302491977013), (6.0, 1.835680518387327), (6.5, 2.12435565298214), (7.0, 1.835680518387327), (7.0, 1.2583302491977013), (6.5, 0.9696551146028884), (6.0, 1.2583302491977013)], [(7.0, 1.2583302491977013), (7.0, 1.835680518387327), (7.5, 2.12435565298214), (8.0, 1.835680518387327), (8.0, 1.2583302491977013), (7.5, 0.9696551146028884), (7.0, 1.2583302491977013)], [(8.0, 1.2583302491977013), (8.0, 1.835680518387327), (8.5, 2.12435565298214), (9.0, 1.835680518387327), (9.0, 1.2583302491977013), (8.5, 0.9696551146028884), (8.0, 1.2583302491977013)], [(9.0, 1.2583302491977013), (9.0, 1.835680518387327), (9.5, 2.12435565298214), (10.0, 1.835680518387327), (10.0, 1.2583302491977013), (9.5, 0.9696551146028884), (9.0, 1.2583302491977013)], [(10.0, 1.2583302491977013), (10.0, 1.835680518387327), (10.5, 2.12435565298214), (11.0, 1.835680518387327), (11.0, 1.2583302491977013), (10.5, 0.9696551146028884), (10.0, 1.2583302491977013)], [(-10.5, 2.12435565298214), (-10.5, 2.7017059221717656), (-10.0, 2.9903810567665783), (-9.5, 2.7017059221717656), (-9.5, 2.12435565298214), (-10.0, 1.835680518387327), (-10.5, 2.12435565298214)], [(-9.5, 2.12435565298214), (-9.5, 2.7017059221717656), (-9.0, 2.9903810567665783), (-8.5, 2.7017059221717656), (-8.5, 2.12435565298214), (-9.0, 1.835680518387327), (-9.5, 2.12435565298214)], [(-8.5, 2.12435565298214), (-8.5, 2.7017059221717656), (-8.0, 2.9903810567665783), (-7.5, 2.7017059221717656), (-7.5, 2.12435565298214), (-8.0, 1.835680518387327), (-8.5, 2.12435565298214)], [(-7.5, 2.12435565298214), (-7.5, 2.7017059221717656), (-7.0, 2.9903810567665783), (-6.5, 2.7017059221717656), (-6.5, 2.12435565298214), (-7.0, 1.835680518387327), (-7.5, 2.12435565298214)], [(-6.5, 2.12435565298214), (-6.5, 2.7017059221717656), (-6.0, 2.9903810567665783), (-5.5, 2.7017059221717656), (-5.5, 2.12435565298214), (-6.0, 1.835680518387327), (-6.5, 2.12435565298214)], [(-5.5, 2.12435565298214), (-5.5, 2.7017059221717656), (-5.0, 2.9903810567665783), (-4.5, 2.7017059221717656), (-4.5, 2.12435565298214), (-5.0, 1.835680518387327), (-5.5, 2.12435565298214)], [(-4.5, 2.12435565298214), (-4.5, 2.7017059221717656), (-4.0, 2.9903810567665783), (-3.5, 2.7017059221717656), (-3.5, 2.12435565298214), (-4.0, 1.835680518387327), (-4.5, 2.12435565298214)], [(-3.5, 2.12435565298214), (-3.5, 2.7017059221717656), (-3.0, 2.9903810567665783), (-2.5, 2.7017059221717656), (-2.5, 2.12435565298214), (-3.0, 1.835680518387327), (-3.5, 2.12435565298214)], [(-2.5, 2.12435565298214), (-2.5, 2.7017059221717656), (-2.0, 2.9903810567665783), (-1.5, 2.7017059221717656), (-1.5, 2.12435565298214), (-2.0, 1.835680518387327), (-2.5, 2.12435565298214)], [(-1.5, 2.12435565298214), (-1.5, 2.7017059221717656), (-1.0, 2.9903810567665783), (-0.5, 2.7017059221717656), (-0.5, 2.12435565298214), (-1.0, 1.835680518387327), (-1.5, 2.12435565298214)], [(-0.5, 2.12435565298214), (-0.5, 2.7017059221717656), (0.0, 2.9903810567665783), (0.5, 2.7017059221717656), (0.5, 2.12435565298214), (0.0, 1.835680518387327), (-0.5, 2.12435565298214)], [(0.5, 2.12435565298214), (0.5, 2.7017059221717656), (1.0, 2.9903810567665783), (1.5, 2.7017059221717656), (1.5, 2.12435565298214), (1.0, 1.835680518387327), (0.5, 2.12435565298214)], [(1.5, 2.12435565298214), (1.5, 2.7017059221717656), (2.0, 2.9903810567665783), (2.5, 2.7017059221717656), (2.5, 2.12435565298214), (2.0, 1.835680518387327), (1.5, 2.12435565298214)], [(2.5, 2.12435565298214), (2.5, 2.7017059221717656), (3.0, 2.9903810567665783), (3.5, 2.7017059221717656), (3.5, 2.12435565298214), (3.0, 1.835680518387327), (2.5, 2.12435565298214)], [(3.5, 2.12435565298214), (3.5, 2.7017059221717656), (4.0, 2.9903810567665783), (4.5, 2.7017059221717656), (4.5, 2.12435565298214), (4.0, 1.835680518387327), (3.5, 2.12435565298214)], [(4.5, 2.12435565298214), (4.5, 2.7017059221717656), (5.0, 2.9903810567665783), (5.5, 2.7017059221717656), (5.5, 2.12435565298214), (5.0, 1.835680518387327), (4.5, 2.12435565298214)], [(5.5, 2.12435565298214), (5.5, 2.7017059221717656), (6.0, 2.9903810567665783), (6.5, 2.7017059221717656), (6.5, 2.12435565298214), (6.0, 1.835680518387327), (5.5, 2.12435565298214)], [(6.5, 2.12435565298214), (6.5, 2.7017059221717656), (7.0, 2.9903810567665783), (7.5, 2.7017059221717656), (7.5, 2.12435565298214), (7.0, 1.835680518387327), (6.5, 2.12435565298214)], [(7.5, 2.12435565298214), (7.5, 2.7017059221717656), (8.0, 2.9903810567665783), (8.5, 2.7017059221717656), (8.5, 2.12435565298214), (8.0, 1.835680518387327), (7.5, 2.12435565298214)], [(8.5, 2.12435565298214), (8.5, 2.7017059221717656), (9.0, 2.9903810567665783), (9.5, 2.7017059221717656), (9.5, 2.12435565298214), (9.0, 1.835680518387327), (8.5, 2.12435565298214)], [(9.5, 2.12435565298214), (9.5, 2.7017059221717656), (10.0, 2.9903810567665783), (10.5, 2.7017059221717656), (10.5, 2.12435565298214), (10.0, 1.835680518387327), (9.5, 2.12435565298214)], [(10.5, 2.12435565298214), (10.5, 2.7017059221717656), (11.0, 2.9903810567665783), (11.5, 2.7017059221717656), (11.5, 2.12435565298214), (11.0, 1.835680518387327), (10.5, 2.12435565298214)], [(-11.0, 2.9903810567665783), (-11.0, 3.5677313259562045), (-10.5, 3.856406460551017), (-10.0, 3.5677313259562045), (-10.0, 2.9903810567665783), (-10.5, 2.7017059221717656), (-11.0, 2.9903810567665783)], [(-10.0, 2.9903810567665783), (-10.0, 3.5677313259562045), (-9.5, 3.856406460551017), (-9.0, 3.5677313259562045), (-9.0, 2.9903810567665783), (-9.5, 2.7017059221717656), (-10.0, 2.9903810567665783)], [(-9.0, 2.9903810567665783), (-9.0, 3.5677313259562045), (-8.5, 3.856406460551017), (-8.0, 3.5677313259562045), (-8.0, 2.9903810567665783), (-8.5, 2.7017059221717656), (-9.0, 2.9903810567665783)], [(-8.0, 2.9903810567665783), (-8.0, 3.5677313259562045), (-7.5, 3.856406460551017), (-7.0, 3.5677313259562045), (-7.0, 2.9903810567665783), (-7.5, 2.7017059221717656), (-8.0, 2.9903810567665783)], [(-7.0, 2.9903810567665783), (-7.0, 3.5677313259562045), (-6.5, 3.856406460551017), (-6.0, 3.5677313259562045), (-6.0, 2.9903810567665783), (-6.5, 2.7017059221717656), (-7.0, 2.9903810567665783)], [(-6.0, 2.9903810567665783), (-6.0, 3.5677313259562045), (-5.5, 3.856406460551017), (-5.0, 3.5677313259562045), (-5.0, 2.9903810567665783), (-5.5, 2.7017059221717656), (-6.0, 2.9903810567665783)], [(-5.0, 2.9903810567665783), (-5.0, 3.5677313259562045), (-4.5, 3.856406460551017), (-4.0, 3.5677313259562045), (-4.0, 2.9903810567665783), (-4.5, 2.7017059221717656), (-5.0, 2.9903810567665783)], [(-4.0, 2.9903810567665783), (-4.0, 3.5677313259562045), (-3.5, 3.856406460551017), (-3.0, 3.5677313259562045), (-3.0, 2.9903810567665783), (-3.5, 2.7017059221717656), (-4.0, 2.9903810567665783)], [(-3.0, 2.9903810567665783), (-3.0, 3.5677313259562045), (-2.5, 3.856406460551017), (-2.0, 3.5677313259562045), (-2.0, 2.9903810567665783), (-2.5, 2.7017059221717656), (-3.0, 2.9903810567665783)], [(-2.0, 2.9903810567665783), (-2.0, 3.5677313259562045), (-1.5, 3.856406460551017), (-1.0, 3.5677313259562045), (-1.0, 2.9903810567665783), (-1.5, 2.7017059221717656), (-2.0, 2.9903810567665783)], [(-1.0, 2.9903810567665783), (-1.0, 3.5677313259562045), (-0.5, 3.856406460551017), (0.0, 3.5677313259562045), (0.0, 2.9903810567665783), (-0.5, 2.7017059221717656), (-1.0, 2.9903810567665783)], [(0.0, 2.9903810567665783), (0.0, 3.5677313259562045), (0.5, 3.856406460551017), (1.0, 3.5677313259562045), (1.0, 2.9903810567665783), (0.5, 2.7017059221717656), (0.0, 2.9903810567665783)], [(1.0, 2.9903810567665783), (1.0, 3.5677313259562045), (1.5, 3.856406460551017), (2.0, 3.5677313259562045), (2.0, 2.9903810567665783), (1.5, 2.7017059221717656), (1.0, 2.9903810567665783)], [(2.0, 2.9903810567665783), (2.0, 3.5677313259562045), (2.5, 3.856406460551017), (3.0, 3.5677313259562045), (3.0, 2.9903810567665783), (2.5, 2.7017059221717656), (2.0, 2.9903810567665783)], [(3.0, 2.9903810567665783), (3.0, 3.5677313259562045), (3.5, 3.856406460551017), (4.0, 3.5677313259562045), (4.0, 2.9903810567665783), (3.5, 2.7017059221717656), (3.0, 2.9903810567665783)], [(4.0, 2.9903810567665783), (4.0, 3.5677313259562045), (4.5, 3.856406460551017), (5.0, 3.5677313259562045), (5.0, 2.9903810567665783), (4.5, 2.7017059221717656), (4.0, 2.9903810567665783)], [(5.0, 2.9903810567665783), (5.0, 3.5677313259562045), (5.5, 3.856406460551017), (6.0, 3.5677313259562045), (6.0, 2.9903810567665783), (5.5, 2.7017059221717656), (5.0, 2.9903810567665783)], [(6.0, 2.9903810567665783), (6.0, 3.5677313259562045), (6.5, 3.856406460551017), (7.0, 3.5677313259562045), (7.0, 2.9903810567665783), (6.5, 2.7017059221717656), (6.0, 2.9903810567665783)], [(7.0, 2.9903810567665783), (7.0, 3.5677313259562045), (7.5, 3.856406460551017), (8.0, 3.5677313259562045), (8.0, 2.9903810567665783), (7.5, 2.7017059221717656), (7.0, 2.9903810567665783)], [(8.0, 2.9903810567665783), (8.0, 3.5677313259562045), (8.5, 3.856406460551017), (9.0, 3.5677313259562045), (9.0, 2.9903810567665783), (8.5, 2.7017059221717656), (8.0, 2.9903810567665783)], [(9.0, 2.9903810567665783), (9.0, 3.5677313259562045), (9.5, 3.856406460551017), (10.0, 3.5677313259562045), (10.0, 2.9903810567665783), (9.5, 2.7017059221717656), (9.0, 2.9903810567665783)], [(10.0, 2.9903810567665783), (10.0, 3.5677313259562045), (10.5, 3.856406460551017), (11.0, 3.5677313259562045), (11.0, 2.9903810567665783), (10.5, 2.7017059221717656), (10.0, 2.9903810567665783)], [(-10.5, 3.8564064605510175), (-10.5, 4.433756729740643), (-10.0, 4.722431864335456), (-9.5, 4.433756729740643), (-9.5, 3.8564064605510175), (-10.0, 3.5677313259562045), (-10.5, 3.8564064605510175)], [(-9.5, 3.8564064605510175), (-9.5, 4.433756729740643), (-9.0, 4.722431864335456), (-8.5, 4.433756729740643), (-8.5, 3.8564064605510175), (-9.0, 3.5677313259562045), (-9.5, 3.8564064605510175)], [(-8.5, 3.8564064605510175), (-8.5, 4.433756729740643), (-8.0, 4.722431864335456), (-7.5, 4.433756729740643), (-7.5, 3.8564064605510175), (-8.0, 3.5677313259562045), (-8.5, 3.8564064605510175)], [(-7.5, 3.8564064605510175), (-7.5, 4.433756729740643), (-7.0, 4.722431864335456), (-6.5, 4.433756729740643), (-6.5, 3.8564064605510175), (-7.0, 3.5677313259562045), (-7.5, 3.8564064605510175)], [(-6.5, 3.8564064605510175), (-6.5, 4.433756729740643), (-6.0, 4.722431864335456), (-5.5, 4.433756729740643), (-5.5, 3.8564064605510175), (-6.0, 3.5677313259562045), (-6.5, 3.8564064605510175)], [(-5.5, 3.8564064605510175), (-5.5, 4.433756729740643), (-5.0, 4.722431864335456), (-4.5, 4.433756729740643), (-4.5, 3.8564064605510175), (-5.0, 3.5677313259562045), (-5.5, 3.8564064605510175)], [(-4.5, 3.8564064605510175), (-4.5, 4.433756729740643), (-4.0, 4.722431864335456), (-3.5, 4.433756729740643), (-3.5, 3.8564064605510175), (-4.0, 3.5677313259562045), (-4.5, 3.8564064605510175)], [(-3.5, 3.8564064605510175), (-3.5, 4.433756729740643), (-3.0, 4.722431864335456), (-2.5, 4.433756729740643), (-2.5, 3.8564064605510175), (-3.0, 3.5677313259562045), (-3.5, 3.8564064605510175)], [(-2.5, 3.8564064605510175), (-2.5, 4.433756729740643), (-2.0, 4.722431864335456), (-1.5, 4.433756729740643), (-1.5, 3.8564064605510175), (-2.0, 3.5677313259562045), (-2.5, 3.8564064605510175)], [(-1.5, 3.8564064605510175), (-1.5, 4.433756729740643), (-1.0, 4.722431864335456), (-0.5, 4.433756729740643), (-0.5, 3.8564064605510175), (-1.0, 3.5677313259562045), (-1.5, 3.8564064605510175)], [(-0.5, 3.8564064605510175), (-0.5, 4.433756729740643), (0.0, 4.722431864335456), (0.5, 4.433756729740643), (0.5, 3.8564064605510175), (0.0, 3.5677313259562045), (-0.5, 3.8564064605510175)], [(0.5, 3.8564064605510175), (0.5, 4.433756729740643), (1.0, 4.722431864335456), (1.5, 4.433756729740643), (1.5, 3.8564064605510175), (1.0, 3.5677313259562045), (0.5, 3.8564064605510175)], [(1.5, 3.8564064605510175), (1.5, 4.433756729740643), (2.0, 4.722431864335456), (2.5, 4.433756729740643), (2.5, 3.8564064605510175), (2.0, 3.5677313259562045), (1.5, 3.8564064605510175)], [(2.5, 3.8564064605510175), (2.5, 4.433756729740643), (3.0, 4.722431864335456), (3.5, 4.433756729740643), (3.5, 3.8564064605510175), (3.0, 3.5677313259562045), (2.5, 3.8564064605510175)], [(3.5, 3.8564064605510175), (3.5, 4.433756729740643), (4.0, 4.722431864335456), (4.5, 4.433756729740643), (4.5, 3.8564064605510175), (4.0, 3.5677313259562045), (3.5, 3.8564064605510175)], [(4.5, 3.8564064605510175), (4.5, 4.433756729740643), (5.0, 4.722431864335456), (5.5, 4.433756729740643), (5.5, 3.8564064605510175), (5.0, 3.5677313259562045), (4.5, 3.8564064605510175)], [(5.5, 3.8564064605510175), (5.5, 4.433756729740643), (6.0, 4.722431864335456), (6.5, 4.433756729740643), (6.5, 3.8564064605510175), (6.0, 3.5677313259562045), (5.5, 3.8564064605510175)], [(6.5, 3.8564064605510175), (6.5, 4.433756729740643), (7.0, 4.722431864335456), (7.5, 4.433756729740643), (7.5, 3.8564064605510175), (7.0, 3.5677313259562045), (6.5, 3.8564064605510175)], [(7.5, 3.8564064605510175), (7.5, 4.433756729740643), (8.0, 4.722431864335456), (8.5, 4.433756729740643), (8.5, 3.8564064605510175), (8.0, 3.5677313259562045), (7.5, 3.8564064605510175)], [(8.5, 3.8564064605510175), (8.5, 4.433756729740643), (9.0, 4.722431864335456), (9.5, 4.433756729740643), (9.5, 3.8564064605510175), (9.0, 3.5677313259562045), (8.5, 3.8564064605510175)], [(9.5, 3.8564064605510175), (9.5, 4.433756729740643), (10.0, 4.722431864335456), (10.5, 4.433756729740643), (10.5, 3.8564064605510175), (10.0, 3.5677313259562045), (9.5, 3.8564064605510175)], [(10.5, 3.8564064605510175), (10.5, 4.433756729740643), (11.0, 4.722431864335456), (11.5, 4.433756729740643), (11.5, 3.8564064605510175), (11.0, 3.5677313259562045), (10.5, 3.8564064605510175)], [(-11.0, 4.722431864335456), (-11.0, 5.299782133525081), (-10.5, 5.588457268119894), (-10.0, 5.299782133525081), (-10.0, 4.722431864335456), (-10.5, 4.433756729740643), (-11.0, 4.722431864335456)], [(-10.0, 4.722431864335456), (-10.0, 5.299782133525081), (-9.5, 5.588457268119894), (-9.0, 5.299782133525081), (-9.0, 4.722431864335456), (-9.5, 4.433756729740643), (-10.0, 4.722431864335456)], [(-9.0, 4.722431864335456), (-9.0, 5.299782133525081), (-8.5, 5.588457268119894), (-8.0, 5.299782133525081), (-8.0, 4.722431864335456), (-8.5, 4.433756729740643), (-9.0, 4.722431864335456)], [(-8.0, 4.722431864335456), (-8.0, 5.299782133525081), (-7.5, 5.588457268119894), (-7.0, 5.299782133525081), (-7.0, 4.722431864335456), (-7.5, 4.433756729740643), (-8.0, 4.722431864335456)], [(-7.0, 4.722431864335456), (-7.0, 5.299782133525081), (-6.5, 5.588457268119894), (-6.0, 5.299782133525081), (-6.0, 4.722431864335456), (-6.5, 4.433756729740643), (-7.0, 4.722431864335456)], [(-6.0, 4.722431864335456), (-6.0, 5.299782133525081), (-5.5, 5.588457268119894), (-5.0, 5.299782133525081), (-5.0, 4.722431864335456), (-5.5, 4.433756729740643), (-6.0, 4.722431864335456)], [(-5.0, 4.722431864335456), (-5.0, 5.299782133525081), (-4.5, 5.588457268119894), (-4.0, 5.299782133525081), (-4.0, 4.722431864335456), (-4.5, 4.433756729740643), (-5.0, 4.722431864335456)], [(-4.0, 4.722431864335456), (-4.0, 5.299782133525081), (-3.5, 5.588457268119894), (-3.0, 5.299782133525081), (-3.0, 4.722431864335456), (-3.5, 4.433756729740643), (-4.0, 4.722431864335456)], [(-3.0, 4.722431864335456), (-3.0, 5.299782133525081), (-2.5, 5.588457268119894), (-2.0, 5.299782133525081), (-2.0, 4.722431864335456), (-2.5, 4.433756729740643), (-3.0, 4.722431864335456)], [(-2.0, 4.722431864335456), (-2.0, 5.299782133525081), (-1.5, 5.588457268119894), (-1.0, 5.299782133525081), (-1.0, 4.722431864335456), (-1.5, 4.433756729740643), (-2.0, 4.722431864335456)], [(-1.0, 4.722431864335456), (-1.0, 5.299782133525081), (-0.5, 5.588457268119894), (0.0, 5.299782133525081), (0.0, 4.722431864335456), (-0.5, 4.433756729740643), (-1.0, 4.722431864335456)], [(0.0, 4.722431864335456), (0.0, 5.299782133525081), (0.5, 5.588457268119894), (1.0, 5.299782133525081), (1.0, 4.722431864335456), (0.5, 4.433756729740643), (0.0, 4.722431864335456)], [(1.0, 4.722431864335456), (1.0, 5.299782133525081), (1.5, 5.588457268119894), (2.0, 5.299782133525081), (2.0, 4.722431864335456), (1.5, 4.433756729740643), (1.0, 4.722431864335456)], [(2.0, 4.722431864335456), (2.0, 5.299782133525081), (2.5, 5.588457268119894), (3.0, 5.299782133525081), (3.0, 4.722431864335456), (2.5, 4.433756729740643), (2.0, 4.722431864335456)], [(3.0, 4.722431864335456), (3.0, 5.299782133525081), (3.5, 5.588457268119894), (4.0, 5.299782133525081), (4.0, 4.722431864335456), (3.5, 4.433756729740643), (3.0, 4.722431864335456)], [(4.0, 4.722431864335456), (4.0, 5.299782133525081), (4.5, 5.588457268119894), (5.0, 5.299782133525081), (5.0, 4.722431864335456), (4.5, 4.433756729740643), (4.0, 4.722431864335456)], [(5.0, 4.722431864335456), (5.0, 5.299782133525081), (5.5, 5.588457268119894), (6.0, 5.299782133525081), (6.0, 4.722431864335456), (5.5, 4.433756729740643), (5.0, 4.722431864335456)], [(6.0, 4.722431864335456), (6.0, 5.299782133525081), (6.5, 5.588457268119894), (7.0, 5.299782133525081), (7.0, 4.722431864335456), (6.5, 4.433756729740643), (6.0, 4.722431864335456)], [(7.0, 4.722431864335456), (7.0, 5.299782133525081), (7.5, 5.588457268119894), (8.0, 5.299782133525081), (8.0, 4.722431864335456), (7.5, 4.433756729740643), (7.0, 4.722431864335456)], [(8.0, 4.722431864335456), (8.0, 5.299782133525081), (8.5, 5.588457268119894), (9.0, 5.299782133525081), (9.0, 4.722431864335456), (8.5, 4.433756729740643), (8.0, 4.722431864335456)], [(9.0, 4.722431864335456), (9.0, 5.299782133525081), (9.5, 5.588457268119894), (10.0, 5.299782133525081), (10.0, 4.722431864335456), (9.5, 4.433756729740643), (9.0, 4.722431864335456)], [(10.0, 4.722431864335456), (10.0, 5.299782133525081), (10.5, 5.588457268119894), (11.0, 5.299782133525081), (11.0, 4.722431864335456), (10.5, 4.433756729740643), (10.0, 4.722431864335456)], [(-10.5, 5.588457268119894), (-10.5, 6.16580753730952), (-10.0, 6.454482671904333), (-9.5, 6.16580753730952), (-9.5, 5.588457268119894), (-10.0, 5.299782133525081), (-10.5, 5.588457268119894)], [(-9.5, 5.588457268119894), (-9.5, 6.16580753730952), (-9.0, 6.454482671904333), (-8.5, 6.16580753730952), (-8.5, 5.588457268119894), (-9.0, 5.299782133525081), (-9.5, 5.588457268119894)], [(-8.5, 5.588457268119894), (-8.5, 6.16580753730952), (-8.0, 6.454482671904333), (-7.5, 6.16580753730952), (-7.5, 5.588457268119894), (-8.0, 5.299782133525081), (-8.5, 5.588457268119894)], [(-7.5, 5.588457268119894), (-7.5, 6.16580753730952), (-7.0, 6.454482671904333), (-6.5, 6.16580753730952), (-6.5, 5.588457268119894), (-7.0, 5.299782133525081), (-7.5, 5.588457268119894)], [(-6.5, 5.588457268119894), (-6.5, 6.16580753730952), (-6.0, 6.454482671904333), (-5.5, 6.16580753730952), (-5.5, 5.588457268119894), (-6.0, 5.299782133525081), (-6.5, 5.588457268119894)], [(-5.5, 5.588457268119894), (-5.5, 6.16580753730952), (-5.0, 6.454482671904333), (-4.5, 6.16580753730952), (-4.5, 5.588457268119894), (-5.0, 5.299782133525081), (-5.5, 5.588457268119894)], [(-4.5, 5.588457268119894), (-4.5, 6.16580753730952), (-4.0, 6.454482671904333), (-3.5, 6.16580753730952), (-3.5, 5.588457268119894), (-4.0, 5.299782133525081), (-4.5, 5.588457268119894)], [(-3.5, 5.588457268119894), (-3.5, 6.16580753730952), (-3.0, 6.454482671904333), (-2.5, 6.16580753730952), (-2.5, 5.588457268119894), (-3.0, 5.299782133525081), (-3.5, 5.588457268119894)], [(-2.5, 5.588457268119894), (-2.5, 6.16580753730952), (-2.0, 6.454482671904333), (-1.5, 6.16580753730952), (-1.5, 5.588457268119894), (-2.0, 5.299782133525081), (-2.5, 5.588457268119894)], [(-1.5, 5.588457268119894), (-1.5, 6.16580753730952), (-1.0, 6.454482671904333), (-0.5, 6.16580753730952), (-0.5, 5.588457268119894), (-1.0, 5.299782133525081), (-1.5, 5.588457268119894)], [(-0.5, 5.588457268119894), (-0.5, 6.16580753730952), (0.0, 6.454482671904333), (0.5, 6.16580753730952), (0.5, 5.588457268119894), (0.0, 5.299782133525081), (-0.5, 5.588457268119894)], [(0.5, 5.588457268119894), (0.5, 6.16580753730952), (1.0, 6.454482671904333), (1.5, 6.16580753730952), (1.5, 5.588457268119894), (1.0, 5.299782133525081), (0.5, 5.588457268119894)], [(1.5, 5.588457268119894), (1.5, 6.16580753730952), (2.0, 6.454482671904333), (2.5, 6.16580753730952), (2.5, 5.588457268119894), (2.0, 5.299782133525081), (1.5, 5.588457268119894)], [(2.5, 5.588457268119894), (2.5, 6.16580753730952), (3.0, 6.454482671904333), (3.5, 6.16580753730952), (3.5, 5.588457268119894), (3.0, 5.299782133525081), (2.5, 5.588457268119894)], [(3.5, 5.588457268119894), (3.5, 6.16580753730952), (4.0, 6.454482671904333), (4.5, 6.16580753730952), (4.5, 5.588457268119894), (4.0, 5.299782133525081), (3.5, 5.588457268119894)], [(4.5, 5.588457268119894), (4.5, 6.16580753730952), (5.0, 6.454482671904333), (5.5, 6.16580753730952), (5.5, 5.588457268119894), (5.0, 5.299782133525081), (4.5, 5.588457268119894)], [(5.5, 5.588457268119894), (5.5, 6.16580753730952), (6.0, 6.454482671904333), (6.5, 6.16580753730952), (6.5, 5.588457268119894), (6.0, 5.299782133525081), (5.5, 5.588457268119894)], [(6.5, 5.588457268119894), (6.5, 6.16580753730952), (7.0, 6.454482671904333), (7.5, 6.16580753730952), (7.5, 5.588457268119894), (7.0, 5.299782133525081), (6.5, 5.588457268119894)], [(7.5, 5.588457268119894), (7.5, 6.16580753730952), (8.0, 6.454482671904333), (8.5, 6.16580753730952), (8.5, 5.588457268119894), (8.0, 5.299782133525081), (7.5, 5.588457268119894)], [(8.5, 5.588457268119894), (8.5, 6.16580753730952), (9.0, 6.454482671904333), (9.5, 6.16580753730952), (9.5, 5.588457268119894), (9.0, 5.299782133525081), (8.5, 5.588457268119894)], [(9.5, 5.588457268119894), (9.5, 6.16580753730952), (10.0, 6.454482671904333), (10.5, 6.16580753730952), (10.5, 5.588457268119894), (10.0, 5.299782133525081), (9.5, 5.588457268119894)], [(10.5, 5.588457268119894), (10.5, 6.16580753730952), (11.0, 6.454482671904333), (11.5, 6.16580753730952), (11.5, 5.588457268119894), (11.0, 5.299782133525081), (10.5, 5.588457268119894)], [(-11.0, 6.454482671904333), (-11.0, 7.031832941093958), (-10.5, 7.320508075688771), (-10.0, 7.031832941093958), (-10.0, 6.454482671904333), (-10.5, 6.16580753730952), (-11.0, 6.454482671904333)], [(-10.0, 6.454482671904333), (-10.0, 7.031832941093958), (-9.5, 7.320508075688771), (-9.0, 7.031832941093958), (-9.0, 6.454482671904333), (-9.5, 6.16580753730952), (-10.0, 6.454482671904333)], [(-9.0, 6.454482671904333), (-9.0, 7.031832941093958), (-8.5, 7.320508075688771), (-8.0, 7.031832941093958), (-8.0, 6.454482671904333), (-8.5, 6.16580753730952), (-9.0, 6.454482671904333)], [(-8.0, 6.454482671904333), (-8.0, 7.031832941093958), (-7.5, 7.320508075688771), (-7.0, 7.031832941093958), (-7.0, 6.454482671904333), (-7.5, 6.16580753730952), (-8.0, 6.454482671904333)], [(-7.0, 6.454482671904333), (-7.0, 7.031832941093958), (-6.5, 7.320508075688771), (-6.0, 7.031832941093958), (-6.0, 6.454482671904333), (-6.5, 6.16580753730952), (-7.0, 6.454482671904333)], [(-6.0, 6.454482671904333), (-6.0, 7.031832941093958), (-5.5, 7.320508075688771), (-5.0, 7.031832941093958), (-5.0, 6.454482671904333), (-5.5, 6.16580753730952), (-6.0, 6.454482671904333)], [(-5.0, 6.454482671904333), (-5.0, 7.031832941093958), (-4.5, 7.320508075688771), (-4.0, 7.031832941093958), (-4.0, 6.454482671904333), (-4.5, 6.16580753730952), (-5.0, 6.454482671904333)], [(-4.0, 6.454482671904333), (-4.0, 7.031832941093958), (-3.5, 7.320508075688771), (-3.0, 7.031832941093958), (-3.0, 6.454482671904333), (-3.5, 6.16580753730952), (-4.0, 6.454482671904333)], [(-3.0, 6.454482671904333), (-3.0, 7.031832941093958), (-2.5, 7.320508075688771), (-2.0, 7.031832941093958), (-2.0, 6.454482671904333), (-2.5, 6.16580753730952), (-3.0, 6.454482671904333)], [(-2.0, 6.454482671904333), (-2.0, 7.031832941093958), (-1.5, 7.320508075688771), (-1.0, 7.031832941093958), (-1.0, 6.454482671904333), (-1.5, 6.16580753730952), (-2.0, 6.454482671904333)], [(-1.0, 6.454482671904333), (-1.0, 7.031832941093958), (-0.5, 7.320508075688771), (0.0, 7.031832941093958), (0.0, 6.454482671904333), (-0.5, 6.16580753730952), (-1.0, 6.454482671904333)], [(0.0, 6.454482671904333), (0.0, 7.031832941093958), (0.5, 7.320508075688771), (1.0, 7.031832941093958), (1.0, 6.454482671904333), (0.5, 6.16580753730952), (0.0, 6.454482671904333)], [(1.0, 6.454482671904333), (1.0, 7.031832941093958), (1.5, 7.320508075688771), (2.0, 7.031832941093958), (2.0, 6.454482671904333), (1.5, 6.16580753730952), (1.0, 6.454482671904333)], [(2.0, 6.454482671904333), (2.0, 7.031832941093958), (2.5, 7.320508075688771), (3.0, 7.031832941093958), (3.0, 6.454482671904333), (2.5, 6.16580753730952), (2.0, 6.454482671904333)], [(3.0, 6.454482671904333), (3.0, 7.031832941093958), (3.5, 7.320508075688771), (4.0, 7.031832941093958), (4.0, 6.454482671904333), (3.5, 6.16580753730952), (3.0, 6.454482671904333)], [(4.0, 6.454482671904333), (4.0, 7.031832941093958), (4.5, 7.320508075688771), (5.0, 7.031832941093958), (5.0, 6.454482671904333), (4.5, 6.16580753730952), (4.0, 6.454482671904333)], [(5.0, 6.454482671904333), (5.0, 7.031832941093958), (5.5, 7.320508075688771), (6.0, 7.031832941093958), (6.0, 6.454482671904333), (5.5, 6.16580753730952), (5.0, 6.454482671904333)], [(6.0, 6.454482671904333), (6.0, 7.031832941093958), (6.5, 7.320508075688771), (7.0, 7.031832941093958), (7.0, 6.454482671904333), (6.5, 6.16580753730952), (6.0, 6.454482671904333)], [(7.0, 6.454482671904333), (7.0, 7.031832941093958), (7.5, 7.320508075688771), (8.0, 7.031832941093958), (8.0, 6.454482671904333), (7.5, 6.16580753730952), (7.0, 6.454482671904333)], [(8.0, 6.454482671904333), (8.0, 7.031832941093958), (8.5, 7.320508075688771), (9.0, 7.031832941093958), (9.0, 6.454482671904333), (8.5, 6.16580753730952), (8.0, 6.454482671904333)], [(9.0, 6.454482671904333), (9.0, 7.031832941093958), (9.5, 7.320508075688771), (10.0, 7.031832941093958), (10.0, 6.454482671904333), (9.5, 6.16580753730952), (9.0, 6.454482671904333)], [(10.0, 6.454482671904333), (10.0, 7.031832941093958), (10.5, 7.320508075688771), (11.0, 7.031832941093958), (11.0, 6.454482671904333), (10.5, 6.16580753730952), (10.0, 6.454482671904333)], [(-10.5, 7.320508075688771), (-10.5, 7.897858344878396), (-10.0, 8.186533479473209), (-9.5, 7.897858344878396), (-9.5, 7.320508075688771), (-10.0, 7.031832941093958), (-10.5, 7.320508075688771)], [(-9.5, 7.320508075688771), (-9.5, 7.897858344878396), (-9.0, 8.186533479473209), (-8.5, 7.897858344878396), (-8.5, 7.320508075688771), (-9.0, 7.031832941093958), (-9.5, 7.320508075688771)], [(-8.5, 7.320508075688771), (-8.5, 7.897858344878396), (-8.0, 8.186533479473209), (-7.5, 7.897858344878396), (-7.5, 7.320508075688771), (-8.0, 7.031832941093958), (-8.5, 7.320508075688771)], [(-7.5, 7.320508075688771), (-7.5, 7.897858344878396), (-7.0, 8.186533479473209), (-6.5, 7.897858344878396), (-6.5, 7.320508075688771), (-7.0, 7.031832941093958), (-7.5, 7.320508075688771)], [(-6.5, 7.320508075688771), (-6.5, 7.897858344878396), (-6.0, 8.186533479473209), (-5.5, 7.897858344878396), (-5.5, 7.320508075688771), (-6.0, 7.031832941093958), (-6.5, 7.320508075688771)], [(-5.5, 7.320508075688771), (-5.5, 7.897858344878396), (-5.0, 8.186533479473209), (-4.5, 7.897858344878396), (-4.5, 7.320508075688771), (-5.0, 7.031832941093958), (-5.5, 7.320508075688771)], [(-4.5, 7.320508075688771), (-4.5, 7.897858344878396), (-4.0, 8.186533479473209), (-3.5, 7.897858344878396), (-3.5, 7.320508075688771), (-4.0, 7.031832941093958), (-4.5, 7.320508075688771)], [(-3.5, 7.320508075688771), (-3.5, 7.897858344878396), (-3.0, 8.186533479473209), (-2.5, 7.897858344878396), (-2.5, 7.320508075688771), (-3.0, 7.031832941093958), (-3.5, 7.320508075688771)], [(-2.5, 7.320508075688771), (-2.5, 7.897858344878396), (-2.0, 8.186533479473209), (-1.5, 7.897858344878396), (-1.5, 7.320508075688771), (-2.0, 7.031832941093958), (-2.5, 7.320508075688771)], [(-1.5, 7.320508075688771), (-1.5, 7.897858344878396), (-1.0, 8.186533479473209), (-0.5, 7.897858344878396), (-0.5, 7.320508075688771), (-1.0, 7.031832941093958), (-1.5, 7.320508075688771)], [(-0.5, 7.320508075688771), (-0.5, 7.897858344878396), (0.0, 8.186533479473209), (0.5, 7.897858344878396), (0.5, 7.320508075688771), (0.0, 7.031832941093958), (-0.5, 7.320508075688771)], [(0.5, 7.320508075688771), (0.5, 7.897858344878396), (1.0, 8.186533479473209), (1.5, 7.897858344878396), (1.5, 7.320508075688771), (1.0, 7.031832941093958), (0.5, 7.320508075688771)], [(1.5, 7.320508075688771), (1.5, 7.897858344878396), (2.0, 8.186533479473209), (2.5, 7.897858344878396), (2.5, 7.320508075688771), (2.0, 7.031832941093958), (1.5, 7.320508075688771)], [(2.5, 7.320508075688771), (2.5, 7.897858344878396), (3.0, 8.186533479473209), (3.5, 7.897858344878396), (3.5, 7.320508075688771), (3.0, 7.031832941093958), (2.5, 7.320508075688771)], [(3.5, 7.320508075688771), (3.5, 7.897858344878396), (4.0, 8.186533479473209), (4.5, 7.897858344878396), (4.5, 7.320508075688771), (4.0, 7.031832941093958), (3.5, 7.320508075688771)], [(4.5, 7.320508075688771), (4.5, 7.897858344878396), (5.0, 8.186533479473209), (5.5, 7.897858344878396), (5.5, 7.320508075688771), (5.0, 7.031832941093958), (4.5, 7.320508075688771)], [(5.5, 7.320508075688771), (5.5, 7.897858344878396), (6.0, 8.186533479473209), (6.5, 7.897858344878396), (6.5, 7.320508075688771), (6.0, 7.031832941093958), (5.5, 7.320508075688771)], [(6.5, 7.320508075688771), (6.5, 7.897858344878396), (7.0, 8.186533479473209), (7.5, 7.897858344878396), (7.5, 7.320508075688771), (7.0, 7.031832941093958), (6.5, 7.320508075688771)], [(7.5, 7.320508075688771), (7.5, 7.897858344878396), (8.0, 8.186533479473209), (8.5, 7.897858344878396), (8.5, 7.320508075688771), (8.0, 7.031832941093958), (7.5, 7.320508075688771)], [(8.5, 7.320508075688771), (8.5, 7.897858344878396), (9.0, 8.186533479473209), (9.5, 7.897858344878396), (9.5, 7.320508075688771), (9.0, 7.031832941093958), (8.5, 7.320508075688771)], [(9.5, 7.320508075688771), (9.5, 7.897858344878396), (10.0, 8.186533479473209), (10.5, 7.897858344878396), (10.5, 7.320508075688771), (10.0, 7.031832941093958), (9.5, 7.320508075688771)], [(10.5, 7.320508075688771), (10.5, 7.897858344878396), (11.0, 8.186533479473209), (11.5, 7.897858344878396), (11.5, 7.320508075688771), (11.0, 7.031832941093958), (10.5, 7.320508075688771)], [(-11.0, 8.186533479473209), (-11.0, 8.763883748662835), (-10.5, 9.052558883257648), (-10.0, 8.763883748662835), (-10.0, 8.186533479473209), (-10.5, 7.897858344878396), (-11.0, 8.186533479473209)], [(-10.0, 8.186533479473209), (-10.0, 8.763883748662835), (-9.5, 9.052558883257648), (-9.0, 8.763883748662835), (-9.0, 8.186533479473209), (-9.5, 7.897858344878396), (-10.0, 8.186533479473209)], [(-9.0, 8.186533479473209), (-9.0, 8.763883748662835), (-8.5, 9.052558883257648), (-8.0, 8.763883748662835), (-8.0, 8.186533479473209), (-8.5, 7.897858344878396), (-9.0, 8.186533479473209)], [(-8.0, 8.186533479473209), (-8.0, 8.763883748662835), (-7.5, 9.052558883257648), (-7.0, 8.763883748662835), (-7.0, 8.186533479473209), (-7.5, 7.897858344878396), (-8.0, 8.186533479473209)], [(-7.0, 8.186533479473209), (-7.0, 8.763883748662835), (-6.5, 9.052558883257648), (-6.0, 8.763883748662835), (-6.0, 8.186533479473209), (-6.5, 7.897858344878396), (-7.0, 8.186533479473209)], [(-6.0, 8.186533479473209), (-6.0, 8.763883748662835), (-5.5, 9.052558883257648), (-5.0, 8.763883748662835), (-5.0, 8.186533479473209), (-5.5, 7.897858344878396), (-6.0, 8.186533479473209)], [(-5.0, 8.186533479473209), (-5.0, 8.763883748662835), (-4.5, 9.052558883257648), (-4.0, 8.763883748662835), (-4.0, 8.186533479473209), (-4.5, 7.897858344878396), (-5.0, 8.186533479473209)], [(-4.0, 8.186533479473209), (-4.0, 8.763883748662835), (-3.5, 9.052558883257648), (-3.0, 8.763883748662835), (-3.0, 8.186533479473209), (-3.5, 7.897858344878396), (-4.0, 8.186533479473209)], [(-3.0, 8.186533479473209), (-3.0, 8.763883748662835), (-2.5, 9.052558883257648), (-2.0, 8.763883748662835), (-2.0, 8.186533479473209), (-2.5, 7.897858344878396), (-3.0, 8.186533479473209)], [(-2.0, 8.186533479473209), (-2.0, 8.763883748662835), (-1.5, 9.052558883257648), (-1.0, 8.763883748662835), (-1.0, 8.186533479473209), (-1.5, 7.897858344878396), (-2.0, 8.186533479473209)], [(-1.0, 8.186533479473209), (-1.0, 8.763883748662835), (-0.5, 9.052558883257648), (0.0, 8.763883748662835), (0.0, 8.186533479473209), (-0.5, 7.897858344878396), (-1.0, 8.186533479473209)], [(0.0, 8.186533479473209), (0.0, 8.763883748662835), (0.5, 9.052558883257648), (1.0, 8.763883748662835), (1.0, 8.186533479473209), (0.5, 7.897858344878396), (0.0, 8.186533479473209)], [(1.0, 8.186533479473209), (1.0, 8.763883748662835), (1.5, 9.052558883257648), (2.0, 8.763883748662835), (2.0, 8.186533479473209), (1.5, 7.897858344878396), (1.0, 8.186533479473209)], [(2.0, 8.186533479473209), (2.0, 8.763883748662835), (2.5, 9.052558883257648), (3.0, 8.763883748662835), (3.0, 8.186533479473209), (2.5, 7.897858344878396), (2.0, 8.186533479473209)], [(3.0, 8.186533479473209), (3.0, 8.763883748662835), (3.5, 9.052558883257648), (4.0, 8.763883748662835), (4.0, 8.186533479473209), (3.5, 7.897858344878396), (3.0, 8.186533479473209)], [(4.0, 8.186533479473209), (4.0, 8.763883748662835), (4.5, 9.052558883257648), (5.0, 8.763883748662835), (5.0, 8.186533479473209), (4.5, 7.897858344878396), (4.0, 8.186533479473209)], [(5.0, 8.186533479473209), (5.0, 8.763883748662835), (5.5, 9.052558883257648), (6.0, 8.763883748662835), (6.0, 8.186533479473209), (5.5, 7.897858344878396), (5.0, 8.186533479473209)], [(6.0, 8.186533479473209), (6.0, 8.763883748662835), (6.5, 9.052558883257648), (7.0, 8.763883748662835), (7.0, 8.186533479473209), (6.5, 7.897858344878396), (6.0, 8.186533479473209)], [(7.0, 8.186533479473209), (7.0, 8.763883748662835), (7.5, 9.052558883257648), (8.0, 8.763883748662835), (8.0, 8.186533479473209), (7.5, 7.897858344878396), (7.0, 8.186533479473209)], [(8.0, 8.186533479473209), (8.0, 8.763883748662835), (8.5, 9.052558883257648), (9.0, 8.763883748662835), (9.0, 8.186533479473209), (8.5, 7.897858344878396), (8.0, 8.186533479473209)], [(9.0, 8.186533479473209), (9.0, 8.763883748662835), (9.5, 9.052558883257648), (10.0, 8.763883748662835), (10.0, 8.186533479473209), (9.5, 7.897858344878396), (9.0, 8.186533479473209)], [(10.0, 8.186533479473209), (10.0, 8.763883748662835), (10.5, 9.052558883257648), (11.0, 8.763883748662835), (11.0, 8.186533479473209), (10.5, 7.897858344878396), (10.0, 8.186533479473209)], [(-10.5, 9.052558883257648), (-10.5, 9.629909152447274), (-10.0, 9.918584287042087), (-9.5, 9.629909152447274), (-9.5, 9.052558883257648), (-10.0, 8.763883748662835), (-10.5, 9.052558883257648)], [(-9.5, 9.052558883257648), (-9.5, 9.629909152447274), (-9.0, 9.918584287042087), (-8.5, 9.629909152447274), (-8.5, 9.052558883257648), (-9.0, 8.763883748662835), (-9.5, 9.052558883257648)], [(-8.5, 9.052558883257648), (-8.5, 9.629909152447274), (-8.0, 9.918584287042087), (-7.5, 9.629909152447274), (-7.5, 9.052558883257648), (-8.0, 8.763883748662835), (-8.5, 9.052558883257648)], [(-7.5, 9.052558883257648), (-7.5, 9.629909152447274), (-7.0, 9.918584287042087), (-6.5, 9.629909152447274), (-6.5, 9.052558883257648), (-7.0, 8.763883748662835), (-7.5, 9.052558883257648)], [(-6.5, 9.052558883257648), (-6.5, 9.629909152447274), (-6.0, 9.918584287042087), (-5.5, 9.629909152447274), (-5.5, 9.052558883257648), (-6.0, 8.763883748662835), (-6.5, 9.052558883257648)], [(-5.5, 9.052558883257648), (-5.5, 9.629909152447274), (-5.0, 9.918584287042087), (-4.5, 9.629909152447274), (-4.5, 9.052558883257648), (-5.0, 8.763883748662835), (-5.5, 9.052558883257648)], [(-4.5, 9.052558883257648), (-4.5, 9.629909152447274), (-4.0, 9.918584287042087), (-3.5, 9.629909152447274), (-3.5, 9.052558883257648), (-4.0, 8.763883748662835), (-4.5, 9.052558883257648)], [(-3.5, 9.052558883257648), (-3.5, 9.629909152447274), (-3.0, 9.918584287042087), (-2.5, 9.629909152447274), (-2.5, 9.052558883257648), (-3.0, 8.763883748662835), (-3.5, 9.052558883257648)], [(-2.5, 9.052558883257648), (-2.5, 9.629909152447274), (-2.0, 9.918584287042087), (-1.5, 9.629909152447274), (-1.5, 9.052558883257648), (-2.0, 8.763883748662835), (-2.5, 9.052558883257648)], [(-1.5, 9.052558883257648), (-1.5, 9.629909152447274), (-1.0, 9.918584287042087), (-0.5, 9.629909152447274), (-0.5, 9.052558883257648), (-1.0, 8.763883748662835), (-1.5, 9.052558883257648)], [(-0.5, 9.052558883257648), (-0.5, 9.629909152447274), (0.0, 9.918584287042087), (0.5, 9.629909152447274), (0.5, 9.052558883257648), (0.0, 8.763883748662835), (-0.5, 9.052558883257648)], [(0.5, 9.052558883257648), (0.5, 9.629909152447274), (1.0, 9.918584287042087), (1.5, 9.629909152447274), (1.5, 9.052558883257648), (1.0, 8.763883748662835), (0.5, 9.052558883257648)], [(1.5, 9.052558883257648), (1.5, 9.629909152447274), (2.0, 9.918584287042087), (2.5, 9.629909152447274), (2.5, 9.052558883257648), (2.0, 8.763883748662835), (1.5, 9.052558883257648)], [(2.5, 9.052558883257648), (2.5, 9.629909152447274), (3.0, 9.918584287042087), (3.5, 9.629909152447274), (3.5, 9.052558883257648), (3.0, 8.763883748662835), (2.5, 9.052558883257648)], [(3.5, 9.052558883257648), (3.5, 9.629909152447274), (4.0, 9.918584287042087), (4.5, 9.629909152447274), (4.5, 9.052558883257648), (4.0, 8.763883748662835), (3.5, 9.052558883257648)], [(4.5, 9.052558883257648), (4.5, 9.629909152447274), (5.0, 9.918584287042087), (5.5, 9.629909152447274), (5.5, 9.052558883257648), (5.0, 8.763883748662835), (4.5, 9.052558883257648)], [(5.5, 9.052558883257648), (5.5, 9.629909152447274), (6.0, 9.918584287042087), (6.5, 9.629909152447274), (6.5, 9.052558883257648), (6.0, 8.763883748662835), (5.5, 9.052558883257648)], [(6.5, 9.052558883257648), (6.5, 9.629909152447274), (7.0, 9.918584287042087), (7.5, 9.629909152447274), (7.5, 9.052558883257648), (7.0, 8.763883748662835), (6.5, 9.052558883257648)], [(7.5, 9.052558883257648), (7.5, 9.629909152447274), (8.0, 9.918584287042087), (8.5, 9.629909152447274), (8.5, 9.052558883257648), (8.0, 8.763883748662835), (7.5, 9.052558883257648)], [(8.5, 9.052558883257648), (8.5, 9.629909152447274), (9.0, 9.918584287042087), (9.5, 9.629909152447274), (9.5, 9.052558883257648), (9.0, 8.763883748662835), (8.5, 9.052558883257648)], [(9.5, 9.052558883257648), (9.5, 9.629909152447274), (10.0, 9.918584287042087), (10.5, 9.629909152447274), (10.5, 9.052558883257648), (10.0, 8.763883748662835), (9.5, 9.052558883257648)], [(10.5, 9.052558883257648), (10.5, 9.629909152447274), (11.0, 9.918584287042087), (11.5, 9.629909152447274), (11.5, 9.052558883257648), (11.0, 8.763883748662835), (10.5, 9.052558883257648)], [(-11.0, 9.918584287042087), (-11.0, 10.495934556231713), (-10.5, 10.784609690826525), (-10.0, 10.495934556231713), (-10.0, 9.918584287042087), (-10.5, 9.629909152447274), (-11.0, 9.918584287042087)], [(-10.0, 9.918584287042087), (-10.0, 10.495934556231713), (-9.5, 10.784609690826525), (-9.0, 10.495934556231713), (-9.0, 9.918584287042087), (-9.5, 9.629909152447274), (-10.0, 9.918584287042087)], [(-9.0, 9.918584287042087), (-9.0, 10.495934556231713), (-8.5, 10.784609690826525), (-8.0, 10.495934556231713), (-8.0, 9.918584287042087), (-8.5, 9.629909152447274), (-9.0, 9.918584287042087)], [(-8.0, 9.918584287042087), (-8.0, 10.495934556231713), (-7.5, 10.784609690826525), (-7.0, 10.495934556231713), (-7.0, 9.918584287042087), (-7.5, 9.629909152447274), (-8.0, 9.918584287042087)], [(-7.0, 9.918584287042087), (-7.0, 10.495934556231713), (-6.5, 10.784609690826525), (-6.0, 10.495934556231713), (-6.0, 9.918584287042087), (-6.5, 9.629909152447274), (-7.0, 9.918584287042087)], [(-6.0, 9.918584287042087), (-6.0, 10.495934556231713), (-5.5, 10.784609690826525), (-5.0, 10.495934556231713), (-5.0, 9.918584287042087), (-5.5, 9.629909152447274), (-6.0, 9.918584287042087)], [(-5.0, 9.918584287042087), (-5.0, 10.495934556231713), (-4.5, 10.784609690826525), (-4.0, 10.495934556231713), (-4.0, 9.918584287042087), (-4.5, 9.629909152447274), (-5.0, 9.918584287042087)], [(-4.0, 9.918584287042087), (-4.0, 10.495934556231713), (-3.5, 10.784609690826525), (-3.0, 10.495934556231713), (-3.0, 9.918584287042087), (-3.5, 9.629909152447274), (-4.0, 9.918584287042087)], [(-3.0, 9.918584287042087), (-3.0, 10.495934556231713), (-2.5, 10.784609690826525), (-2.0, 10.495934556231713), (-2.0, 9.918584287042087), (-2.5, 9.629909152447274), (-3.0, 9.918584287042087)], [(-2.0, 9.918584287042087), (-2.0, 10.495934556231713), (-1.5, 10.784609690826525), (-1.0, 10.495934556231713), (-1.0, 9.918584287042087), (-1.5, 9.629909152447274), (-2.0, 9.918584287042087)], [(-1.0, 9.918584287042087), (-1.0, 10.495934556231713), (-0.5, 10.784609690826525), (0.0, 10.495934556231713), (0.0, 9.918584287042087), (-0.5, 9.629909152447274), (-1.0, 9.918584287042087)], [(0.0, 9.918584287042087), (0.0, 10.495934556231713), (0.5, 10.784609690826525), (1.0, 10.495934556231713), (1.0, 9.918584287042087), (0.5, 9.629909152447274), (0.0, 9.918584287042087)], [(1.0, 9.918584287042087), (1.0, 10.495934556231713), (1.5, 10.784609690826525), (2.0, 10.495934556231713), (2.0, 9.918584287042087), (1.5, 9.629909152447274), (1.0, 9.918584287042087)], [(2.0, 9.918584287042087), (2.0, 10.495934556231713), (2.5, 10.784609690826525), (3.0, 10.495934556231713), (3.0, 9.918584287042087), (2.5, 9.629909152447274), (2.0, 9.918584287042087)], [(3.0, 9.918584287042087), (3.0, 10.495934556231713), (3.5, 10.784609690826525), (4.0, 10.495934556231713), (4.0, 9.918584287042087), (3.5, 9.629909152447274), (3.0, 9.918584287042087)], [(4.0, 9.918584287042087), (4.0, 10.495934556231713), (4.5, 10.784609690826525), (5.0, 10.495934556231713), (5.0, 9.918584287042087), (4.5, 9.629909152447274), (4.0, 9.918584287042087)], [(5.0, 9.918584287042087), (5.0, 10.495934556231713), (5.5, 10.784609690826525), (6.0, 10.495934556231713), (6.0, 9.918584287042087), (5.5, 9.629909152447274), (5.0, 9.918584287042087)], [(6.0, 9.918584287042087), (6.0, 10.495934556231713), (6.5, 10.784609690826525), (7.0, 10.495934556231713), (7.0, 9.918584287042087), (6.5, 9.629909152447274), (6.0, 9.918584287042087)], [(7.0, 9.918584287042087), (7.0, 10.495934556231713), (7.5, 10.784609690826525), (8.0, 10.495934556231713), (8.0, 9.918584287042087), (7.5, 9.629909152447274), (7.0, 9.918584287042087)], [(8.0, 9.918584287042087), (8.0, 10.495934556231713), (8.5, 10.784609690826525), (9.0, 10.495934556231713), (9.0, 9.918584287042087), (8.5, 9.629909152447274), (8.0, 9.918584287042087)], [(9.0, 9.918584287042087), (9.0, 10.495934556231713), (9.5, 10.784609690826525), (10.0, 10.495934556231713), (10.0, 9.918584287042087), (9.5, 9.629909152447274), (9.0, 9.918584287042087)], [(10.0, 9.918584287042087), (10.0, 10.495934556231713), (10.5, 10.784609690826525), (11.0, 10.495934556231713), (11.0, 9.918584287042087), (10.5, 9.629909152447274), (10.0, 9.918584287042087)], [(-10.5, 10.784609690826526), (-10.5, 11.361959960016152), (-10.0, 11.650635094610966), (-9.5, 11.361959960016152), (-9.5, 10.784609690826526), (-10.0, 10.495934556231713), (-10.5, 10.784609690826526)], [(-9.5, 10.784609690826526), (-9.5, 11.361959960016152), (-9.0, 11.650635094610966), (-8.5, 11.361959960016152), (-8.5, 10.784609690826526), (-9.0, 10.495934556231713), (-9.5, 10.784609690826526)], [(-8.5, 10.784609690826526), (-8.5, 11.361959960016152), (-8.0, 11.650635094610966), (-7.5, 11.361959960016152), (-7.5, 10.784609690826526), (-8.0, 10.495934556231713), (-8.5, 10.784609690826526)], [(-7.5, 10.784609690826526), (-7.5, 11.361959960016152), (-7.0, 11.650635094610966), (-6.5, 11.361959960016152), (-6.5, 10.784609690826526), (-7.0, 10.495934556231713), (-7.5, 10.784609690826526)], [(-6.5, 10.784609690826526), (-6.5, 11.361959960016152), (-6.0, 11.650635094610966), (-5.5, 11.361959960016152), (-5.5, 10.784609690826526), (-6.0, 10.495934556231713), (-6.5, 10.784609690826526)], [(-5.5, 10.784609690826526), (-5.5, 11.361959960016152), (-5.0, 11.650635094610966), (-4.5, 11.361959960016152), (-4.5, 10.784609690826526), (-5.0, 10.495934556231713), (-5.5, 10.784609690826526)], [(-4.5, 10.784609690826526), (-4.5, 11.361959960016152), (-4.0, 11.650635094610966), (-3.5, 11.361959960016152), (-3.5, 10.784609690826526), (-4.0, 10.495934556231713), (-4.5, 10.784609690826526)], [(-3.5, 10.784609690826526), (-3.5, 11.361959960016152), (-3.0, 11.650635094610966), (-2.5, 11.361959960016152), (-2.5, 10.784609690826526), (-3.0, 10.495934556231713), (-3.5, 10.784609690826526)], [(-2.5, 10.784609690826526), (-2.5, 11.361959960016152), (-2.0, 11.650635094610966), (-1.5, 11.361959960016152), (-1.5, 10.784609690826526), (-2.0, 10.495934556231713), (-2.5, 10.784609690826526)], [(-1.5, 10.784609690826526), (-1.5, 11.361959960016152), (-1.0, 11.650635094610966), (-0.5, 11.361959960016152), (-0.5, 10.784609690826526), (-1.0, 10.495934556231713), (-1.5, 10.784609690826526)], [(-0.5, 10.784609690826526), (-0.5, 11.361959960016152), (0.0, 11.650635094610966), (0.5, 11.361959960016152), (0.5, 10.784609690826526), (0.0, 10.495934556231713), (-0.5, 10.784609690826526)], [(0.5, 10.784609690826526), (0.5, 11.361959960016152), (1.0, 11.650635094610966), (1.5, 11.361959960016152), (1.5, 10.784609690826526), (1.0, 10.495934556231713), (0.5, 10.784609690826526)], [(1.5, 10.784609690826526), (1.5, 11.361959960016152), (2.0, 11.650635094610966), (2.5, 11.361959960016152), (2.5, 10.784609690826526), (2.0, 10.495934556231713), (1.5, 10.784609690826526)], [(2.5, 10.784609690826526), (2.5, 11.361959960016152), (3.0, 11.650635094610966), (3.5, 11.361959960016152), (3.5, 10.784609690826526), (3.0, 10.495934556231713), (2.5, 10.784609690826526)], [(3.5, 10.784609690826526), (3.5, 11.361959960016152), (4.0, 11.650635094610966), (4.5, 11.361959960016152), (4.5, 10.784609690826526), (4.0, 10.495934556231713), (3.5, 10.784609690826526)], [(4.5, 10.784609690826526), (4.5, 11.361959960016152), (5.0, 11.650635094610966), (5.5, 11.361959960016152), (5.5, 10.784609690826526), (5.0, 10.495934556231713), (4.5, 10.784609690826526)], [(5.5, 10.784609690826526), (5.5, 11.361959960016152), (6.0, 11.650635094610966), (6.5, 11.361959960016152), (6.5, 10.784609690826526), (6.0, 10.495934556231713), (5.5, 10.784609690826526)], [(6.5, 10.784609690826526), (6.5, 11.361959960016152), (7.0, 11.650635094610966), (7.5, 11.361959960016152), (7.5, 10.784609690826526), (7.0, 10.495934556231713), (6.5, 10.784609690826526)], [(7.5, 10.784609690826526), (7.5, 11.361959960016152), (8.0, 11.650635094610966), (8.5, 11.361959960016152), (8.5, 10.784609690826526), (8.0, 10.495934556231713), (7.5, 10.784609690826526)], [(8.5, 10.784609690826526), (8.5, 11.361959960016152), (9.0, 11.650635094610966), (9.5, 11.361959960016152), (9.5, 10.784609690826526), (9.0, 10.495934556231713), (8.5, 10.784609690826526)], [(9.5, 10.784609690826526), (9.5, 11.361959960016152), (10.0, 11.650635094610966), (10.5, 11.361959960016152), (10.5, 10.784609690826526), (10.0, 10.495934556231713), (9.5, 10.784609690826526)], [(10.5, 10.784609690826526), (10.5, 11.361959960016152), (11.0, 11.650635094610966), (11.5, 11.361959960016152), (11.5, 10.784609690826526), (11.0, 10.495934556231713), (10.5, 10.784609690826526)]]"", ""calculate_polygons(100, 100, 200, 200, 5) == [[(90.0, 91.33974596215562), (90.0, 97.11324865405187), (95.0, 100.0), (100.0, 97.11324865405187), (100.0, 91.33974596215562), (95.0, 88.45299461620749), (90.0, 91.33974596215562)], [(100.0, 91.33974596215562), (100.0, 97.11324865405187), (105.0, 100.0), (110.0, 97.11324865405187), (110.0, 91.33974596215562), (105.0, 88.45299461620749), (100.0, 91.33974596215562)], [(110.0, 91.33974596215562), (110.0, 97.11324865405187), (115.0, 100.0), (120.0, 97.11324865405187), (120.0, 91.33974596215562), (115.0, 88.45299461620749), (110.0, 91.33974596215562)], [(120.0, 91.33974596215562), (120.0, 97.11324865405187), (125.0, 100.0), (130.0, 97.11324865405187), (130.0, 91.33974596215562), (125.0, 88.45299461620749), (120.0, 91.33974596215562)], [(130.0, 91.33974596215562), (130.0, 97.11324865405187), (135.0, 100.0), (140.0, 97.11324865405187), (140.0, 91.33974596215562), (135.0, 88.45299461620749), (130.0, 91.33974596215562)], [(140.0, 91.33974596215562), (140.0, 97.11324865405187), (145.0, 100.0), (150.0, 97.11324865405187), (150.0, 91.33974596215562), (145.0, 88.45299461620749), (140.0, 91.33974596215562)], [(150.0, 91.33974596215562), (150.0, 97.11324865405187), (155.0, 100.0), (160.0, 97.11324865405187), (160.0, 91.33974596215562), (155.0, 88.45299461620749), (150.0, 91.33974596215562)], [(160.0, 91.33974596215562), (160.0, 97.11324865405187), (165.0, 100.0), (170.0, 97.11324865405187), (170.0, 91.33974596215562), (165.0, 88.45299461620749), (160.0, 91.33974596215562)], [(170.0, 91.33974596215562), (170.0, 97.11324865405187), (175.0, 100.0), (180.0, 97.11324865405187), (180.0, 91.33974596215562), (175.0, 88.45299461620749), (170.0, 91.33974596215562)], [(180.0, 91.33974596215562), (180.0, 97.11324865405187), (185.0, 100.0), (190.0, 97.11324865405187), (190.0, 91.33974596215562), (185.0, 88.45299461620749), (180.0, 91.33974596215562)], [(190.0, 91.33974596215562), (190.0, 97.11324865405187), (195.0, 100.0), (200.0, 97.11324865405187), (200.0, 91.33974596215562), (195.0, 88.45299461620749), (190.0, 91.33974596215562)], [(200.0, 91.33974596215562), (200.0, 97.11324865405187), (205.0, 100.0), (210.0, 97.11324865405187), (210.0, 91.33974596215562), (205.0, 88.45299461620749), (200.0, 91.33974596215562)], [(95.0, 100.0), (95.0, 105.77350269189625), (100.0, 108.66025403784438), (105.0, 105.77350269189625), (105.0, 100.0), (100.0, 97.11324865405187), (95.0, 100.0)], [(105.0, 100.0), (105.0, 105.77350269189625), (110.0, 108.66025403784438), (115.0, 105.77350269189625), (115.0, 100.0), (110.0, 97.11324865405187), (105.0, 100.0)], [(115.0, 100.0), (115.0, 105.77350269189625), (120.0, 108.66025403784438), (125.0, 105.77350269189625), (125.0, 100.0), (120.0, 97.11324865405187), (115.0, 100.0)], [(125.0, 100.0), (125.0, 105.77350269189625), (130.0, 108.66025403784438), (135.0, 105.77350269189625), (135.0, 100.0), (130.0, 97.11324865405187), (125.0, 100.0)], [(135.0, 100.0), (135.0, 105.77350269189625), (140.0, 108.66025403784438), (145.0, 105.77350269189625), (145.0, 100.0), (140.0, 97.11324865405187), (135.0, 100.0)], [(145.0, 100.0), (145.0, 105.77350269189625), (150.0, 108.66025403784438), (155.0, 105.77350269189625), (155.0, 100.0), (150.0, 97.11324865405187), (145.0, 100.0)], [(155.0, 100.0), (155.0, 105.77350269189625), (160.0, 108.66025403784438), (165.0, 105.77350269189625), (165.0, 100.0), (160.0, 97.11324865405187), (155.0, 100.0)], [(165.0, 100.0), (165.0, 105.77350269189625), (170.0, 108.66025403784438), (175.0, 105.77350269189625), (175.0, 100.0), (170.0, 97.11324865405187), (165.0, 100.0)], [(175.0, 100.0), (175.0, 105.77350269189625), (180.0, 108.66025403784438), (185.0, 105.77350269189625), (185.0, 100.0), (180.0, 97.11324865405187), (175.0, 100.0)], [(185.0, 100.0), (185.0, 105.77350269189625), (190.0, 108.66025403784438), (195.0, 105.77350269189625), (195.0, 100.0), (190.0, 97.11324865405187), (185.0, 100.0)], [(195.0, 100.0), (195.0, 105.77350269189625), (200.0, 108.66025403784438), (205.0, 105.77350269189625), (205.0, 100.0), (200.0, 97.11324865405187), (195.0, 100.0)], [(205.0, 100.0), (205.0, 105.77350269189625), (210.0, 108.66025403784438), (215.0, 105.77350269189625), (215.0, 100.0), (210.0, 97.11324865405187), (205.0, 100.0)], [(90.0, 108.66025403784438), (90.0, 114.43375672974064), (95.0, 117.32050807568876), (100.0, 114.43375672974064), (100.0, 108.66025403784438), (95.0, 105.77350269189625), (90.0, 108.66025403784438)], [(100.0, 108.66025403784438), (100.0, 114.43375672974064), (105.0, 117.32050807568876), (110.0, 114.43375672974064), (110.0, 108.66025403784438), (105.0, 105.77350269189625), (100.0, 108.66025403784438)], [(110.0, 108.66025403784438), (110.0, 114.43375672974064), (115.0, 117.32050807568876), (120.0, 114.43375672974064), (120.0, 108.66025403784438), (115.0, 105.77350269189625), (110.0, 108.66025403784438)], [(120.0, 108.66025403784438), (120.0, 114.43375672974064), (125.0, 117.32050807568876), (130.0, 114.43375672974064), (130.0, 108.66025403784438), (125.0, 105.77350269189625), (120.0, 108.66025403784438)], [(130.0, 108.66025403784438), (130.0, 114.43375672974064), (135.0, 117.32050807568876), (140.0, 114.43375672974064), (140.0, 108.66025403784438), (135.0, 105.77350269189625), (130.0, 108.66025403784438)], [(140.0, 108.66025403784438), (140.0, 114.43375672974064), (145.0, 117.32050807568876), (150.0, 114.43375672974064), (150.0, 108.66025403784438), (145.0, 105.77350269189625), (140.0, 108.66025403784438)], [(150.0, 108.66025403784438), (150.0, 114.43375672974064), (155.0, 117.32050807568876), (160.0, 114.43375672974064), (160.0, 108.66025403784438), (155.0, 105.77350269189625), (150.0, 108.66025403784438)], [(160.0, 108.66025403784438), (160.0, 114.43375672974064), (165.0, 117.32050807568876), (170.0, 114.43375672974064), (170.0, 108.66025403784438), (165.0, 105.77350269189625), (160.0, 108.66025403784438)], [(170.0, 108.66025403784438), (170.0, 114.43375672974064), (175.0, 117.32050807568876), (180.0, 114.43375672974064), (180.0, 108.66025403784438), (175.0, 105.77350269189625), (170.0, 108.66025403784438)], [(180.0, 108.66025403784438), (180.0, 114.43375672974064), (185.0, 117.32050807568876), (190.0, 114.43375672974064), (190.0, 108.66025403784438), (185.0, 105.77350269189625), (180.0, 108.66025403784438)], [(190.0, 108.66025403784438), (190.0, 114.43375672974064), (195.0, 117.32050807568876), (200.0, 114.43375672974064), (200.0, 108.66025403784438), (195.0, 105.77350269189625), (190.0, 108.66025403784438)], [(200.0, 108.66025403784438), (200.0, 114.43375672974064), (205.0, 117.32050807568876), (210.0, 114.43375672974064), (210.0, 108.66025403784438), (205.0, 105.77350269189625), (200.0, 108.66025403784438)], [(95.0, 117.32050807568876), (95.0, 123.09401076758502), (100.0, 125.98076211353315), (105.0, 123.09401076758502), (105.0, 117.32050807568876), (100.0, 114.43375672974064), (95.0, 117.32050807568876)], [(105.0, 117.32050807568876), (105.0, 123.09401076758502), (110.0, 125.98076211353315), (115.0, 123.09401076758502), (115.0, 117.32050807568876), (110.0, 114.43375672974064), (105.0, 117.32050807568876)], [(115.0, 117.32050807568876), (115.0, 123.09401076758502), (120.0, 125.98076211353315), (125.0, 123.09401076758502), (125.0, 117.32050807568876), (120.0, 114.43375672974064), (115.0, 117.32050807568876)], [(125.0, 117.32050807568876), (125.0, 123.09401076758502), (130.0, 125.98076211353315), (135.0, 123.09401076758502), (135.0, 117.32050807568876), (130.0, 114.43375672974064), (125.0, 117.32050807568876)], [(135.0, 117.32050807568876), (135.0, 123.09401076758502), (140.0, 125.98076211353315), (145.0, 123.09401076758502), (145.0, 117.32050807568876), (140.0, 114.43375672974064), (135.0, 117.32050807568876)], [(145.0, 117.32050807568876), (145.0, 123.09401076758502), (150.0, 125.98076211353315), (155.0, 123.09401076758502), (155.0, 117.32050807568876), (150.0, 114.43375672974064), (145.0, 117.32050807568876)], [(155.0, 117.32050807568876), (155.0, 123.09401076758502), (160.0, 125.98076211353315), (165.0, 123.09401076758502), (165.0, 117.32050807568876), (160.0, 114.43375672974064), (155.0, 117.32050807568876)], [(165.0, 117.32050807568876), (165.0, 123.09401076758502), (170.0, 125.98076211353315), (175.0, 123.09401076758502), (175.0, 117.32050807568876), (170.0, 114.43375672974064), (165.0, 117.32050807568876)], [(175.0, 117.32050807568876), (175.0, 123.09401076758502), (180.0, 125.98076211353315), (185.0, 123.09401076758502), (185.0, 117.32050807568876), (180.0, 114.43375672974064), (175.0, 117.32050807568876)], [(185.0, 117.32050807568876), (185.0, 123.09401076758502), (190.0, 125.98076211353315), (195.0, 123.09401076758502), (195.0, 117.32050807568876), (190.0, 114.43375672974064), (185.0, 117.32050807568876)], [(195.0, 117.32050807568876), (195.0, 123.09401076758502), (200.0, 125.98076211353315), (205.0, 123.09401076758502), (205.0, 117.32050807568876), (200.0, 114.43375672974064), (195.0, 117.32050807568876)], [(205.0, 117.32050807568876), (205.0, 123.09401076758502), (210.0, 125.98076211353315), (215.0, 123.09401076758502), (215.0, 117.32050807568876), (210.0, 114.43375672974064), (205.0, 117.32050807568876)], [(90.0, 125.98076211353315), (90.0, 131.75426480542941), (95.0, 134.64101615137753), (100.0, 131.75426480542941), (100.0, 125.98076211353315), (95.0, 123.09401076758502), (90.0, 125.98076211353315)], [(100.0, 125.98076211353315), (100.0, 131.75426480542941), (105.0, 134.64101615137753), (110.0, 131.75426480542941), (110.0, 125.98076211353315), (105.0, 123.09401076758502), (100.0, 125.98076211353315)], [(110.0, 125.98076211353315), (110.0, 131.75426480542941), (115.0, 134.64101615137753), (120.0, 131.75426480542941), (120.0, 125.98076211353315), (115.0, 123.09401076758502), (110.0, 125.98076211353315)], [(120.0, 125.98076211353315), (120.0, 131.75426480542941), (125.0, 134.64101615137753), (130.0, 131.75426480542941), (130.0, 125.98076211353315), (125.0, 123.09401076758502), (120.0, 125.98076211353315)], [(130.0, 125.98076211353315), (130.0, 131.75426480542941), (135.0, 134.64101615137753), (140.0, 131.75426480542941), (140.0, 125.98076211353315), (135.0, 123.09401076758502), (130.0, 125.98076211353315)], [(140.0, 125.98076211353315), (140.0, 131.75426480542941), (145.0, 134.64101615137753), (150.0, 131.75426480542941), (150.0, 125.98076211353315), (145.0, 123.09401076758502), (140.0, 125.98076211353315)], [(150.0, 125.98076211353315), (150.0, 131.75426480542941), (155.0, 134.64101615137753), (160.0, 131.75426480542941), (160.0, 125.98076211353315), (155.0, 123.09401076758502), (150.0, 125.98076211353315)], [(160.0, 125.98076211353315), (160.0, 131.75426480542941), (165.0, 134.64101615137753), (170.0, 131.75426480542941), (170.0, 125.98076211353315), (165.0, 123.09401076758502), (160.0, 125.98076211353315)], [(170.0, 125.98076211353315), (170.0, 131.75426480542941), (175.0, 134.64101615137753), (180.0, 131.75426480542941), (180.0, 125.98076211353315), (175.0, 123.09401076758502), (170.0, 125.98076211353315)], [(180.0, 125.98076211353315), (180.0, 131.75426480542941), (185.0, 134.64101615137753), (190.0, 131.75426480542941), (190.0, 125.98076211353315), (185.0, 123.09401076758502), (180.0, 125.98076211353315)], [(190.0, 125.98076211353315), (190.0, 131.75426480542941), (195.0, 134.64101615137753), (200.0, 131.75426480542941), (200.0, 125.98076211353315), (195.0, 123.09401076758502), (190.0, 125.98076211353315)], [(200.0, 125.98076211353315), (200.0, 131.75426480542941), (205.0, 134.64101615137753), (210.0, 131.75426480542941), (210.0, 125.98076211353315), (205.0, 123.09401076758502), (200.0, 125.98076211353315)], [(95.0, 134.64101615137756), (95.0, 140.4145188432738), (100.0, 143.30127018922192), (105.0, 140.4145188432738), (105.0, 134.64101615137756), (100.0, 131.75426480542941), (95.0, 134.64101615137756)], [(105.0, 134.64101615137756), (105.0, 140.4145188432738), (110.0, 143.30127018922192), (115.0, 140.4145188432738), (115.0, 134.64101615137756), (110.0, 131.75426480542941), (105.0, 134.64101615137756)], [(115.0, 134.64101615137756), (115.0, 140.4145188432738), (120.0, 143.30127018922192), (125.0, 140.4145188432738), (125.0, 134.64101615137756), (120.0, 131.75426480542941), (115.0, 134.64101615137756)], [(125.0, 134.64101615137756), (125.0, 140.4145188432738), (130.0, 143.30127018922192), (135.0, 140.4145188432738), (135.0, 134.64101615137756), (130.0, 131.75426480542941), (125.0, 134.64101615137756)], [(135.0, 134.64101615137756), (135.0, 140.4145188432738), (140.0, 143.30127018922192), (145.0, 140.4145188432738), (145.0, 134.64101615137756), (140.0, 131.75426480542941), (135.0, 134.64101615137756)], [(145.0, 134.64101615137756), (145.0, 140.4145188432738), (150.0, 143.30127018922192), (155.0, 140.4145188432738), (155.0, 134.64101615137756), (150.0, 131.75426480542941), (145.0, 134.64101615137756)], [(155.0, 134.64101615137756), (155.0, 140.4145188432738), (160.0, 143.30127018922192), (165.0, 140.4145188432738), (165.0, 134.64101615137756), (160.0, 131.75426480542941), (155.0, 134.64101615137756)], [(165.0, 134.64101615137756), (165.0, 140.4145188432738), (170.0, 143.30127018922192), (175.0, 140.4145188432738), (175.0, 134.64101615137756), (170.0, 131.75426480542941), (165.0, 134.64101615137756)], [(175.0, 134.64101615137756), (175.0, 140.4145188432738), (180.0, 143.30127018922192), (185.0, 140.4145188432738), (185.0, 134.64101615137756), (180.0, 131.75426480542941), (175.0, 134.64101615137756)], [(185.0, 134.64101615137756), (185.0, 140.4145188432738), (190.0, 143.30127018922192), (195.0, 140.4145188432738), (195.0, 134.64101615137756), (190.0, 131.75426480542941), (185.0, 134.64101615137756)], [(195.0, 134.64101615137756), (195.0, 140.4145188432738), (200.0, 143.30127018922192), (205.0, 140.4145188432738), (205.0, 134.64101615137756), (200.0, 131.75426480542941), (195.0, 134.64101615137756)], [(205.0, 134.64101615137756), (205.0, 140.4145188432738), (210.0, 143.30127018922192), (215.0, 140.4145188432738), (215.0, 134.64101615137756), (210.0, 131.75426480542941), (205.0, 134.64101615137756)], [(90.0, 143.30127018922195), (90.0, 149.0747728811182), (95.0, 151.96152422706632), (100.0, 149.0747728811182), (100.0, 143.30127018922195), (95.0, 140.4145188432738), (90.0, 143.30127018922195)], [(100.0, 143.30127018922195), (100.0, 149.0747728811182), (105.0, 151.96152422706632), (110.0, 149.0747728811182), (110.0, 143.30127018922195), (105.0, 140.4145188432738), (100.0, 143.30127018922195)], [(110.0, 143.30127018922195), (110.0, 149.0747728811182), (115.0, 151.96152422706632), (120.0, 149.0747728811182), (120.0, 143.30127018922195), (115.0, 140.4145188432738), (110.0, 143.30127018922195)], [(120.0, 143.30127018922195), (120.0, 149.0747728811182), (125.0, 151.96152422706632), (130.0, 149.0747728811182), (130.0, 143.30127018922195), (125.0, 140.4145188432738), (120.0, 143.30127018922195)], [(130.0, 143.30127018922195), (130.0, 149.0747728811182), (135.0, 151.96152422706632), (140.0, 149.0747728811182), (140.0, 143.30127018922195), (135.0, 140.4145188432738), (130.0, 143.30127018922195)], [(140.0, 143.30127018922195), (140.0, 149.0747728811182), (145.0, 151.96152422706632), (150.0, 149.0747728811182), (150.0, 143.30127018922195), (145.0, 140.4145188432738), (140.0, 143.30127018922195)], [(150.0, 143.30127018922195), (150.0, 149.0747728811182), (155.0, 151.96152422706632), (160.0, 149.0747728811182), (160.0, 143.30127018922195), (155.0, 140.4145188432738), (150.0, 143.30127018922195)], [(160.0, 143.30127018922195), (160.0, 149.0747728811182), (165.0, 151.96152422706632), (170.0, 149.0747728811182), (170.0, 143.30127018922195), (165.0, 140.4145188432738), (160.0, 143.30127018922195)], [(170.0, 143.30127018922195), (170.0, 149.0747728811182), (175.0, 151.96152422706632), (180.0, 149.0747728811182), (180.0, 143.30127018922195), (175.0, 140.4145188432738), (170.0, 143.30127018922195)], [(180.0, 143.30127018922195), (180.0, 149.0747728811182), (185.0, 151.96152422706632), (190.0, 149.0747728811182), (190.0, 143.30127018922195), (185.0, 140.4145188432738), (180.0, 143.30127018922195)], [(190.0, 143.30127018922195), (190.0, 149.0747728811182), (195.0, 151.96152422706632), (200.0, 149.0747728811182), (200.0, 143.30127018922195), (195.0, 140.4145188432738), (190.0, 143.30127018922195)], [(200.0, 143.30127018922195), (200.0, 149.0747728811182), (205.0, 151.96152422706632), (210.0, 149.0747728811182), (210.0, 143.30127018922195), (205.0, 140.4145188432738), (200.0, 143.30127018922195)], [(95.0, 151.96152422706635), (95.0, 157.7350269189626), (100.0, 160.62177826491072), (105.0, 157.7350269189626), (105.0, 151.96152422706635), (100.0, 149.0747728811182), (95.0, 151.96152422706635)], [(105.0, 151.96152422706635), (105.0, 157.7350269189626), (110.0, 160.62177826491072), (115.0, 157.7350269189626), (115.0, 151.96152422706635), (110.0, 149.0747728811182), (105.0, 151.96152422706635)], [(115.0, 151.96152422706635), (115.0, 157.7350269189626), (120.0, 160.62177826491072), (125.0, 157.7350269189626), (125.0, 151.96152422706635), (120.0, 149.0747728811182), (115.0, 151.96152422706635)], [(125.0, 151.96152422706635), (125.0, 157.7350269189626), (130.0, 160.62177826491072), (135.0, 157.7350269189626), (135.0, 151.96152422706635), (130.0, 149.0747728811182), (125.0, 151.96152422706635)], [(135.0, 151.96152422706635), (135.0, 157.7350269189626), (140.0, 160.62177826491072), (145.0, 157.7350269189626), (145.0, 151.96152422706635), (140.0, 149.0747728811182), (135.0, 151.96152422706635)], [(145.0, 151.96152422706635), (145.0, 157.7350269189626), (150.0, 160.62177826491072), (155.0, 157.7350269189626), (155.0, 151.96152422706635), (150.0, 149.0747728811182), (145.0, 151.96152422706635)], [(155.0, 151.96152422706635), (155.0, 157.7350269189626), (160.0, 160.62177826491072), (165.0, 157.7350269189626), (165.0, 151.96152422706635), (160.0, 149.0747728811182), (155.0, 151.96152422706635)], [(165.0, 151.96152422706635), (165.0, 157.7350269189626), (170.0, 160.62177826491072), (175.0, 157.7350269189626), (175.0, 151.96152422706635), (170.0, 149.0747728811182), (165.0, 151.96152422706635)], [(175.0, 151.96152422706635), (175.0, 157.7350269189626), (180.0, 160.62177826491072), (185.0, 157.7350269189626), (185.0, 151.96152422706635), (180.0, 149.0747728811182), (175.0, 151.96152422706635)], [(185.0, 151.96152422706635), (185.0, 157.7350269189626), (190.0, 160.62177826491072), (195.0, 157.7350269189626), (195.0, 151.96152422706635), (190.0, 149.0747728811182), (185.0, 151.96152422706635)], [(195.0, 151.96152422706635), (195.0, 157.7350269189626), (200.0, 160.62177826491072), (205.0, 157.7350269189626), (205.0, 151.96152422706635), (200.0, 149.0747728811182), (195.0, 151.96152422706635)], [(205.0, 151.96152422706635), (205.0, 157.7350269189626), (210.0, 160.62177826491072), (215.0, 157.7350269189626), (215.0, 151.96152422706635), (210.0, 149.0747728811182), (205.0, 151.96152422706635)], [(90.0, 160.62177826491074), (90.0, 166.395280956807), (95.0, 169.2820323027551), (100.0, 166.395280956807), (100.0, 160.62177826491074), (95.0, 157.7350269189626), (90.0, 160.62177826491074)], [(100.0, 160.62177826491074), (100.0, 166.395280956807), (105.0, 169.2820323027551), (110.0, 166.395280956807), (110.0, 160.62177826491074), (105.0, 157.7350269189626), (100.0, 160.62177826491074)], [(110.0, 160.62177826491074), (110.0, 166.395280956807), (115.0, 169.2820323027551), (120.0, 166.395280956807), (120.0, 160.62177826491074), (115.0, 157.7350269189626), (110.0, 160.62177826491074)], [(120.0, 160.62177826491074), (120.0, 166.395280956807), (125.0, 169.2820323027551), (130.0, 166.395280956807), (130.0, 160.62177826491074), (125.0, 157.7350269189626), (120.0, 160.62177826491074)], [(130.0, 160.62177826491074), (130.0, 166.395280956807), (135.0, 169.2820323027551), (140.0, 166.395280956807), (140.0, 160.62177826491074), (135.0, 157.7350269189626), (130.0, 160.62177826491074)], [(140.0, 160.62177826491074), (140.0, 166.395280956807), (145.0, 169.2820323027551), (150.0, 166.395280956807), (150.0, 160.62177826491074), (145.0, 157.7350269189626), (140.0, 160.62177826491074)], [(150.0, 160.62177826491074), (150.0, 166.395280956807), (155.0, 169.2820323027551), (160.0, 166.395280956807), (160.0, 160.62177826491074), (155.0, 157.7350269189626), (150.0, 160.62177826491074)], [(160.0, 160.62177826491074), (160.0, 166.395280956807), (165.0, 169.2820323027551), (170.0, 166.395280956807), (170.0, 160.62177826491074), (165.0, 157.7350269189626), (160.0, 160.62177826491074)], [(170.0, 160.62177826491074), (170.0, 166.395280956807), (175.0, 169.2820323027551), (180.0, 166.395280956807), (180.0, 160.62177826491074), (175.0, 157.7350269189626), (170.0, 160.62177826491074)], [(180.0, 160.62177826491074), (180.0, 166.395280956807), (185.0, 169.2820323027551), (190.0, 166.395280956807), (190.0, 160.62177826491074), (185.0, 157.7350269189626), (180.0, 160.62177826491074)], [(190.0, 160.62177826491074), (190.0, 166.395280956807), (195.0, 169.2820323027551), (200.0, 166.395280956807), (200.0, 160.62177826491074), (195.0, 157.7350269189626), (190.0, 160.62177826491074)], [(200.0, 160.62177826491074), (200.0, 166.395280956807), (205.0, 169.2820323027551), (210.0, 166.395280956807), (210.0, 160.62177826491074), (205.0, 157.7350269189626), (200.0, 160.62177826491074)], [(95.0, 169.28203230275514), (95.0, 175.0555349946514), (100.0, 177.9422863405995), (105.0, 175.0555349946514), (105.0, 169.28203230275514), (100.0, 166.395280956807), (95.0, 169.28203230275514)], [(105.0, 169.28203230275514), (105.0, 175.0555349946514), (110.0, 177.9422863405995), (115.0, 175.0555349946514), (115.0, 169.28203230275514), (110.0, 166.395280956807), (105.0, 169.28203230275514)], [(115.0, 169.28203230275514), (115.0, 175.0555349946514), (120.0, 177.9422863405995), (125.0, 175.0555349946514), (125.0, 169.28203230275514), (120.0, 166.395280956807), (115.0, 169.28203230275514)], [(125.0, 169.28203230275514), (125.0, 175.0555349946514), (130.0, 177.9422863405995), (135.0, 175.0555349946514), (135.0, 169.28203230275514), (130.0, 166.395280956807), (125.0, 169.28203230275514)], [(135.0, 169.28203230275514), (135.0, 175.0555349946514), (140.0, 177.9422863405995), (145.0, 175.0555349946514), (145.0, 169.28203230275514), (140.0, 166.395280956807), (135.0, 169.28203230275514)], [(145.0, 169.28203230275514), (145.0, 175.0555349946514), (150.0, 177.9422863405995), (155.0, 175.0555349946514), (155.0, 169.28203230275514), (150.0, 166.395280956807), (145.0, 169.28203230275514)], [(155.0, 169.28203230275514), (155.0, 175.0555349946514), (160.0, 177.9422863405995), (165.0, 175.0555349946514), (165.0, 169.28203230275514), (160.0, 166.395280956807), (155.0, 169.28203230275514)], [(165.0, 169.28203230275514), (165.0, 175.0555349946514), (170.0, 177.9422863405995), (175.0, 175.0555349946514), (175.0, 169.28203230275514), (170.0, 166.395280956807), (165.0, 169.28203230275514)], [(175.0, 169.28203230275514), (175.0, 175.0555349946514), (180.0, 177.9422863405995), (185.0, 175.0555349946514), (185.0, 169.28203230275514), (180.0, 166.395280956807), (175.0, 169.28203230275514)], [(185.0, 169.28203230275514), (185.0, 175.0555349946514), (190.0, 177.9422863405995), (195.0, 175.0555349946514), (195.0, 169.28203230275514), (190.0, 166.395280956807), (185.0, 169.28203230275514)], [(195.0, 169.28203230275514), (195.0, 175.0555349946514), (200.0, 177.9422863405995), (205.0, 175.0555349946514), (205.0, 169.28203230275514), (200.0, 166.395280956807), (195.0, 169.28203230275514)], [(205.0, 169.28203230275514), (205.0, 175.0555349946514), (210.0, 177.9422863405995), (215.0, 175.0555349946514), (215.0, 169.28203230275514), (210.0, 166.395280956807), (205.0, 169.28203230275514)], [(90.0, 177.94228634059954), (90.0, 183.7157890324958), (95.0, 186.6025403784439), (100.0, 183.7157890324958), (100.0, 177.94228634059954), (95.0, 175.0555349946514), (90.0, 177.94228634059954)], [(100.0, 177.94228634059954), (100.0, 183.7157890324958), (105.0, 186.6025403784439), (110.0, 183.7157890324958), (110.0, 177.94228634059954), (105.0, 175.0555349946514), (100.0, 177.94228634059954)], [(110.0, 177.94228634059954), (110.0, 183.7157890324958), (115.0, 186.6025403784439), (120.0, 183.7157890324958), (120.0, 177.94228634059954), (115.0, 175.0555349946514), (110.0, 177.94228634059954)], [(120.0, 177.94228634059954), (120.0, 183.7157890324958), (125.0, 186.6025403784439), (130.0, 183.7157890324958), (130.0, 177.94228634059954), (125.0, 175.0555349946514), (120.0, 177.94228634059954)], [(130.0, 177.94228634059954), (130.0, 183.7157890324958), (135.0, 186.6025403784439), (140.0, 183.7157890324958), (140.0, 177.94228634059954), (135.0, 175.0555349946514), (130.0, 177.94228634059954)], [(140.0, 177.94228634059954), (140.0, 183.7157890324958), (145.0, 186.6025403784439), (150.0, 183.7157890324958), (150.0, 177.94228634059954), (145.0, 175.0555349946514), (140.0, 177.94228634059954)], [(150.0, 177.94228634059954), (150.0, 183.7157890324958), (155.0, 186.6025403784439), (160.0, 183.7157890324958), (160.0, 177.94228634059954), (155.0, 175.0555349946514), (150.0, 177.94228634059954)], [(160.0, 177.94228634059954), (160.0, 183.7157890324958), (165.0, 186.6025403784439), (170.0, 183.7157890324958), (170.0, 177.94228634059954), (165.0, 175.0555349946514), (160.0, 177.94228634059954)], [(170.0, 177.94228634059954), (170.0, 183.7157890324958), (175.0, 186.6025403784439), (180.0, 183.7157890324958), (180.0, 177.94228634059954), (175.0, 175.0555349946514), (170.0, 177.94228634059954)], [(180.0, 177.94228634059954), (180.0, 183.7157890324958), (185.0, 186.6025403784439), (190.0, 183.7157890324958), (190.0, 177.94228634059954), (185.0, 175.0555349946514), (180.0, 177.94228634059954)], [(190.0, 177.94228634059954), (190.0, 183.7157890324958), (195.0, 186.6025403784439), (200.0, 183.7157890324958), (200.0, 177.94228634059954), (195.0, 175.0555349946514), (190.0, 177.94228634059954)], [(200.0, 177.94228634059954), (200.0, 183.7157890324958), (205.0, 186.6025403784439), (210.0, 183.7157890324958), (210.0, 177.94228634059954), (205.0, 175.0555349946514), (200.0, 177.94228634059954)], [(95.0, 186.60254037844393), (95.0, 192.3760430703402), (100.0, 195.2627944162883), (105.0, 192.3760430703402), (105.0, 186.60254037844393), (100.0, 183.7157890324958), (95.0, 186.60254037844393)], [(105.0, 186.60254037844393), (105.0, 192.3760430703402), (110.0, 195.2627944162883), (115.0, 192.3760430703402), (115.0, 186.60254037844393), (110.0, 183.7157890324958), (105.0, 186.60254037844393)], [(115.0, 186.60254037844393), (115.0, 192.3760430703402), (120.0, 195.2627944162883), (125.0, 192.3760430703402), (125.0, 186.60254037844393), (120.0, 183.7157890324958), (115.0, 186.60254037844393)], [(125.0, 186.60254037844393), (125.0, 192.3760430703402), (130.0, 195.2627944162883), (135.0, 192.3760430703402), (135.0, 186.60254037844393), (130.0, 183.7157890324958), (125.0, 186.60254037844393)], [(135.0, 186.60254037844393), (135.0, 192.3760430703402), (140.0, 195.2627944162883), (145.0, 192.3760430703402), (145.0, 186.60254037844393), (140.0, 183.7157890324958), (135.0, 186.60254037844393)], [(145.0, 186.60254037844393), (145.0, 192.3760430703402), (150.0, 195.2627944162883), (155.0, 192.3760430703402), (155.0, 186.60254037844393), (150.0, 183.7157890324958), (145.0, 186.60254037844393)], [(155.0, 186.60254037844393), (155.0, 192.3760430703402), (160.0, 195.2627944162883), (165.0, 192.3760430703402), (165.0, 186.60254037844393), (160.0, 183.7157890324958), (155.0, 186.60254037844393)], [(165.0, 186.60254037844393), (165.0, 192.3760430703402), (170.0, 195.2627944162883), (175.0, 192.3760430703402), (175.0, 186.60254037844393), (170.0, 183.7157890324958), (165.0, 186.60254037844393)], [(175.0, 186.60254037844393), (175.0, 192.3760430703402), (180.0, 195.2627944162883), (185.0, 192.3760430703402), (185.0, 186.60254037844393), (180.0, 183.7157890324958), (175.0, 186.60254037844393)], [(185.0, 186.60254037844393), (185.0, 192.3760430703402), (190.0, 195.2627944162883), (195.0, 192.3760430703402), (195.0, 186.60254037844393), (190.0, 183.7157890324958), (185.0, 186.60254037844393)], [(195.0, 186.60254037844393), (195.0, 192.3760430703402), (200.0, 195.2627944162883), (205.0, 192.3760430703402), (205.0, 186.60254037844393), (200.0, 183.7157890324958), (195.0, 186.60254037844393)], [(205.0, 186.60254037844393), (205.0, 192.3760430703402), (210.0, 195.2627944162883), (215.0, 192.3760430703402), (215.0, 186.60254037844393), (210.0, 183.7157890324958), (205.0, 186.60254037844393)], [(90.0, 195.26279441628833), (90.0, 201.03629710818458), (95.0, 203.9230484541327), (100.0, 201.03629710818458), (100.0, 195.26279441628833), (95.0, 192.3760430703402), (90.0, 195.26279441628833)], [(100.0, 195.26279441628833), (100.0, 201.03629710818458), (105.0, 203.9230484541327), (110.0, 201.03629710818458), (110.0, 195.26279441628833), (105.0, 192.3760430703402), (100.0, 195.26279441628833)], [(110.0, 195.26279441628833), (110.0, 201.03629710818458), (115.0, 203.9230484541327), (120.0, 201.03629710818458), (120.0, 195.26279441628833), (115.0, 192.3760430703402), (110.0, 195.26279441628833)], [(120.0, 195.26279441628833), (120.0, 201.03629710818458), (125.0, 203.9230484541327), (130.0, 201.03629710818458), (130.0, 195.26279441628833), (125.0, 192.3760430703402), (120.0, 195.26279441628833)], [(130.0, 195.26279441628833), (130.0, 201.03629710818458), (135.0, 203.9230484541327), (140.0, 201.03629710818458), (140.0, 195.26279441628833), (135.0, 192.3760430703402), (130.0, 195.26279441628833)], [(140.0, 195.26279441628833), (140.0, 201.03629710818458), (145.0, 203.9230484541327), (150.0, 201.03629710818458), (150.0, 195.26279441628833), (145.0, 192.3760430703402), (140.0, 195.26279441628833)], [(150.0, 195.26279441628833), (150.0, 201.03629710818458), (155.0, 203.9230484541327), (160.0, 201.03629710818458), (160.0, 195.26279441628833), (155.0, 192.3760430703402), (150.0, 195.26279441628833)], [(160.0, 195.26279441628833), (160.0, 201.03629710818458), (165.0, 203.9230484541327), (170.0, 201.03629710818458), (170.0, 195.26279441628833), (165.0, 192.3760430703402), (160.0, 195.26279441628833)], [(170.0, 195.26279441628833), (170.0, 201.03629710818458), (175.0, 203.9230484541327), (180.0, 201.03629710818458), (180.0, 195.26279441628833), (175.0, 192.3760430703402), (170.0, 195.26279441628833)], [(180.0, 195.26279441628833), (180.0, 201.03629710818458), (185.0, 203.9230484541327), (190.0, 201.03629710818458), (190.0, 195.26279441628833), (185.0, 192.3760430703402), (180.0, 195.26279441628833)], [(190.0, 195.26279441628833), (190.0, 201.03629710818458), (195.0, 203.9230484541327), (200.0, 201.03629710818458), (200.0, 195.26279441628833), (195.0, 192.3760430703402), (190.0, 195.26279441628833)], [(200.0, 195.26279441628833), (200.0, 201.03629710818458), (205.0, 203.9230484541327), (210.0, 201.03629710818458), (210.0, 195.26279441628833), (205.0, 192.3760430703402), (200.0, 195.26279441628833)], [(95.0, 203.92304845413273), (95.0, 209.69655114602898), (100.0, 212.5833024919771), (105.0, 209.69655114602898), (105.0, 203.92304845413273), (100.0, 201.03629710818458), (95.0, 203.92304845413273)], [(105.0, 203.92304845413273), (105.0, 209.69655114602898), (110.0, 212.5833024919771), (115.0, 209.69655114602898), (115.0, 203.92304845413273), (110.0, 201.03629710818458), (105.0, 203.92304845413273)], [(115.0, 203.92304845413273), (115.0, 209.69655114602898), (120.0, 212.5833024919771), (125.0, 209.69655114602898), (125.0, 203.92304845413273), (120.0, 201.03629710818458), (115.0, 203.92304845413273)], [(125.0, 203.92304845413273), (125.0, 209.69655114602898), (130.0, 212.5833024919771), (135.0, 209.69655114602898), (135.0, 203.92304845413273), (130.0, 201.03629710818458), (125.0, 203.92304845413273)], [(135.0, 203.92304845413273), (135.0, 209.69655114602898), (140.0, 212.5833024919771), (145.0, 209.69655114602898), (145.0, 203.92304845413273), (140.0, 201.03629710818458), (135.0, 203.92304845413273)], [(145.0, 203.92304845413273), (145.0, 209.69655114602898), (150.0, 212.5833024919771), (155.0, 209.69655114602898), (155.0, 203.92304845413273), (150.0, 201.03629710818458), (145.0, 203.92304845413273)], [(155.0, 203.92304845413273), (155.0, 209.69655114602898), (160.0, 212.5833024919771), (165.0, 209.69655114602898), (165.0, 203.92304845413273), (160.0, 201.03629710818458), (155.0, 203.92304845413273)], [(165.0, 203.92304845413273), (165.0, 209.69655114602898), (170.0, 212.5833024919771), (175.0, 209.69655114602898), (175.0, 203.92304845413273), (170.0, 201.03629710818458), (165.0, 203.92304845413273)], [(175.0, 203.92304845413273), (175.0, 209.69655114602898), (180.0, 212.5833024919771), (185.0, 209.69655114602898), (185.0, 203.92304845413273), (180.0, 201.03629710818458), (175.0, 203.92304845413273)], [(185.0, 203.92304845413273), (185.0, 209.69655114602898), (190.0, 212.5833024919771), (195.0, 209.69655114602898), (195.0, 203.92304845413273), (190.0, 201.03629710818458), (185.0, 203.92304845413273)], [(195.0, 203.92304845413273), (195.0, 209.69655114602898), (200.0, 212.5833024919771), (205.0, 209.69655114602898), (205.0, 203.92304845413273), (200.0, 201.03629710818458), (195.0, 203.92304845413273)], [(205.0, 203.92304845413273), (205.0, 209.69655114602898), (210.0, 212.5833024919771), (215.0, 209.69655114602898), (215.0, 203.92304845413273), (210.0, 201.03629710818458), (205.0, 203.92304845413273)], [(90.0, 212.58330249197712), (90.0, 218.35680518387338), (95.0, 221.2435565298215), (100.0, 218.35680518387338), (100.0, 212.58330249197712), (95.0, 209.69655114602898), (90.0, 212.58330249197712)], [(100.0, 212.58330249197712), (100.0, 218.35680518387338), (105.0, 221.2435565298215), (110.0, 218.35680518387338), (110.0, 212.58330249197712), (105.0, 209.69655114602898), (100.0, 212.58330249197712)], [(110.0, 212.58330249197712), (110.0, 218.35680518387338), (115.0, 221.2435565298215), (120.0, 218.35680518387338), (120.0, 212.58330249197712), (115.0, 209.69655114602898), (110.0, 212.58330249197712)], [(120.0, 212.58330249197712), (120.0, 218.35680518387338), (125.0, 221.2435565298215), (130.0, 218.35680518387338), (130.0, 212.58330249197712), (125.0, 209.69655114602898), (120.0, 212.58330249197712)], [(130.0, 212.58330249197712), (130.0, 218.35680518387338), (135.0, 221.2435565298215), (140.0, 218.35680518387338), (140.0, 212.58330249197712), (135.0, 209.69655114602898), (130.0, 212.58330249197712)], [(140.0, 212.58330249197712), (140.0, 218.35680518387338), (145.0, 221.2435565298215), (150.0, 218.35680518387338), (150.0, 212.58330249197712), (145.0, 209.69655114602898), (140.0, 212.58330249197712)], [(150.0, 212.58330249197712), (150.0, 218.35680518387338), (155.0, 221.2435565298215), (160.0, 218.35680518387338), (160.0, 212.58330249197712), (155.0, 209.69655114602898), (150.0, 212.58330249197712)], [(160.0, 212.58330249197712), (160.0, 218.35680518387338), (165.0, 221.2435565298215), (170.0, 218.35680518387338), (170.0, 212.58330249197712), (165.0, 209.69655114602898), (160.0, 212.58330249197712)], [(170.0, 212.58330249197712), (170.0, 218.35680518387338), (175.0, 221.2435565298215), (180.0, 218.35680518387338), (180.0, 212.58330249197712), (175.0, 209.69655114602898), (170.0, 212.58330249197712)], [(180.0, 212.58330249197712), (180.0, 218.35680518387338), (185.0, 221.2435565298215), (190.0, 218.35680518387338), (190.0, 212.58330249197712), (185.0, 209.69655114602898), (180.0, 212.58330249197712)], [(190.0, 212.58330249197712), (190.0, 218.35680518387338), (195.0, 221.2435565298215), (200.0, 218.35680518387338), (200.0, 212.58330249197712), (195.0, 209.69655114602898), (190.0, 212.58330249197712)], [(200.0, 212.58330249197712), (200.0, 218.35680518387338), (205.0, 221.2435565298215), (210.0, 218.35680518387338), (210.0, 212.58330249197712), (205.0, 209.69655114602898), (200.0, 212.58330249197712)]]"", ""calculate_polygons(-50, -50, 50, 50, 3) == [[(-56.0, -55.19615242270663), (-56.0, -51.732050807568875), (-53.0, -50.0), (-50.0, -51.732050807568875), (-50.0, -55.19615242270663), (-53.0, -56.92820323027551), (-56.0, -55.19615242270663)], [(-50.0, -55.19615242270663), (-50.0, -51.732050807568875), (-47.0, -50.0), (-44.0, -51.732050807568875), (-44.0, -55.19615242270663), (-47.0, -56.92820323027551), (-50.0, -55.19615242270663)], [(-44.0, -55.19615242270663), (-44.0, -51.732050807568875), (-41.0, -50.0), (-38.0, -51.732050807568875), (-38.0, -55.19615242270663), (-41.0, -56.92820323027551), (-44.0, -55.19615242270663)], [(-38.0, -55.19615242270663), (-38.0, -51.732050807568875), (-35.0, -50.0), (-32.0, -51.732050807568875), (-32.0, -55.19615242270663), (-35.0, -56.92820323027551), (-38.0, -55.19615242270663)], [(-32.0, -55.19615242270663), (-32.0, -51.732050807568875), (-29.0, -50.0), (-26.0, -51.732050807568875), (-26.0, -55.19615242270663), (-29.0, -56.92820323027551), (-32.0, -55.19615242270663)], [(-26.0, -55.19615242270663), (-26.0, -51.732050807568875), (-23.0, -50.0), (-20.0, -51.732050807568875), (-20.0, -55.19615242270663), (-23.0, -56.92820323027551), (-26.0, -55.19615242270663)], [(-20.0, -55.19615242270663), (-20.0, -51.732050807568875), (-17.0, -50.0), (-14.0, -51.732050807568875), (-14.0, -55.19615242270663), (-17.0, -56.92820323027551), (-20.0, -55.19615242270663)], [(-14.0, -55.19615242270663), (-14.0, -51.732050807568875), (-11.0, -50.0), (-8.0, -51.732050807568875), (-8.0, -55.19615242270663), (-11.0, -56.92820323027551), (-14.0, -55.19615242270663)], [(-8.0, -55.19615242270663), (-8.0, -51.732050807568875), (-5.0, -50.0), (-2.0, -51.732050807568875), (-2.0, -55.19615242270663), (-5.0, -56.92820323027551), (-8.0, -55.19615242270663)], [(-2.0, -55.19615242270663), (-2.0, -51.732050807568875), (1.0, -50.0), (4.0, -51.732050807568875), (4.0, -55.19615242270663), (1.0, -56.92820323027551), (-2.0, -55.19615242270663)], [(4.0, -55.19615242270663), (4.0, -51.732050807568875), (7.0, -50.0), (10.0, -51.732050807568875), (10.0, -55.19615242270663), (7.0, -56.92820323027551), (4.0, -55.19615242270663)], [(10.0, -55.19615242270663), (10.0, -51.732050807568875), (13.0, -50.0), (16.0, -51.732050807568875), (16.0, -55.19615242270663), (13.0, -56.92820323027551), (10.0, -55.19615242270663)], [(16.0, -55.19615242270663), (16.0, -51.732050807568875), (19.0, -50.0), (22.0, -51.732050807568875), (22.0, -55.19615242270663), (19.0, -56.92820323027551), (16.0, -55.19615242270663)], [(22.0, -55.19615242270663), (22.0, -51.732050807568875), (25.0, -50.0), (28.0, -51.732050807568875), (28.0, -55.19615242270663), (25.0, -56.92820323027551), (22.0, -55.19615242270663)], [(28.0, -55.19615242270663), (28.0, -51.732050807568875), (31.0, -50.0), (34.0, -51.732050807568875), (34.0, -55.19615242270663), (31.0, -56.92820323027551), (28.0, -55.19615242270663)], [(34.0, -55.19615242270663), (34.0, -51.732050807568875), (37.0, -50.0), (40.0, -51.732050807568875), (40.0, -55.19615242270663), (37.0, -56.92820323027551), (34.0, -55.19615242270663)], [(40.0, -55.19615242270663), (40.0, -51.732050807568875), (43.0, -50.0), (46.0, -51.732050807568875), (46.0, -55.19615242270663), (43.0, -56.92820323027551), (40.0, -55.19615242270663)], [(46.0, -55.19615242270663), (46.0, -51.732050807568875), (49.0, -50.0), (52.0, -51.732050807568875), (52.0, -55.19615242270663), (49.0, -56.92820323027551), (46.0, -55.19615242270663)], [(52.0, -55.19615242270663), (52.0, -51.732050807568875), (55.0, -50.0), (58.0, -51.732050807568875), (58.0, -55.19615242270663), (55.0, -56.92820323027551), (52.0, -55.19615242270663)], [(-53.0, -50.0), (-53.0, -46.53589838486224), (-50.0, -44.80384757729337), (-47.0, -46.53589838486224), (-47.0, -50.0), (-50.0, -51.732050807568875), (-53.0, -50.0)], [(-47.0, -50.0), (-47.0, -46.53589838486224), (-44.0, -44.80384757729337), (-41.0, -46.53589838486224), (-41.0, -50.0), (-44.0, -51.732050807568875), (-47.0, -50.0)], [(-41.0, -50.0), (-41.0, -46.53589838486224), (-38.0, -44.80384757729337), (-35.0, -46.53589838486224), (-35.0, -50.0), (-38.0, -51.732050807568875), (-41.0, -50.0)], [(-35.0, -50.0), (-35.0, -46.53589838486224), (-32.0, -44.80384757729337), (-29.0, -46.53589838486224), (-29.0, -50.0), (-32.0, -51.732050807568875), (-35.0, -50.0)], [(-29.0, -50.0), (-29.0, -46.53589838486224), (-26.0, -44.80384757729337), (-23.0, -46.53589838486224), (-23.0, -50.0), (-26.0, -51.732050807568875), (-29.0, -50.0)], [(-23.0, -50.0), (-23.0, -46.53589838486224), (-20.0, -44.80384757729337), (-17.0, -46.53589838486224), (-17.0, -50.0), (-20.0, -51.732050807568875), (-23.0, -50.0)], [(-17.0, -50.0), (-17.0, -46.53589838486224), (-14.0, -44.80384757729337), (-11.0, -46.53589838486224), (-11.0, -50.0), (-14.0, -51.732050807568875), (-17.0, -50.0)], [(-11.0, -50.0), (-11.0, -46.53589838486224), (-8.0, -44.80384757729337), (-5.0, -46.53589838486224), (-5.0, -50.0), (-8.0, -51.732050807568875), (-11.0, -50.0)], [(-5.0, -50.0), (-5.0, -46.53589838486224), (-2.0, -44.80384757729337), (1.0, -46.53589838486224), (1.0, -50.0), (-2.0, -51.732050807568875), (-5.0, -50.0)], [(1.0, -50.0), (1.0, -46.53589838486224), (4.0, -44.80384757729337), (7.0, -46.53589838486224), (7.0, -50.0), (4.0, -51.732050807568875), (1.0, -50.0)], [(7.0, -50.0), (7.0, -46.53589838486224), (10.0, -44.80384757729337), (13.0, -46.53589838486224), (13.0, -50.0), (10.0, -51.732050807568875), (7.0, -50.0)], [(13.0, -50.0), (13.0, -46.53589838486224), (16.0, -44.80384757729337), (19.0, -46.53589838486224), (19.0, -50.0), (16.0, -51.732050807568875), (13.0, -50.0)], [(19.0, -50.0), (19.0, -46.53589838486224), (22.0, -44.80384757729337), (25.0, -46.53589838486224), (25.0, -50.0), (22.0, -51.732050807568875), (19.0, -50.0)], [(25.0, -50.0), (25.0, -46.53589838486224), (28.0, -44.80384757729337), (31.0, -46.53589838486224), (31.0, -50.0), (28.0, -51.732050807568875), (25.0, -50.0)], [(31.0, -50.0), (31.0, -46.53589838486224), (34.0, -44.80384757729337), (37.0, -46.53589838486224), (37.0, -50.0), (34.0, -51.732050807568875), (31.0, -50.0)], [(37.0, -50.0), (37.0, -46.53589838486224), (40.0, -44.80384757729337), (43.0, -46.53589838486224), (43.0, -50.0), (40.0, -51.732050807568875), (37.0, -50.0)], [(43.0, -50.0), (43.0, -46.53589838486224), (46.0, -44.80384757729337), (49.0, -46.53589838486224), (49.0, -50.0), (46.0, -51.732050807568875), (43.0, -50.0)], [(49.0, -50.0), (49.0, -46.53589838486224), (52.0, -44.80384757729337), (55.0, -46.53589838486224), (55.0, -50.0), (52.0, -51.732050807568875), (49.0, -50.0)], [(55.0, -50.0), (55.0, -46.53589838486224), (58.0, -44.80384757729337), (61.0, -46.53589838486224), (61.0, -50.0), (58.0, -51.732050807568875), (55.0, -50.0)], [(-56.0, -44.80384757729337), (-56.0, -41.33974596215561), (-53.0, -39.607695154586736), (-50.0, -41.33974596215561), (-50.0, -44.80384757729337), (-53.0, -46.53589838486224), (-56.0, -44.80384757729337)], [(-50.0, -44.80384757729337), (-50.0, -41.33974596215561), (-47.0, -39.607695154586736), (-44.0, -41.33974596215561), (-44.0, -44.80384757729337), (-47.0, -46.53589838486224), (-50.0, -44.80384757729337)], [(-44.0, -44.80384757729337), (-44.0, -41.33974596215561), (-41.0, -39.607695154586736), (-38.0, -41.33974596215561), (-38.0, -44.80384757729337), (-41.0, -46.53589838486224), (-44.0, -44.80384757729337)], [(-38.0, -44.80384757729337), (-38.0, -41.33974596215561), (-35.0, -39.607695154586736), (-32.0, -41.33974596215561), (-32.0, -44.80384757729337), (-35.0, -46.53589838486224), (-38.0, -44.80384757729337)], [(-32.0, -44.80384757729337), (-32.0, -41.33974596215561), (-29.0, -39.607695154586736), (-26.0, -41.33974596215561), (-26.0, -44.80384757729337), (-29.0, -46.53589838486224), (-32.0, -44.80384757729337)], [(-26.0, -44.80384757729337), (-26.0, -41.33974596215561), (-23.0, -39.607695154586736), (-20.0, -41.33974596215561), (-20.0, -44.80384757729337), (-23.0, -46.53589838486224), (-26.0, -44.80384757729337)], [(-20.0, -44.80384757729337), (-20.0, -41.33974596215561), (-17.0, -39.607695154586736), (-14.0, -41.33974596215561), (-14.0, -44.80384757729337), (-17.0, -46.53589838486224), (-20.0, -44.80384757729337)], [(-14.0, -44.80384757729337), (-14.0, -41.33974596215561), (-11.0, -39.607695154586736), (-8.0, -41.33974596215561), (-8.0, -44.80384757729337), (-11.0, -46.53589838486224), (-14.0, -44.80384757729337)], [(-8.0, -44.80384757729337), (-8.0, -41.33974596215561), (-5.0, -39.607695154586736), (-2.0, -41.33974596215561), (-2.0, -44.80384757729337), (-5.0, -46.53589838486224), (-8.0, -44.80384757729337)], [(-2.0, -44.80384757729337), (-2.0, -41.33974596215561), (1.0, -39.607695154586736), (4.0, -41.33974596215561), (4.0, -44.80384757729337), (1.0, -46.53589838486224), (-2.0, -44.80384757729337)], [(4.0, -44.80384757729337), (4.0, -41.33974596215561), (7.0, -39.607695154586736), (10.0, -41.33974596215561), (10.0, -44.80384757729337), (7.0, -46.53589838486224), (4.0, -44.80384757729337)], [(10.0, -44.80384757729337), (10.0, -41.33974596215561), (13.0, -39.607695154586736), (16.0, -41.33974596215561), (16.0, -44.80384757729337), (13.0, -46.53589838486224), (10.0, -44.80384757729337)], [(16.0, -44.80384757729337), (16.0, -41.33974596215561), (19.0, -39.607695154586736), (22.0, -41.33974596215561), (22.0, -44.80384757729337), (19.0, -46.53589838486224), (16.0, -44.80384757729337)], [(22.0, -44.80384757729337), (22.0, -41.33974596215561), (25.0, -39.607695154586736), (28.0, -41.33974596215561), (28.0, -44.80384757729337), (25.0, -46.53589838486224), (22.0, -44.80384757729337)], [(28.0, -44.80384757729337), (28.0, -41.33974596215561), (31.0, -39.607695154586736), (34.0, -41.33974596215561), (34.0, -44.80384757729337), (31.0, -46.53589838486224), (28.0, -44.80384757729337)], [(34.0, -44.80384757729337), (34.0, -41.33974596215561), (37.0, -39.607695154586736), (40.0, -41.33974596215561), (40.0, -44.80384757729337), (37.0, -46.53589838486224), (34.0, -44.80384757729337)], [(40.0, -44.80384757729337), (40.0, -41.33974596215561), (43.0, -39.607695154586736), (46.0, -41.33974596215561), (46.0, -44.80384757729337), (43.0, -46.53589838486224), (40.0, -44.80384757729337)], [(46.0, -44.80384757729337), (46.0, -41.33974596215561), (49.0, -39.607695154586736), (52.0, -41.33974596215561), (52.0, -44.80384757729337), (49.0, -46.53589838486224), (46.0, -44.80384757729337)], [(52.0, -44.80384757729337), (52.0, -41.33974596215561), (55.0, -39.607695154586736), (58.0, -41.33974596215561), (58.0, -44.80384757729337), (55.0, -46.53589838486224), (52.0, -44.80384757729337)], [(-53.0, -39.607695154586736), (-53.0, -36.14359353944898), (-50.0, -34.411542731880104), (-47.0, -36.14359353944898), (-47.0, -39.607695154586736), (-50.0, -41.33974596215561), (-53.0, -39.607695154586736)], [(-47.0, -39.607695154586736), (-47.0, -36.14359353944898), (-44.0, -34.411542731880104), (-41.0, -36.14359353944898), (-41.0, -39.607695154586736), (-44.0, -41.33974596215561), (-47.0, -39.607695154586736)], [(-41.0, -39.607695154586736), (-41.0, -36.14359353944898), (-38.0, -34.411542731880104), (-35.0, -36.14359353944898), (-35.0, -39.607695154586736), (-38.0, -41.33974596215561), (-41.0, -39.607695154586736)], [(-35.0, -39.607695154586736), (-35.0, -36.14359353944898), (-32.0, -34.411542731880104), (-29.0, -36.14359353944898), (-29.0, -39.607695154586736), (-32.0, -41.33974596215561), (-35.0, -39.607695154586736)], [(-29.0, -39.607695154586736), (-29.0, -36.14359353944898), (-26.0, -34.411542731880104), (-23.0, -36.14359353944898), (-23.0, -39.607695154586736), (-26.0, -41.33974596215561), (-29.0, -39.607695154586736)], [(-23.0, -39.607695154586736), (-23.0, -36.14359353944898), (-20.0, -34.411542731880104), (-17.0, -36.14359353944898), (-17.0, -39.607695154586736), (-20.0, -41.33974596215561), (-23.0, -39.607695154586736)], [(-17.0, -39.607695154586736), (-17.0, -36.14359353944898), (-14.0, -34.411542731880104), (-11.0, -36.14359353944898), (-11.0, -39.607695154586736), (-14.0, -41.33974596215561), (-17.0, -39.607695154586736)], [(-11.0, -39.607695154586736), (-11.0, -36.14359353944898), (-8.0, -34.411542731880104), (-5.0, -36.14359353944898), (-5.0, -39.607695154586736), (-8.0, -41.33974596215561), (-11.0, -39.607695154586736)], [(-5.0, -39.607695154586736), (-5.0, -36.14359353944898), (-2.0, -34.411542731880104), (1.0, -36.14359353944898), (1.0, -39.607695154586736), (-2.0, -41.33974596215561), (-5.0, -39.607695154586736)], [(1.0, -39.607695154586736), (1.0, -36.14359353944898), (4.0, -34.411542731880104), (7.0, -36.14359353944898), (7.0, -39.607695154586736), (4.0, -41.33974596215561), (1.0, -39.607695154586736)], [(7.0, -39.607695154586736), (7.0, -36.14359353944898), (10.0, -34.411542731880104), (13.0, -36.14359353944898), (13.0, -39.607695154586736), (10.0, -41.33974596215561), (7.0, -39.607695154586736)], [(13.0, -39.607695154586736), (13.0, -36.14359353944898), (16.0, -34.411542731880104), (19.0, -36.14359353944898), (19.0, -39.607695154586736), (16.0, -41.33974596215561), (13.0, -39.607695154586736)], [(19.0, -39.607695154586736), (19.0, -36.14359353944898), (22.0, -34.411542731880104), (25.0, -36.14359353944898), (25.0, -39.607695154586736), (22.0, -41.33974596215561), (19.0, -39.607695154586736)], [(25.0, -39.607695154586736), (25.0, -36.14359353944898), (28.0, -34.411542731880104), (31.0, -36.14359353944898), (31.0, -39.607695154586736), (28.0, -41.33974596215561), (25.0, -39.607695154586736)], [(31.0, -39.607695154586736), (31.0, -36.14359353944898), (34.0, -34.411542731880104), (37.0, -36.14359353944898), (37.0, -39.607695154586736), (34.0, -41.33974596215561), (31.0, -39.607695154586736)], [(37.0, -39.607695154586736), (37.0, -36.14359353944898), (40.0, -34.411542731880104), (43.0, -36.14359353944898), (43.0, -39.607695154586736), (40.0, -41.33974596215561), (37.0, -39.607695154586736)], [(43.0, -39.607695154586736), (43.0, -36.14359353944898), (46.0, -34.411542731880104), (49.0, -36.14359353944898), (49.0, -39.607695154586736), (46.0, -41.33974596215561), (43.0, -39.607695154586736)], [(49.0, -39.607695154586736), (49.0, -36.14359353944898), (52.0, -34.411542731880104), (55.0, -36.14359353944898), (55.0, -39.607695154586736), (52.0, -41.33974596215561), (49.0, -39.607695154586736)], [(55.0, -39.607695154586736), (55.0, -36.14359353944898), (58.0, -34.411542731880104), (61.0, -36.14359353944898), (61.0, -39.607695154586736), (58.0, -41.33974596215561), (55.0, -39.607695154586736)], [(-56.0, -34.411542731880104), (-56.0, -30.947441116742347), (-53.0, -29.215390309173472), (-50.0, -30.947441116742347), (-50.0, -34.411542731880104), (-53.0, -36.14359353944898), (-56.0, -34.411542731880104)], [(-50.0, -34.411542731880104), (-50.0, -30.947441116742347), (-47.0, -29.215390309173472), (-44.0, -30.947441116742347), (-44.0, -34.411542731880104), (-47.0, -36.14359353944898), (-50.0, -34.411542731880104)], [(-44.0, -34.411542731880104), (-44.0, -30.947441116742347), (-41.0, -29.215390309173472), (-38.0, -30.947441116742347), (-38.0, -34.411542731880104), (-41.0, -36.14359353944898), (-44.0, -34.411542731880104)], [(-38.0, -34.411542731880104), (-38.0, -30.947441116742347), (-35.0, -29.215390309173472), (-32.0, -30.947441116742347), (-32.0, -34.411542731880104), (-35.0, -36.14359353944898), (-38.0, -34.411542731880104)], [(-32.0, -34.411542731880104), (-32.0, -30.947441116742347), (-29.0, -29.215390309173472), (-26.0, -30.947441116742347), (-26.0, -34.411542731880104), (-29.0, -36.14359353944898), (-32.0, -34.411542731880104)], [(-26.0, -34.411542731880104), (-26.0, -30.947441116742347), (-23.0, -29.215390309173472), (-20.0, -30.947441116742347), (-20.0, -34.411542731880104), (-23.0, -36.14359353944898), (-26.0, -34.411542731880104)], [(-20.0, -34.411542731880104), (-20.0, -30.947441116742347), (-17.0, -29.215390309173472), (-14.0, -30.947441116742347), (-14.0, -34.411542731880104), (-17.0, -36.14359353944898), (-20.0, -34.411542731880104)], [(-14.0, -34.411542731880104), (-14.0, -30.947441116742347), (-11.0, -29.215390309173472), (-8.0, -30.947441116742347), (-8.0, -34.411542731880104), (-11.0, -36.14359353944898), (-14.0, -34.411542731880104)], [(-8.0, -34.411542731880104), (-8.0, -30.947441116742347), (-5.0, -29.215390309173472), (-2.0, -30.947441116742347), (-2.0, -34.411542731880104), (-5.0, -36.14359353944898), (-8.0, -34.411542731880104)], [(-2.0, -34.411542731880104), (-2.0, -30.947441116742347), (1.0, -29.215390309173472), (4.0, -30.947441116742347), (4.0, -34.411542731880104), (1.0, -36.14359353944898), (-2.0, -34.411542731880104)], [(4.0, -34.411542731880104), (4.0, -30.947441116742347), (7.0, -29.215390309173472), (10.0, -30.947441116742347), (10.0, -34.411542731880104), (7.0, -36.14359353944898), (4.0, -34.411542731880104)], [(10.0, -34.411542731880104), (10.0, -30.947441116742347), (13.0, -29.215390309173472), (16.0, -30.947441116742347), (16.0, -34.411542731880104), (13.0, -36.14359353944898), (10.0, -34.411542731880104)], [(16.0, -34.411542731880104), (16.0, -30.947441116742347), (19.0, -29.215390309173472), (22.0, -30.947441116742347), (22.0, -34.411542731880104), (19.0, -36.14359353944898), (16.0, -34.411542731880104)], [(22.0, -34.411542731880104), (22.0, -30.947441116742347), (25.0, -29.215390309173472), (28.0, -30.947441116742347), (28.0, -34.411542731880104), (25.0, -36.14359353944898), (22.0, -34.411542731880104)], [(28.0, -34.411542731880104), (28.0, -30.947441116742347), (31.0, -29.215390309173472), (34.0, -30.947441116742347), (34.0, -34.411542731880104), (31.0, -36.14359353944898), (28.0, -34.411542731880104)], [(34.0, -34.411542731880104), (34.0, -30.947441116742347), (37.0, -29.215390309173472), (40.0, -30.947441116742347), (40.0, -34.411542731880104), (37.0, -36.14359353944898), (34.0, -34.411542731880104)], [(40.0, -34.411542731880104), (40.0, -30.947441116742347), (43.0, -29.215390309173472), (46.0, -30.947441116742347), (46.0, -34.411542731880104), (43.0, -36.14359353944898), (40.0, -34.411542731880104)], [(46.0, -34.411542731880104), (46.0, -30.947441116742347), (49.0, -29.215390309173472), (52.0, -30.947441116742347), (52.0, -34.411542731880104), (49.0, -36.14359353944898), (46.0, -34.411542731880104)], [(52.0, -34.411542731880104), (52.0, -30.947441116742347), (55.0, -29.215390309173472), (58.0, -30.947441116742347), (58.0, -34.411542731880104), (55.0, -36.14359353944898), (52.0, -34.411542731880104)], [(-53.0, -29.21539030917347), (-53.0, -25.751288694035715), (-50.0, -24.01923788646684), (-47.0, -25.751288694035715), (-47.0, -29.21539030917347), (-50.0, -30.947441116742347), (-53.0, -29.21539030917347)], [(-47.0, -29.21539030917347), (-47.0, -25.751288694035715), (-44.0, -24.01923788646684), (-41.0, -25.751288694035715), (-41.0, -29.21539030917347), (-44.0, -30.947441116742347), (-47.0, -29.21539030917347)], [(-41.0, -29.21539030917347), (-41.0, -25.751288694035715), (-38.0, -24.01923788646684), (-35.0, -25.751288694035715), (-35.0, -29.21539030917347), (-38.0, -30.947441116742347), (-41.0, -29.21539030917347)], [(-35.0, -29.21539030917347), (-35.0, -25.751288694035715), (-32.0, -24.01923788646684), (-29.0, -25.751288694035715), (-29.0, -29.21539030917347), (-32.0, -30.947441116742347), (-35.0, -29.21539030917347)], [(-29.0, -29.21539030917347), (-29.0, -25.751288694035715), (-26.0, -24.01923788646684), (-23.0, -25.751288694035715), (-23.0, -29.21539030917347), (-26.0, -30.947441116742347), (-29.0, -29.21539030917347)], [(-23.0, -29.21539030917347), (-23.0, -25.751288694035715), (-20.0, -24.01923788646684), (-17.0, -25.751288694035715), (-17.0, -29.21539030917347), (-20.0, -30.947441116742347), (-23.0, -29.21539030917347)], [(-17.0, -29.21539030917347), (-17.0, -25.751288694035715), (-14.0, -24.01923788646684), (-11.0, -25.751288694035715), (-11.0, -29.21539030917347), (-14.0, -30.947441116742347), (-17.0, -29.21539030917347)], [(-11.0, -29.21539030917347), (-11.0, -25.751288694035715), (-8.0, -24.01923788646684), (-5.0, -25.751288694035715), (-5.0, -29.21539030917347), (-8.0, -30.947441116742347), (-11.0, -29.21539030917347)], [(-5.0, -29.21539030917347), (-5.0, -25.751288694035715), (-2.0, -24.01923788646684), (1.0, -25.751288694035715), (1.0, -29.21539030917347), (-2.0, -30.947441116742347), (-5.0, -29.21539030917347)], [(1.0, -29.21539030917347), (1.0, -25.751288694035715), (4.0, -24.01923788646684), (7.0, -25.751288694035715), (7.0, -29.21539030917347), (4.0, -30.947441116742347), (1.0, -29.21539030917347)], [(7.0, -29.21539030917347), (7.0, -25.751288694035715), (10.0, -24.01923788646684), (13.0, -25.751288694035715), (13.0, -29.21539030917347), (10.0, -30.947441116742347), (7.0, -29.21539030917347)], [(13.0, -29.21539030917347), (13.0, -25.751288694035715), (16.0, -24.01923788646684), (19.0, -25.751288694035715), (19.0, -29.21539030917347), (16.0, -30.947441116742347), (13.0, -29.21539030917347)], [(19.0, -29.21539030917347), (19.0, -25.751288694035715), (22.0, -24.01923788646684), (25.0, -25.751288694035715), (25.0, -29.21539030917347), (22.0, -30.947441116742347), (19.0, -29.21539030917347)], [(25.0, -29.21539030917347), (25.0, -25.751288694035715), (28.0, -24.01923788646684), (31.0, -25.751288694035715), (31.0, -29.21539030917347), (28.0, -30.947441116742347), (25.0, -29.21539030917347)], [(31.0, -29.21539030917347), (31.0, -25.751288694035715), (34.0, -24.01923788646684), (37.0, -25.751288694035715), (37.0, -29.21539030917347), (34.0, -30.947441116742347), (31.0, -29.21539030917347)], [(37.0, -29.21539030917347), (37.0, -25.751288694035715), (40.0, -24.01923788646684), (43.0, -25.751288694035715), (43.0, -29.21539030917347), (40.0, -30.947441116742347), (37.0, -29.21539030917347)], [(43.0, -29.21539030917347), (43.0, -25.751288694035715), (46.0, -24.01923788646684), (49.0, -25.751288694035715), (49.0, -29.21539030917347), (46.0, -30.947441116742347), (43.0, -29.21539030917347)], [(49.0, -29.21539030917347), (49.0, -25.751288694035715), (52.0, -24.01923788646684), (55.0, -25.751288694035715), (55.0, -29.21539030917347), (52.0, -30.947441116742347), (49.0, -29.21539030917347)], [(55.0, -29.21539030917347), (55.0, -25.751288694035715), (58.0, -24.01923788646684), (61.0, -25.751288694035715), (61.0, -29.21539030917347), (58.0, -30.947441116742347), (55.0, -29.21539030917347)], [(-56.0, -24.019237886466836), (-56.0, -20.555136271329083), (-53.0, -18.823085463760208), (-50.0, -20.555136271329083), (-50.0, -24.019237886466836), (-53.0, -25.751288694035715), (-56.0, -24.019237886466836)], [(-50.0, -24.019237886466836), (-50.0, -20.555136271329083), (-47.0, -18.823085463760208), (-44.0, -20.555136271329083), (-44.0, -24.019237886466836), (-47.0, -25.751288694035715), (-50.0, -24.019237886466836)], [(-44.0, -24.019237886466836), (-44.0, -20.555136271329083), (-41.0, -18.823085463760208), (-38.0, -20.555136271329083), (-38.0, -24.019237886466836), (-41.0, -25.751288694035715), (-44.0, -24.019237886466836)], [(-38.0, -24.019237886466836), (-38.0, -20.555136271329083), (-35.0, -18.823085463760208), (-32.0, -20.555136271329083), (-32.0, -24.019237886466836), (-35.0, -25.751288694035715), (-38.0, -24.019237886466836)], [(-32.0, -24.019237886466836), (-32.0, -20.555136271329083), (-29.0, -18.823085463760208), (-26.0, -20.555136271329083), (-26.0, -24.019237886466836), (-29.0, -25.751288694035715), (-32.0, -24.019237886466836)], [(-26.0, -24.019237886466836), (-26.0, -20.555136271329083), (-23.0, -18.823085463760208), (-20.0, -20.555136271329083), (-20.0, -24.019237886466836), (-23.0, -25.751288694035715), (-26.0, -24.019237886466836)], [(-20.0, -24.019237886466836), (-20.0, -20.555136271329083), (-17.0, -18.823085463760208), (-14.0, -20.555136271329083), (-14.0, -24.019237886466836), (-17.0, -25.751288694035715), (-20.0, -24.019237886466836)], [(-14.0, -24.019237886466836), (-14.0, -20.555136271329083), (-11.0, -18.823085463760208), (-8.0, -20.555136271329083), (-8.0, -24.019237886466836), (-11.0, -25.751288694035715), (-14.0, -24.019237886466836)], [(-8.0, -24.019237886466836), (-8.0, -20.555136271329083), (-5.0, -18.823085463760208), (-2.0, -20.555136271329083), (-2.0, -24.019237886466836), (-5.0, -25.751288694035715), (-8.0, -24.019237886466836)], [(-2.0, -24.019237886466836), (-2.0, -20.555136271329083), (1.0, -18.823085463760208), (4.0, -20.555136271329083), (4.0, -24.019237886466836), (1.0, -25.751288694035715), (-2.0, -24.019237886466836)], [(4.0, -24.019237886466836), (4.0, -20.555136271329083), (7.0, -18.823085463760208), (10.0, -20.555136271329083), (10.0, -24.019237886466836), (7.0, -25.751288694035715), (4.0, -24.019237886466836)], [(10.0, -24.019237886466836), (10.0, -20.555136271329083), (13.0, -18.823085463760208), (16.0, -20.555136271329083), (16.0, -24.019237886466836), (13.0, -25.751288694035715), (10.0, -24.019237886466836)], [(16.0, -24.019237886466836), (16.0, -20.555136271329083), (19.0, -18.823085463760208), (22.0, -20.555136271329083), (22.0, -24.019237886466836), (19.0, -25.751288694035715), (16.0, -24.019237886466836)], [(22.0, -24.019237886466836), (22.0, -20.555136271329083), (25.0, -18.823085463760208), (28.0, -20.555136271329083), (28.0, -24.019237886466836), (25.0, -25.751288694035715), (22.0, -24.019237886466836)], [(28.0, -24.019237886466836), (28.0, -20.555136271329083), (31.0, -18.823085463760208), (34.0, -20.555136271329083), (34.0, -24.019237886466836), (31.0, -25.751288694035715), (28.0, -24.019237886466836)], [(34.0, -24.019237886466836), (34.0, -20.555136271329083), (37.0, -18.823085463760208), (40.0, -20.555136271329083), (40.0, -24.019237886466836), (37.0, -25.751288694035715), (34.0, -24.019237886466836)], [(40.0, -24.019237886466836), (40.0, -20.555136271329083), (43.0, -18.823085463760208), (46.0, -20.555136271329083), (46.0, -24.019237886466836), (43.0, -25.751288694035715), (40.0, -24.019237886466836)], [(46.0, -24.019237886466836), (46.0, -20.555136271329083), (49.0, -18.823085463760208), (52.0, -20.555136271329083), (52.0, -24.019237886466836), (49.0, -25.751288694035715), (46.0, -24.019237886466836)], [(52.0, -24.019237886466836), (52.0, -20.555136271329083), (55.0, -18.823085463760208), (58.0, -20.555136271329083), (58.0, -24.019237886466836), (55.0, -25.751288694035715), (52.0, -24.019237886466836)], [(-53.0, -18.823085463760204), (-53.0, -15.35898384862245), (-50.0, -13.626933041053574), (-47.0, -15.35898384862245), (-47.0, -18.823085463760204), (-50.0, -20.555136271329083), (-53.0, -18.823085463760204)], [(-47.0, -18.823085463760204), (-47.0, -15.35898384862245), (-44.0, -13.626933041053574), (-41.0, -15.35898384862245), (-41.0, -18.823085463760204), (-44.0, -20.555136271329083), (-47.0, -18.823085463760204)], [(-41.0, -18.823085463760204), (-41.0, -15.35898384862245), (-38.0, -13.626933041053574), (-35.0, -15.35898384862245), (-35.0, -18.823085463760204), (-38.0, -20.555136271329083), (-41.0, -18.823085463760204)], [(-35.0, -18.823085463760204), (-35.0, -15.35898384862245), (-32.0, -13.626933041053574), (-29.0, -15.35898384862245), (-29.0, -18.823085463760204), (-32.0, -20.555136271329083), (-35.0, -18.823085463760204)], [(-29.0, -18.823085463760204), (-29.0, -15.35898384862245), (-26.0, -13.626933041053574), (-23.0, -15.35898384862245), (-23.0, -18.823085463760204), (-26.0, -20.555136271329083), (-29.0, -18.823085463760204)], [(-23.0, -18.823085463760204), (-23.0, -15.35898384862245), (-20.0, -13.626933041053574), (-17.0, -15.35898384862245), (-17.0, -18.823085463760204), (-20.0, -20.555136271329083), (-23.0, -18.823085463760204)], [(-17.0, -18.823085463760204), (-17.0, -15.35898384862245), (-14.0, -13.626933041053574), (-11.0, -15.35898384862245), (-11.0, -18.823085463760204), (-14.0, -20.555136271329083), (-17.0, -18.823085463760204)], [(-11.0, -18.823085463760204), (-11.0, -15.35898384862245), (-8.0, -13.626933041053574), (-5.0, -15.35898384862245), (-5.0, -18.823085463760204), (-8.0, -20.555136271329083), (-11.0, -18.823085463760204)], [(-5.0, -18.823085463760204), (-5.0, -15.35898384862245), (-2.0, -13.626933041053574), (1.0, -15.35898384862245), (1.0, -18.823085463760204), (-2.0, -20.555136271329083), (-5.0, -18.823085463760204)], [(1.0, -18.823085463760204), (1.0, -15.35898384862245), (4.0, -13.626933041053574), (7.0, -15.35898384862245), (7.0, -18.823085463760204), (4.0, -20.555136271329083), (1.0, -18.823085463760204)], [(7.0, -18.823085463760204), (7.0, -15.35898384862245), (10.0, -13.626933041053574), (13.0, -15.35898384862245), (13.0, -18.823085463760204), (10.0, -20.555136271329083), (7.0, -18.823085463760204)], [(13.0, -18.823085463760204), (13.0, -15.35898384862245), (16.0, -13.626933041053574), (19.0, -15.35898384862245), (19.0, -18.823085463760204), (16.0, -20.555136271329083), (13.0, -18.823085463760204)], [(19.0, -18.823085463760204), (19.0, -15.35898384862245), (22.0, -13.626933041053574), (25.0, -15.35898384862245), (25.0, -18.823085463760204), (22.0, -20.555136271329083), (19.0, -18.823085463760204)], [(25.0, -18.823085463760204), (25.0, -15.35898384862245), (28.0, -13.626933041053574), (31.0, -15.35898384862245), (31.0, -18.823085463760204), (28.0, -20.555136271329083), (25.0, -18.823085463760204)], [(31.0, -18.823085463760204), (31.0, -15.35898384862245), (34.0, -13.626933041053574), (37.0, -15.35898384862245), (37.0, -18.823085463760204), (34.0, -20.555136271329083), (31.0, -18.823085463760204)], [(37.0, -18.823085463760204), (37.0, -15.35898384862245), (40.0, -13.626933041053574), (43.0, -15.35898384862245), (43.0, -18.823085463760204), (40.0, -20.555136271329083), (37.0, -18.823085463760204)], [(43.0, -18.823085463760204), (43.0, -15.35898384862245), (46.0, -13.626933041053574), (49.0, -15.35898384862245), (49.0, -18.823085463760204), (46.0, -20.555136271329083), (43.0, -18.823085463760204)], [(49.0, -18.823085463760204), (49.0, -15.35898384862245), (52.0, -13.626933041053574), (55.0, -15.35898384862245), (55.0, -18.823085463760204), (52.0, -20.555136271329083), (49.0, -18.823085463760204)], [(55.0, -18.823085463760204), (55.0, -15.35898384862245), (58.0, -13.626933041053574), (61.0, -15.35898384862245), (61.0, -18.823085463760204), (58.0, -20.555136271329083), (55.0, -18.823085463760204)], [(-56.0, -13.626933041053574), (-56.0, -10.162831425915819), (-53.0, -8.430780618346942), (-50.0, -10.162831425915819), (-50.0, -13.626933041053574), (-53.0, -15.35898384862245), (-56.0, -13.626933041053574)], [(-50.0, -13.626933041053574), (-50.0, -10.162831425915819), (-47.0, -8.430780618346942), (-44.0, -10.162831425915819), (-44.0, -13.626933041053574), (-47.0, -15.35898384862245), (-50.0, -13.626933041053574)], [(-44.0, -13.626933041053574), (-44.0, -10.162831425915819), (-41.0, -8.430780618346942), (-38.0, -10.162831425915819), (-38.0, -13.626933041053574), (-41.0, -15.35898384862245), (-44.0, -13.626933041053574)], [(-38.0, -13.626933041053574), (-38.0, -10.162831425915819), (-35.0, -8.430780618346942), (-32.0, -10.162831425915819), (-32.0, -13.626933041053574), (-35.0, -15.35898384862245), (-38.0, -13.626933041053574)], [(-32.0, -13.626933041053574), (-32.0, -10.162831425915819), (-29.0, -8.430780618346942), (-26.0, -10.162831425915819), (-26.0, -13.626933041053574), (-29.0, -15.35898384862245), (-32.0, -13.626933041053574)], [(-26.0, -13.626933041053574), (-26.0, -10.162831425915819), (-23.0, -8.430780618346942), (-20.0, -10.162831425915819), (-20.0, -13.626933041053574), (-23.0, -15.35898384862245), (-26.0, -13.626933041053574)], [(-20.0, -13.626933041053574), (-20.0, -10.162831425915819), (-17.0, -8.430780618346942), (-14.0, -10.162831425915819), (-14.0, -13.626933041053574), (-17.0, -15.35898384862245), (-20.0, -13.626933041053574)], [(-14.0, -13.626933041053574), (-14.0, -10.162831425915819), (-11.0, -8.430780618346942), (-8.0, -10.162831425915819), (-8.0, -13.626933041053574), (-11.0, -15.35898384862245), (-14.0, -13.626933041053574)], [(-8.0, -13.626933041053574), (-8.0, -10.162831425915819), (-5.0, -8.430780618346942), (-2.0, -10.162831425915819), (-2.0, -13.626933041053574), (-5.0, -15.35898384862245), (-8.0, -13.626933041053574)], [(-2.0, -13.626933041053574), (-2.0, -10.162831425915819), (1.0, -8.430780618346942), (4.0, -10.162831425915819), (4.0, -13.626933041053574), (1.0, -15.35898384862245), (-2.0, -13.626933041053574)], [(4.0, -13.626933041053574), (4.0, -10.162831425915819), (7.0, -8.430780618346942), (10.0, -10.162831425915819), (10.0, -13.626933041053574), (7.0, -15.35898384862245), (4.0, -13.626933041053574)], [(10.0, -13.626933041053574), (10.0, -10.162831425915819), (13.0, -8.430780618346942), (16.0, -10.162831425915819), (16.0, -13.626933041053574), (13.0, -15.35898384862245), (10.0, -13.626933041053574)], [(16.0, -13.626933041053574), (16.0, -10.162831425915819), (19.0, -8.430780618346942), (22.0, -10.162831425915819), (22.0, -13.626933041053574), (19.0, -15.35898384862245), (16.0, -13.626933041053574)], [(22.0, -13.626933041053574), (22.0, -10.162831425915819), (25.0, -8.430780618346942), (28.0, -10.162831425915819), (28.0, -13.626933041053574), (25.0, -15.35898384862245), (22.0, -13.626933041053574)], [(28.0, -13.626933041053574), (28.0, -10.162831425915819), (31.0, -8.430780618346942), (34.0, -10.162831425915819), (34.0, -13.626933041053574), (31.0, -15.35898384862245), (28.0, -13.626933041053574)], [(34.0, -13.626933041053574), (34.0, -10.162831425915819), (37.0, -8.430780618346942), (40.0, -10.162831425915819), (40.0, -13.626933041053574), (37.0, -15.35898384862245), (34.0, -13.626933041053574)], [(40.0, -13.626933041053574), (40.0, -10.162831425915819), (43.0, -8.430780618346942), (46.0, -10.162831425915819), (46.0, -13.626933041053574), (43.0, -15.35898384862245), (40.0, -13.626933041053574)], [(46.0, -13.626933041053574), (46.0, -10.162831425915819), (49.0, -8.430780618346942), (52.0, -10.162831425915819), (52.0, -13.626933041053574), (49.0, -15.35898384862245), (46.0, -13.626933041053574)], [(52.0, -13.626933041053574), (52.0, -10.162831425915819), (55.0, -8.430780618346942), (58.0, -10.162831425915819), (58.0, -13.626933041053574), (55.0, -15.35898384862245), (52.0, -13.626933041053574)], [(-53.0, -8.430780618346942), (-53.0, -4.966679003209187), (-50.0, -3.23462819564031), (-47.0, -4.966679003209187), (-47.0, -8.430780618346942), (-50.0, -10.162831425915819), (-53.0, -8.430780618346942)], [(-47.0, -8.430780618346942), (-47.0, -4.966679003209187), (-44.0, -3.23462819564031), (-41.0, -4.966679003209187), (-41.0, -8.430780618346942), (-44.0, -10.162831425915819), (-47.0, -8.430780618346942)], [(-41.0, -8.430780618346942), (-41.0, -4.966679003209187), (-38.0, -3.23462819564031), (-35.0, -4.966679003209187), (-35.0, -8.430780618346942), (-38.0, -10.162831425915819), (-41.0, -8.430780618346942)], [(-35.0, -8.430780618346942), (-35.0, -4.966679003209187), (-32.0, -3.23462819564031), (-29.0, -4.966679003209187), (-29.0, -8.430780618346942), (-32.0, -10.162831425915819), (-35.0, -8.430780618346942)], [(-29.0, -8.430780618346942), (-29.0, -4.966679003209187), (-26.0, -3.23462819564031), (-23.0, -4.966679003209187), (-23.0, -8.430780618346942), (-26.0, -10.162831425915819), (-29.0, -8.430780618346942)], [(-23.0, -8.430780618346942), (-23.0, -4.966679003209187), (-20.0, -3.23462819564031), (-17.0, -4.966679003209187), (-17.0, -8.430780618346942), (-20.0, -10.162831425915819), (-23.0, -8.430780618346942)], [(-17.0, -8.430780618346942), (-17.0, -4.966679003209187), (-14.0, -3.23462819564031), (-11.0, -4.966679003209187), (-11.0, -8.430780618346942), (-14.0, -10.162831425915819), (-17.0, -8.430780618346942)], [(-11.0, -8.430780618346942), (-11.0, -4.966679003209187), (-8.0, -3.23462819564031), (-5.0, -4.966679003209187), (-5.0, -8.430780618346942), (-8.0, -10.162831425915819), (-11.0, -8.430780618346942)], [(-5.0, -8.430780618346942), (-5.0, -4.966679003209187), (-2.0, -3.23462819564031), (1.0, -4.966679003209187), (1.0, -8.430780618346942), (-2.0, -10.162831425915819), (-5.0, -8.430780618346942)], [(1.0, -8.430780618346942), (1.0, -4.966679003209187), (4.0, -3.23462819564031), (7.0, -4.966679003209187), (7.0, -8.430780618346942), (4.0, -10.162831425915819), (1.0, -8.430780618346942)], [(7.0, -8.430780618346942), (7.0, -4.966679003209187), (10.0, -3.23462819564031), (13.0, -4.966679003209187), (13.0, -8.430780618346942), (10.0, -10.162831425915819), (7.0, -8.430780618346942)], [(13.0, -8.430780618346942), (13.0, -4.966679003209187), (16.0, -3.23462819564031), (19.0, -4.966679003209187), (19.0, -8.430780618346942), (16.0, -10.162831425915819), (13.0, -8.430780618346942)], [(19.0, -8.430780618346942), (19.0, -4.966679003209187), (22.0, -3.23462819564031), (25.0, -4.966679003209187), (25.0, -8.430780618346942), (22.0, -10.162831425915819), (19.0, -8.430780618346942)], [(25.0, -8.430780618346942), (25.0, -4.966679003209187), (28.0, -3.23462819564031), (31.0, -4.966679003209187), (31.0, -8.430780618346942), (28.0, -10.162831425915819), (25.0, -8.430780618346942)], [(31.0, -8.430780618346942), (31.0, -4.966679003209187), (34.0, -3.23462819564031), (37.0, -4.966679003209187), (37.0, -8.430780618346942), (34.0, -10.162831425915819), (31.0, -8.430780618346942)], [(37.0, -8.430780618346942), (37.0, -4.966679003209187), (40.0, -3.23462819564031), (43.0, -4.966679003209187), (43.0, -8.430780618346942), (40.0, -10.162831425915819), (37.0, -8.430780618346942)], [(43.0, -8.430780618346942), (43.0, -4.966679003209187), (46.0, -3.23462819564031), (49.0, -4.966679003209187), (49.0, -8.430780618346942), (46.0, -10.162831425915819), (43.0, -8.430780618346942)], [(49.0, -8.430780618346942), (49.0, -4.966679003209187), (52.0, -3.23462819564031), (55.0, -4.966679003209187), (55.0, -8.430780618346942), (52.0, -10.162831425915819), (49.0, -8.430780618346942)], [(55.0, -8.430780618346942), (55.0, -4.966679003209187), (58.0, -3.23462819564031), (61.0, -4.966679003209187), (61.0, -8.430780618346942), (58.0, -10.162831425915819), (55.0, -8.430780618346942)], [(-56.0, -3.2346281956403096), (-56.0, 0.22947341949744526), (-53.0, 1.961524227066322), (-50.0, 0.22947341949744526), (-50.0, -3.2346281956403096), (-53.0, -4.966679003209187), (-56.0, -3.2346281956403096)], [(-50.0, -3.2346281956403096), (-50.0, 0.22947341949744526), (-47.0, 1.961524227066322), (-44.0, 0.22947341949744526), (-44.0, -3.2346281956403096), (-47.0, -4.966679003209187), (-50.0, -3.2346281956403096)], [(-44.0, -3.2346281956403096), (-44.0, 0.22947341949744526), (-41.0, 1.961524227066322), (-38.0, 0.22947341949744526), (-38.0, -3.2346281956403096), (-41.0, -4.966679003209187), (-44.0, -3.2346281956403096)], [(-38.0, -3.2346281956403096), (-38.0, 0.22947341949744526), (-35.0, 1.961524227066322), (-32.0, 0.22947341949744526), (-32.0, -3.2346281956403096), (-35.0, -4.966679003209187), (-38.0, -3.2346281956403096)], [(-32.0, -3.2346281956403096), (-32.0, 0.22947341949744526), (-29.0, 1.961524227066322), (-26.0, 0.22947341949744526), (-26.0, -3.2346281956403096), (-29.0, -4.966679003209187), (-32.0, -3.2346281956403096)], [(-26.0, -3.2346281956403096), (-26.0, 0.22947341949744526), (-23.0, 1.961524227066322), (-20.0, 0.22947341949744526), (-20.0, -3.2346281956403096), (-23.0, -4.966679003209187), (-26.0, -3.2346281956403096)], [(-20.0, -3.2346281956403096), (-20.0, 0.22947341949744526), (-17.0, 1.961524227066322), (-14.0, 0.22947341949744526), (-14.0, -3.2346281956403096), (-17.0, -4.966679003209187), (-20.0, -3.2346281956403096)], [(-14.0, -3.2346281956403096), (-14.0, 0.22947341949744526), (-11.0, 1.961524227066322), (-8.0, 0.22947341949744526), (-8.0, -3.2346281956403096), (-11.0, -4.966679003209187), (-14.0, -3.2346281956403096)], [(-8.0, -3.2346281956403096), (-8.0, 0.22947341949744526), (-5.0, 1.961524227066322), (-2.0, 0.22947341949744526), (-2.0, -3.2346281956403096), (-5.0, -4.966679003209187), (-8.0, -3.2346281956403096)], [(-2.0, -3.2346281956403096), (-2.0, 0.22947341949744526), (1.0, 1.961524227066322), (4.0, 0.22947341949744526), (4.0, -3.2346281956403096), (1.0, -4.966679003209187), (-2.0, -3.2346281956403096)], [(4.0, -3.2346281956403096), (4.0, 0.22947341949744526), (7.0, 1.961524227066322), (10.0, 0.22947341949744526), (10.0, -3.2346281956403096), (7.0, -4.966679003209187), (4.0, -3.2346281956403096)], [(10.0, -3.2346281956403096), (10.0, 0.22947341949744526), (13.0, 1.961524227066322), (16.0, 0.22947341949744526), (16.0, -3.2346281956403096), (13.0, -4.966679003209187), (10.0, -3.2346281956403096)], [(16.0, -3.2346281956403096), (16.0, 0.22947341949744526), (19.0, 1.961524227066322), (22.0, 0.22947341949744526), (22.0, -3.2346281956403096), (19.0, -4.966679003209187), (16.0, -3.2346281956403096)], [(22.0, -3.2346281956403096), (22.0, 0.22947341949744526), (25.0, 1.961524227066322), (28.0, 0.22947341949744526), (28.0, -3.2346281956403096), (25.0, -4.966679003209187), (22.0, -3.2346281956403096)], [(28.0, -3.2346281956403096), (28.0, 0.22947341949744526), (31.0, 1.961524227066322), (34.0, 0.22947341949744526), (34.0, -3.2346281956403096), (31.0, -4.966679003209187), (28.0, -3.2346281956403096)], [(34.0, -3.2346281956403096), (34.0, 0.22947341949744526), (37.0, 1.961524227066322), (40.0, 0.22947341949744526), (40.0, -3.2346281956403096), (37.0, -4.966679003209187), (34.0, -3.2346281956403096)], [(40.0, -3.2346281956403096), (40.0, 0.22947341949744526), (43.0, 1.961524227066322), (46.0, 0.22947341949744526), (46.0, -3.2346281956403096), (43.0, -4.966679003209187), (40.0, -3.2346281956403096)], [(46.0, -3.2346281956403096), (46.0, 0.22947341949744526), (49.0, 1.961524227066322), (52.0, 0.22947341949744526), (52.0, -3.2346281956403096), (49.0, -4.966679003209187), (46.0, -3.2346281956403096)], [(52.0, -3.2346281956403096), (52.0, 0.22947341949744526), (55.0, 1.961524227066322), (58.0, 0.22947341949744526), (58.0, -3.2346281956403096), (55.0, -4.966679003209187), (52.0, -3.2346281956403096)], [(-53.0, 1.9615242270663225), (-53.0, 5.425625842204077), (-50.0, 7.157676649772954), (-47.0, 5.425625842204077), (-47.0, 1.9615242270663225), (-50.0, 0.22947341949744526), (-53.0, 1.9615242270663225)], [(-47.0, 1.9615242270663225), (-47.0, 5.425625842204077), (-44.0, 7.157676649772954), (-41.0, 5.425625842204077), (-41.0, 1.9615242270663225), (-44.0, 0.22947341949744526), (-47.0, 1.9615242270663225)], [(-41.0, 1.9615242270663225), (-41.0, 5.425625842204077), (-38.0, 7.157676649772954), (-35.0, 5.425625842204077), (-35.0, 1.9615242270663225), (-38.0, 0.22947341949744526), (-41.0, 1.9615242270663225)], [(-35.0, 1.9615242270663225), (-35.0, 5.425625842204077), (-32.0, 7.157676649772954), (-29.0, 5.425625842204077), (-29.0, 1.9615242270663225), (-32.0, 0.22947341949744526), (-35.0, 1.9615242270663225)], [(-29.0, 1.9615242270663225), (-29.0, 5.425625842204077), (-26.0, 7.157676649772954), (-23.0, 5.425625842204077), (-23.0, 1.9615242270663225), (-26.0, 0.22947341949744526), (-29.0, 1.9615242270663225)], [(-23.0, 1.9615242270663225), (-23.0, 5.425625842204077), (-20.0, 7.157676649772954), (-17.0, 5.425625842204077), (-17.0, 1.9615242270663225), (-20.0, 0.22947341949744526), (-23.0, 1.9615242270663225)], [(-17.0, 1.9615242270663225), (-17.0, 5.425625842204077), (-14.0, 7.157676649772954), (-11.0, 5.425625842204077), (-11.0, 1.9615242270663225), (-14.0, 0.22947341949744526), (-17.0, 1.9615242270663225)], [(-11.0, 1.9615242270663225), (-11.0, 5.425625842204077), (-8.0, 7.157676649772954), (-5.0, 5.425625842204077), (-5.0, 1.9615242270663225), (-8.0, 0.22947341949744526), (-11.0, 1.9615242270663225)], [(-5.0, 1.9615242270663225), (-5.0, 5.425625842204077), (-2.0, 7.157676649772954), (1.0, 5.425625842204077), (1.0, 1.9615242270663225), (-2.0, 0.22947341949744526), (-5.0, 1.9615242270663225)], [(1.0, 1.9615242270663225), (1.0, 5.425625842204077), (4.0, 7.157676649772954), (7.0, 5.425625842204077), (7.0, 1.9615242270663225), (4.0, 0.22947341949744526), (1.0, 1.9615242270663225)], [(7.0, 1.9615242270663225), (7.0, 5.425625842204077), (10.0, 7.157676649772954), (13.0, 5.425625842204077), (13.0, 1.9615242270663225), (10.0, 0.22947341949744526), (7.0, 1.9615242270663225)], [(13.0, 1.9615242270663225), (13.0, 5.425625842204077), (16.0, 7.157676649772954), (19.0, 5.425625842204077), (19.0, 1.9615242270663225), (16.0, 0.22947341949744526), (13.0, 1.9615242270663225)], [(19.0, 1.9615242270663225), (19.0, 5.425625842204077), (22.0, 7.157676649772954), (25.0, 5.425625842204077), (25.0, 1.9615242270663225), (22.0, 0.22947341949744526), (19.0, 1.9615242270663225)], [(25.0, 1.9615242270663225), (25.0, 5.425625842204077), (28.0, 7.157676649772954), (31.0, 5.425625842204077), (31.0, 1.9615242270663225), (28.0, 0.22947341949744526), (25.0, 1.9615242270663225)], [(31.0, 1.9615242270663225), (31.0, 5.425625842204077), (34.0, 7.157676649772954), (37.0, 5.425625842204077), (37.0, 1.9615242270663225), (34.0, 0.22947341949744526), (31.0, 1.9615242270663225)], [(37.0, 1.9615242270663225), (37.0, 5.425625842204077), (40.0, 7.157676649772954), (43.0, 5.425625842204077), (43.0, 1.9615242270663225), (40.0, 0.22947341949744526), (37.0, 1.9615242270663225)], [(43.0, 1.9615242270663225), (43.0, 5.425625842204077), (46.0, 7.157676649772954), (49.0, 5.425625842204077), (49.0, 1.9615242270663225), (46.0, 0.22947341949744526), (43.0, 1.9615242270663225)], [(49.0, 1.9615242270663225), (49.0, 5.425625842204077), (52.0, 7.157676649772954), (55.0, 5.425625842204077), (55.0, 1.9615242270663225), (52.0, 0.22947341949744526), (49.0, 1.9615242270663225)], [(55.0, 1.9615242270663225), (55.0, 5.425625842204077), (58.0, 7.157676649772954), (61.0, 5.425625842204077), (61.0, 1.9615242270663225), (58.0, 0.22947341949744526), (55.0, 1.9615242270663225)], [(-56.0, 7.157676649772954), (-56.0, 10.62177826491071), (-53.0, 12.353829072479586), (-50.0, 10.62177826491071), (-50.0, 7.157676649772954), (-53.0, 5.425625842204077), (-56.0, 7.157676649772954)], [(-50.0, 7.157676649772954), (-50.0, 10.62177826491071), (-47.0, 12.353829072479586), (-44.0, 10.62177826491071), (-44.0, 7.157676649772954), (-47.0, 5.425625842204077), (-50.0, 7.157676649772954)], [(-44.0, 7.157676649772954), (-44.0, 10.62177826491071), (-41.0, 12.353829072479586), (-38.0, 10.62177826491071), (-38.0, 7.157676649772954), (-41.0, 5.425625842204077), (-44.0, 7.157676649772954)], [(-38.0, 7.157676649772954), (-38.0, 10.62177826491071), (-35.0, 12.353829072479586), (-32.0, 10.62177826491071), (-32.0, 7.157676649772954), (-35.0, 5.425625842204077), (-38.0, 7.157676649772954)], [(-32.0, 7.157676649772954), (-32.0, 10.62177826491071), (-29.0, 12.353829072479586), (-26.0, 10.62177826491071), (-26.0, 7.157676649772954), (-29.0, 5.425625842204077), (-32.0, 7.157676649772954)], [(-26.0, 7.157676649772954), (-26.0, 10.62177826491071), (-23.0, 12.353829072479586), (-20.0, 10.62177826491071), (-20.0, 7.157676649772954), (-23.0, 5.425625842204077), (-26.0, 7.157676649772954)], [(-20.0, 7.157676649772954), (-20.0, 10.62177826491071), (-17.0, 12.353829072479586), (-14.0, 10.62177826491071), (-14.0, 7.157676649772954), (-17.0, 5.425625842204077), (-20.0, 7.157676649772954)], [(-14.0, 7.157676649772954), (-14.0, 10.62177826491071), (-11.0, 12.353829072479586), (-8.0, 10.62177826491071), (-8.0, 7.157676649772954), (-11.0, 5.425625842204077), (-14.0, 7.157676649772954)], [(-8.0, 7.157676649772954), (-8.0, 10.62177826491071), (-5.0, 12.353829072479586), (-2.0, 10.62177826491071), (-2.0, 7.157676649772954), (-5.0, 5.425625842204077), (-8.0, 7.157676649772954)], [(-2.0, 7.157676649772954), (-2.0, 10.62177826491071), (1.0, 12.353829072479586), (4.0, 10.62177826491071), (4.0, 7.157676649772954), (1.0, 5.425625842204077), (-2.0, 7.157676649772954)], [(4.0, 7.157676649772954), (4.0, 10.62177826491071), (7.0, 12.353829072479586), (10.0, 10.62177826491071), (10.0, 7.157676649772954), (7.0, 5.425625842204077), (4.0, 7.157676649772954)], [(10.0, 7.157676649772954), (10.0, 10.62177826491071), (13.0, 12.353829072479586), (16.0, 10.62177826491071), (16.0, 7.157676649772954), (13.0, 5.425625842204077), (10.0, 7.157676649772954)], [(16.0, 7.157676649772954), (16.0, 10.62177826491071), (19.0, 12.353829072479586), (22.0, 10.62177826491071), (22.0, 7.157676649772954), (19.0, 5.425625842204077), (16.0, 7.157676649772954)], [(22.0, 7.157676649772954), (22.0, 10.62177826491071), (25.0, 12.353829072479586), (28.0, 10.62177826491071), (28.0, 7.157676649772954), (25.0, 5.425625842204077), (22.0, 7.157676649772954)], [(28.0, 7.157676649772954), (28.0, 10.62177826491071), (31.0, 12.353829072479586), (34.0, 10.62177826491071), (34.0, 7.157676649772954), (31.0, 5.425625842204077), (28.0, 7.157676649772954)], [(34.0, 7.157676649772954), (34.0, 10.62177826491071), (37.0, 12.353829072479586), (40.0, 10.62177826491071), (40.0, 7.157676649772954), (37.0, 5.425625842204077), (34.0, 7.157676649772954)], [(40.0, 7.157676649772954), (40.0, 10.62177826491071), (43.0, 12.353829072479586), (46.0, 10.62177826491071), (46.0, 7.157676649772954), (43.0, 5.425625842204077), (40.0, 7.157676649772954)], [(46.0, 7.157676649772954), (46.0, 10.62177826491071), (49.0, 12.353829072479586), (52.0, 10.62177826491071), (52.0, 7.157676649772954), (49.0, 5.425625842204077), (46.0, 7.157676649772954)], [(52.0, 7.157676649772954), (52.0, 10.62177826491071), (55.0, 12.353829072479586), (58.0, 10.62177826491071), (58.0, 7.157676649772954), (55.0, 5.425625842204077), (52.0, 7.157676649772954)], [(-53.0, 12.353829072479586), (-53.0, 15.817930687617341), (-50.0, 17.549981495186216), (-47.0, 15.817930687617341), (-47.0, 12.353829072479586), (-50.0, 10.62177826491071), (-53.0, 12.353829072479586)], [(-47.0, 12.353829072479586), (-47.0, 15.817930687617341), (-44.0, 17.549981495186216), (-41.0, 15.817930687617341), (-41.0, 12.353829072479586), (-44.0, 10.62177826491071), (-47.0, 12.353829072479586)], [(-41.0, 12.353829072479586), (-41.0, 15.817930687617341), (-38.0, 17.549981495186216), (-35.0, 15.817930687617341), (-35.0, 12.353829072479586), (-38.0, 10.62177826491071), (-41.0, 12.353829072479586)], [(-35.0, 12.353829072479586), (-35.0, 15.817930687617341), (-32.0, 17.549981495186216), (-29.0, 15.817930687617341), (-29.0, 12.353829072479586), (-32.0, 10.62177826491071), (-35.0, 12.353829072479586)], [(-29.0, 12.353829072479586), (-29.0, 15.817930687617341), (-26.0, 17.549981495186216), (-23.0, 15.817930687617341), (-23.0, 12.353829072479586), (-26.0, 10.62177826491071), (-29.0, 12.353829072479586)], [(-23.0, 12.353829072479586), (-23.0, 15.817930687617341), (-20.0, 17.549981495186216), (-17.0, 15.817930687617341), (-17.0, 12.353829072479586), (-20.0, 10.62177826491071), (-23.0, 12.353829072479586)], [(-17.0, 12.353829072479586), (-17.0, 15.817930687617341), (-14.0, 17.549981495186216), (-11.0, 15.817930687617341), (-11.0, 12.353829072479586), (-14.0, 10.62177826491071), (-17.0, 12.353829072479586)], [(-11.0, 12.353829072479586), (-11.0, 15.817930687617341), (-8.0, 17.549981495186216), (-5.0, 15.817930687617341), (-5.0, 12.353829072479586), (-8.0, 10.62177826491071), (-11.0, 12.353829072479586)], [(-5.0, 12.353829072479586), (-5.0, 15.817930687617341), (-2.0, 17.549981495186216), (1.0, 15.817930687617341), (1.0, 12.353829072479586), (-2.0, 10.62177826491071), (-5.0, 12.353829072479586)], [(1.0, 12.353829072479586), (1.0, 15.817930687617341), (4.0, 17.549981495186216), (7.0, 15.817930687617341), (7.0, 12.353829072479586), (4.0, 10.62177826491071), (1.0, 12.353829072479586)], [(7.0, 12.353829072479586), (7.0, 15.817930687617341), (10.0, 17.549981495186216), (13.0, 15.817930687617341), (13.0, 12.353829072479586), (10.0, 10.62177826491071), (7.0, 12.353829072479586)], [(13.0, 12.353829072479586), (13.0, 15.817930687617341), (16.0, 17.549981495186216), (19.0, 15.817930687617341), (19.0, 12.353829072479586), (16.0, 10.62177826491071), (13.0, 12.353829072479586)], [(19.0, 12.353829072479586), (19.0, 15.817930687617341), (22.0, 17.549981495186216), (25.0, 15.817930687617341), (25.0, 12.353829072479586), (22.0, 10.62177826491071), (19.0, 12.353829072479586)], [(25.0, 12.353829072479586), (25.0, 15.817930687617341), (28.0, 17.549981495186216), (31.0, 15.817930687617341), (31.0, 12.353829072479586), (28.0, 10.62177826491071), (25.0, 12.353829072479586)], [(31.0, 12.353829072479586), (31.0, 15.817930687617341), (34.0, 17.549981495186216), (37.0, 15.817930687617341), (37.0, 12.353829072479586), (34.0, 10.62177826491071), (31.0, 12.353829072479586)], [(37.0, 12.353829072479586), (37.0, 15.817930687617341), (40.0, 17.549981495186216), (43.0, 15.817930687617341), (43.0, 12.353829072479586), (40.0, 10.62177826491071), (37.0, 12.353829072479586)], [(43.0, 12.353829072479586), (43.0, 15.817930687617341), (46.0, 17.549981495186216), (49.0, 15.817930687617341), (49.0, 12.353829072479586), (46.0, 10.62177826491071), (43.0, 12.353829072479586)], [(49.0, 12.353829072479586), (49.0, 15.817930687617341), (52.0, 17.549981495186216), (55.0, 15.817930687617341), (55.0, 12.353829072479586), (52.0, 10.62177826491071), (49.0, 12.353829072479586)], [(55.0, 12.353829072479586), (55.0, 15.817930687617341), (58.0, 17.549981495186216), (61.0, 15.817930687617341), (61.0, 12.353829072479586), (58.0, 10.62177826491071), (55.0, 12.353829072479586)], [(-56.0, 17.54998149518622), (-56.0, 21.014083110323973), (-53.0, 22.74613391789285), (-50.0, 21.014083110323973), (-50.0, 17.54998149518622), (-53.0, 15.817930687617341), (-56.0, 17.54998149518622)], [(-50.0, 17.54998149518622), (-50.0, 21.014083110323973), (-47.0, 22.74613391789285), (-44.0, 21.014083110323973), (-44.0, 17.54998149518622), (-47.0, 15.817930687617341), (-50.0, 17.54998149518622)], [(-44.0, 17.54998149518622), (-44.0, 21.014083110323973), (-41.0, 22.74613391789285), (-38.0, 21.014083110323973), (-38.0, 17.54998149518622), (-41.0, 15.817930687617341), (-44.0, 17.54998149518622)], [(-38.0, 17.54998149518622), (-38.0, 21.014083110323973), (-35.0, 22.74613391789285), (-32.0, 21.014083110323973), (-32.0, 17.54998149518622), (-35.0, 15.817930687617341), (-38.0, 17.54998149518622)], [(-32.0, 17.54998149518622), (-32.0, 21.014083110323973), (-29.0, 22.74613391789285), (-26.0, 21.014083110323973), (-26.0, 17.54998149518622), (-29.0, 15.817930687617341), (-32.0, 17.54998149518622)], [(-26.0, 17.54998149518622), (-26.0, 21.014083110323973), (-23.0, 22.74613391789285), (-20.0, 21.014083110323973), (-20.0, 17.54998149518622), (-23.0, 15.817930687617341), (-26.0, 17.54998149518622)], [(-20.0, 17.54998149518622), (-20.0, 21.014083110323973), (-17.0, 22.74613391789285), (-14.0, 21.014083110323973), (-14.0, 17.54998149518622), (-17.0, 15.817930687617341), (-20.0, 17.54998149518622)], [(-14.0, 17.54998149518622), (-14.0, 21.014083110323973), (-11.0, 22.74613391789285), (-8.0, 21.014083110323973), (-8.0, 17.54998149518622), (-11.0, 15.817930687617341), (-14.0, 17.54998149518622)], [(-8.0, 17.54998149518622), (-8.0, 21.014083110323973), (-5.0, 22.74613391789285), (-2.0, 21.014083110323973), (-2.0, 17.54998149518622), (-5.0, 15.817930687617341), (-8.0, 17.54998149518622)], [(-2.0, 17.54998149518622), (-2.0, 21.014083110323973), (1.0, 22.74613391789285), (4.0, 21.014083110323973), (4.0, 17.54998149518622), (1.0, 15.817930687617341), (-2.0, 17.54998149518622)], [(4.0, 17.54998149518622), (4.0, 21.014083110323973), (7.0, 22.74613391789285), (10.0, 21.014083110323973), (10.0, 17.54998149518622), (7.0, 15.817930687617341), (4.0, 17.54998149518622)], [(10.0, 17.54998149518622), (10.0, 21.014083110323973), (13.0, 22.74613391789285), (16.0, 21.014083110323973), (16.0, 17.54998149518622), (13.0, 15.817930687617341), (10.0, 17.54998149518622)], [(16.0, 17.54998149518622), (16.0, 21.014083110323973), (19.0, 22.74613391789285), (22.0, 21.014083110323973), (22.0, 17.54998149518622), (19.0, 15.817930687617341), (16.0, 17.54998149518622)], [(22.0, 17.54998149518622), (22.0, 21.014083110323973), (25.0, 22.74613391789285), (28.0, 21.014083110323973), (28.0, 17.54998149518622), (25.0, 15.817930687617341), (22.0, 17.54998149518622)], [(28.0, 17.54998149518622), (28.0, 21.014083110323973), (31.0, 22.74613391789285), (34.0, 21.014083110323973), (34.0, 17.54998149518622), (31.0, 15.817930687617341), (28.0, 17.54998149518622)], [(34.0, 17.54998149518622), (34.0, 21.014083110323973), (37.0, 22.74613391789285), (40.0, 21.014083110323973), (40.0, 17.54998149518622), (37.0, 15.817930687617341), (34.0, 17.54998149518622)], [(40.0, 17.54998149518622), (40.0, 21.014083110323973), (43.0, 22.74613391789285), (46.0, 21.014083110323973), (46.0, 17.54998149518622), (43.0, 15.817930687617341), (40.0, 17.54998149518622)], [(46.0, 17.54998149518622), (46.0, 21.014083110323973), (49.0, 22.74613391789285), (52.0, 21.014083110323973), (52.0, 17.54998149518622), (49.0, 15.817930687617341), (46.0, 17.54998149518622)], [(52.0, 17.54998149518622), (52.0, 21.014083110323973), (55.0, 22.74613391789285), (58.0, 21.014083110323973), (58.0, 17.54998149518622), (55.0, 15.817930687617341), (52.0, 17.54998149518622)], [(-53.0, 22.746133917892852), (-53.0, 26.210235533030605), (-50.0, 27.94228634059948), (-47.0, 26.210235533030605), (-47.0, 22.746133917892852), (-50.0, 21.014083110323973), (-53.0, 22.746133917892852)], [(-47.0, 22.746133917892852), (-47.0, 26.210235533030605), (-44.0, 27.94228634059948), (-41.0, 26.210235533030605), (-41.0, 22.746133917892852), (-44.0, 21.014083110323973), (-47.0, 22.746133917892852)], [(-41.0, 22.746133917892852), (-41.0, 26.210235533030605), (-38.0, 27.94228634059948), (-35.0, 26.210235533030605), (-35.0, 22.746133917892852), (-38.0, 21.014083110323973), (-41.0, 22.746133917892852)], [(-35.0, 22.746133917892852), (-35.0, 26.210235533030605), (-32.0, 27.94228634059948), (-29.0, 26.210235533030605), (-29.0, 22.746133917892852), (-32.0, 21.014083110323973), (-35.0, 22.746133917892852)], [(-29.0, 22.746133917892852), (-29.0, 26.210235533030605), (-26.0, 27.94228634059948), (-23.0, 26.210235533030605), (-23.0, 22.746133917892852), (-26.0, 21.014083110323973), (-29.0, 22.746133917892852)], [(-23.0, 22.746133917892852), (-23.0, 26.210235533030605), (-20.0, 27.94228634059948), (-17.0, 26.210235533030605), (-17.0, 22.746133917892852), (-20.0, 21.014083110323973), (-23.0, 22.746133917892852)], [(-17.0, 22.746133917892852), (-17.0, 26.210235533030605), (-14.0, 27.94228634059948), (-11.0, 26.210235533030605), (-11.0, 22.746133917892852), (-14.0, 21.014083110323973), (-17.0, 22.746133917892852)], [(-11.0, 22.746133917892852), (-11.0, 26.210235533030605), (-8.0, 27.94228634059948), (-5.0, 26.210235533030605), (-5.0, 22.746133917892852), (-8.0, 21.014083110323973), (-11.0, 22.746133917892852)], [(-5.0, 22.746133917892852), (-5.0, 26.210235533030605), (-2.0, 27.94228634059948), (1.0, 26.210235533030605), (1.0, 22.746133917892852), (-2.0, 21.014083110323973), (-5.0, 22.746133917892852)], [(1.0, 22.746133917892852), (1.0, 26.210235533030605), (4.0, 27.94228634059948), (7.0, 26.210235533030605), (7.0, 22.746133917892852), (4.0, 21.014083110323973), (1.0, 22.746133917892852)], [(7.0, 22.746133917892852), (7.0, 26.210235533030605), (10.0, 27.94228634059948), (13.0, 26.210235533030605), (13.0, 22.746133917892852), (10.0, 21.014083110323973), (7.0, 22.746133917892852)], [(13.0, 22.746133917892852), (13.0, 26.210235533030605), (16.0, 27.94228634059948), (19.0, 26.210235533030605), (19.0, 22.746133917892852), (16.0, 21.014083110323973), (13.0, 22.746133917892852)], [(19.0, 22.746133917892852), (19.0, 26.210235533030605), (22.0, 27.94228634059948), (25.0, 26.210235533030605), (25.0, 22.746133917892852), (22.0, 21.014083110323973), (19.0, 22.746133917892852)], [(25.0, 22.746133917892852), (25.0, 26.210235533030605), (28.0, 27.94228634059948), (31.0, 26.210235533030605), (31.0, 22.746133917892852), (28.0, 21.014083110323973), (25.0, 22.746133917892852)], [(31.0, 22.746133917892852), (31.0, 26.210235533030605), (34.0, 27.94228634059948), (37.0, 26.210235533030605), (37.0, 22.746133917892852), (34.0, 21.014083110323973), (31.0, 22.746133917892852)], [(37.0, 22.746133917892852), (37.0, 26.210235533030605), (40.0, 27.94228634059948), (43.0, 26.210235533030605), (43.0, 22.746133917892852), (40.0, 21.014083110323973), (37.0, 22.746133917892852)], [(43.0, 22.746133917892852), (43.0, 26.210235533030605), (46.0, 27.94228634059948), (49.0, 26.210235533030605), (49.0, 22.746133917892852), (46.0, 21.014083110323973), (43.0, 22.746133917892852)], [(49.0, 22.746133917892852), (49.0, 26.210235533030605), (52.0, 27.94228634059948), (55.0, 26.210235533030605), (55.0, 22.746133917892852), (52.0, 21.014083110323973), (49.0, 22.746133917892852)], [(55.0, 22.746133917892852), (55.0, 26.210235533030605), (58.0, 27.94228634059948), (61.0, 26.210235533030605), (61.0, 22.746133917892852), (58.0, 21.014083110323973), (55.0, 22.746133917892852)], [(-56.0, 27.942286340599484), (-56.0, 31.406387955737237), (-53.0, 33.13843876330611), (-50.0, 31.406387955737237), (-50.0, 27.942286340599484), (-53.0, 26.210235533030605), (-56.0, 27.942286340599484)], [(-50.0, 27.942286340599484), (-50.0, 31.406387955737237), (-47.0, 33.13843876330611), (-44.0, 31.406387955737237), (-44.0, 27.942286340599484), (-47.0, 26.210235533030605), (-50.0, 27.942286340599484)], [(-44.0, 27.942286340599484), (-44.0, 31.406387955737237), (-41.0, 33.13843876330611), (-38.0, 31.406387955737237), (-38.0, 27.942286340599484), (-41.0, 26.210235533030605), (-44.0, 27.942286340599484)], [(-38.0, 27.942286340599484), (-38.0, 31.406387955737237), (-35.0, 33.13843876330611), (-32.0, 31.406387955737237), (-32.0, 27.942286340599484), (-35.0, 26.210235533030605), (-38.0, 27.942286340599484)], [(-32.0, 27.942286340599484), (-32.0, 31.406387955737237), (-29.0, 33.13843876330611), (-26.0, 31.406387955737237), (-26.0, 27.942286340599484), (-29.0, 26.210235533030605), (-32.0, 27.942286340599484)], [(-26.0, 27.942286340599484), (-26.0, 31.406387955737237), (-23.0, 33.13843876330611), (-20.0, 31.406387955737237), (-20.0, 27.942286340599484), (-23.0, 26.210235533030605), (-26.0, 27.942286340599484)], [(-20.0, 27.942286340599484), (-20.0, 31.406387955737237), (-17.0, 33.13843876330611), (-14.0, 31.406387955737237), (-14.0, 27.942286340599484), (-17.0, 26.210235533030605), (-20.0, 27.942286340599484)], [(-14.0, 27.942286340599484), (-14.0, 31.406387955737237), (-11.0, 33.13843876330611), (-8.0, 31.406387955737237), (-8.0, 27.942286340599484), (-11.0, 26.210235533030605), (-14.0, 27.942286340599484)], [(-8.0, 27.942286340599484), (-8.0, 31.406387955737237), (-5.0, 33.13843876330611), (-2.0, 31.406387955737237), (-2.0, 27.942286340599484), (-5.0, 26.210235533030605), (-8.0, 27.942286340599484)], [(-2.0, 27.942286340599484), (-2.0, 31.406387955737237), (1.0, 33.13843876330611), (4.0, 31.406387955737237), (4.0, 27.942286340599484), (1.0, 26.210235533030605), (-2.0, 27.942286340599484)], [(4.0, 27.942286340599484), (4.0, 31.406387955737237), (7.0, 33.13843876330611), (10.0, 31.406387955737237), (10.0, 27.942286340599484), (7.0, 26.210235533030605), (4.0, 27.942286340599484)], [(10.0, 27.942286340599484), (10.0, 31.406387955737237), (13.0, 33.13843876330611), (16.0, 31.406387955737237), (16.0, 27.942286340599484), (13.0, 26.210235533030605), (10.0, 27.942286340599484)], [(16.0, 27.942286340599484), (16.0, 31.406387955737237), (19.0, 33.13843876330611), (22.0, 31.406387955737237), (22.0, 27.942286340599484), (19.0, 26.210235533030605), (16.0, 27.942286340599484)], [(22.0, 27.942286340599484), (22.0, 31.406387955737237), (25.0, 33.13843876330611), (28.0, 31.406387955737237), (28.0, 27.942286340599484), (25.0, 26.210235533030605), (22.0, 27.942286340599484)], [(28.0, 27.942286340599484), (28.0, 31.406387955737237), (31.0, 33.13843876330611), (34.0, 31.406387955737237), (34.0, 27.942286340599484), (31.0, 26.210235533030605), (28.0, 27.942286340599484)], [(34.0, 27.942286340599484), (34.0, 31.406387955737237), (37.0, 33.13843876330611), (40.0, 31.406387955737237), (40.0, 27.942286340599484), (37.0, 26.210235533030605), (34.0, 27.942286340599484)], [(40.0, 27.942286340599484), (40.0, 31.406387955737237), (43.0, 33.13843876330611), (46.0, 31.406387955737237), (46.0, 27.942286340599484), (43.0, 26.210235533030605), (40.0, 27.942286340599484)], [(46.0, 27.942286340599484), (46.0, 31.406387955737237), (49.0, 33.13843876330611), (52.0, 31.406387955737237), (52.0, 27.942286340599484), (49.0, 26.210235533030605), (46.0, 27.942286340599484)], [(52.0, 27.942286340599484), (52.0, 31.406387955737237), (55.0, 33.13843876330611), (58.0, 31.406387955737237), (58.0, 27.942286340599484), (55.0, 26.210235533030605), (52.0, 27.942286340599484)], [(-53.0, 33.13843876330611), (-53.0, 36.60254037844387), (-50.0, 38.334591186012744), (-47.0, 36.60254037844387), (-47.0, 33.13843876330611), (-50.0, 31.406387955737237), (-53.0, 33.13843876330611)], [(-47.0, 33.13843876330611), (-47.0, 36.60254037844387), (-44.0, 38.334591186012744), (-41.0, 36.60254037844387), (-41.0, 33.13843876330611), (-44.0, 31.406387955737237), (-47.0, 33.13843876330611)], [(-41.0, 33.13843876330611), (-41.0, 36.60254037844387), (-38.0, 38.334591186012744), (-35.0, 36.60254037844387), (-35.0, 33.13843876330611), (-38.0, 31.406387955737237), (-41.0, 33.13843876330611)], [(-35.0, 33.13843876330611), (-35.0, 36.60254037844387), (-32.0, 38.334591186012744), (-29.0, 36.60254037844387), (-29.0, 33.13843876330611), (-32.0, 31.406387955737237), (-35.0, 33.13843876330611)], [(-29.0, 33.13843876330611), (-29.0, 36.60254037844387), (-26.0, 38.334591186012744), (-23.0, 36.60254037844387), (-23.0, 33.13843876330611), (-26.0, 31.406387955737237), (-29.0, 33.13843876330611)], [(-23.0, 33.13843876330611), (-23.0, 36.60254037844387), (-20.0, 38.334591186012744), (-17.0, 36.60254037844387), (-17.0, 33.13843876330611), (-20.0, 31.406387955737237), (-23.0, 33.13843876330611)], [(-17.0, 33.13843876330611), (-17.0, 36.60254037844387), (-14.0, 38.334591186012744), (-11.0, 36.60254037844387), (-11.0, 33.13843876330611), (-14.0, 31.406387955737237), (-17.0, 33.13843876330611)], [(-11.0, 33.13843876330611), (-11.0, 36.60254037844387), (-8.0, 38.334591186012744), (-5.0, 36.60254037844387), (-5.0, 33.13843876330611), (-8.0, 31.406387955737237), (-11.0, 33.13843876330611)], [(-5.0, 33.13843876330611), (-5.0, 36.60254037844387), (-2.0, 38.334591186012744), (1.0, 36.60254037844387), (1.0, 33.13843876330611), (-2.0, 31.406387955737237), (-5.0, 33.13843876330611)], [(1.0, 33.13843876330611), (1.0, 36.60254037844387), (4.0, 38.334591186012744), (7.0, 36.60254037844387), (7.0, 33.13843876330611), (4.0, 31.406387955737237), (1.0, 33.13843876330611)], [(7.0, 33.13843876330611), (7.0, 36.60254037844387), (10.0, 38.334591186012744), (13.0, 36.60254037844387), (13.0, 33.13843876330611), (10.0, 31.406387955737237), (7.0, 33.13843876330611)], [(13.0, 33.13843876330611), (13.0, 36.60254037844387), (16.0, 38.334591186012744), (19.0, 36.60254037844387), (19.0, 33.13843876330611), (16.0, 31.406387955737237), (13.0, 33.13843876330611)], [(19.0, 33.13843876330611), (19.0, 36.60254037844387), (22.0, 38.334591186012744), (25.0, 36.60254037844387), (25.0, 33.13843876330611), (22.0, 31.406387955737237), (19.0, 33.13843876330611)], [(25.0, 33.13843876330611), (25.0, 36.60254037844387), (28.0, 38.334591186012744), (31.0, 36.60254037844387), (31.0, 33.13843876330611), (28.0, 31.406387955737237), (25.0, 33.13843876330611)], [(31.0, 33.13843876330611), (31.0, 36.60254037844387), (34.0, 38.334591186012744), (37.0, 36.60254037844387), (37.0, 33.13843876330611), (34.0, 31.406387955737237), (31.0, 33.13843876330611)], [(37.0, 33.13843876330611), (37.0, 36.60254037844387), (40.0, 38.334591186012744), (43.0, 36.60254037844387), (43.0, 33.13843876330611), (40.0, 31.406387955737237), (37.0, 33.13843876330611)], [(43.0, 33.13843876330611), (43.0, 36.60254037844387), (46.0, 38.334591186012744), (49.0, 36.60254037844387), (49.0, 33.13843876330611), (46.0, 31.406387955737237), (43.0, 33.13843876330611)], [(49.0, 33.13843876330611), (49.0, 36.60254037844387), (52.0, 38.334591186012744), (55.0, 36.60254037844387), (55.0, 33.13843876330611), (52.0, 31.406387955737237), (49.0, 33.13843876330611)], [(55.0, 33.13843876330611), (55.0, 36.60254037844387), (58.0, 38.334591186012744), (61.0, 36.60254037844387), (61.0, 33.13843876330611), (58.0, 31.406387955737237), (55.0, 33.13843876330611)], [(-56.0, 38.334591186012744), (-56.0, 41.7986928011505), (-53.0, 43.530743608719376), (-50.0, 41.7986928011505), (-50.0, 38.334591186012744), (-53.0, 36.60254037844387), (-56.0, 38.334591186012744)], [(-50.0, 38.334591186012744), (-50.0, 41.7986928011505), (-47.0, 43.530743608719376), (-44.0, 41.7986928011505), (-44.0, 38.334591186012744), (-47.0, 36.60254037844387), (-50.0, 38.334591186012744)], [(-44.0, 38.334591186012744), (-44.0, 41.7986928011505), (-41.0, 43.530743608719376), (-38.0, 41.7986928011505), (-38.0, 38.334591186012744), (-41.0, 36.60254037844387), (-44.0, 38.334591186012744)], [(-38.0, 38.334591186012744), (-38.0, 41.7986928011505), (-35.0, 43.530743608719376), (-32.0, 41.7986928011505), (-32.0, 38.334591186012744), (-35.0, 36.60254037844387), (-38.0, 38.334591186012744)], [(-32.0, 38.334591186012744), (-32.0, 41.7986928011505), (-29.0, 43.530743608719376), (-26.0, 41.7986928011505), (-26.0, 38.334591186012744), (-29.0, 36.60254037844387), (-32.0, 38.334591186012744)], [(-26.0, 38.334591186012744), (-26.0, 41.7986928011505), (-23.0, 43.530743608719376), (-20.0, 41.7986928011505), (-20.0, 38.334591186012744), (-23.0, 36.60254037844387), (-26.0, 38.334591186012744)], [(-20.0, 38.334591186012744), (-20.0, 41.7986928011505), (-17.0, 43.530743608719376), (-14.0, 41.7986928011505), (-14.0, 38.334591186012744), (-17.0, 36.60254037844387), (-20.0, 38.334591186012744)], [(-14.0, 38.334591186012744), (-14.0, 41.7986928011505), (-11.0, 43.530743608719376), (-8.0, 41.7986928011505), (-8.0, 38.334591186012744), (-11.0, 36.60254037844387), (-14.0, 38.334591186012744)], [(-8.0, 38.334591186012744), (-8.0, 41.7986928011505), (-5.0, 43.530743608719376), (-2.0, 41.7986928011505), (-2.0, 38.334591186012744), (-5.0, 36.60254037844387), (-8.0, 38.334591186012744)], [(-2.0, 38.334591186012744), (-2.0, 41.7986928011505), (1.0, 43.530743608719376), (4.0, 41.7986928011505), (4.0, 38.334591186012744), (1.0, 36.60254037844387), (-2.0, 38.334591186012744)], [(4.0, 38.334591186012744), (4.0, 41.7986928011505), (7.0, 43.530743608719376), (10.0, 41.7986928011505), (10.0, 38.334591186012744), (7.0, 36.60254037844387), (4.0, 38.334591186012744)], [(10.0, 38.334591186012744), (10.0, 41.7986928011505), (13.0, 43.530743608719376), (16.0, 41.7986928011505), (16.0, 38.334591186012744), (13.0, 36.60254037844387), (10.0, 38.334591186012744)], [(16.0, 38.334591186012744), (16.0, 41.7986928011505), (19.0, 43.530743608719376), (22.0, 41.7986928011505), (22.0, 38.334591186012744), (19.0, 36.60254037844387), (16.0, 38.334591186012744)], [(22.0, 38.334591186012744), (22.0, 41.7986928011505), (25.0, 43.530743608719376), (28.0, 41.7986928011505), (28.0, 38.334591186012744), (25.0, 36.60254037844387), (22.0, 38.334591186012744)], [(28.0, 38.334591186012744), (28.0, 41.7986928011505), (31.0, 43.530743608719376), (34.0, 41.7986928011505), (34.0, 38.334591186012744), (31.0, 36.60254037844387), (28.0, 38.334591186012744)], [(34.0, 38.334591186012744), (34.0, 41.7986928011505), (37.0, 43.530743608719376), (40.0, 41.7986928011505), (40.0, 38.334591186012744), (37.0, 36.60254037844387), (34.0, 38.334591186012744)], [(40.0, 38.334591186012744), (40.0, 41.7986928011505), (43.0, 43.530743608719376), (46.0, 41.7986928011505), (46.0, 38.334591186012744), (43.0, 36.60254037844387), (40.0, 38.334591186012744)], [(46.0, 38.334591186012744), (46.0, 41.7986928011505), (49.0, 43.530743608719376), (52.0, 41.7986928011505), (52.0, 38.334591186012744), (49.0, 36.60254037844387), (46.0, 38.334591186012744)], [(52.0, 38.334591186012744), (52.0, 41.7986928011505), (55.0, 43.530743608719376), (58.0, 41.7986928011505), (58.0, 38.334591186012744), (55.0, 36.60254037844387), (52.0, 38.334591186012744)], [(-53.0, 43.530743608719376), (-53.0, 46.99484522385713), (-50.0, 48.72689603142601), (-47.0, 46.99484522385713), (-47.0, 43.530743608719376), (-50.0, 41.7986928011505), (-53.0, 43.530743608719376)], [(-47.0, 43.530743608719376), (-47.0, 46.99484522385713), (-44.0, 48.72689603142601), (-41.0, 46.99484522385713), (-41.0, 43.530743608719376), (-44.0, 41.7986928011505), (-47.0, 43.530743608719376)], [(-41.0, 43.530743608719376), (-41.0, 46.99484522385713), (-38.0, 48.72689603142601), (-35.0, 46.99484522385713), (-35.0, 43.530743608719376), (-38.0, 41.7986928011505), (-41.0, 43.530743608719376)], [(-35.0, 43.530743608719376), (-35.0, 46.99484522385713), (-32.0, 48.72689603142601), (-29.0, 46.99484522385713), (-29.0, 43.530743608719376), (-32.0, 41.7986928011505), (-35.0, 43.530743608719376)], [(-29.0, 43.530743608719376), (-29.0, 46.99484522385713), (-26.0, 48.72689603142601), (-23.0, 46.99484522385713), (-23.0, 43.530743608719376), (-26.0, 41.7986928011505), (-29.0, 43.530743608719376)], [(-23.0, 43.530743608719376), (-23.0, 46.99484522385713), (-20.0, 48.72689603142601), (-17.0, 46.99484522385713), (-17.0, 43.530743608719376), (-20.0, 41.7986928011505), (-23.0, 43.530743608719376)], [(-17.0, 43.530743608719376), (-17.0, 46.99484522385713), (-14.0, 48.72689603142601), (-11.0, 46.99484522385713), (-11.0, 43.530743608719376), (-14.0, 41.7986928011505), (-17.0, 43.530743608719376)], [(-11.0, 43.530743608719376), (-11.0, 46.99484522385713), (-8.0, 48.72689603142601), (-5.0, 46.99484522385713), (-5.0, 43.530743608719376), (-8.0, 41.7986928011505), (-11.0, 43.530743608719376)], [(-5.0, 43.530743608719376), (-5.0, 46.99484522385713), (-2.0, 48.72689603142601), (1.0, 46.99484522385713), (1.0, 43.530743608719376), (-2.0, 41.7986928011505), (-5.0, 43.530743608719376)], [(1.0, 43.530743608719376), (1.0, 46.99484522385713), (4.0, 48.72689603142601), (7.0, 46.99484522385713), (7.0, 43.530743608719376), (4.0, 41.7986928011505), (1.0, 43.530743608719376)], [(7.0, 43.530743608719376), (7.0, 46.99484522385713), (10.0, 48.72689603142601), (13.0, 46.99484522385713), (13.0, 43.530743608719376), (10.0, 41.7986928011505), (7.0, 43.530743608719376)], [(13.0, 43.530743608719376), (13.0, 46.99484522385713), (16.0, 48.72689603142601), (19.0, 46.99484522385713), (19.0, 43.530743608719376), (16.0, 41.7986928011505), (13.0, 43.530743608719376)], [(19.0, 43.530743608719376), (19.0, 46.99484522385713), (22.0, 48.72689603142601), (25.0, 46.99484522385713), (25.0, 43.530743608719376), (22.0, 41.7986928011505), (19.0, 43.530743608719376)], [(25.0, 43.530743608719376), (25.0, 46.99484522385713), (28.0, 48.72689603142601), (31.0, 46.99484522385713), (31.0, 43.530743608719376), (28.0, 41.7986928011505), (25.0, 43.530743608719376)], [(31.0, 43.530743608719376), (31.0, 46.99484522385713), (34.0, 48.72689603142601), (37.0, 46.99484522385713), (37.0, 43.530743608719376), (34.0, 41.7986928011505), (31.0, 43.530743608719376)], [(37.0, 43.530743608719376), (37.0, 46.99484522385713), (40.0, 48.72689603142601), (43.0, 46.99484522385713), (43.0, 43.530743608719376), (40.0, 41.7986928011505), (37.0, 43.530743608719376)], [(43.0, 43.530743608719376), (43.0, 46.99484522385713), (46.0, 48.72689603142601), (49.0, 46.99484522385713), (49.0, 43.530743608719376), (46.0, 41.7986928011505), (43.0, 43.530743608719376)], [(49.0, 43.530743608719376), (49.0, 46.99484522385713), (52.0, 48.72689603142601), (55.0, 46.99484522385713), (55.0, 43.530743608719376), (52.0, 41.7986928011505), (49.0, 43.530743608719376)], [(55.0, 43.530743608719376), (55.0, 46.99484522385713), (58.0, 48.72689603142601), (61.0, 46.99484522385713), (61.0, 43.530743608719376), (58.0, 41.7986928011505), (55.0, 43.530743608719376)], [(-56.0, 48.72689603142601), (-56.0, 52.190997646563765), (-53.0, 53.92304845413264), (-50.0, 52.190997646563765), (-50.0, 48.72689603142601), (-53.0, 46.99484522385713), (-56.0, 48.72689603142601)], [(-50.0, 48.72689603142601), (-50.0, 52.190997646563765), (-47.0, 53.92304845413264), (-44.0, 52.190997646563765), (-44.0, 48.72689603142601), (-47.0, 46.99484522385713), (-50.0, 48.72689603142601)], [(-44.0, 48.72689603142601), (-44.0, 52.190997646563765), (-41.0, 53.92304845413264), (-38.0, 52.190997646563765), (-38.0, 48.72689603142601), (-41.0, 46.99484522385713), (-44.0, 48.72689603142601)], [(-38.0, 48.72689603142601), (-38.0, 52.190997646563765), (-35.0, 53.92304845413264), (-32.0, 52.190997646563765), (-32.0, 48.72689603142601), (-35.0, 46.99484522385713), (-38.0, 48.72689603142601)], [(-32.0, 48.72689603142601), (-32.0, 52.190997646563765), (-29.0, 53.92304845413264), (-26.0, 52.190997646563765), (-26.0, 48.72689603142601), (-29.0, 46.99484522385713), (-32.0, 48.72689603142601)], [(-26.0, 48.72689603142601), (-26.0, 52.190997646563765), (-23.0, 53.92304845413264), (-20.0, 52.190997646563765), (-20.0, 48.72689603142601), (-23.0, 46.99484522385713), (-26.0, 48.72689603142601)], [(-20.0, 48.72689603142601), (-20.0, 52.190997646563765), (-17.0, 53.92304845413264), (-14.0, 52.190997646563765), (-14.0, 48.72689603142601), (-17.0, 46.99484522385713), (-20.0, 48.72689603142601)], [(-14.0, 48.72689603142601), (-14.0, 52.190997646563765), (-11.0, 53.92304845413264), (-8.0, 52.190997646563765), (-8.0, 48.72689603142601), (-11.0, 46.99484522385713), (-14.0, 48.72689603142601)], [(-8.0, 48.72689603142601), (-8.0, 52.190997646563765), (-5.0, 53.92304845413264), (-2.0, 52.190997646563765), (-2.0, 48.72689603142601), (-5.0, 46.99484522385713), (-8.0, 48.72689603142601)], [(-2.0, 48.72689603142601), (-2.0, 52.190997646563765), (1.0, 53.92304845413264), (4.0, 52.190997646563765), (4.0, 48.72689603142601), (1.0, 46.99484522385713), (-2.0, 48.72689603142601)], [(4.0, 48.72689603142601), (4.0, 52.190997646563765), (7.0, 53.92304845413264), (10.0, 52.190997646563765), (10.0, 48.72689603142601), (7.0, 46.99484522385713), (4.0, 48.72689603142601)], [(10.0, 48.72689603142601), (10.0, 52.190997646563765), (13.0, 53.92304845413264), (16.0, 52.190997646563765), (16.0, 48.72689603142601), (13.0, 46.99484522385713), (10.0, 48.72689603142601)], [(16.0, 48.72689603142601), (16.0, 52.190997646563765), (19.0, 53.92304845413264), (22.0, 52.190997646563765), (22.0, 48.72689603142601), (19.0, 46.99484522385713), (16.0, 48.72689603142601)], [(22.0, 48.72689603142601), (22.0, 52.190997646563765), (25.0, 53.92304845413264), (28.0, 52.190997646563765), (28.0, 48.72689603142601), (25.0, 46.99484522385713), (22.0, 48.72689603142601)], [(28.0, 48.72689603142601), (28.0, 52.190997646563765), (31.0, 53.92304845413264), (34.0, 52.190997646563765), (34.0, 48.72689603142601), (31.0, 46.99484522385713), (28.0, 48.72689603142601)], [(34.0, 48.72689603142601), (34.0, 52.190997646563765), (37.0, 53.92304845413264), (40.0, 52.190997646563765), (40.0, 48.72689603142601), (37.0, 46.99484522385713), (34.0, 48.72689603142601)], [(40.0, 48.72689603142601), (40.0, 52.190997646563765), (43.0, 53.92304845413264), (46.0, 52.190997646563765), (46.0, 48.72689603142601), (43.0, 46.99484522385713), (40.0, 48.72689603142601)], [(46.0, 48.72689603142601), (46.0, 52.190997646563765), (49.0, 53.92304845413264), (52.0, 52.190997646563765), (52.0, 48.72689603142601), (49.0, 46.99484522385713), (46.0, 48.72689603142601)], [(52.0, 48.72689603142601), (52.0, 52.190997646563765), (55.0, 53.92304845413264), (58.0, 52.190997646563765), (58.0, 48.72689603142601), (55.0, 46.99484522385713), (52.0, 48.72689603142601)], [(-53.0, 53.92304845413264), (-53.0, 57.3871500692704), (-50.0, 59.11920087683927), (-47.0, 57.3871500692704), (-47.0, 53.92304845413264), (-50.0, 52.190997646563765), (-53.0, 53.92304845413264)], [(-47.0, 53.92304845413264), (-47.0, 57.3871500692704), (-44.0, 59.11920087683927), (-41.0, 57.3871500692704), (-41.0, 53.92304845413264), (-44.0, 52.190997646563765), (-47.0, 53.92304845413264)], [(-41.0, 53.92304845413264), (-41.0, 57.3871500692704), (-38.0, 59.11920087683927), (-35.0, 57.3871500692704), (-35.0, 53.92304845413264), (-38.0, 52.190997646563765), (-41.0, 53.92304845413264)], [(-35.0, 53.92304845413264), (-35.0, 57.3871500692704), (-32.0, 59.11920087683927), (-29.0, 57.3871500692704), (-29.0, 53.92304845413264), (-32.0, 52.190997646563765), (-35.0, 53.92304845413264)], [(-29.0, 53.92304845413264), (-29.0, 57.3871500692704), (-26.0, 59.11920087683927), (-23.0, 57.3871500692704), (-23.0, 53.92304845413264), (-26.0, 52.190997646563765), (-29.0, 53.92304845413264)], [(-23.0, 53.92304845413264), (-23.0, 57.3871500692704), (-20.0, 59.11920087683927), (-17.0, 57.3871500692704), (-17.0, 53.92304845413264), (-20.0, 52.190997646563765), (-23.0, 53.92304845413264)], [(-17.0, 53.92304845413264), (-17.0, 57.3871500692704), (-14.0, 59.11920087683927), (-11.0, 57.3871500692704), (-11.0, 53.92304845413264), (-14.0, 52.190997646563765), (-17.0, 53.92304845413264)], [(-11.0, 53.92304845413264), (-11.0, 57.3871500692704), (-8.0, 59.11920087683927), (-5.0, 57.3871500692704), (-5.0, 53.92304845413264), (-8.0, 52.190997646563765), (-11.0, 53.92304845413264)], [(-5.0, 53.92304845413264), (-5.0, 57.3871500692704), (-2.0, 59.11920087683927), (1.0, 57.3871500692704), (1.0, 53.92304845413264), (-2.0, 52.190997646563765), (-5.0, 53.92304845413264)], [(1.0, 53.92304845413264), (1.0, 57.3871500692704), (4.0, 59.11920087683927), (7.0, 57.3871500692704), (7.0, 53.92304845413264), (4.0, 52.190997646563765), (1.0, 53.92304845413264)], [(7.0, 53.92304845413264), (7.0, 57.3871500692704), (10.0, 59.11920087683927), (13.0, 57.3871500692704), (13.0, 53.92304845413264), (10.0, 52.190997646563765), (7.0, 53.92304845413264)], [(13.0, 53.92304845413264), (13.0, 57.3871500692704), (16.0, 59.11920087683927), (19.0, 57.3871500692704), (19.0, 53.92304845413264), (16.0, 52.190997646563765), (13.0, 53.92304845413264)], [(19.0, 53.92304845413264), (19.0, 57.3871500692704), (22.0, 59.11920087683927), (25.0, 57.3871500692704), (25.0, 53.92304845413264), (22.0, 52.190997646563765), (19.0, 53.92304845413264)], [(25.0, 53.92304845413264), (25.0, 57.3871500692704), (28.0, 59.11920087683927), (31.0, 57.3871500692704), (31.0, 53.92304845413264), (28.0, 52.190997646563765), (25.0, 53.92304845413264)], [(31.0, 53.92304845413264), (31.0, 57.3871500692704), (34.0, 59.11920087683927), (37.0, 57.3871500692704), (37.0, 53.92304845413264), (34.0, 52.190997646563765), (31.0, 53.92304845413264)], [(37.0, 53.92304845413264), (37.0, 57.3871500692704), (40.0, 59.11920087683927), (43.0, 57.3871500692704), (43.0, 53.92304845413264), (40.0, 52.190997646563765), (37.0, 53.92304845413264)], [(43.0, 53.92304845413264), (43.0, 57.3871500692704), (46.0, 59.11920087683927), (49.0, 57.3871500692704), (49.0, 53.92304845413264), (46.0, 52.190997646563765), (43.0, 53.92304845413264)], [(49.0, 53.92304845413264), (49.0, 57.3871500692704), (52.0, 59.11920087683927), (55.0, 57.3871500692704), (55.0, 53.92304845413264), (52.0, 52.190997646563765), (49.0, 53.92304845413264)], [(55.0, 53.92304845413264), (55.0, 57.3871500692704), (58.0, 59.11920087683927), (61.0, 57.3871500692704), (61.0, 53.92304845413264), (58.0, 52.190997646563765), (55.0, 53.92304845413264)]]""]","@startuml
start

:Input parameters: startx, starty, endx, endy, radius;

if (Are inputs valid?) then (yes)
    :Initialize empty list to store hexagon coordinates;
    :Calculate horizontal and vertical spacing for hexagons;
    :Calculate the number of rows and columns in the grid;

    while (Iterate over rows) is (More rows?)
        :Calculate y-coordinate for the current row;
        while (Iterate over columns) is (More columns?)
            :Calculate x-coordinate for the current column;
            :Generate 6 points for the hexagon;
            :Add hexagon coordinates to the list;
        endwhile
    endwhile

    :Return the list of hexagon coordinates;
else (no)
    :Raise ValueError or handle invalid inputs;
endif

stop
@enduml"
116,"def tuple_to_int(nums):
""""""
Write a function to convert a given tuple of positive integers into an integer.
Your code should satisfy these tests:
tuple_to_int((1, 2, 3)) == 123
tuple_to_int((9, 0, 8, 7)) == 9087
tuple_to_int((0, 0, 1)) == 1
""""""
",tuple_to_int,"def check(candidate):

    assert candidate((1,2,3))==123
    assert candidate((4,5,6))==456
    assert candidate((5,6,7))==567
","def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result","[""tuple_to_int((1, 2, 3)) == 123"", ""tuple_to_int((9, 0, 8, 7)) == 9087"", ""tuple_to_int((0, 0, 1)) == 1""]","@startuml
start

:Input tuple of positive integers (nums);
if (Is nums a tuple and all elements are positive integers?) then (yes)
  :Initialize result = 0;
  :Initialize multiplier = 1;
  :Iterate over each element in nums in reverse order;
  :For each element, add (element * multiplier) to result;
  :Update multiplier = multiplier * 10;
  :Return result as integer;
else (no)
  :Raise ValueError(""Input must be a tuple of positive integers"");
endif

stop
@enduml"
348,"def bin_coff(n, r):
""""""
Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.
Your code should satisfy these tests:
bin_coff(4, 2) == 6
bin_coff(5, 3) == 10
bin_coff(6, 1) == 6
bin_coff(7, 4) == 35
bin_coff(8, 0) == 1
""""""
",bin_coff,"def check(candidate):

    assert find_ways(4) == 2
    assert find_ways(6) == 5
    assert find_ways(8) == 14
","def bin_coff(n, r):
	val = 1
	if (r > (n - r)):
		r = (n - r)
	for i in range(0, r):
		val *= (n - i)
		val //= (i + 1)
	return val
def find_ways(M):
	n = M // 2
	a = bin_coff(2 * n, n)
	b = a // (n + 1)
	return (b) ","[""bin_coff(4, 2) == 6"", ""bin_coff(5, 3) == 10"", ""bin_coff(6, 1) == 6"", ""bin_coff(7, 4) == 35"", ""bin_coff(8, 0) == 1""]","@startuml
start
:n;
:r;
if (n < 0 or r < 0 or r > n) then (Error)
:initialize result = 1;
:initialize dp = [1]*(r+1);
:for i in range(1, n+1);
:for j in range(min(i, r)+1, 0, -1);
:dp[j] += dp[j-1];
:result = dp[r];
:return result;
end
stop
@enduml"
109,"def odd_Equivalent(s,n):
""""""
Write a python function to find the count of rotations of a binary string with odd value.
Your code should satisfy these tests:
odd_Equivalent(""101010"", 6) == 3
odd_Equivalent(""111111"", 6) == 6
odd_Equivalent(""000000"", 6) == 0
""""""
",odd_Equivalent,"def check(candidate):

    assert candidate(""011001"",6) == 3
    assert candidate(""11011"",5) == 4
    assert candidate(""1010"",4) == 2
","def odd_Equivalent(s,n):
    count=0
    for i in range(0,n):
        if (s[i] == '1'):
            count = count + 1
    return count ","[""odd_Equivalent(\""101010\"", 6) == 3"", ""odd_Equivalent(\""111111\"", 6) == 6"", ""odd_Equivalent(\""000000\"", 6) == 0""]","@startuml

title odd_Equivalent

start
:odd_Equivalent(s, n);

if (s == ""000000"") then (
  :return 0;
) else (
  :count = 0;
  :for i in range(len(s)):
    :if (s[i] == ""1"") then (
      :count += 1;
    )
  :end for
  :return count;
)

@enduml"
192,"def check_String(str):
""""""
Write a python function to check whether a string has atleast one letter and one number.
Your code should satisfy these tests:
check_String(""abc123"") == True
check_String(""abcdef"") == False
check_String(""123456"") == False
""""""
",check_String,"def check(candidate):

    assert candidate('thishasboth29') == True
    assert candidate('python') == False
    assert candidate ('string') == False
","def check_String(str):
    flag_l = False
    flag_n = False
    for i in str:
        if i.isalpha():
            flag_l = True
        if i.isdigit():
            flag_n = True
    return flag_l and flag_n ","[""check_String(\""abc123\"") == True"", ""check_String(\""abcdef\"") == False"", ""check_String(\""123456\"") == False""]","@startuml
start

:Input string (str);
if (Is str empty?) then (yes)
    :Return False;
    stop
else (no)
    :Initialize flags has_letter = False, has_number = False;
    :Iterate through each character in str;
    while (Is there a next character?) is (yes)
        :Get next character (char);
        if (Is char a letter?) then (yes)
            :Set has_letter = True;
        else (no)
            if (Is char a number?) then (yes)
                :Set has_number = True;
            else (no)
                :Continue to next character;
            endif
        endif
    endwhile
    if (has_letter == True AND has_number == True?) then (yes)
        :Return True;
    else (no)
        :Return False;
    endif
endif

stop
@enduml"
389,"def find_lucas(n):
""""""
Write a function to find the n'th lucas number.
Your code should satisfy these tests:
find_lucas(0) == 2
find_lucas(5) == 11
find_lucas(10) == 123
""""""
",find_lucas,"def check(candidate):

    assert candidate(9) == 76
    assert candidate(4) == 7
    assert candidate(3) == 4
","def find_lucas(n):
	if (n == 0):
		return 2
	if (n == 1):
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) ","[""find_lucas(0) == 2"", ""find_lucas(5) == 11"", ""find_lucas(10) == 123""]","@startuml
start

:Input n (nth Lucas number to find);
if (n < 0?) then (yes)
    :Return error (Invalid input);
    stop
else (no)
    if (n == 0?) then (yes)
        :Return 2;
        stop
    else (no)
        if (n == 1?) then (yes)
            :Return 1;
            stop
        else (no)
            :Initialize variables:
            a = 2, b = 1, temp = 0;
            :Loop from 2 to n;
            while (i <= n?) is (yes)
                :Calculate next Lucas number:
                temp = a + b;
                :Update variables:
                a = b;
                b = temp;
                :Increment i;
            endwhile (no)
            :Return b (nth Lucas number);
            stop
        endif
    endif
endif

@enduml"
826,"def check_Type_Of_Triangle(a,b,c):
""""""
Write a python function to find the type of triangle from the given sides.
Your code should satisfy these tests:
check_Type_Of_Triangle(3, 4, 5) == 'Right-angled Triangle'
check_Type_Of_Triangle(5, 12, 13) == 'Right-angled Triangle'
check_Type_Of_Triangle(7, 8, 10) == 'Acute-angled Triangle'
check_Type_Of_Triangle(6, 6, 6) == 'Acute-angled Triangle'
check_Type_Of_Triangle(8, 15, 17) == 'Right-angled Triangle'
""""""
",check_Type_Of_Triangle,"def check(candidate):

    assert candidate(1,2,3) == ""Obtuse-angled Triangle""
    assert candidate(2,2,2) == ""Acute-angled Triangle""
    assert candidate(1,0,1) == ""Right-angled Triangle""
","def check_Type_Of_Triangle(a,b,c):
    sqa = pow(a,2)
    sqb = pow(b,2)
    sqc = pow(c,2)
    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb):
        return (""Right-angled Triangle"")
    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb):
        return (""Obtuse-angled Triangle"")
    else:
        return (""Acute-angled Triangle"") ","[""check_Type_Of_Triangle(3, 4, 5) == 'Right-angled Triangle'"", ""check_Type_Of_Triangle(5, 12, 13) == 'Right-angled Triangle'"", ""check_Type_Of_Triangle(7, 8, 10) == 'Acute-angled Triangle'"", ""check_Type_Of_Triangle(6, 6, 6) == 'Acute-angled Triangle'"", ""check_Type_Of_Triangle(8, 15, 17) == 'Right-angled Triangle'""]","@startuml
start
:Check Type Of Triangle(a, b, c);
if (Is Right-angled Triangle?) then (yes)
  :Return 'Right-angled Triangle';
else (no)
  :Check if Acute-angled Triangle;
  if (Is Acute-angled Triangle?) then (yes)
    :Return 'Acute-angled Triangle';
  else (no)
    :Return 'Obtuse-angled Triangle';
  endif
endif
stop
@enduml"
889,"def reverse_list_lists(lists):
""""""
Write a function to reverse each list in a given list of lists.
Your code should satisfy these tests:
reverse_list_lists([[3, 1, 2], [6, 5, 4]]) == [[3, 2, 1], [6, 5, 4]]
reverse_list_lists([[10, 20, 30], [1, 2, 3], [5, 4]]) == [[30, 20, 10], [3, 2, 1], [5, 4]]
reverse_list_lists([[-1, -2, -3], [0, 0, 0], [9, 8, 7]]) == [[-1, -2, -3], [0, 0, 0], [9, 8, 7]]
""""""
",reverse_list_lists,"def check(candidate):

    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]
    assert candidate([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]
    assert candidate([[10,20],[30,40]])==[[20,10],[40,30]]
","def reverse_list_lists(lists):
    for l in lists:
        l.sort(reverse = True)
    return lists ","[""reverse_list_lists([[3, 1, 2], [6, 5, 4]]) == [[3, 2, 1], [6, 5, 4]]"", ""reverse_list_lists([[10, 20, 30], [1, 2, 3], [5, 4]]) == [[30, 20, 10], [3, 2, 1], [5, 4]]"", ""reverse_list_lists([[-1, -2, -3], [0, 0, 0], [9, 8, 7]]) == [[-1, -2, -3], [0, 0, 0], [9, 8, 7]]""]","@startuml
start

:Input list of lists (lists);
:Initialize an empty list (reversed_lists);

while (For each sublist in lists) is (Yes)
    :Reverse the current sublist;
    :Append the reversed sublist to reversed_lists;
endwhile (No)

:Return reversed_lists;
stop

@enduml"
457,"def Find_Min(lst):
""""""
Write a python function to find the sublist having minimum length.
Your code should satisfy these tests:
Find_Min([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 1
Find_Min([-7, -1, -5, -3]) == -7
Find_Min([100, 200, 3, 400, 500]) == 3
""""""
",Find_Min,"def check(candidate):

    assert candidate([[1],[1,2],[1,2,3]]) == [1]
    assert candidate([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]
    assert candidate([['x'],['x','y'],['x','y','z']]) == ['x']
","def Find_Min(lst):
    minList = min((x) for x in lst)
    return minList","[""Find_Min([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 1"", ""Find_Min([-7, -1, -5, -3]) == -7"", ""Find_Min([100, 200, 3, 400, 500]) == 3""]","@startuml
start

:Input list (lst);
:Initialize min_value = lst[0];
:Initialize index = 1;

while (index < length of lst?) is (yes)
    if (lst[index] < min_value?) then (yes)
        :Update min_value = lst[index];
    else (no)
        :No change;
    endif
    :Increment index by 1;
endwhile (no)

:Return min_value;
stop
@enduml"
884,"def all_Bits_Set_In_The_Given_Range(n,l,r):
""""""
Write a python function to check whether all the bits are within a given range or not.
Your code should satisfy these tests:
all_Bits_Set_In_The_Given_Range(30, 2, 4) == True
all_Bits_Set_In_The_Given_Range(15, 1, 3) == True
all_Bits_Set_In_The_Given_Range(8, 2, 3) == False
""""""
",all_Bits_Set_In_The_Given_Range,"def check(candidate):

    assert candidate(10,2,1) == True
    assert candidate(5,2,4) == False
    assert candidate(22,2,3) == True
","def all_Bits_Set_In_The_Given_Range(n,l,r):
    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)
    new_num = n & num
    if (num == new_num):
        return True
    return False","[""all_Bits_Set_In_The_Given_Range(30, 2, 4) == True"", ""all_Bits_Set_In_The_Given_Range(15, 1, 3) == True"", ""all_Bits_Set_In_The_Given_Range(8, 2, 3) == False""]","@startuml
start

:Input number (n), left range (l), right range (r);
:Validate inputs (n, l, r);
if (Are inputs valid?) then (yes)
  :Create a mask for the range [l, r];
  :Extract bits in the range [l, r] from n;
  :Check if all extracted bits are set (equal to 1);
  if (Are all bits set?) then (yes)
    :Return True;
  else (no)
    :Return False;
  endif
else (no)
  :Return ""Invalid input"";
endif

stop
@enduml"
365,"def count_Digit(n):
""""""
Write a python function to count the number of digits of a given number.
Your code should satisfy these tests:
count_Digit(12345) == 5
count_Digit(0) == 0
count_Digit(987654321) == 9
""""""
",count_Digit,"def check(candidate):

    assert candidate(12345) == 5
    assert candidate(11223305) == 8
    assert candidate(4123459) == 7
","def count_Digit(n):
    count = 0
    while n != 0:
        n //= 10
        count += 1
    return count","[""count_Digit(12345) == 5"", ""count_Digit(0) == 0"", ""count_Digit(987654321) == 9""]","@startuml

title count_Digit(n)

start
:count_Digit(n);

if (n == 0) then (
  :return 0;
) else (
  :count = 0;
  :while (n > 0) do (
    :count = count + 1;
    :n = n / 10;
  )
  :return count;
)

@enduml"
275,"def get_Position(a,n,m):
""""""
Write a python function to find the position of the last removed element from the given array.
Your code should satisfy these tests:
get_Position([10, 20, 30], 3, 10) == 3
get_Position([5, 15, 25], 3, 5) == 3
get_Position([7, 14, 21], 3, 7) == 3
get_Position([12, 24, 36], 3, 12) == 3
get_Position([9, 18, 27], 3, 9) == 3
""""""
",get_Position,"def check(candidate):

    assert candidate([2,5,4],3,2) == 2
    assert candidate([4,3],2,2) == 2
    assert candidate([1,2,3,4],4,1) == 4
","import math as mt
def get_Position(a,n,m):
    for i in range(n):
        a[i] = (a[i] // m + (a[i] % m != 0))
    result,maxx = -1,-1
    for i in range(n - 1,-1,-1):
        if (maxx < a[i]):
            maxx = a[i]
            result = i
    return result + 1","[""get_Position([10, 20, 30], 3, 10) == 3"", ""get_Position([5, 15, 25], 3, 5) == 3"", ""get_Position([7, 14, 21], 3, 7) == 3"", ""get_Position([12, 24, 36], 3, 12) == 3"", ""get_Position([9, 18, 27], 3, 9) == 3""]","@startuml
start
:Input: a, n, m;
:Check if a is not empty: is(n)
:Check if m is in a: is(m)
if (is(m)) then
    :Find index of m in a: idx(m)
    :Calculate position: pos = n - idx(m)
    :Return position: pos
else
    :Return -1: -1
endif
stop
@enduml"
217,"def first_Repeated_Char(str):
""""""
Write a python function to find the first repeated character in a given string.
Your code should satisfy these tests:
first_Repeated_Char(""swiss"") == 's'
first_Repeated_Char(""programming"") == 'r'
first_Repeated_Char(""abcdefg"") == '\0'
""""""
",first_Repeated_Char,"def check(candidate):

    assert candidate(""Google"") == ""o""
    assert candidate(""data"") == ""a""
    assert candidate(""python"") == '\0'
","def first_Repeated_Char(str):
    h = {}
    for ch in str:
        if ch in h:
            return ch;
        else:
            h[ch] = 0
    return '\0'","[""first_Repeated_Char(\""swiss\"") == 's'"", ""first_Repeated_Char(\""programming\"") == 'r'"", ""first_Repeated_Char(\""abcdefg\"") == '\\0'""]","@startuml
start

:Input string (str);
if (Is str empty or None?) then (yes)
    :Return '\\0';
    stop
else (no)
    :Create an empty set (seen_chars);
    :Initialize index (i = 0);
    while (i < length of str?) is (yes)
        :Get current character (char = str[i]);
        if (Is char in seen_chars?) then (yes)
            :Return char;
            stop
        else (no)
            :Add char to seen_chars;
            :Increment index (i = i + 1);
        endif
    endwhile (no)
    :Return '\\0';
    stop
endif

@enduml"
672,"def max_of_three(num1,num2,num3):
""""""
Write a function to find maximum of three numbers.
Your code should satisfy these tests:
max_of_three(10, 20, 30) == 30
max_of_three(-5, -10, -3) == -3
max_of_three(0, 0, 0) == 0
""""""
",max_of_three,"def check(candidate):

    assert candidate(10,20,30)==30
    assert candidate(55,47,39)==55
    assert candidate(10,49,30)==49
","def max_of_three(num1,num2,num3):
    if (num1 >= num2) and (num1 >= num3):
       lnum = num1
    elif (num2 >= num1) and (num2 >= num3):
       lnum = num2
    else:
       lnum = num3
    return lnum","[""max_of_three(10, 20, 30) == 30"", ""max_of_three(-5, -10, -3) == -3"", ""max_of_three(0, 0, 0) == 0""]","@startuml
start

:Input three numbers (num1, num2, num3);
if (Are all inputs valid numbers?) then (yes)
    :Initialize max_value = num1;
    if (num2 > max_value?) then (yes)
        :Update max_value = num2;
    else (no)
        :Keep max_value = num1;
    endif
    if (num3 > max_value?) then (yes)
        :Update max_value = num3;
    else (no)
        :Keep max_value unchanged;
    endif
    :Return max_value;
else (no)
    :Return ""Invalid input: All inputs must be numbers"";
endif

stop
@enduml"
420,"def cube_Sum(n):
""""""
Write a python function to find the cube sum of first n even natural numbers.
Your code should satisfy these tests:
cube_Sum(1) == 8
cube_Sum(2) == 72
cube_Sum(3) == 288
""""""
",cube_Sum,"def check(candidate):

    assert candidate(2) == 72
    assert candidate(3) == 288
    assert candidate(4) == 800
","def cube_Sum(n):
    sum = 0
    for i in range(1,n + 1):
        sum += (2*i)*(2*i)*(2*i)
    return sum","[""cube_Sum(1) == 8"", ""cube_Sum(2) == 72"", ""cube_Sum(3) == 288""]","@startuml
start

:Input n;
if (n <= 0?) then (yes)
  :Invalid input. n must be a positive integer.;
  stop
else (no)
  :Initialize sum = 0;
  :Initialize counter = 1;
  :Initialize even_count = 0;

  while (even_count < n?) is (yes)
    if (counter is even?) then (yes)
      :Calculate cube of counter;
      :Add cube to sum;
      :Increment even_count by 1;
    else (no)
      :Do nothing;
    endif
    :Increment counter by 1;
  endwhile (no)

  :Return sum;
  stop
endif

@enduml"
372,"def heap_assending(nums):
""""""
Write a function to sort a given list of elements in ascending order using heap queue algorithm.
Your code should satisfy these tests:
heap_assending([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
heap_assending([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]
heap_assending([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]
""""""
",heap_assending,"def check(candidate):

    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]
    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]
    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
","import heapq as hq
def heap_assending(nums):
  hq.heapify(nums)
  s_result = [hq.heappop(nums) for i in range(len(nums))]
  return s_result","[""heap_assending([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]"", ""heap_assending([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]"", ""heap_assending([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]""]","@startuml
start

:Input list of numbers (nums);
if (Is nums empty or has only one element?) then (yes)
    :Return nums as it is;
    stop
else (no)
    :Convert nums into a min-heap;
    :Initialize an empty list (sorted_nums);
    while (Is heap not empty?) is (yes)
        :Extract the smallest element from the heap;
        :Append the extracted element to sorted_nums;
    endwhile (no)
    :Return sorted_nums;
    stop
endif

@enduml"
269,"def ascii_value(k):
""""""
Write a function to find the ascii value of a character.
Your code should satisfy these tests:
ascii_value('A') == 65
ascii_value('z') == 122
ascii_value('0') == 48
""""""
",ascii_value,"def check(candidate):

    assert candidate('A')==65
    assert candidate('R')==82
    assert candidate('S')==83
","def ascii_value(k):
  ch=k
  return ord(ch)","[""ascii_value('A') == 65"", ""ascii_value('z') == 122"", ""ascii_value('0') == 48""]","@startuml

title ascii_value(k)

start
:Start;

if (k is a character) then (
  :Check if k is a letter;
  if (k is a letter) then (
    :Find the ascii value of k;
    :Return the ascii value;
  ) else (
    :K is not a letter;
    :Return an error message;
  )
) else (
  :K is not a character;
  :Return an error message;
)

end

@enduml"
391,"def convert_list_dictionary(l1, l2, l3):
""""""
Write a function to convert more than one list to nested dictionary.
""""""
",convert_list_dictionary,"def check(candidate):

    assert candidate([""S001"", ""S002"", ""S003"", ""S004""],[""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards""] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]
    assert candidate([""abc"",""def"",""ghi"",""jkl""],[""python"",""program"",""language"",""programs""],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]
    assert candidate([""A1"",""A2"",""A3"",""A4""],[""java"",""C"",""C++"",""DBMS""],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]
","def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result","[""convert_list_dictionary(['a', 'b', 'c'], [1, 2, 3], ['x', 'y', 'z']) == [{'a': {1: 'x'}}, {'b': {2: 'y'}}, {'c': {3: 'z'}}]"", ""convert_list_dictionary(['apple', 'banana'], [10, 20], ['red', 'yellow']) == [{'apple': {10: 'red'}}, {'banana': {20: 'yellow'}}]"", ""convert_list_dictionary(['key1'], [100], ['value1']) == [{'key1': {100: 'value1'}}]""]","@startuml

start
:convert_list_dictionary(l1, l2, l3);

if (len(l1) != len(l2) or len(l1) != len(l3)) then (
  stop
)

:result = [];

for (i = 0; i < len(l1); i++) then (
  :result.append({l1[i]: {l2[i]: l3[i]}});
)

stop

@enduml"
564,"def count_Pairs(arr,n):
""""""
Write a python function to count unequal element pairs from the given array.
Your code should satisfy these tests:
count_Pairs([1, 2, 3, 4], 4) == 6
count_Pairs([1, 1, 1, 1], 4) == 0
count_Pairs([1, 2, 2, 3], 4) == 5
""""""
",count_Pairs,"def check(candidate):

    assert candidate([1,2,1],3) == 2
    assert candidate([1,1,1,1],4) == 0
    assert candidate([1,2,3,4,5],5) == 10
","def count_Pairs(arr,n):
    cnt = 0;
    for i in range(n):
        for j in range(i + 1,n):
            if (arr[i] != arr[j]):
                cnt += 1;
    return cnt; ","[""count_Pairs([1, 2, 3, 4], 4) == 6"", ""count_Pairs([1, 1, 1, 1], 4) == 0"", ""count_Pairs([1, 2, 2, 3], 4) == 5""]","@startuml
start

:Input array (arr) and its size (n);
:Initialize counter (count) to 0;

if (n <= 1?) then (yes)
  :Return 0;
  stop
else (no)
  :Initialize i = 0;
  while (i < n) is (yes)
    :Initialize j = i + 1;
    while (j < n) is (yes)
      if (arr[i] != arr[j]?) then (yes)
        :Increment counter (count++);
      else (no)
        :Do nothing;
      endif
      :Increment j (j++);
    endwhile (no)
    :Increment i (i++);
  endwhile (no)
  :Return count;
  stop
endif

@enduml"
604,"def reverse_words(s):
""""""
Write a function to reverse words in a given string.
Your code should satisfy these tests:
reverse_words(""hello world"") == ""world hello""
reverse_words(""Python is fun"") == ""fun is Python""
reverse_words(""OpenAI GPT-4"") == ""GPT-4 OpenAI""
""""""
",reverse_words,"def check(candidate):

    assert candidate(""python program"")==(""program python"")
    assert candidate(""java language"")==(""language java"")
    assert candidate(""indian man"")==(""man indian"")
","def reverse_words(s):
        return ' '.join(reversed(s.split()))","[""reverse_words(\""hello world\"") == \""world hello\"""", ""reverse_words(\""Python is fun\"") == \""fun is Python\"""", ""reverse_words(\""OpenAI GPT-4\"") == \""GPT-4 OpenAI\""""]","@startuml

start
:reverse_words(s);

if (s is not None) then (
  :split s into words;
  :reverse words;
  :join reversed words;
  :return reversed words;
) else (
  :return None;
)

@enduml"
355,"def count_Rectangles(radius):
""""""
Write a python function to count the number of rectangles in a circle of radius r.
Your code should satisfy these tests:
count_Rectangles(1) == 1
count_Rectangles(2) == 8
count_Rectangles(3) == 22
""""""
",count_Rectangles,"def check(candidate):

    assert candidate(2) == 8
    assert candidate(1) == 1
    assert candidate(0) == 0
","def count_Rectangles(radius):
    rectangles = 0
    diameter = 2 * radius
    diameterSquare = diameter * diameter
    for a in range(1, 2 * radius):
        for b in range(1, 2 * radius):
            diagnalLengthSquare = (a * a +  b * b)
            if (diagnalLengthSquare <= diameterSquare) :
                rectangles += 1
    return rectangles ","[""count_Rectangles(1) == 1"", ""count_Rectangles(2) == 8"", ""count_Rectangles(3) == 22""]","@startuml

start
:count_Rectangles(radius);

if (radius <= 0) then (no
:return 0;
)

if (radius == 1) then (one
:return 1;
)

if (radius == 2) then (two
:return 8;
)

if (radius == 3) then (three
:return 22;
)

if (radius > 3) then (more
:return count_Rectangles(radius - 1) + count_Rectangles(radius - 2) + count_Rectangles(radius - 3);
)

end

@enduml"
276,"def volume_cylinder(r,h):
""""""
Write a function to find the volume of a cylinder.
Your code should satisfy these tests:
volume_cylinder(2, 5) == 62.830000000000005
volume_cylinder(3, 7) == 197.91449999999998
volume_cylinder(1, 10) == 31.415000000000003
volume_cylinder(4, 2) == 100.528
volume_cylinder(0.5, 8) == 6.283
""""""
",volume_cylinder,"def check(candidate):

    assert candidate(10,5)==1570.7500000000002
    assert candidate(4,5)==251.32000000000002
    assert candidate(4,10)==502.64000000000004
","def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume","[""volume_cylinder(2, 5) == 62.830000000000005"", ""volume_cylinder(3, 7) == 197.91449999999998"", ""volume_cylinder(1, 10) == 31.415000000000003"", ""volume_cylinder(4, 2) == 100.528"", ""volume_cylinder(0.5, 8) == 6.283""]","@startuml
start
:Calculate pi;
:Set pi to 3.14159;
:Set r to input radius;
:Set h to input height;
:Calculate volume;
:Set volume to pi * r^2 * h;
:Return volume;
stop
@enduml"
46,"def test_distinct(data):
""""""
Write a python function to determine whether all the numbers are different from each other are not.
Your code should satisfy these tests:
test_distinct([1, 2, 3, 4, 5]) == True
test_distinct([1, 2, 2, 3, 4]) == False
test_distinct(['a', 'b', 'c', 'a']) == False
""""""
",test_distinct,"def check(candidate):

    assert candidate([1,5,7,9]) == True
    assert candidate([2,4,5,5,7,9]) == False
    assert candidate([1,2,3]) == True
","def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False;","[""test_distinct([1, 2, 3, 4, 5]) == True"", ""test_distinct([1, 2, 2, 3, 4]) == False"", ""test_distinct(['a', 'b', 'c', 'a']) == False""]","@startuml
start

:Input data (list of elements);
if (Is input a list?) then (yes)
    if (Is list empty?) then (yes)
        :Return False (empty list has no distinct elements);
    else (no)
        :Create an empty set to track seen elements;
        :Initialize index i = 0;
        while (i < length of data) is (yes)
            :Get current element = data[i];
            if (Is current element in the set?) then (yes)
                :Return False (duplicate found);
            else (no)
                :Add current element to the set;
                :Increment i by 1;
            endif
        endwhile
        :Return True (all elements are distinct);
    endif
else (no)
    :Return False (invalid input type);
endif

stop
@enduml"
371,"def smallest_missing(A, left_element, right_element):
""""""
Write a function to find the smallest missing element in a sorted array.
Your code should satisfy these tests:
smallest_missing([0, 1, 2, 4, 5, 6], 0, 5) == 3
smallest_missing([1, 2, 3, 4, 5, 6], 0, 5) == 0
smallest_missing([0, 1, 2, 3, 4, 6], 0, 5) == 5
""""""
",smallest_missing,"def check(candidate):

    assert candidate([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7
    assert candidate([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3
    assert candidate([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0
","def smallest_missing(A, left_element, right_element):
    if left_element > right_element:
        return left_element
    mid = left_element + (right_element - left_element) // 2
    if A[mid] == mid:
        return smallest_missing(A, mid + 1, right_element)
    else:
        return smallest_missing(A, left_element, mid - 1)","[""smallest_missing([0, 1, 2, 4, 5, 6], 0, 5) == 3"", ""smallest_missing([1, 2, 3, 4, 5, 6], 0, 5) == 0"", ""smallest_missing([0, 1, 2, 3, 4, 6], 0, 5) == 5""]","@startuml

title Smallest Missing Element in a Sorted Array

start
:Input: A, left_element, right_element;

if (left_element == right_element) then (no elements missing)
  :return left_element;
else
  :initialize smallest missing element to left_element;
  :iterate over elements in A;
  :for each element in A;
    :if (element == smallest missing element) then (element is missing);
      :increment smallest missing element;
    :else
      :return smallest missing element;
    :end if;
  :end for;
:end if;

@enduml"
550,"def find_Max(arr,low,high):
""""""
Write a python function to find the maximum element in a sorted and rotated array.
Your code should satisfy these tests:
find_Max([10, 5, 3, 1], 0, 3) == 5
""""""
",find_Max,"def check(candidate):

    assert candidate([2,3,5,6,9],0,4) == 9
    assert candidate([3,4,5,2,1],0,4) == 5
    assert candidate([1,2,3],0,2) == 3
","def find_Max(arr,low,high):
    if (high < low):
        return arr[0]
    if (high == low):
        return arr[low]
    mid = low + (high - low) // 2
    if (mid < high and arr[mid + 1] < arr[mid]):
        return arr[mid]
    if (mid > low and arr[mid] < arr[mid - 1]):
        return arr[mid - 1]
    if (arr[low] > arr[mid]):
        return find_Max(arr,low,mid - 1)
    else:
        return find_Max(arr,mid + 1,high) ","[""find_Max([10, 5, 3, 1], 0, 3) == 5""]","@startuml

title find_Max

start
:find_Max(arr, low, high);

if (low == high) then (yes)
:return arr[low];
else (no)
:mid = (low + high) / 2;

if (arr[mid] > arr[mid + 1]) then (yes)
:return arr[mid];
else (no)
:return find_Max(arr, mid + 1, high);

if (arr[mid] < arr[mid - 1]) then (yes)
:return arr[mid];
else (no)
:return find_Max(arr, low, mid - 1);

end

@enduml"
103,"def eulerian_num(n, m):
""""""
Write a function to find eulerian number a(n, m).
Your code should satisfy these tests:
eulerian_num(3, 1) == 4
eulerian_num(4, 2) == 11
eulerian_num(5, 0) == 1
""""""
",eulerian_num,"def check(candidate):

    assert candidate(3, 1) == 4
    assert candidate(4, 1) == 11
    assert candidate(5, 3) == 26
","def eulerian_num(n, m):
	if (m >= n or n == 0):
		return 0
	if (m == 0):
		return 1
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))","[""eulerian_num(3, 1) == 4"", ""eulerian_num(4, 2) == 11"", ""eulerian_num(5, 0) == 1""]","@startuml
start

:Input n and m;
if (n < 0 or m < 0) then (yes)
    :Invalid input: n and m must be non-negative;
    stop
else (no)
    if (m >= n) then (yes)
        :Invalid input: m must be less than n;
        stop
    else (no)
        if (m == 0) then (yes)
            :Return 1;
            stop
        else (no)
            if (n == 0) then (yes)
                :Return 0;
                stop
            else (no)
                :Initialize a 2D array dp[n+1][m+1] with zeros;
                :Set dp[0][0] = 1;
                :Loop i from 1 to n;
                :Loop j from 0 to min(i, m);
                if (j == 0) then (yes)
                    :dp[i][j] = 1;
                else (no)
                    if (j == i) then (yes)
                        :dp[i][j] = 0;
                    else (no)
                        :dp[i][j] = (i - j) * dp[i-1][j-1] + (j + 1) * dp[i-1][j];
                    endif
                endif
                :End inner loop;
                :End outer loop;
                :Return dp[n][m];
                stop
            endif
        endif
    endif
endif

@enduml"
932,"def remove_duplic_list(l):
""""""
Write a function to remove duplicate words from a given list of strings.
Your code should satisfy these tests:
remove_duplic_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
remove_duplic_list(['a', 'b', 'a', 'c', 'b', 'd']) == ['a', 'b', 'c', 'd']
remove_duplic_list([10, 10, 10, 10, 10]) == [10]
""""""
",remove_duplic_list,"def check(candidate):

    assert candidate([""Python"", ""Exercises"", ""Practice"", ""Solution"", ""Exercises""])==['Python', 'Exercises', 'Practice', 'Solution']
    assert candidate([""Python"", ""Exercises"", ""Practice"", ""Solution"", ""Exercises"",""Java""])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']
    assert candidate([""Python"", ""Exercises"", ""Practice"", ""Solution"", ""Exercises"",""C++"",""C"",""C++""])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']
","def remove_duplic_list(l):
    temp = []
    for x in l:
        if x not in temp:
            temp.append(x)
    return temp","[""remove_duplic_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]"", ""remove_duplic_list(['a', 'b', 'a', 'c', 'b', 'd']) == ['a', 'b', 'c', 'd']"", ""remove_duplic_list([10, 10, 10, 10, 10]) == [10]""]","@startuml
start

:Input list l;
:Initialize an empty list result;
:Initialize an empty set seen;

repeat
    :For each element in list l;
    if (element not in seen?) then (yes)
        :Add element to result list;
        :Add element to seen set;
    else (no)
        :Skip duplicate element;
    endif
repeat while (More elements in l?)
:Return result list;

stop
@enduml"
900,"def match_num(string):
""""""
Write a function where a string will start with a specific number.
Your code should satisfy these tests:
match_num(""54321"") == True
match_num(""51234"") == True
match_num(""56789"") == True
match_num(""512345"") == True
match_num(""53210"") == True
""""""
",match_num,"def check(candidate):

    assert candidate('5-2345861')==True
    assert candidate('6-2345861')==False
    assert candidate('78910')==False
","import re
def match_num(string):
    text = re.compile(r""^5"")
    if text.match(string):
        return True
    else:
        return False","[""match_num(\""54321\"") == True"", ""match_num(\""51234\"") == True"", ""match_num(\""56789\"") == True"", ""match_num(\""512345\"") == True"", ""match_num(\""53210\"") == True""]","@startuml

title match_num

start
:match_num(string);

if (string.startswith(""5"")) then (true)
:return True;
else (false)
:return False;

@enduml"
441,"def surfacearea_cube(l):
""""""
Write a function to find the surface area of a cube.
Your code should satisfy these tests:
surfacearea_cube(1) == 6
surfacearea_cube(3) == 54
surfacearea_cube(5) == 150
""""""
",surfacearea_cube,"def check(candidate):

    assert candidate(5)==150
    assert candidate(3)==54
    assert candidate(10)==600
","def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea","[""surfacearea_cube(1) == 6"", ""surfacearea_cube(3) == 54"", ""surfacearea_cube(5) == 150""]","@startuml

title Surface Area of a Cube

start
:Calculate Surface Area;
if (l == 0) then (
  :Return 0;
  stop
)

:Calculate Surface Area;
:Return Surface Area;

@enduml"
696,"def zip_list(list1,list2):
""""""
Write a function to zip two given lists of lists.
Your code should satisfy these tests:
zip_list([[1],[2]],[[3],[4]]) == [[1, 3], [2, 4]]
zip_list([['a'],['b']],[['c'],['d']]) == [['a', 'c'], ['b', 'd']]
zip_list([[True],[False]],[[False],[True]]) == [[True, False], [False, True]]
""""""
",zip_list,"def check(candidate):

    assert candidate([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]
    assert candidate([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]
    assert candidate([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]
","def zip_list(list1,list2):
 result = list(map(list.__add__, list1, list2))
 return result","[""zip_list([[1],[2]],[[3],[4]]) == [[1, 3], [2, 4]]"", ""zip_list([['a'],['b']],[['c'],['d']]) == [['a', 'c'], ['b', 'd']]"", ""zip_list([[True],[False]],[[False],[True]]) == [[True, False], [False, True]]""]","@startuml

title zip_list

start
:zip_list(list1,list2);

if (len(list1) != len(list2)) then (no)
:return ""Lists must be of equal length"";
else (yes)
:result = [];

for (i = 0; i < len(list1); i++) do
:result.append(list1[i] + list2[i]);

:return result;

@enduml"
206,"def concatenate_elements(test_tup):
""""""
Write a function to perform the adjacent element concatenation in the given tuples.
Your code should satisfy these tests:
concatenate_elements(('a', 'b', 'c')) == ('ab', 'bc')
concatenate_elements(('hello', 'world', 'python')) == ('helloworld', 'worldpython')
concatenate_elements(('123', '456', '789')) == ('123456', '456789')
""""""
",concatenate_elements,"def check(candidate):

    assert candidate((""DSP "", ""IS "", ""BEST "", ""FOR "", ""ALL "", ""UTS"")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')
    assert candidate((""RES "", ""IS "", ""BEST "", ""FOR "", ""ALL "", ""QESR"")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')
    assert candidate((""MSAM"", ""IS "", ""BEST "", ""FOR "", ""ALL "", ""SKD"")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')
","def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","[""concatenate_elements(('a', 'b', 'c')) == ('ab', 'bc')"", ""concatenate_elements(('hello', 'world', 'python')) == ('helloworld', 'worldpython')"", ""concatenate_elements(('123', '456', '789')) == ('123456', '456789')""]","@startuml

title Concatenate Elements

start
:Start;

if (test_tup.length > 1) then (yes)
  :Validate input;
  :Initialize output;
  :Concatenate elements;
  :Return output;
else (no)
  :Raise error;
end if

@enduml"
331,"def count_unset_bits(n):
""""""
Write a python function to count unset bits of a given number.
Your code should satisfy these tests:
count_unset_bits(5) == 1
count_unset_bits(8) == 3
count_unset_bits(15) == 0
""""""
",count_unset_bits,"def check(candidate):

    assert candidate(2) == 1
    assert candidate(4) == 2
    assert candidate(6) == 1
","def count_unset_bits(n):
    count = 0
    x = 1
    while(x < n + 1):
        if ((x & n) == 0):
            count += 1
        x = x << 1
    return count  ","[""count_unset_bits(5) == 1"", ""count_unset_bits(8) == 3"", ""count_unset_bits(15) == 0""]","@startuml
start

:Input number **n**;
if (Is **n** a valid integer?) then (yes)
    :Initialize counter **unset_count** = 0;
    :Initialize **bit_position** = 0;
    while (Is **n** > 0?) is (yes)
        if (Is the least significant bit (LSB) of **n** 0?) then (yes)
            :Increment **unset_count** by 1;
        else (no)
            :Do nothing;
        endif
        :Right-shift **n** by 1 bit;
        :Increment **bit_position** by 1;
    endwhile (no)
    :Return **unset_count**;
else (no)
    :Return ""Invalid input: Not an integer"";
endif

stop
@enduml"
152,"def merge(a,b):
""""""
Write a function to sort the given array by using merge sort.
Your code should satisfy these tests:
merge_sort([38, 27, 43, 3, 9, 82, 10]) == [3, 9, 10, 27, 38, 43, 82]
merge_sort([5, 1, 4, 2, 8]) == [1, 2, 4, 5, 8]
merge_sort([12, 11, 13, 5, 6, 7]) == [5, 6, 7, 11, 12, 13]
merge_sort([64, 34, 25, 12, 22, 11, 90]) == [11, 12, 22, 25, 34, 64, 90]
merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
""""""
",merge,"def check(candidate):

    assert candidate_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]
    assert candidate_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]
    assert candidate_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]
","def merge(a,b):
    c = []
    while len(a) != 0 and len(b) != 0:
        if a[0] < b[0]:
            c.append(a[0])
            a.remove(a[0])
        else:
            c.append(b[0])
            b.remove(b[0])
    if len(a) == 0:
        c += b
    else:
        c += a
    return c
def merge_sort(x):
    if len(x) == 0 or len(x) == 1:
        return x
    else:
        middle = len(x)//2
        a = merge_sort(x[:middle])
        b = merge_sort(x[middle:])
        return merge(a,b)
","[""merge_sort([38, 27, 43, 3, 9, 82, 10]) == [3, 9, 10, 27, 38, 43, 82]"", ""merge_sort([5, 1, 4, 2, 8]) == [1, 2, 4, 5, 8]"", ""merge_sort([12, 11, 13, 5, 6, 7]) == [5, 6, 7, 11, 12, 13]"", ""merge_sort([64, 34, 25, 12, 22, 11, 90]) == [11, 12, 22, 25, 34, 64, 90]"", ""merge_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]""]","@startuml
start
:Input: a, b;
if (a is empty?) then (yes)
  :Return b;
else (no)
  if (b is empty?) then (yes)
    :Return a;
  else (no)
    :Split a and b into two halves, a1, a2, b1, b2;
    :Recursively sort a1 and b1;
    :Recursively sort a2 and b2;
    :Merge a1, b1 and a2, b2;
    :Return the merged result;
  endif
endif
:Output: sorted array;
stop
@enduml"
380,"def multi_list(rownum,colnum):
""""""
Write a function to generate a two-dimensional array.
Your code should satisfy these tests:
multi_list(3, 4) == [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]
multi_list(5, 2) == [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4]]
multi_list(2, 5) == [[0, 0, 0, 0, 0], [0, 1, 2, 3, 4]]
""""""
",multi_list,"def check(candidate):

    assert candidate(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]
    assert candidate(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]
    assert candidate(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]
","def multi_list(rownum,colnum):
  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]
  for row in range(rownum):
    for col in range(colnum):
        multi_list[row][col]= row*col
  return multi_list
","[""multi_list(3, 4) == [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]"", ""multi_list(5, 2) == [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4]]"", ""multi_list(2, 5) == [[0, 0, 0, 0, 0], [0, 1, 2, 3, 4]]""]","@startuml

start

:multi_list(rownum, colnum);

if (rownum <= 0 or colnum <= 0) then (no rows or columns)
  :return [];
else
  :result = [];
  :for i in range(rownum):
    :result.append([]);
  :for j in range(colnum):
    :for k in range(rownum):
      :result[k].append(j * k);
  :return result;
endif

@enduml"
240,"def replace_list(list1,list2):
""""""
Write a function to replace the last element of the list with another list.
Your code should satisfy these tests:
replace_list([1, 2, 3], [4, 5]) == [1, 2, 4, 5]
replace_list(['a', 'b'], ['c', 'd', 'e']) == ['a', 'c', 'd', 'e']
replace_list([10, 20], [30]) == [10, 30]
""""""
",replace_list,"def check(candidate):

    assert candidate([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]
    assert candidate([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]
    assert candidate([""red"",""blue"",""green""],[""yellow""])==[""red"",""blue"",""yellow""]
","def replace_list(list1,list2):
 list1[-1:] = list2
 replace_list=list1
 return replace_list
","[""replace_list([1, 2, 3], [4, 5]) == [1, 2, 4, 5]"", ""replace_list(['a', 'b'], ['c', 'd', 'e']) == ['a', 'c', 'd', 'e']"", ""replace_list([10, 20], [30]) == [10, 30]""]","@startuml
start

:Input list1 and list2;
:Check if list1 is empty;
if (Is list1 empty?) then (yes)
  :Return list2 as the result;
  stop
else (no)
  :Remove the last element from list1;
  :Concatenate list1 and list2;
  :Return the concatenated list as the result;
  stop
endif

@enduml"
338,"def check_Equality(s):
""""""
Write a python function to count the number of substrings with same first and last characters.
Your code should satisfy these tests:
check_Equality(""a"") == True
check_Equality(""ab"") == False
check_Equality(""aba"") == True
check_Equality(""abcba"") == True
check_Equality(""xyz"") == False
""""""
",check_Equality,"def check(candidate):

    assert count_Substring_With_Equal_Ends('aba') == 4
    assert count_Substring_With_Equal_Ends('abcab') == 7
    assert count_Substring_With_Equal_Ends('abc') == 3
","def check_Equality(s):
    return (ord(s[0]) == ord(s[len(s) - 1]));
def count_Substring_With_Equal_Ends(s):
    result = 0;
    n = len(s);
    for i in range(n):
        for j in range(1,n-i+1):
            if (check_Equality(s[i:i+j])):
                result+=1;
    return result; ","[""check_Equality(\""a\"") == True"", ""check_Equality(\""ab\"") == False"", ""check_Equality(\""aba\"") == True"", ""check_Equality(\""abcba\"") == True"", ""check_Equality(\""xyz\"") == False""]","@startuml
start
:Input String s;
if (s is empty?) then (True)
  :Return True;
  stop
endif
:Initialize count to 0;
:Initialize first character of s to first_char;
:Initialize last character of s to last_char;
if (first_char != last_char) then (False)
  :Return False;
  stop
endif
:Initialize substring to empty string;
:Initialize substrings list to empty list;
repeat (length of s)
  :Add first_char to substring;
  :Add substring to substrings list;
  :Remove first character from substring;
  :Add last character to substring;
end repeat
:Initialize result to False;
repeat (length of substrings)
  :Initialize sub to the i-th substring in substrings;
  :Initialize first character of sub to first_char_sub;
  :Initialize last character of sub to last_char_sub;
  if (first_char_sub == last_char_sub) then (True)
    :Set result to True;
    :Break the loop;
  endif
end repeat
:Return result;
stop
@enduml"
311,"def set_left_most_unset_bit(n):
""""""
Write a python function to set the left most unset bit.
Your code should satisfy these tests:
set_left_most_unset_bit(0b1010) == 14
set_left_most_unset_bit(0b1101) == 15
set_left_most_unset_bit(0b1000) == 12
set_left_most_unset_bit(0b111) == 7
set_left_most_unset_bit(0b101101) == 61
""""""
",set_left_most_unset_bit,"def check(candidate):

    assert candidate(10) == 14
    assert candidate(12) == 14
    assert candidate(15) == 15
","def set_left_most_unset_bit(n):
    if not (n & (n + 1)):
        return n
    pos, temp, count = 0, n, 0
    while temp:
        if not (temp & 1):
            pos = count
        count += 1; temp>>=1
    return (n | (1 << (pos))) ","[""set_left_most_unset_bit(0b1010) == 14"", ""set_left_most_unset_bit(0b1101) == 15"", ""set_left_most_unset_bit(0b1000) == 12"", ""set_left_most_unset_bit(0b111) == 7"", ""set_left_most_unset_bit(0b101101) == 61""]","@startuml
start
:Input: n;
:Check if n is not equal to 0;
if (n != 0) then (yes)
  :Convert n to binary;
  :Find the position of the leftmost unset bit;
  :Set the bit at the found position;
  :Convert the binary result back to decimal;
else (no)
  :Return an error message;
endif
:Return the result;
stop
@enduml"
341,"def set_to_tuple(s):
""""""
Write a function to convert the given set into ordered tuples.
Your code should satisfy these tests:
set_to_tuple({3, 1, 2}) == (1, 2, 3)
set_to_tuple({'a', 'c', 'b'}) == ('a', 'b', 'c')
set_to_tuple({10, 5, 15}) == (5, 10, 15)
""""""
",set_to_tuple,"def check(candidate):

    assert candidate({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)
    assert candidate({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)
    assert candidate({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)
","def set_to_tuple(s):
  t = tuple(sorted(s))
  return (t)","[""set_to_tuple({3, 1, 2}) == (1, 2, 3)"", ""set_to_tuple({'a', 'c', 'b'}) == ('a', 'b', 'c')"", ""set_to_tuple({10, 5, 15}) == (5, 10, 15)""]","@startuml

title set_to_tuple

start
:set_to_tuple(s);

if (s is empty) then (no)
:return empty tuple;
else (yes)
:create a new tuple;
:add elements to the tuple;
:return the tuple;

@enduml"
366,"def adjacent_num_product(list_nums):
""""""
Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.
Your code should satisfy these tests:
adjacent_num_product([3, 6, -2, -5, 7, 3]) == 21
adjacent_num_product([9, 5, 10, 2, 24, -1, -48]) == 50
adjacent_num_product([-1, -2, -3, -4]) == 12
""""""
",adjacent_num_product,"def check(candidate):

    assert candidate([1,2,3,4,5,6]) == 30
    assert candidate([1,2,3,4,5]) == 20
    assert candidate([2,3]) == 6
","def adjacent_num_product(list_nums):
    return max(a*b for a, b in zip(list_nums, list_nums[1:]))","[""adjacent_num_product([3, 6, -2, -5, 7, 3]) == 21"", ""adjacent_num_product([9, 5, 10, 2, 24, -1, -48]) == 50"", ""adjacent_num_product([-1, -2, -3, -4]) == 12""]","@startuml

title adjacent_num_product

start
:adjacent_num_product(list_nums);

if (len(list_nums) == 0) then (no adjacent pairs)
:return 0;

end if

:largest_product = 0;

for each num in list_nums:
    :if (num > 0) then (positive number)
        :if (num > largest_product) then (larger product)
            :largest_product = num;
        end if
    end if
end for

:return largest_product;

@enduml"
449,"def check_Triangle(x1,y1,x2,y2,x3,y3):
""""""
Write a python function to check whether the triangle is valid or not if 3 points are given.
Your code should satisfy these tests:
check_Triangle(0, 0, 1, 1, 2, 2) == 'No'
check_Triangle(0, 0, 0, 1, 1, 0) == 'Yes'
check_Triangle(1, 1, 4, 5, 7, 8) == 'Yes'
""""""
",check_Triangle,"def check(candidate):

    assert candidate(1,5,2,5,4,6) == 'Yes'
    assert candidate(1,1,1,4,1,5) == 'No'
    assert candidate(1,1,1,1,1,1) == 'No'
","def check_Triangle(x1,y1,x2,y2,x3,y3):
    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))
    if a == 0:
        return ('No')
    else:
        return ('Yes') ","[""check_Triangle(0, 0, 1, 1, 2, 2) == 'No'"", ""check_Triangle(0, 0, 0, 1, 1, 0) == 'Yes'"", ""check_Triangle(1, 1, 4, 5, 7, 8) == 'Yes'""]","@startuml
start

:Input coordinates (x1, y1, x2, y2, x3, y3);
:Calculate area of the triangle using the formula:
Area = 0.5 * |x1(y2 - y3) + x2(y3 - y1) + x3(y1 - y2)|;

if (Area == 0?) then (Yes)
    :Triangle is invalid (collinear points);
    :Return 'No';
else (No)
    :Triangle is valid;
    :Return 'Yes';
endif

stop
@enduml"
134,"def check_last(arr,n,p):
""""""
Write a python function to check whether the last element of given array is even or odd after performing an operation p times.
Your code should satisfy these tests:
check_last([1, 2, 3, 4], 4, 1) == 'ODD'
check_last([1, 3, 5, 7], 4, 1) == 'ODD'
check_last([2, 4, 6, 8], 4, 0) == 'EVEN'
check_last([1, 1, 1, 1], 4, 1) == 'ODD'
check_last([0, 0, 0, 0], 4, 1) == 'ODD'
""""""
",check_last,"def check(candidate):

    assert candidate([5,7,10],3,1) == ""ODD""
    assert candidate([2,3],2,3) == ""EVEN""
    assert candidate([1,2,3],3,1) == ""ODD""
","def check_last (arr,n,p):
    _sum = 0
    for i in range(n):
        _sum = _sum + arr[i]
    if p == 1:
        if _sum % 2 == 0:
            return ""ODD""
        else:
            return ""EVEN""
    return ""EVEN""
      ","[""check_last([1, 2, 3, 4], 4, 1) == 'ODD'"", ""check_last([1, 3, 5, 7], 4, 1) == 'ODD'"", ""check_last([2, 4, 6, 8], 4, 0) == 'EVEN'"", ""check_last([1, 1, 1, 1], 4, 1) == 'ODD'"", ""check_last([0, 0, 0, 0], 4, 1) == 'ODD'""]","@startuml
start
:Input: arr, n, p;
:Check if arr is not empty;
:Check if n is greater than 0 and p is greater than or equal to 0;
if (n <= 0 or p < 0) then (Invalid Input)
elseif (arr == []) then (Empty Array)
else (Valid Input)
endif
:Initialize last_element to arr[n-1];
:Perform operation p times;
:Set last_element to the result of operation;
:Check if last_element is even or odd;
if (last_element mod 2 == 0) then (EVEN)
else (ODD)
endif
:Return result;
stop
@enduml"
509,"def average_Odd(n):
""""""
Write a python function to find the average of odd numbers till a given odd number.
Your code should satisfy these tests:
average_Odd(9) == 5
average_Odd(15) == 8
average_Odd(21) == 11
""""""
",average_Odd,"def check(candidate):

    assert candidate(9) == 5
    assert candidate(5) == 3
    assert candidate(11) == 6
","def average_Odd(n) :
    if (n%2==0) :
        return (""Invalid Input"")
        return -1
    sm =0
    count =0
    while (n>=1) :
        count=count+1
        sm = sm + n
        n = n-2
    return sm//count ","[""average_Odd(9) == 5"", ""average_Odd(15) == 8"", ""average_Odd(21) == 11""]","@startuml
start

:Input n (odd number);
if (Is n a positive odd number?) then (yes)
    :Initialize sum = 0;
    :Initialize count = 0;
    :Initialize i = 1;
    while (i <= n) is (yes)
        :Add i to sum;
        :Increment count by 1;
        :Increment i by 2;
    endwhile (no)
    :Calculate average = sum / count;
    :Return average;
else (no)
    :Return ""Invalid input: n must be a positive odd number"";
endif

stop
@enduml"
955,"def is_abundant(n):
""""""
Write a function to find out, if the given number is abundant.
Your code should satisfy these tests:
is_abundant(12) == True
is_abundant(28) == False
is_abundant(18) == True
""""""
",is_abundant,"def check(candidate):

    assert candidate(12)==True
    assert candidate(13)==False
    assert candidate(9)==False
","def is_abundant(n):
    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])
    return fctrsum > n","[""is_abundant(12) == True"", ""is_abundant(28) == False"", ""is_abundant(18) == True""]","@startuml

start
:is_abundant(n):
if (n < 1) then (false)
if (n == 1) then (true)
if (n > 1) then (check if sum of divisors is greater than n)

:check if sum of divisors is greater than n:
divisors = []
for i in range(1, n):
    if (n % i == 0) then (add i to divisors)
sum = 0
for i in divisors:
    sum = sum + i
if (sum > n) then (true)
else (false)

:return result:
return result

@enduml"
556,"def find_Odd_Pair(A,N):
""""""
Write a python function to count the pairs with xor as an odd number.
Your code should satisfy these tests:
find_Odd_Pair([1, 2, 3, 4], 4) == 4
find_Odd_Pair([5, 5, 5, 5], 4) == 0
find_Odd_Pair([10, 21, 32, 43, 54], 5) == 6
""""""
",find_Odd_Pair,"def check(candidate):

    assert candidate([5,4,7,2,1],5) == 6
    assert candidate([7,2,8,1,0,5,11],7) == 12
    assert candidate([1,2,3],3) == 2
","def find_Odd_Pair(A,N) :
    oddPair = 0
    for i in range(0,N) :
        for j in range(i+1,N) :
            if ((A[i] ^ A[j]) % 2 != 0):
                oddPair+=1
    return oddPair  ","[""find_Odd_Pair([1, 2, 3, 4], 4) == 4"", ""find_Odd_Pair([5, 5, 5, 5], 4) == 0"", ""find_Odd_Pair([10, 21, 32, 43, 54], 5) == 6""]","@startuml
start

:Input array A and integer N;
:Initialize count = 0;
:Initialize i = 0;

while (i < N)
    :Initialize j = i + 1;
    while (j < N)
        :Calculate XOR of A[i] and A[j];
        if (XOR result is odd?) then (yes)
            :Increment count by 1;
        else (no)
            :Do nothing;
        endif
        :Increment j by 1;
    endwhile
    :Increment i by 1;
endwhile

:Return count;
stop
@enduml"
470,"def add_pairwise(test_tup):
""""""
Write a function to find the pairwise addition of the elements of the given tuples.
Your code should satisfy these tests:
add_pairwise((1, 2, 3, 4)) == (3, 5, 7)
add_pairwise((10, 20, 30)) == (30, 50)
add_pairwise((5, 5, 5, 5, 5)) == (10, 10, 10, 10)
""""""
",add_pairwise,"def check(candidate):

    assert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)
    assert candidate((2, 6, 8, 9, 11)) == (8, 14, 17, 20)
    assert candidate((3, 7, 9, 10, 12)) == (10, 16, 19, 22)
","def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","[""add_pairwise((1, 2, 3, 4)) == (3, 5, 7)"", ""add_pairwise((10, 20, 30)) == (30, 50)"", ""add_pairwise((5, 5, 5, 5, 5)) == (10, 10, 10, 10)""]","@startuml
start

:Input tuple (test_tup);
if (Is test_tup a valid tuple?) then (yes)
    :Initialize an empty list (result) to store pairwise sums;
    :Initialize index (i = 0);
    while (i < length of test_tup - 1) is (yes)
        :Calculate pairwise sum (test_tup[i] + test_tup[i+1]);
        :Append the sum to the result list;
        :Increment index (i = i + 1);
    endwhile (no)
    :Convert the result list to a tuple;
    :Return the resulting tuple;
else (no)
    :Raise an error (Invalid input: Expected a tuple);
endif

stop
@enduml"
825,"def access_elements(nums, list_index):
""""""
Write a python function to access multiple elements of specified index from a given list.
Your code should satisfy these tests:
access_elements([10, 20, 30, 40, 50], [0, 2, 4]) == [10, 30, 50]
access_elements(['a', 'b', 'c', 'd'], [1, 3]) == ['b', 'd']
access_elements([True, False, True, False], [2, 3]) == [True, False]
""""""
",access_elements,"def check(candidate):

    assert candidate([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]
    assert candidate([1, 2, 3, 4, 5],[1,2]) == [2,3]
    assert candidate([1,0,2,3],[0,1]) == [1,0]
","def access_elements(nums, list_index):
    result = [nums[i] for i in list_index]
    return result","[""access_elements([10, 20, 30, 40, 50], [0, 2, 4]) == [10, 30, 50]"", ""access_elements(['a', 'b', 'c', 'd'], [1, 3]) == ['b', 'd']"", ""access_elements([True, False, True, False], [2, 3]) == [True, False]""]","@startuml

start
:access_elements(nums, list_index);

if (nums is not a list) then (1)
:raise TypeError;
end if

if (list_index is not a list) then (2)
:raise TypeError;
end if

if (len(list_index) == 0) then (3)
:return [];
end if

:result = [];

for each index in list_index do (4)
:if (index < 0 or index >= len(nums)) then (5)
:raise IndexError;
:end if

:result.append(nums[index]);
end for

:return result;

@enduml"
301,"def dict_depth(d):
""""""
Write a function to find the depth of a dictionary.
Your code should satisfy these tests:
dict_depth({}) == 1
dict_depth({'a': 1, 'b': 2}) == 1
dict_depth({'a': {'b': {'c': {}}}}) == 4
""""""
",dict_depth,"def check(candidate):

    assert candidate({'a':1, 'b': {'c': {'d': {}}}})==4
    assert candidate({'a':1, 'b': {'c':'python'}})==2
    assert candidate({1: 'Sun', 2: {3: {4:'Mon'}}})==3
","def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0","[""dict_depth({}) == 1"", ""dict_depth({'a': 1, 'b': 2}) == 1"", ""dict_depth({'a': {'b': {'c': {}}}}) == 4""]","@startuml
start

:Input dictionary (d);
if (Is d empty?) then (yes)
    :Return depth = 1;
    stop
else (no)
    :Initialize depth = 1;
    :Initialize max_depth = 1;
    :Initialize stack with (d, depth);
    while (Is stack not empty?) is (yes)
        :Pop (current_dict, current_depth) from stack;
        if (Is current_dict a dictionary?) then (yes)
            :Iterate over each key-value pair in current_dict;
            if (Is value a dictionary?) then (yes)
                :Push (value, current_depth + 1) to stack;
                :Update max_depth = max(max_depth, current_depth + 1);
            else (no)
                :Continue to next key-value pair;
            endif
        else (no)
            :Continue to next item in stack;
        endif
    endwhile (no)
    :Return max_depth;
    stop
endif

@enduml"
146,"def ascii_value_string(str1):
""""""
Write a function to find the ascii value of total characters in a string.
Your code should satisfy these tests:
ascii_value_string(""hello"") == 104
ascii_value_string(""Python"") == 80
ascii_value_string(""12345"") == 49
ascii_value_string(""test case"") == 116
ascii_value_string(""programming"") == 112
""""""
",ascii_value_string,"def check(candidate):

    assert candidate(""python"")==112
    assert candidate(""Program"")==80
    assert candidate(""Language"")==76
","def ascii_value_string(str1):
  for i in range(len(str1)):
   return ord(str1[i])","[""ascii_value_string(\""hello\"") == 104"", ""ascii_value_string(\""Python\"") == 80"", ""ascii_value_string(\""12345\"") == 49"", ""ascii_value_string(\""test case\"") == 116"", ""ascii_value_string(\""programming\"") == 112""]","@startuml
start
:input string str1;
if (str1 is not empty?) then (yes)
    :sum = 0;
    loop for each character in str1
        :ord(character) to get ASCII value;
        :sum += ASCII value;
    end
    :return sum;
else (no)
    :return ""Input string is empty"";
endif
stop
@enduml"
169,"def get_pell(n):
""""""
Write a function to calculate the nth pell number.
Your code should satisfy these tests:
get_pell(1) == 1
get_pell(5) == 29
get_pell(10) == 2378
""""""
",get_pell,"def check(candidate):

    assert candidate(4) == 12
    assert candidate(7) == 169
    assert candidate(8) == 408
","def get_pell(n):
	if (n <= 2):
		return n
	a = 1
	b = 2
	for i in range(3, n+1):
		c = 2 * b + a
		a = b
		b = c
	return b ","[""get_pell(1) == 1"", ""get_pell(5) == 29"", ""get_pell(10) == 2378""]","@startuml
start

:Input n;
if (n <= 0?) then (yes)
  :Return error or handle invalid input;
  stop
else (no)
  if (n == 1?) then (yes)
    :Return 1;
    stop
  else (no)
    :Initialize variables:
    pell_prev = 0, pell_curr = 1;
    :Set counter i = 2;
    while (i <= n?)
      :Calculate next Pell number:
      pell_next = 2 * pell_curr + pell_prev;
      :Update variables:
      pell_prev = pell_curr;
      pell_curr = pell_next;
      :Increment counter i = i + 1;
    endwhile
    :Return pell_curr;
    stop
  endif
endif

@enduml"
183,"def count_pairs(arr, n, k):
""""""
Write a function to count all the distinct pairs having a difference of k in any array.
Your code should satisfy these tests:
count_pairs([1, 5, 3, 4, 2], 5, 2) == 3
count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5
count_pairs([10, 20, 30, 40, 50], 5, 10) == 4
""""""
",count_pairs,"def check(candidate):

    assert candidate([1, 5, 3, 4, 2], 5, 3) == 2
    assert candidate([8, 12, 16, 4, 0, 20], 6, 4) == 5
    assert candidate([2, 4, 1, 3, 4], 5, 2) == 3
","def count_pairs(arr, n, k):
  count=0;
  for i in range(0,n):
    for j in range(i+1, n):
      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:
        count += 1
  return count","[""count_pairs([1, 5, 3, 4, 2], 5, 2) == 3"", ""count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5"", ""count_pairs([10, 20, 30, 40, 50], 5, 10) == 4""]","@startuml
start
:Input array 'arr' and integer 'n' and 'k';
:Validate input: 'arr' is not empty and 'n' and 'k' are positive integers;
if (n <= 0 or k < 0) then (return error message)
:Sort the array 'arr';
:Initialize a variable 'count' to 0;
:Initialize a variable 'i' to 0;
:Initialize a variable 'j' to 1;
while (i < n - 1)
    while (j < n)
        if (arr[j] - arr[i] == k)
            :Increment 'count';
        endif
        :Increment 'j';
    endwhile
    :Increment 'i';
    :Reset 'j' to 'i' + 1;
endwhile
:Return 'count';
stop
@enduml"
287,"def square_Sum(n):
""""""
Write a python function to find the sum of squares of first n even natural numbers.
Your code should satisfy these tests:
square_Sum(1) == 4
square_Sum(2) == 20
square_Sum(3) == 56
""""""
",square_Sum,"def check(candidate):

    assert candidate(2) == 20
    assert candidate(3) == 56
    assert candidate(4) == 120
","def square_Sum(n):
    return int(2*n*(n+1)*(2*n+1)/3)","[""square_Sum(1) == 4"", ""square_Sum(2) == 20"", ""square_Sum(3) == 56""]","@startuml
start

:Input n;
if (Is n a positive integer?) then (yes)
    :Initialize sum = 0;
    :Initialize counter = 1;
    :Initialize even_number = 2;
    while (counter <= n) is (yes)
        :sum += even_number ** 2;
        :even_number += 2;
        :counter += 1;
    endwhile (no)
    :Output sum;
else (no)
    :Output ""Invalid input: n must be a positive integer"";
endif

stop
@enduml"
658,"def max_occurrences(list1):
""""""
Write a function to find the item with maximum occurrences in a given list.
Your code should satisfy these tests:
max_occurrences([1, 2, 2, 3, 3, 3]) == 3
max_occurrences(['a', 'b', 'a', 'c', 'a', 'b']) == 'a'
max_occurrences([10, 10, 20, 20, 30, 30, 30]) == 30
""""""
",max_occurrences,"def check(candidate):

    assert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2
    assert candidate([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1
    assert candidate([1, 2, 3,2, 4, 5,1, 1, 1])==1
","def max_occurrences(list1):
    max_val = 0
    result = list1[0]
    for i in list1:
        occu = list1.count(i)
        if occu > max_val:
            max_val = occu
            result = i
    return result","[""max_occurrences([1, 2, 2, 3, 3, 3]) == 3"", ""max_occurrences(['a', 'b', 'a', 'c', 'a', 'b']) == 'a'"", ""max_occurrences([10, 10, 20, 20, 30, 30, 30]) == 30""]","@startuml

start
:max_occurrences(list1);

if (list1 is empty) then (no
:return None;
)

:item = list1[0];
:count = 1;

for each item in list1:
    if (item == item) then (yes
        :count = count + 1;
    )
    else (no
        :return item;
    )

:return item;

@enduml"
834,"def generate_matrix(n):
""""""
Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.
Your code should satisfy these tests:
generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]
generate_matrix(1) == [[1]]
generate_matrix(5) == [[1, 2, 3, 4, 5], [16, 17, 18, 19, 6], [15, 24, 25, 20, 7], [14, 23, 22, 21, 8], [13, 12, 11, 10, 9]]
""""""
",generate_matrix,"def check(candidate):

    assert candidate(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]]
    assert candidate(2)==[[1,2],[4,3]]
    assert candidate(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]
","def generate_matrix(n):
        if n<=0:
            return []
        matrix=[row[:] for row in [[0]*n]*n]
        row_st=0
        row_ed=n-1
        col_st=0
        col_ed=n-1
        current=1
        while (True):
            if current>n*n:
                break
            for c in range (col_st, col_ed+1):
                matrix[row_st][c]=current
                current+=1
            row_st+=1
            for r in range (row_st, row_ed+1):
                matrix[r][col_ed]=current
                current+=1
            col_ed-=1
            for c in range (col_ed, col_st-1, -1):
                matrix[row_ed][c]=current
                current+=1
            row_ed-=1
            for r in range (row_ed, row_st-1, -1):
                matrix[r][col_st]=current
                current+=1
            col_st+=1
        return matrix","[""generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]"", ""generate_matrix(1) == [[1]]"", ""generate_matrix(5) == [[1, 2, 3, 4, 5], [16, 17, 18, 19, 6], [15, 24, 25, 20, 7], [14, 23, 22, 21, 8], [13, 12, 11, 10, 9]]""]","@startuml

start
: generate_matrix(n);
if (n <= 0) then (no
: return [];
else (yes)
: matrix = [];
: for i in range(n):
:   matrix.append([i]);
: end for
: return matrix;

@enduml"
262,"def split_two_parts(list1, L):
""""""
Write a function to split a given list into two parts where the length of the first part of the list is given.
Your code should satisfy these tests:
split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])
split_two_parts(['a', 'b', 'c', 'd'], 3) == (['a', 'b', 'c'], ['d'])
split_two_parts([10, 20, 30], 0) == ([], [10, 20, 30])
""""""
",split_two_parts,"def check(candidate):

    assert candidate([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])
    assert candidate(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])
    assert candidate(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])
","def split_two_parts(list1, L):
    return list1[:L], list1[L:]","[""split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])"", ""split_two_parts(['a', 'b', 'c', 'd'], 3) == (['a', 'b', 'c'], ['d'])"", ""split_two_parts([10, 20, 30], 0) == ([], [10, 20, 30])""]","@startuml

title Split List into Two Parts

start
:Split List into Two Parts;

if (list1 is empty) then (no)
  :Return empty list;
else (yes)
  :Split list into two parts;
  :Return two lists;
endif

if (L is 0) then (no)
  :Return empty list;
else (yes)
  :Split list into two parts;
  :Return two lists;
endif

if (L is greater than list1 length) then (no)
  :Return empty list;
else (yes)
  :Split list into two parts;
  :Return two lists;
endif

if (L is less than 0) then (no)
  :Return empty list;
else (yes)
  :Split list into two parts;
  :Return two lists;
endif

stop

@enduml"
278,"def count_first_elements(test_tup):
""""""
Write a function to find the element count that occurs before the record in the given tuple.
Your code should satisfy these tests:
count_first_elements((1, 2, (3, 4), 5)) == 2
count_first_elements((10, 20, 30, (40, 50, 60), 70)) == 3
count_first_elements((100, 200, 300, 400, (500,))) == 4
""""""
",count_first_elements,"def check(candidate):

    assert candidate((1, 5, 7, (4, 6), 10) ) == 3
    assert candidate((2, 9, (5, 7), 11) ) == 2
    assert candidate((11, 15, 5, 8, (2, 3), 8) ) == 4
","def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) ","[""count_first_elements((1, 2, (3, 4), 5)) == 2"", ""count_first_elements((10, 20, 30, (40, 50, 60), 70)) == 3"", ""count_first_elements((100, 200, 300, 400, (500,))) == 4""]","@startuml
start

:Input tuple (test_tup);
if (Is test_tup a valid tuple?) then (yes)
    :Initialize counter = 0;
    :Initialize index = 0;
    while (Is index < length of test_tup?) is (yes)
        if (Is test_tup[index] a tuple?) then (yes)
            :Break loop;
        else (no)
            :Increment counter by 1;
            :Increment index by 1;
        endif
    endwhile
    :Return counter;
else (no)
    :Raise TypeError(""Input must be a tuple"");
endif

stop
@enduml"
621,"def increment_numerics(test_list, K):
""""""
Write a function to increment the numeric values in the given strings by k.
Your code should satisfy these tests:
increment_numerics(['123', 'abc', '456'], 10) == ['133', 'abc', '466']
increment_numerics(['0', '99', 'hello', 'world'], 1) == ['1', '100', 'hello', 'world']
increment_numerics(['test', '12', '34', '56'], 5) == ['test', '17', '39', '61']
""""""
",increment_numerics,"def check(candidate):

    assert candidate([""MSM"", ""234"", ""is"", ""98"", ""123"", ""best"", ""4""] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']
    assert candidate([""Dart"", ""356"", ""is"", ""88"", ""169"", ""Super"", ""6""] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']
    assert candidate([""Flutter"", ""451"", ""is"", ""44"", ""96"", ""Magnificent"", ""12""] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']
","def increment_numerics(test_list, K):
  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]
  return res ","[""increment_numerics(['123', 'abc', '456'], 10) == ['133', 'abc', '466']"", ""increment_numerics(['0', '99', 'hello', 'world'], 1) == ['1', '100', 'hello', 'world']"", ""increment_numerics(['test', '12', '34', '56'], 5) == ['test', '17', '39', '61']""]","@startuml
start

:Input: test_list (list of strings), K (integer);
:Initialize an empty list: result_list;

if (Is test_list empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Iterate over each element in test_list;
    :Check if the element is numeric;
    if (Is element numeric?) then (yes)
        :Convert element to integer;
        :Increment integer by K;
        :Convert back to string;
        :Append to result_list;
    else (no)
        :Append element as-is to result_list;
    endif
endif

:Return result_list;
stop

@enduml"
145,"def max_Abs_Diff(arr,n):
""""""
Write a python function to find the maximum difference between any two elements in a given array.
Your code should satisfy these tests:
max_Abs_Diff([1, 2, 3, 4, 5], 5) == 4
max_Abs_Diff([-10, -20, -30, -40, -50], 5) == 40
max_Abs_Diff([100, 0, 50, 20, 30], 5) == 100
""""""
",max_Abs_Diff,"def check(candidate):

    assert candidate((2,1,5,3),4) == 4
    assert candidate((9,3,2,5,1),5) == 8
    assert candidate((3,2,1),3) == 2
","def max_Abs_Diff(arr,n):
    minEle = arr[0]
    maxEle = arr[0]
    for i in range(1, n):
        minEle = min(minEle,arr[i])
        maxEle = max(maxEle,arr[i])
    return (maxEle - minEle) ","[""max_Abs_Diff([1, 2, 3, 4, 5], 5) == 4"", ""max_Abs_Diff([-10, -20, -30, -40, -50], 5) == 40"", ""max_Abs_Diff([100, 0, 50, 20, 30], 5) == 100""]","@startuml
start

:Input array (arr) and its size (n);
if (Is arr empty or n <= 1?) then (yes)
  :Return 0 (No difference possible);
  stop
else (no)
  :Initialize min_val = arr[0];
  :Initialize max_val = arr[0];
  :Initialize i = 1;

  while (i < n) is (yes)
    :Update min_val = min(min_val, arr[i]);
    :Update max_val = max(max_val, arr[i]);
    :i = i + 1;
  endwhile (no)

  :Calculate absolute difference = abs(max_val - min_val);
  :Return absolute difference;
  stop
endif

@enduml"
245,"def max_sum(arr, n):
""""""
Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.
Your code should satisfy these tests:
max_sum([1, 101, 2, 3, 100, 4, 5], 7) == 207
max_sum([3, 4, 5, 10], 4) == 22
max_sum([10, 5, 4, 3], 4) == 22
""""""
",max_sum,"def check(candidate):

    assert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194
    assert candidate([80, 60, 30, 40, 20, 10], 6) == 210
    assert candidate([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138
","def max_sum(arr, n):
	MSIBS = arr[:]
	for i in range(n):
		for j in range(0, i):
			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]:
				MSIBS[i] = MSIBS[j] + arr[i]
	MSDBS = arr[:]
	for i in range(1, n + 1):
		for j in range(1, i):
			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]:
				MSDBS[-i] = MSDBS[-j] + arr[-i]
	max_sum = float(""-Inf"")
	for i, j, k in zip(MSIBS, MSDBS, arr):
		max_sum = max(max_sum, i + j - k)
	return max_sum","[""max_sum([1, 101, 2, 3, 100, 4, 5], 7) == 207"", ""max_sum([3, 4, 5, 10], 4) == 22"", ""max_sum([10, 5, 4, 3], 4) == 22""]","@startuml
start
:Input: arr, n;
:Check if arr is not empty and n is greater than 0;
if (n > 0 and arr is not empty) then (true)
    :Initialize two lists, inc and dec with size of n;
    :Set inc[0] = arr[0];
    :Set dec[n-1] = arr[n-1];
    :Loop from 1 to n;
    :For each i, calculate inc[i] = max(inc[i], inc[j] + arr[i]) if j < i;
    :Loop from n-2 to -1;
    :For each i, calculate dec[i] = max(dec[i], dec[j] + arr[i]) if j > i;
    :Calculate max_sum by max(inc[i] + dec[i] - arr[i]) for i in range(n);
    :Return max_sum;
else (false)
    :Return an error message;
endif
stop
@enduml"
153,"def parabola_vertex(a, b, c):
""""""
Write a function to find the vertex of a parabola.
Your code should satisfy these tests:
parabola_vertex(1, -4, 4) == (2.0, 0.0)
parabola_vertex(2, 3, -2) == (-0.75, -3.125)
parabola_vertex(-1, 2, 1) == (1.0, 2.0)
""""""
",parabola_vertex,"def check(candidate):

    assert candidate(5,3,2)==(-0.3, 1.55)
    assert candidate(9,8,4)==(-0.4444444444444444, 2.2222222222222223)
    assert candidate(2,4,6)==(-1.0, 4.0)
","def parabola_vertex(a, b, c):
  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))
  return vertex","[""parabola_vertex(1, -4, 4) == (2.0, 0.0)"", ""parabola_vertex(2, 3, -2) == (-0.75, -3.125)"", ""parabola_vertex(-1, 2, 1) == (1.0, 2.0)""]","@startuml
start

:Input coefficients a, b, c;
if (Is a == 0?) then (yes)
    :Throw ValueError(""Coefficient 'a' cannot be zero for a parabola."");
    stop
else (no)
    :Calculate x-coordinate of vertex: x = -b / (2 * a);
    :Calculate y-coordinate of vertex: y = a * x^2 + b * x + c;
    :Return vertex coordinates (x, y);
endif

stop
@enduml"
694,"def extract_unique(test_dict):
""""""
Write a function to extract unique values from the given dictionary values.
Your code should satisfy these tests:
extract_unique({'a': [1, 2, 3], 'b': [2, 3, 4], 'c': [4, 5]}) == [1, 2, 3, 4, 5]
extract_unique({'x': [10, 20], 'y': [20, 30, 40], 'z': [50]}) == [10, 20, 30, 40, 50]
extract_unique({'m': [100], 'n': [100, 200], 'o': [200, 300, 400]}) == [100, 200, 300, 400]
""""""
",extract_unique,"def check(candidate):

    assert candidate({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]
    assert candidate({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]
    assert candidate({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]
","def extract_unique(test_dict):
  res = list(sorted({ele for val in test_dict.values() for ele in val}))
  return res","[""extract_unique({'a': [1, 2, 3], 'b': [2, 3, 4], 'c': [4, 5]}) == [1, 2, 3, 4, 5]"", ""extract_unique({'x': [10, 20], 'y': [20, 30, 40], 'z': [50]}) == [10, 20, 30, 40, 50]"", ""extract_unique({'m': [100], 'n': [100, 200], 'o': [200, 300, 400]}) == [100, 200, 300, 400]""]","@startuml
start
:Input Dictionary;
:Validate Input;
if (Is Input Valid?) then (Yes)
  :Extract Values;
  :Merge Values;
  :Remove Duplicates;
else (No)
  :Return Error;
endif
:Return Unique Values;
stop
@enduml"
747,"def lcs_of_three(X, Y, Z, m, n, o):
""""""
Write a function to find the longest common subsequence for the given three string sequence.
Your code should satisfy these tests:
lcs_of_three(""abc"", ""abc"", ""abc"", 3, 3, 3) == 3
lcs_of_three(""abcd"", ""abcf"", ""abch"", 4, 4, 4) == 3
lcs_of_three(""abcdef"", ""abc"", ""def"", 6, 3, 3) == 0
""""""
",lcs_of_three,"def check(candidate):

    assert candidate('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2
    assert candidate('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5
    assert candidate('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3
","def lcs_of_three(X, Y, Z, m, n, o):
	L = [[[0 for i in range(o+1)] for j in range(n+1)]
		for k in range(m+1)]
	for i in range(m+1):
		for j in range(n+1):
			for k in range(o+1):
				if (i == 0 or j == 0 or k == 0):
					L[i][j][k] = 0
				elif (X[i-1] == Y[j-1] and
					X[i-1] == Z[k-1]):
					L[i][j][k] = L[i-1][j-1][k-1] + 1
				else:
					L[i][j][k] = max(max(L[i-1][j][k],
					L[i][j-1][k]),
									L[i][j][k-1])
	return L[m][n][o]","[""lcs_of_three(\""abc\"", \""abc\"", \""abc\"", 3, 3, 3) == 3"", ""lcs_of_three(\""abcd\"", \""abcf\"", \""abch\"", 4, 4, 4) == 3"", ""lcs_of_three(\""abcdef\"", \""abc\"", \""def\"", 6, 3, 3) == 0""]","@startuml

title lcs_of_three

start

:X = ""abc"";
:Y = ""abc"";
:Z = ""abc"";
:m = 3;
:n = 3;
:o = 3;

if (X == Y and Y == Z) then (yes)
  :return m;
else (no)
  :return 0;
endif

@enduml"
713,"def check_valid(test_tup):
""""""
Write a function to check if the given tuple contains all valid values or not.
Your code should satisfy these tests:
check_valid((1, 2, 3)) == True
check_valid((1, 0, 3)) == False
check_valid(('a', 'b', '')) == False
""""""
",check_valid,"def check(candidate):

    assert candidate((True, True, True, True) ) == True
    assert candidate((True, False, True, True) ) == False
    assert candidate((True, True, True, True) ) == True
","def check_valid(test_tup):
  res = not any(map(lambda ele: not ele, test_tup))
  return (res) ","[""check_valid((1, 2, 3)) == True"", ""check_valid((1, 0, 3)) == False"", ""check_valid(('a', 'b', '')) == False""]","@startuml
start
:check_valid(test_tup);
if (test_tup is not empty?) then (yes)
  :for each element in test_tup;
  if (element is not valid?) then (yes)
    :return False;
  endif
  :continue;
  endif
  :return True;
endif
stop
@enduml"
413,"def extract_nth_element(list1, n):
""""""
Write a function to extract the nth element from a given list of tuples.
Your code should satisfy these tests:
extract_nth_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]
extract_nth_element([['a', 'b'], ['c', 'd'], ['e', 'f']], 0) == ['a', 'c', 'e']
extract_nth_element([[True, False], [False, True], [True, True]], 1) == [False, True, True]
""""""
",extract_nth_element,"def check(candidate):

    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']
    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]
    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]
","def extract_nth_element(list1, n):
    result = [x[n] for x in list1]
    return result","[""extract_nth_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]"", ""extract_nth_element([['a', 'b'], ['c', 'd'], ['e', 'f']], 0) == ['a', 'c', 'e']"", ""extract_nth_element([[True, False], [False, True], [True, True]], 1) == [False, True, True]""]","@startuml

start

:extract_nth_element(list1, n);

if (n < 0) then (no)
  :return [];
else (yes)
  :result = [];
  :for i in range(len(list1)):
    :result.append(list1[i][n]);
  :return result;
endif

@enduml"
887,"def is_odd(n):
""""""
Write a python function to check whether the given number is odd or not using bitwise operator.
Your code should satisfy these tests:
is_odd(3) == True
is_odd(10) == False
is_odd(15) == True
""""""
",is_odd,"def check(candidate):

    assert candidate(5) == True
    assert candidate(6) == False
    assert candidate(7) == True
","def is_odd(n) :
    if (n^1 == n-1) :
        return True;
    else :
        return False; ","[""is_odd(3) == True"", ""is_odd(10) == False"", ""is_odd(15) == True""]","@startuml

title is_odd(n)

start
:Check if n is odd;
if (n & 1) == 1 then (
  :n is odd;
  return true;
) else (
  :n is even;
  return false;
)

@enduml"
733,"def find_first_occurrence(A, x):
""""""
Write a function to find the index of the first occurrence of a given number in a sorted array.
Your code should satisfy these tests:
find_first_occurrence([1, 2, 4, 4, 4, 5, 6], 4) == 2
find_first_occurrence([1, 1, 1, 1, 1, 1, 1], 1) == 0
find_first_occurrence([3, 5, 7, 9, 11, 13, 15], 8) == -1
""""""
",find_first_occurrence,"def check(candidate):

    assert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1
    assert candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2
    assert candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4
","def find_first_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result","[""find_first_occurrence([1, 2, 4, 4, 4, 5, 6], 4) == 2"", ""find_first_occurrence([1, 1, 1, 1, 1, 1, 1], 1) == 0"", ""find_first_occurrence([3, 5, 7, 9, 11, 13, 15], 8) == -1""]","@startuml
start
:Input: A (sorted array), x (number to find);
:Output: Index of first occurrence of x in A;
:Initialize: start = 0, end = len(A) - 1;
while (start <= end) is true do
    :mid = (start + end) // 2;
    if (A[mid] == x) then
        if (mid == 0 or A[mid - 1] < x) then
            :return mid;
        else
            :end = mid - 1;
        endif
    else if (A[mid] < x) then
        :start = mid + 1;
    else
        :end = mid - 1;
    endif
endwhile
:return -1;
@enduml"
903,"def count_Unset_Bits(n):
""""""
Write a python function to count the total unset bits from 1 to n.
Your code should satisfy these tests:
count_Unset_Bits(5) == 4
count_Unset_Bits(10) == 12
count_Unset_Bits(15) == 17
""""""
",count_Unset_Bits,"def check(candidate):

    assert candidate(2) == 1
    assert candidate(5) == 4
    assert candidate(14) == 17
","def count_Unset_Bits(n) :
    cnt = 0;
    for i in range(1,n + 1) :
        temp = i;
        while (temp) :
            if (temp % 2 == 0) :
                cnt += 1;
            temp = temp // 2;
    return cnt;  ","[""count_Unset_Bits(5) == 4"", ""count_Unset_Bits(10) == 12"", ""count_Unset_Bits(15) == 17""]","@startuml
start
:Initialize total_unset_bits = 0;
:For i from 1 to n do;
:    num = i;
:    while(num > 0) do (num > 0?);
:        if(num % 2 == 0) then (unset bit?);
:            total_unset_bits = total_unset_bits + 1;
:        endif
:        num = num / 2;
:    endwhile (num <= 0);
:endfor
:Return total_unset_bits;
stop
@enduml"
574,"def surfacearea_cylinder(r,h):
""""""
Write a function to find the surface area of a cylinder.
Your code should satisfy these tests:
surfacearea_cylinder(3, 5) == 150.792
surfacearea_cylinder(0, 10) == 0.0
surfacearea_cylinder(7, 2) == 395.829
surfacearea_cylinder(1, 1) == 12.566
surfacearea_cylinder(10, 10) == 1256.6000000000001
""""""
",surfacearea_cylinder,"def check(candidate):

    assert candidate(10,5)==942.45
    assert candidate(4,5)==226.18800000000002
    assert candidate(4,10)==351.848
","def surfacearea_cylinder(r,h):
  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))
  return surfacearea","[""surfacearea_cylinder(3, 5) == 150.792"", ""surfacearea_cylinder(0, 10) == 0.0"", ""surfacearea_cylinder(7, 2) == 395.829"", ""surfacearea_cylinder(1, 1) == 12.566"", ""surfacearea_cylinder(10, 10) == 1256.6000000000001""]","@startuml
start
:Input Validation;
if (r > 0 and h > 0) then
    :Calculate π (3.14159);
    :Calculate 2πr;
    :Calculate 2πr²;
    :Calculate h²;
    :Calculate 2πr² + h²;
    :Return Result;
else
    :Return Error Message;
endif
stop
@enduml"
284,"def check_element(list,element):
""""""
Write a function to check whether all items of a list are equal to a given string.
Your code should satisfy these tests:
check_element([1, 1, 1], 1) == True
check_element([2, 2, 3], 2) == False
check_element(['a', 'a', 'a'], 'a') == True
""""""
",check_element,"def check(candidate):

    assert candidate([""green"", ""orange"", ""black"", ""white""],'blue')==False
    assert candidate([1,2,3,4],7)==False
    assert candidate([""green"", ""green"", ""green"", ""green""],'green')==True
","def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element","[""check_element([1, 1, 1], 1) == True"", ""check_element([2, 2, 3], 2) == False"", ""check_element(['a', 'a', 'a'], 'a') == True""]","@startuml
start

:Input: list and element;
if (Is list empty?) then (yes)
    :Return False;
    stop
else (no)
    :Initialize index = 0;
    while (index < length of list?) is (yes)
        if (list[index] == element?) then (yes)
            :Increment index;
        else (no)
            :Return False;
            stop
        endif
    endwhile
    :Return True;
    stop
endif

@enduml"
209,"def heap_replace(heap,a):
""""""
Write a function to delete the smallest element from the given heap and then insert a new item.
Your code should satisfy these tests:
heap_replace([3, 1, 4, 1, 5], 2) == [1, 2, 4, 3, 5]
heap_replace([10, 20, 15, 40, 50], 5) == [5, 20, 15, 40, 50]
heap_replace([7, 8, 9, 10], 6) == [6, 8, 9, 10]
heap_replace([1, 2, 3, 4, 5], 0) == [0, 2, 3, 4, 5]
heap_replace([5, 7, 9, 1, 3], 4) == [3, 4, 9, 7, 5]
""""""
",heap_replace,"def check(candidate):

    assert candidate( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]
    assert candidate([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]
    assert candidate([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]
","import heapq as hq
def heap_replace(heap,a):
  hq.heapify(heap)
  hq.heapreplace(heap, a)
  return heap","[""heap_replace([3, 1, 4, 1, 5], 2) == [1, 2, 4, 3, 5]"", ""heap_replace([10, 20, 15, 40, 50], 5) == [5, 20, 15, 40, 50]"", ""heap_replace([7, 8, 9, 10], 6) == [6, 8, 9, 10]"", ""heap_replace([1, 2, 3, 4, 5], 0) == [0, 2, 3, 4, 5]"", ""heap_replace([5, 7, 9, 1, 3], 4) == [3, 4, 9, 7, 5]""]","@startuml
start
:Delete smallest element from heap;
:Insert new item;
stop
@enduml"
442,"def positive_count(nums):
""""""
Write a function to find the ration of positive numbers in an array of integers.
Your code should satisfy these tests:
positive_count(array('i', [1, 2, 3, 4, 5])) == 1.0
positive_count(array('i', [-1, -2, -3, -4, -5])) == 0.0
positive_count(array('i', [0, 0, 0, 0, 0])) == 0.0
positive_count(array('i', [1, -1, 2, -2, 3])) == 0.6
positive_count(array('i', [10, -5, 0, 7, -3])) == 0.4
""""""
",positive_count,"def check(candidate):

    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54
    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69
    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56
","from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)","[""positive_count(array('i', [1, 2, 3, 4, 5])) == 1.0"", ""positive_count(array('i', [-1, -2, -3, -4, -5])) == 0.0"", ""positive_count(array('i', [0, 0, 0, 0, 0])) == 0.0"", ""positive_count(array('i', [1, -1, 2, -2, 3])) == 0.6"", ""positive_count(array('i', [10, -5, 0, 7, -3])) == 0.4""]","@startuml
start

:Input array of integers (nums);
if (Is nums empty?) then (yes)
    :Return 0.0;
    stop
else (no)
    :Initialize positive_count = 0;
    :Initialize total_numbers = length of nums;
    :Initialize index = 0;

    while (index < total_numbers?) is (yes)
        if (nums[index] > 0?) then (yes)
            :Increment positive_count by 1;
        else (no)
            :Do nothing;
        endif
        :Increment index by 1;
    endwhile

    :Calculate ratio = positive_count / total_numbers;
    :Return ratio;
    stop
endif

@enduml"
811,"def check_identical(test_list1, test_list2):
""""""
Write a function to check if two lists of tuples are identical or not.
Your code should satisfy these tests:
check_identical([1, 2, 3], [1, 2, 3]) == True
check_identical([1, 2, 3], [3, 2, 1]) == False
check_identical(['a', 'b'], ['a', 'b', 'c']) == False
""""""
",check_identical,"def check(candidate):

    assert candidate([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True
    assert candidate([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False
    assert candidate([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True
","def check_identical(test_list1, test_list2):
  res = test_list1 == test_list2
  return (res) ","[""check_identical([1, 2, 3], [1, 2, 3]) == True"", ""check_identical([1, 2, 3], [3, 2, 1]) == False"", ""check_identical(['a', 'b'], ['a', 'b', 'c']) == False""]","@startuml

title check_identical

start
:check_identical(test_list1, test_list2);

if (test_list1 == test_list2) then (yes)
:return True;
else (no)
:return False;
endif

@enduml"
871,"def are_Rotations(string1,string2):
""""""
Write a python function to check whether the given strings are rotations of each other or not.
Your code should satisfy these tests:
are_Rotations(""waterbottle"", ""erbottlewat"") == True
are_Rotations(""camera"", ""macera"") == False
are_Rotations(""rotation"", ""tationro"") == True
""""""
",are_Rotations,"def check(candidate):

    assert candidate(""abc"",""cba"") == False
    assert candidate(""abcd"",""cdba"") == False
    assert candidate(""abacd"",""cdaba"") == True
","def are_Rotations(string1,string2):
    size1 = len(string1)
    size2 = len(string2)
    temp = ''
    if size1 != size2:
        return False
    temp = string1 + string1
    if (temp.count(string2)> 0):
        return True
    else:
        return False","[""are_Rotations(\""waterbottle\"", \""erbottlewat\"") == True"", ""are_Rotations(\""camera\"", \""macera\"") == False"", ""are_Rotations(\""rotation\"", \""tationro\"") == True""]","@startuml
start

:Input string1 and string2;

if (Are lengths of string1 and string2 equal?) then (yes)
    :Concatenate string1 with itself to form temp_string;
    if (Is string2 a substring of temp_string?) then (yes)
        :Return True;
    else (no)
        :Return False;
    endif
else (no)
    :Return False;
endif

stop
@enduml"
342,"def __init__(self, value, list_num, index):
""""""
Write a function to find the smallest range that includes at-least one element from each of the given arrays.
Your code should satisfy these tests:
find_minimum_range([[1, 3, 5], [2, 4, 6], [7, 8, 9]]) == (5, 7)
find_minimum_range([[10, 20, 30], [15, 25, 35], [40, 50, 60]]) == (30, 40)
find_minimum_range([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (3, 7)
find_minimum_range([[5, 10, 15], [20, 25, 30], [35, 40, 45]]) == (15, 35)
find_minimum_range([[100, 200], [150, 250], [300, 400]]) == (200, 300)
""""""
",__init__,"def check(candidate):

    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)
    assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)
    assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)
","from heapq import heappop, heappush
class Node:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index
    def __lt__(self, other):
        return self.value < other.value
def find_minimum_range(list):
    high = float('-inf')
    p = (0, float('inf'))
    pq = []
    for i in range(len(list)):
        heappush(pq, Node(list[i][0], i, 0))
        high = max(high, list[i][0])
    while True:
        top = heappop(pq)
        low = top.value
        i = top.list_num
        j = top.index
        if high - low < p[1] - p[0]:
            p = (low, high)
        if j == len(list[i]) - 1:
            return p
        heappush(pq, Node(list[i][j + 1], i, j + 1))
        high = max(high, list[i][j + 1])","[""find_minimum_range([[1, 3, 5], [2, 4, 6], [7, 8, 9]]) == (5, 7)"", ""find_minimum_range([[10, 20, 30], [15, 25, 35], [40, 50, 60]]) == (30, 40)"", ""find_minimum_range([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (3, 7)"", ""find_minimum_range([[5, 10, 15], [20, 25, 30], [35, 40, 45]]) == (15, 35)"", ""find_minimum_range([[100, 200], [150, 250], [300, 400]]) == (200, 300)""]","@startuml
start
:initialize heap;
:initialize result as (infinity, infinity);
:initialize current_max as 0;
:initialize index_list as [0, 0, 0];
while (index_list[0] < len(list_num[0]))
    :heap.push(list_num[i][index_list[i]]);
    current_max = max(current_max, list_num[i][index_list[i]]);
    :index_list[i] += 1;
    if (heap.top() - current_max < result[1] - result[0])
        :result = (current_max, heap.top());
    :heap.pop();
endwhile
:return result;
stop
@enduml"
409,"def min_product_tuple(list1):
""""""
Write a function to find the minimum product from the pairs of tuples within a given list.
Your code should satisfy these tests:
min_product_tuple([(1, 2), (-3, 4), (5, -6)]) == 2
min_product_tuple([(0, 10), (20, -30), (40, 50)]) == 0
min_product_tuple([(-1, -1), (2, 3), (-4, 5)]) == 1
""""""
",min_product_tuple,"def check(candidate):

    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8
    assert candidate([(10,20), (15,2), (5,10)] )==30
    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==100
","def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min","[""min_product_tuple([(1, 2), (-3, 4), (5, -6)]) == 2"", ""min_product_tuple([(0, 10), (20, -30), (40, 50)]) == 0"", ""min_product_tuple([(-1, -1), (2, 3), (-4, 5)]) == 1""]","@startuml
start

:Input list of tuples (list1);
if (Is list1 empty?) then (yes)
    :Return None or raise an error;
    stop
else (no)
    :Initialize min_product as None;
    :Iterate through each tuple in list1;
    :For each tuple (a, b), calculate product = a * b;
    if (Is min_product None?) then (yes)
        :Set min_product = product;
    else (no)
        if (product < min_product?) then (yes)
            :Set min_product = product;
        else (no)
            :Continue to next tuple;
        endif
    endif
    :Check if all tuples have been processed;
    if (All tuples processed?) then (yes)
        :Return min_product;
        stop
    else (no)
        :Continue to next tuple;
    endif
endif

@enduml"
497,"def surfacearea_cone(r,h):
""""""
Write a function to find the surface area of a cone.
Your code should satisfy these tests:
surfacearea_cone(3, 4) == 75.39822368615503
surfacearea_cone(5, 12) == 282.7433388230814
surfacearea_cone(7, 24) == 703.7167544041137
""""""
",surfacearea_cone,"def check(candidate):

    assert candidate(5,12)==282.7433388230814
    assert candidate(10,15)==880.5179353159282
    assert candidate(19,17)==2655.923961165254
","import math
def surfacearea_cone(r,h):
  l = math.sqrt(r * r + h * h)
  SA = math.pi * r * (r + l)
  return SA","[""surfacearea_cone(3, 4) == 75.39822368615503"", ""surfacearea_cone(5, 12) == 282.7433388230814"", ""surfacearea_cone(7, 24) == 703.7167544041137""]","@startuml
start

:Input radius (r) and height (h) of the cone;
if (Are r and h valid numbers?) then (yes)
    :Calculate slant height (l) using formula: l = sqrt(r^2 + h^2);
    :Calculate surface area (A) using formula: A = π * r * (r + l);
    :Return surface area (A);
else (no)
    :Return ""Invalid input: r and h must be positive numbers"";
endif

stop
@enduml"
49,"def specified_element(nums, N):
""""""
Write a function to extract every first or specified element from a given two-dimensional list.
Your code should satisfy these tests:
specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]
specified_element([[10, 20], [30, 40], [50, 60]], 0) == [10, 30, 50]
specified_element([[100, 200, 300], [400, 500, 600]], 2) == [300, 600]
""""""
",specified_element,"def check(candidate):

    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]
","def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    ","[""specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]"", ""specified_element([[10, 20], [30, 40], [50, 60]], 0) == [10, 30, 50]"", ""specified_element([[100, 200, 300], [400, 500, 600]], 2) == [300, 600]""]","@startuml

start
:Extract every first or specified element from a given two-dimensional list;

if (nums is not a list) then (
  :Raise TypeError;
  stop
)

if (N is not an integer) then (
  :Raise TypeError;
  stop
)

if (N < 0 or N >= len(nums)) then (
  :Raise ValueError;
  stop
)

:Initialize result list;
result = [];

:Iterate over each sublist in nums;
for each sublist in nums:
  :Extract the specified element from the sublist;
  element = sublist[N];
  :Add the element to the result list;
  result.append(element);

:Return the result list;
return result;

@enduml"
597,"def find_kth(arr1, arr2, m, n, k):
""""""
Write a function to find kth element from the given two sorted arrays.
Your code should satisfy these tests:
find_kth([1, 3, 8], [2, 4, 9], 3, 3, 3) == 3
find_kth([5, 6, 7], [1, 2, 3], 3, 3, 4) == 5
find_kth([10, 20, 30], [5, 15, 25], 3, 3, 5) == 25
""""""
",find_kth,"def check(candidate):

    assert candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6
    assert candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256
    assert candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8
","def find_kth(arr1, arr2, m, n, k):
	sorted1 = [0] * (m + n)
	i = 0
	j = 0
	d = 0
	while (i < m and j < n):
		if (arr1[i] < arr2[j]):
			sorted1[d] = arr1[i]
			i += 1
		else:
			sorted1[d] = arr2[j]
			j += 1
		d += 1
	while (i < m):
		sorted1[d] = arr1[i]
		d += 1
		i += 1
	while (j < n):
		sorted1[d] = arr2[j]
		d += 1
		j += 1
	return sorted1[k - 1]","[""find_kth([1, 3, 8], [2, 4, 9], 3, 3, 3) == 3"", ""find_kth([5, 6, 7], [1, 2, 3], 3, 3, 4) == 5"", ""find_kth([10, 20, 30], [5, 15, 25], 3, 3, 5) == 25""]","@startuml

title find_kth

start
:find_kth(arr1, arr2, m, n, k);

if (m == 0) then (no elements in arr1)
  :return arr2[k-1];
elseif (n == 0) then (no elements in arr2)
  :return arr1[k-1];
elseif (k == 1) then (find smallest element)
  :return min(arr1[0], arr2[0]);
else
  :i = 0;
  :j = 0;
  :count = 0;

  while (i < m && j < n && count < k-1)
    :if (arr1[i] <= arr2[j])
      :i++;
    else
      :j++;
    endif
    :count++;
  endwhile

  :if (i == m) then (arr1 exhausted)
    :return arr2[j];
  elseif (j == n) then (arr2 exhausted)
    :return arr1[i];
  else
    :return min(arr1[i], arr2[j]);
  endif
endif

@enduml"
634,"def even_Power_Sum(n):
""""""
Write a python function to find the sum of fourth power of first n even natural numbers.
Your code should satisfy these tests:
even_Power_Sum(1) == 16
even_Power_Sum(2) == 272
even_Power_Sum(3) == 1568
""""""
",even_Power_Sum,"def check(candidate):

    assert candidate(2) == 272
    assert candidate(3) == 1568
    assert candidate(4) == 5664
","def even_Power_Sum(n):
    sum = 0;
    for i in range(1,n + 1):
        j = 2*i;
        sum = sum + (j*j*j*j);
    return sum; ","[""even_Power_Sum(1) == 16"", ""even_Power_Sum(2) == 272"", ""even_Power_Sum(3) == 1568""]","@startuml
start

:Input n (number of even natural numbers);
if (n <= 0?) then (yes)
    :Print ""Input must be a positive integer"";
    stop
else (no)
    :Initialize sum = 0;
    :Initialize counter = 1;
    :Initialize even_number = 2;
    while (counter <= n?)
        :Calculate fourth power of even_number;
        :Add result to sum;
        :Increment even_number by 2;
        :Increment counter by 1;
    endwhile
    :Return sum;
endif

stop
@enduml"
881,"def sum_even_odd(list1):
""""""
Write a function to find the sum of first even and odd number of a given list.
Your code should satisfy these tests:
sum_even_odd([2, 4, 6, 8, 10]) == 1
sum_even_odd([1, 3, 5, 7, 9]) == 0
sum_even_odd([1, 2, 3, 4, 5]) == 3
""""""
",sum_even_odd,"def check(candidate):

    assert candidate([1,3,5,7,4,1,6,8])==5
    assert candidate([1,2,3,4,5,6,7,8,9,10])==3
    assert candidate([1,5,7,9,10])==11
","def sum_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even+first_odd)","[""sum_even_odd([2, 4, 6, 8, 10]) == 1"", ""sum_even_odd([1, 3, 5, 7, 9]) == 0"", ""sum_even_odd([1, 2, 3, 4, 5]) == 3""]","@startuml
start

:Input list (list1);
if (Is list1 empty?) then (yes)
    :Return 0;
    stop
else (no)
    :Initialize even_found = False;
    :Initialize odd_found = False;
    :Initialize sum_result = 0;
    :Initialize index = 0;

    while (index < length of list1) is (yes)
        if (list1[index] is even AND even_found is False?) then (yes)
            :sum_result += list1[index];
            :even_found = True;
        else (no)
            if (list1[index] is odd AND odd_found is False?) then (yes)
                :sum_result += list1[index];
                :odd_found = True;
            endif
        endif

        if (even_found AND odd_found) then (yes)
            :Break loop;
        else (no)
            :index += 1;
        endif
    endwhile

    :Return sum_result;
    stop
endif

@enduml"
88,"def freq_count(list1):
""""""
Write a function to get the frequency of the elements in a list.
Your code should satisfy these tests:
freq_count([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}
freq_count(['apple', 'banana', 'apple', 'orange']) == {'apple': 2, 'banana': 1, 'orange': 1}
freq_count([True, False, True, True, False]) == {True: 3, False: 2}
""""""
",freq_count,"def check(candidate):

    assert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})
    assert candidate([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})
    assert candidate([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})
","import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count","[""freq_count([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}"", ""freq_count(['apple', 'banana', 'apple', 'orange']) == {'apple': 2, 'banana': 1, 'orange': 1}"", ""freq_count([True, False, True, True, False]) == {True: 3, False: 2}""]","@startuml

start
:freq_count(list1);

if (list1 is empty) then (no
:return empty dictionary;
)

:freq_dict = {};

for each element in list1 do
:freq_dict[element] = freq_dict.get(element, 0) + 1;

:return freq_dict;

@enduml"
13,"def count_common(words):
""""""
Write a function to count the most common words in a dictionary.
""""""
",count_common,"def check(candidate):

    assert candidate(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',""black"",'pink','green','green','pink','green','pink','white','orange',""orange"",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]
    assert candidate(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]
    assert candidate(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]
","from collections import Counter
def count_common(words):
  word_counts = Counter(words)
  top_four = word_counts.most_common(4)
  return (top_four)
","[""count_common([\""apple\"", \""banana\"", \""apple\"", \""orange\"", \""banana\"", \""apple\""]) == [('apple', 3), ('banana', 2), ('orange', 1)]"", ""count_common([\""cat\"", \""dog\"", \""cat\"", \""bird\"", \""dog\"", \""cat\"", \""dog\""]) == [('cat', 3), ('dog', 3), ('bird', 1)]"", ""count_common([\""red\"", \""blue\"", \""red\"", \""green\"", \""blue\"", \""yellow\"", \""red\""]) == [('red', 3), ('blue', 2), ('green', 1), ('yellow', 1)]"", ""count_common([\""one\"", \""two\"", \""two\"", \""three\"", \""three\"", \""three\"", \""four\""]) == [('three', 3), ('two', 2), ('one', 1), ('four', 1)]"", ""count_common([\""a\"", \""b\"", \""c\"", \""a\"", \""b\"", \""a\"", \""d\"", \""e\"", \""a\""]) == [('a', 4), ('b', 2), ('c', 1), ('d', 1)]""]","@startuml
start
:Input words;
:Initialize an empty dictionary;
if (Words are not empty?) then (Yes)
  :Iterate over words;
  if (Word is in dictionary?) then (Yes)
    :Increment count of word in dictionary;
  else (No)
    :Add word to dictionary with count 1;
  endif
  :Next word;
  :Repeat until all words are processed;
endif
:Convert dictionary to list of tuples;
:Return list of tuples;
stop
@enduml"
28,"def binomial_Coeff(n,k):
""""""
Write a python function to find binomial co-efficient.
Your code should satisfy these tests:
binomial_Coeff(5, 2) == 10
binomial_Coeff(6, 3) == 20
binomial_Coeff(10, 0) == 1
""""""
",binomial_Coeff,"def check(candidate):

    assert candidate(5,2) == 10
    assert candidate(4,3) == 4
    assert candidate(3,2) == 3
","def binomial_Coeff(n,k):
    if k > n :
       return 0
    if k==0 or k ==n :
        return 1
    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ","[""binomial_Coeff(5, 2) == 10"", ""binomial_Coeff(6, 3) == 20"", ""binomial_Coeff(10, 0) == 1""]","@startuml

title binomial_Coeff

start
:n = 5;
:k = 2;

if (n < 0 or k < 0) then (no)
:return 0;
else (yes)
:if (k > n) then (no)
:return 0;
else (yes)
:if (k == 0 or k == n) then (yes)
:return 1;
else (no)
:return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k);
endif;
endif;
endif;

@enduml"
291,"def count_no_of_ways(n, k):
""""""
Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.
Your code should satisfy these tests:
count_no_of_ways(3, 2) == 6
count_no_of_ways(4, 3) == 66
count_no_of_ways(5, 4) == 864
""""""
",count_no_of_ways,"def check(candidate):

    assert candidate(2, 4) == 16
    assert candidate(3, 2) == 6
    assert candidate(4, 4) == 228
","def count_no_of_ways(n, k):
	dp = [0] * (n + 1)
	total = k
	mod = 1000000007
	dp[1] = k
	dp[2] = k * k
	for i in range(3,n+1):
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod
	return dp[n]","[""count_no_of_ways(3, 2) == 6"", ""count_no_of_ways(4, 3) == 66"", ""count_no_of_ways(5, 4) == 864""]","@startuml
start

:Input n (number of posts) and k (number of colors);
if (n <= 0 or k <= 0) then (yes)
    :Return 0 (Invalid input);
    stop
else (no)
    if (n == 1) then (yes)
        :Return k (Only one post);
        stop
    else (no)
        if (n == 2) then (yes)
            :Return k * k (Two posts, any color combination);
            stop
        else (no)
            :Initialize dp array of size n+1;
            :dp[1] = k;
            :dp[2] = k * k;
            :Initialize i = 3;
            while (i <= n) is (yes)
                :dp[i] = (dp[i-1] + dp[i-2]) * (k-1);
                :i = i + 1;
            endwhile (no)
            :Return dp[n];
            stop
        endif
    endif
endif

@enduml"
64,"def subject_marks(subjectmarks):
""""""
Write a function to sort a list of tuples using lambda.
""""""
",subject_marks,"def check(candidate):

    assert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
    assert candidate([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])
    assert candidate([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])
","def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks","[""subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"", ""subject_marks([('History', 75), ('Geography', 85), ('Art', 95), ('Physical Education', 65)]) == [('Physical Education', 65), ('History', 75), ('Geography', 85), ('Art', 95)]"", ""subject_marks([('Chemistry', 78), ('Biology', 88), ('Physics', 98), ('Computer Science', 88)]) == [('Chemistry', 78), ('Biology', 88), ('Computer Science', 88), ('Physics', 98)]""]","@startuml
start

:Input: List of tuples (subjectmarks);
if (Is subjectmarks a list?) then (Yes)
    if (Is the list empty?) then (Yes)
        :Return empty list;
        stop
    else (No)
        :Validate each element in the list;
        if (Are all elements tuples?) then (Yes)
            :Sort the list of tuples using lambda function;
            :Return sorted list;
            stop
        else (No)
            :Raise ValueError(""All elements must be tuples"");
            stop
        endif
    endif
else (No)
    :Raise TypeError(""Input must be a list"");
    stop
endif

@enduml"
816,"def clear_tuple(test_tup):
""""""
Write a function to clear the values of the given tuples.
Your code should satisfy these tests:
clear_tuple((1, 2, 3)) == ()
clear_tuple(('a', 'b', 'c')) == ()
clear_tuple((True, False, True)) == ()
""""""
",clear_tuple,"def check(candidate):

    assert candidate((1, 5, 3, 6, 8)) == ()
    assert candidate((2, 1, 4 ,5 ,6)) == ()
    assert candidate((3, 2, 5, 6, 8)) == ()
","def clear_tuple(test_tup):
  temp = list(test_tup)
  temp.clear()
  test_tup = tuple(temp)
  return (test_tup) ","[""clear_tuple((1, 2, 3)) == ()"", ""clear_tuple(('a', 'b', 'c')) == ()"", ""clear_tuple((True, False, True)) == ()""]","@startuml
start

:Input tuple (test_tup);
if (Is test_tup a valid tuple?) then (yes)
    :Clear the values of the tuple;
    :Return an empty tuple ();
else (no)
    :Handle invalid input (e.g., raise an error or return None);
endif

stop
@enduml"
851,"def Sum_of_Inverse_Divisors(N,Sum):
""""""
Write a python function to find sum of inverse of divisors.
Your code should satisfy these tests:
Sum_of_Inverse_Divisors(6, 12) == 2.0
Sum_of_Inverse_Divisors(10, 18) == 1.8
Sum_of_Inverse_Divisors(15, 24) == 1.6
Sum_of_Inverse_Divisors(20, 42) == 2.1
Sum_of_Inverse_Divisors(25, 31) == 1.24
""""""
",Sum_of_Inverse_Divisors,"def check(candidate):

    assert candidate(6,12) == 2
    assert candidate(9,13) == 1.44
    assert candidate(1,4) == 4
","def Sum_of_Inverse_Divisors(N,Sum):
    ans = float(Sum)*1.0 /float(N);
    return round(ans,2); ","[""Sum_of_Inverse_Divisors(6, 12) == 2.0"", ""Sum_of_Inverse_Divisors(10, 18) == 1.8"", ""Sum_of_Inverse_Divisors(15, 24) == 1.6"", ""Sum_of_Inverse_Divisors(20, 42) == 2.1"", ""Sum_of_Inverse_Divisors(25, 31) == 1.24""]","@startuml
start

:Input N and Sum;
if (N <= 0 or Sum <= 0) then (yes)
    :Print ""Invalid input: N and Sum must be positive integers"";
    stop
else (no)
    :Initialize divisor_list as empty list;
    :Initialize sum_inverse = 0.0;
    :Loop through numbers from 1 to N;
    repeat
        if (N % current_number == 0) then (yes)
            :Add current_number to divisor_list;
        else (no)
        endif
    repeat while (current_number <= N)
    :Check if divisor_list is empty;
    if (divisor_list is empty) then (yes)
        :Print ""No divisors found for N"";
        stop
    else (no)
        :Loop through divisor_list;
        repeat
            :Calculate inverse of current divisor (1 / divisor);
            :Add inverse to sum_inverse;
        repeat while (more divisors in divisor_list)
        :Check if sum_inverse matches Sum;
        if (sum_inverse == Sum) then (yes)
            :Print ""Sum of inverse divisors matches the given Sum"";
        else (no)
            :Print ""Sum of inverse divisors does not match the given Sum"";
        endif
        :Return sum_inverse;
    endif
endif

stop
@enduml"
959,"def Average(lst):
""""""
Write a python function to find the average of a list.
Your code should satisfy these tests:
Average([10, 20, 30, 40, 50]) == 30.0
Average([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5
Average([100, 200, 300]) == 200.0
""""""
",Average,"def check(candidate):

    assert candidate([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75
    assert candidate([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75
    assert candidate([1,2,3]) == 2
","def Average(lst):
    return sum(lst) / len(lst) ","[""Average([10, 20, 30, 40, 50]) == 30.0"", ""Average([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5"", ""Average([100, 200, 300]) == 200.0""]","@startuml

title Average

start
:Average(lst);

if (len(lst) == 0) then (no elements)
:return 0;
else (at least one element)

:sum = 0;
:for i in range(len(lst)):
:sum += lst[i];

:average = sum / len(lst);
:return average;

@enduml"
443,"def largest_neg(list1):
""""""
Write a python function to find the largest negative number from the given list.
Your code should satisfy these tests:
largest_neg([-10, -20, -30, -5]) == -30
largest_neg([0, -1, -2, -3, -4]) == -4
largest_neg([-100, -200, -300, -50]) == -300
""""""
",largest_neg,"def check(candidate):

    assert candidate([1,2,3,-4,-6]) == -6
    assert candidate([1,2,3,-8,-9]) == -9
    assert candidate([1,2,3,4,-1]) == -1
","def largest_neg(list1):
    max = list1[0]
    for x in list1:
        if x < max :
             max = x
    return max","[""largest_neg([-10, -20, -30, -5]) == -30"", ""largest_neg([0, -1, -2, -3, -4]) == -4"", ""largest_neg([-100, -200, -300, -50]) == -300""]","@startuml

title largest_neg

start
:largest_neg(list1);

if (list1 is empty) then (no
:largest_neg = None;
)

else (list1 is not empty)
:largest_neg = list1[0];

for each element in list1
:if (element < largest_neg) then
:largest_neg = element;

end for

:return largest_neg;

@enduml"
478,"def remove_lowercase(str1):
""""""
Write a function to remove lowercase substrings from a given string.
Your code should satisfy these tests:
remove_lowercase(""HelloWorld123"") == ""HW123""
remove_lowercase(""Python3.8"") == ""P3.8""
remove_lowercase(""123abcXYZ"") == ""123XYZ""
""""""
",remove_lowercase,"def check(candidate):

    assert candidate(""PYTHon"")==('PYTH')
    assert candidate(""FInD"")==('FID')
    assert candidate(""STRinG"")==('STRG')
","import re
def remove_lowercase(str1):
 remove_lower = lambda text: re.sub('[a-z]', '', text)
 result =  remove_lower(str1)
 return result","[""remove_lowercase(\""HelloWorld123\"") == \""HW123\"""", ""remove_lowercase(\""Python3.8\"") == \""P3.8\"""", ""remove_lowercase(\""123abcXYZ\"") == \""123XYZ\""""]","@startuml

title remove_lowercase

start
:remove_lowercase(str1);

if (str1 is empty) then (no)
:return str1;
else (yes)
:for each character in str1
:if (character is lowercase) then (no)
:remove character from str1
:end if
:end for
:return str1;

@enduml"
198,"def largest_triangle(a,b):
""""""
Write a function to find the largest triangle that can be inscribed in an ellipse.
Your code should satisfy these tests:
largest_triangle(5, 10) == 3.247595264191645
largest_triangle(3, 6) == 1.948557158514987
largest_triangle(7, 14) == 4.546633369868303
largest_triangle(0, 5) == 0.0
largest_triangle(-1, 10) == -1
""""""
",largest_triangle,"def check(candidate):

    assert candidate(4,2)==10.392304845413264
    assert candidate(5,7)==4.639421805988064
    assert candidate(9,1)==105.2220865598093
","import math
def largest_triangle(a,b):
    if (a < 0 or b < 0):
        return -1
    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);
    return area ","[""largest_triangle(5, 10) == 3.247595264191645"", ""largest_triangle(3, 6) == 1.948557158514987"", ""largest_triangle(7, 14) == 4.546633369868303"", ""largest_triangle(0, 5) == 0.0"", ""largest_triangle(-1, 10) == -1""]","@startuml
start
:Input Validation;
if (a <= 0 or b <= 0) then (return -1)
:Calculate semi-major and semi-minor axes;
:Calculate the area of the ellipse;
:Calculate the area of the largest possible triangle;
:Compare the areas;
if (ellipse area > triangle area) then (return triangle area)
else (return ellipse area)
end
stop
@enduml"
280,"def sequential_search(dlist, item):
""""""
Write a function to search an element in the given array by using sequential search.
Your code should satisfy these tests:
sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)
sequential_search(['a', 'b', 'c', 'd'], 'd') == (True, 3)
sequential_search([10, 20, 30, 40, 50], 25) == (False, 5)
""""""
",sequential_search,"def check(candidate):

    assert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)
    assert candidate([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)
    assert candidate([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)
","def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos","[""sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)"", ""sequential_search(['a', 'b', 'c', 'd'], 'd') == (True, 3)"", ""sequential_search([10, 20, 30, 40, 50], 25) == (False, 5)""]","@startuml

start
:sequential_search(dlist, item);

if (dlist is empty) then (no)
:return (False, 0);

else (yes)
:i = 0;
:while (i < len(dlist)) do
:if (dlist[i] == item) then (yes)
:return (True, i);

:i = i + 1;
:end while
:return (False, len(dlist));

@enduml"
628,"def replace_spaces(string):
""""""
Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.
Your code should satisfy these tests:
replace_spaces(""Mr John Smith    "") == ""Mr%20John%20Smith""
replace_spaces(""Hello World  "") == ""Hello%20World""
replace_spaces(""Python Programming   "") == ""Python%20Programming""
""""""
",replace_spaces,"def check(candidate):

    assert candidate(""My Name is Dawood"") == 'My%20Name%20is%20Dawood'
    assert candidate(""I am a Programmer"") == 'I%20am%20a%20Programmer'
    assert candidate(""I love Coding"") == 'I%20love%20Coding'
","MAX=1000;
def replace_spaces(string):
  string=string.strip()
  i=len(string)
  space_count=string.count(' ')
  new_length = i + space_count*2
  if new_length > MAX:
    return -1
  index = new_length-1
  string=list(string)
  for f in range(i-2, new_length-2):
    string.append('0')
  for j in range(i-1, 0, -1):
    if string[j] == ' ':
      string[index] = '0'
      string[index-1] = '2'
      string[index-2] = '%'
      index=index-3
    else:
      string[index] = string[j]
      index -= 1
  return ''.join(string)","[""replace_spaces(\""Mr John Smith    \"") == \""Mr%20John%20Smith\"""", ""replace_spaces(\""Hello World  \"") == \""Hello%20World\"""", ""replace_spaces(\""Python Programming   \"") == \""Python%20Programming\""""]","@startuml
start

:Input string;
if (Is the input string empty?) then (yes)
    :Return empty string;
    stop
else (no)
    :Trim trailing spaces from the string;
    :Initialize an empty result string;
    :Iterate through each character in the string;

    while (Is there a next character?) is (yes)
        if (Is the current character a space?) then (yes)
            :Append '%20' to the result string;
        else (no)
            :Append the current character to the result string;
        endif
    endwhile (no)

    :Return the result string;
    stop
endif

@enduml"
494,"def binary_to_integer(test_tup):
""""""
Write a function to convert the given binary tuple to integer.
Your code should satisfy these tests:
binary_to_integer((1, 0, 1)) == '5'
binary_to_integer((1, 1, 1, 1)) == '15'
binary_to_integer((0, 0, 0, 1)) == '1'
""""""
",binary_to_integer,"def check(candidate):

    assert candidate((1, 1, 0, 1, 0, 0, 1)) == '105'
    assert candidate((0, 1, 1, 0, 0, 1, 0, 1)) == '101'
    assert candidate((1, 1, 0, 1, 0, 1)) == '53'
","def binary_to_integer(test_tup):
  res = int("""".join(str(ele) for ele in test_tup), 2)
  return (str(res)) ","[""binary_to_integer((1, 0, 1)) == '5'"", ""binary_to_integer((1, 1, 1, 1)) == '15'"", ""binary_to_integer((0, 0, 0, 1)) == '1'""]","@startuml
start

:Input binary tuple (test_tup);
if (Is test_tup a valid tuple?) then (yes)
    :Initialize result = 0;
    :Initialize power = len(test_tup) - 1;
    :Iterate over each bit in test_tup;
    repeat
        :Multiply current bit by 2^power;
        :Add the result to the total;
        :Decrement power by 1;
    repeat while (More bits to process?) is (yes) not (no)
    :Convert the result to a string;
    :Return the result as a string;
else (no)
    :Handle invalid input (e.g., raise an error or return None);
endif

stop
@enduml"
231,"def max_sum(tri, n):
""""""
Write a function to find the maximum sum in the given right triangle of numbers.
Your code should satisfy these tests:
max_sum([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]], 4) == 23
max_sum([[1], [2, 3], [4, 5, 6]], 3) == 10
max_sum([[10], [1, 2], [3, 4, 5], [6, 7, 8, 9]], 4) == 26
""""""
",max_sum,"def check(candidate):

    assert candidate([[1], [2,1], [3,3,2]], 3) == 6
    assert candidate([[1], [1, 2], [4, 1, 12]], 3) == 15
    assert candidate([[2], [3,2], [13,23,12]], 3) == 28
","def max_sum(tri, n):
	if n > 1:
		tri[1][1] = tri[1][1]+tri[0][0]
		tri[1][0] = tri[1][0]+tri[0][0]
	for i in range(2, n):
		tri[i][0] = tri[i][0] + tri[i-1][0]
		tri[i][i] = tri[i][i] + tri[i-1][i-1]
		for j in range(1, i):
			if tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]:
				tri[i][j] = tri[i][j] + tri[i-1][j-1]
			else:
				tri[i][j] = tri[i][j]+tri[i-1][j]
	return (max(tri[n-1]))","[""max_sum([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]], 4) == 23"", ""max_sum([[1], [2, 3], [4, 5, 6]], 3) == 10"", ""max_sum([[10], [1, 2], [3, 4, 5], [6, 7, 8, 9]], 4) == 26""]","@startuml

start
:max_sum(tri, n);

if (n == 1) then (yes)
:return tri[0][0];
else (no)
:max_sum_helper(tri, n, 0, 0);

end if

:return max_sum_helper(tri, n, 0, 0);

stop

@enduml"
360,"def get_carol(n):
""""""
Write a function to find the n’th carol number.
Your code should satisfy these tests:
get_carol(3) == 47
get_carol(4) == 223
get_carol(5) == 959
""""""
",get_carol,"def check(candidate):

    assert candidate(2) == 7
    assert candidate(4) == 223
    assert candidate(5) == 959
","def get_carol(n):
	result = (2**n) - 1
	return result * result - 2","[""get_carol(3) == 47"", ""get_carol(4) == 223"", ""get_carol(5) == 959""]","@startuml
start
:Input n;
if (n <= 0) then (
    :Error:;
    stop
)
if (n == 1) then (
    :return 1;
    stop
)
if (n == 2) then (
    :return 2;
    stop
)
:let a = 1;
:let b = 2;
:let c = 0;
loop n-2 times
    :c = a + b;
    :a = b;
    :b = c;
end
:return c;
stop
@enduml"
951,"def max_similar_indices(test_list1, test_list2):
""""""
Write a function to find the maximum of similar indices in two lists of tuples.
Your code should satisfy these tests:
max_similar_indices([(1, 2), (3, 4)], [(2, 1), (4, 3)]) == [(2, 2), (4, 4)]
max_similar_indices([(5, 6), (7, 8)], [(6, 5), (8, 7)]) == [(6, 6), (8, 8)]
max_similar_indices([(0, 0), (9, 9)], [(1, 1), (8, 8)]) == [(1, 1), (9, 9)]
""""""
",max_similar_indices,"def check(candidate):

    assert candidate([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]
    assert candidate([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]
    assert candidate([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]
","def max_similar_indices(test_list1, test_list2):
  res = [(max(x[0], y[0]), max(x[1], y[1]))
   for x, y in zip(test_list1, test_list2)]
  return (res) ","[""max_similar_indices([(1, 2), (3, 4)], [(2, 1), (4, 3)]) == [(2, 2), (4, 4)]"", ""max_similar_indices([(5, 6), (7, 8)], [(6, 5), (8, 7)]) == [(6, 6), (8, 8)]"", ""max_similar_indices([(0, 0), (9, 9)], [(1, 1), (8, 8)]) == [(1, 1), (9, 9)]""]","@startuml
start
:test_list1 = [(1, 2), (3, 4)]
:test_list2 = [(2, 1), (4, 3)]
:result = []
:max_len = max(len(test_list1), len(test_list2))
repeat while ($i < max_len)
    :if test_list1[$i] == test_list2[$i]:
    :result.append(test_list1[$i])
    :else:
    :result.append((0, 0))
    :endif
    $i = $i + 1
endrepeat
:return result
stop
@enduml"
914,"def is_Two_Alter(s):
""""""
Write a python function to check whether the given string is made up of two alternating characters or not.
Your code should satisfy these tests:
is_Two_Alter(""abab"") == True
is_Two_Alter(""aabb"") == False
is_Two_Alter(""abcabc"") == False
""""""
",is_Two_Alter,"def check(candidate):

    assert candidate(""abab"") == True
    assert candidate(""aaaa"") == False
    assert candidate(""xyz"") == False
","def is_Two_Alter(s):
    for i in range (len( s) - 2) :
        if (s[i] != s[i + 2]) :
            return False
    if (s[0] == s[1]):
        return False
    return True","[""is_Two_Alter(\""abab\"") == True"", ""is_Two_Alter(\""aabb\"") == False"", ""is_Two_Alter(\""abcabc\"") == False""]","@startuml
start

:Input string s;
if (Is the length of s less than 2?) then (yes)
    :Return False;
    stop
else (no)
    :Set first character as char1;
    :Set second character as char2;
    if (Are char1 and char2 the same?) then (yes)
        :Return False;
        stop
    else (no)
        :Initialize index i = 2;
        while (i < length of s?) is (yes)
            if (Is s[i] equal to char1?) then (yes)
                :Increment i by 1;
                if (Is s[i] equal to char2?) then (yes)
                    :Increment i by 1;
                else (no)
                    :Return False;
                    stop
                endif
            else (no)
                :Return False;
                stop
            endif
        endwhile (no)
        :Return True;
        stop
    endif
endif

@enduml"
406,"def find_Parity(x):
""""""
Write a python function to find the parity of a given number.
Your code should satisfy these tests:
find_Parity(0) == ""Even Parity""
find_Parity(7) == ""Odd Parity""
find_Parity(255) == ""Even Parity""
""""""
",find_Parity,"def check(candidate):

    assert candidate(12) == ""Even Parity""
    assert candidate(7) == ""Odd Parity""
    assert candidate(10) == ""Even Parity""
","def find_Parity(x):
    y = x ^ (x >> 1);
    y = y ^ (y >> 2);
    y = y ^ (y >> 4);
    y = y ^ (y >> 8);
    y = y ^ (y >> 16);
    if (y & 1):
        return (""Odd Parity"");
    return (""Even Parity""); ","[""find_Parity(0) == \""Even Parity\"""", ""find_Parity(7) == \""Odd Parity\"""", ""find_Parity(255) == \""Even Parity\""""]","@startuml

start
:find_Parity(x);
if (x % 2 == 0) then (even)
:return ""Even Parity"";
else (odd)
:return ""Odd Parity"";
endif

@enduml"
115,"def empty_dit(list1):
""""""
Write a function to check whether all dictionaries in a list are empty or not.
Your code should satisfy these tests:
empty_dit([{}, {}, {}]) == True
empty_dit([{}, {'key': 'value'}, {}]) == False
empty_dit([{'a': 1}, {'b': 2}, {'c': 3}]) == False
""""""
",empty_dit,"def check(candidate):

    assert candidate([{},{},{}])==True
    assert candidate([{1,2},{},{}])==False
    assert candidate({})==True
","def empty_dit(list1):
 empty_dit=all(not d for d in list1)
 return empty_dit","[""empty_dit([{}, {}, {}]) == True"", ""empty_dit([{}, {'key': 'value'}, {}]) == False"", ""empty_dit([{'a': 1}, {'b': 2}, {'c': 3}]) == False""]","@startuml

title empty_dit

start
:empty_dit(list1);

if (len(list1) == 0) then (no elements)
:return True;
else (at least one element)

:for each dictionary in list1;
:check if dictionary is empty;
:if empty then (empty dictionary)
:return False;
:else (non-empty dictionary)
:continue;

:end for;
:return True;

@enduml"
485,"def is_palindrome(n):
""""""
Write a function to find the largest palindromic number in the given array.
Your code should satisfy these tests:
is_palindrome(121) == True
is_palindrome(12321) == True
is_palindrome(12345) == False
is_palindrome(1) == True
is_palindrome(1234321) == True
""""""
",is_palindrome,"def check(candidate):

    assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545
    assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5
    assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9
","def is_palindrome(n) :
	divisor = 1
	while (n / divisor >= 10) :
		divisor *= 10
	while (n != 0) :
		leading = n // divisor
		trailing = n % 10
		if (leading != trailing) :
			return False
		n = (n % divisor) // 10
		divisor = divisor // 100
	return True
def largest_palindrome(A, n) :
	A.sort()
	for i in range(n - 1, -1, -1) :
		if (is_palindrome(A[i])) :
			return A[i]
	return -1","[""is_palindrome(121) == True"", ""is_palindrome(12321) == True"", ""is_palindrome(12345) == False"", ""is_palindrome(1) == True"", ""is_palindrome(1234321) == True""]","@startuml
start
:Input: n
:Check if n is None or negative;
if (n is None or n < 0) then (return False)
elseif (n == 0) then (return True)
endif
:Convert n to string;
:Reverse the string;
:Compare the reversed string with the original string;
if (n == reversed_string) then (return True)
else (return False)
endif
stop
@enduml"
185,"def parabola_focus(a, b, c):
""""""
Write a function to find the focus of a parabola.
Your code should satisfy these tests:
parabola_focus(1, -2, 1) == (1.0, 0.25)
parabola_focus(2, 4, -6) == (-1.0, -7.875)
parabola_focus(3, 0, 2) == (0.0, 2.0833333333333335)
""""""
",parabola_focus,"def check(candidate):

    assert candidate(5,3,2)==(-0.3, 1.6)
    assert candidate(9,8,4)==(-0.4444444444444444, 2.25)
    assert candidate(2,4,6)==(-1.0, 4.125)
","def parabola_focus(a, b, c):
  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))
  return focus","[""parabola_focus(1, -2, 1) == (1.0, 0.25)"", ""parabola_focus(2, 4, -6) == (-1.0, -7.875)"", ""parabola_focus(3, 0, 2) == (0.0, 2.0833333333333335)""]","@startuml
start
:Input Validation;
if (a == 0) then (b == 0) then (c == 0) then (Return ""Invalid coefficients"")
elseif (b**2 == 4*a*c) then (Return ""Parabola has a vertical vertex"")
elseif (4*a*c == (b**2)) then (Return ""Parabola has a horizontal vertex"")
else (Return ""Parabola has a saddle vertex"")
endif
:Calculate x-coordinate of focus;
x1 = (-b / (2 * a))
:Calculate y-coordinate of focus;
x2 = ((4*a*c - b**2) / (4 * a))
:Return focus;
return (x1, x2)
stop
@enduml"
707,"def count_Set_Bits(n):
""""""
Write a python function to count the total set bits from 1 to n.
Your code should satisfy these tests:
count_Set_Bits(0) == 0
count_Set_Bits(5) == 7
count_Set_Bits(10) == 17
""""""
",count_Set_Bits,"def check(candidate):

    assert candidate(16) == 33
    assert candidate(2) == 2
    assert candidate(14) == 28
","def count_Set_Bits(n) :
    n += 1;
    powerOf2 = 2;
    cnt = n // 2;
    while (powerOf2 <= n) :
        totalPairs = n // powerOf2;
        cnt += (totalPairs // 2) * powerOf2;
        if (totalPairs & 1) :
            cnt += (n % powerOf2)
        else :
            cnt += 0
        powerOf2 <<= 1;
    return cnt;  ","[""count_Set_Bits(0) == 0"", ""count_Set_Bits(5) == 7"", ""count_Set_Bits(10) == 17""]","@startuml

start

:Initialize total_set_bits = 0;
:Initialize i = 1;

while (i <= n) is (Check i <= n?)
  :Increment total_set_bits by count_set_bits(i);
  :Increment i by 1;
endwhile (No)

:Return total_set_bits;

stop

@enduml"
680,"def increasing_trend(nums):
""""""
Write a python function to check whether a sequence of numbers has an increasing trend or not.
Your code should satisfy these tests:
increasing_trend([1, 2, 3, 4, 5]) == True
increasing_trend([5, 4, 3, 2, 1]) == False
increasing_trend([1, 1, 2, 3, 4]) == True
""""""
",increasing_trend,"def check(candidate):

    assert candidate([1,2,3,4]) == True
    assert candidate([4,3,2,1]) == False
    assert candidate([0,1,4,9]) == True
","def increasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False","[""increasing_trend([1, 2, 3, 4, 5]) == True"", ""increasing_trend([5, 4, 3, 2, 1]) == False"", ""increasing_trend([1, 1, 2, 3, 4]) == True""]","@startuml
start

:Input list of numbers (nums);
:Initialize index i = 0;

while (i < len(nums) - 1?) is (yes)
    if (nums[i] <= nums[i+1]?) then (yes)
        :Increment i (i = i + 1);
    else (no)
        :Return False;
        stop
    endif
endwhile

:Return True;
stop

@enduml"
719,"def text_match(text):
""""""
Write a function that matches a string that has an a followed by zero or more b's.
Your code should satisfy these tests:
text_match(""aab"") == ""Found a match!""
text_match(""cb"") == ""Not matched!""
text_match(""abb"") == ""Found a match!""
text_match(""abbb"") == ""Found a match!""
text_match(""abc"") == ""Found a match!""
""""""
",text_match,"def check(candidate):

    assert candidate(""ac"")==('Found a match!')
    assert candidate(""dc"")==('Not matched!')
    assert candidate(""abba"")==('Found a match!')
","import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","[""text_match(\""aab\"") == \""Found a match!\"""", ""text_match(\""cb\"") == \""Not matched!\"""", ""text_match(\""abb\"") == \""Found a match!\"""", ""text_match(\""abbb\"") == \""Found a match!\"""", ""text_match(\""abc\"") == \""Found a match!\""""]","@startuml

start
:text_match(text);

if (text.startswith(""a"")) then (yes)
:found_match = True;
else (no)
:found_match = False;
endif

if (found_match) then (yes)
:return ""Found a match!"";
else (no)
:return ""Not matched!"";
endif

@enduml"
85,"def surfacearea_sphere(r):
""""""
Write a function to find the surface area of a sphere.
Your code should satisfy these tests:
surfacearea_sphere(1) == 12.566370614359172
surfacearea_sphere(3) == 113.09733552923255
surfacearea_sphere(5) == 314.1592653589793
""""""
",surfacearea_sphere,"def check(candidate):

    assert candidate(10)==1256.6370614359173
    assert candidate(15)==2827.4333882308138
    assert candidate(20)==5026.548245743669
","import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea","[""surfacearea_sphere(1) == 12.566370614359172"", ""surfacearea_sphere(3) == 113.09733552923255"", ""surfacearea_sphere(5) == 314.1592653589793""]","@startuml

title Surface Area of a Sphere

start
:Input Radius;

if (radius <= 0) then (no)
:Invalid Input;
stop
else (yes)
:Valid Input;

:Calculate Surface Area;

:Output Surface Area;

stop

@enduml"
475,"def sort_counter(dict1):
""""""
Write a function to sort counter by value.
""""""
",sort_counter,"def check(candidate):

    assert candidate({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]
    assert candidate({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]
    assert candidate({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]
","from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter","[""sort_counter({'apple': 4, 'banana': 2, 'orange': 5}) == [('orange', 5), ('apple', 4), ('banana', 2)]"", ""sort_counter({'car': 1, 'bike': 3, 'truck': 2}) == [('bike', 3), ('truck', 2), ('car', 1)]"", ""sort_counter({'dog': 10, 'cat': 10, 'fish': 5}) == [('dog', 10), ('cat', 10), ('fish', 5)]""]","@startuml
start

:Input dictionary (dict1);
if (Is dict1 a valid dictionary?) then (yes)
    if (Is dict1 empty?) then (yes)
        :Return empty dictionary;
    else (no)
        :Convert dictionary items to a list of tuples;
        :Sort the list of tuples by value in descending order;
        :Convert the sorted list back to a dictionary;
        :Return the sorted dictionary;
    endif
else (no)
    :Raise TypeError(""Input must be a dictionary"");
endif

stop
@enduml"
728,"def sum_list(lst1,lst2):
""""""
Write a function to sum elements in two lists.
Your code should satisfy these tests:
sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]
sum_list([0, 0, 0], [1, 1, 1]) == [1, 1, 1]
sum_list([-1, -2, -3], [1, 2, 3]) == [0, 0, 0]
""""""
",sum_list,"def check(candidate):

    assert candidate([10,20,30],[15,25,35])==[25,45,65]
    assert candidate([1,2,3],[5,6,7])==[6,8,10]
    assert candidate([15,20,30],[15,45,75])==[30,65,105]
","def sum_list(lst1,lst2):
  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))]
  return res_list","[""sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]"", ""sum_list([0, 0, 0], [1, 1, 1]) == [1, 1, 1]"", ""sum_list([-1, -2, -3], [1, 2, 3]) == [0, 0, 0]""]","@startuml
start

:Input two lists lst1 and lst2;
:Check if both lists are of the same length;
if (Are lst1 and lst2 of the same length?) then (yes)
    :Initialize an empty list result;
    :Initialize index i = 0;
    while (i < length of lst1) is (yes)
        :Add lst1[i] and lst2[i];
        :Append the sum to result;
        :Increment i by 1;
    endwhile (no)
    :Return result;
else (no)
    :Raise ValueError(""Lists must be of the same length"");
endif

stop
@enduml"
500,"def concatenate_elements(list):
""""""
Write a function to concatenate all elements of the given list into a string.
Your code should satisfy these tests:
concatenate_elements(['a', 'b', 'c']) == '  a b c'
concatenate_elements(['hello', 'world']) == '  hello world'
concatenate_elements(['1', '2', '3', '4']) == '  1 2 3 4'
concatenate_elements(['apple', 'banana', 'cherry']) == '  apple banana cherry'
concatenate_elements(['Python', 'is', 'awesome']) == '  Python is awesome'
""""""
",concatenate_elements,"def check(candidate):

    assert candidate(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'
    assert candidate([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'
    assert candidate([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'
","def concatenate_elements(list):
  ans = ' '
  for i in list:
    ans = ans+ ' '+i
  return (ans) ","[""concatenate_elements(['a', 'b', 'c']) == '  a b c'"", ""concatenate_elements(['hello', 'world']) == '  hello world'"", ""concatenate_elements(['1', '2', '3', '4']) == '  1 2 3 4'"", ""concatenate_elements(['apple', 'banana', 'cherry']) == '  apple banana cherry'"", ""concatenate_elements(['Python', 'is', 'awesome']) == '  Python is awesome'""]","@startuml
start
:Input: list
if (list is empty?) then (yes)
    :Return empty string
    stop
endif
:Initialize result as empty string
:For each element in list
    :Add a space to result
    :Add element to result
    :Add a space to result
    :End for loop
:Return result
stop
@enduml"
462,"def combinations_list(list1):
""""""
Write a function to find all possible combinations of the elements of a given list.
Your code should satisfy these tests:
combinations_list([1, 2]) == [[], [1], [2], [2, 1]]
combinations_list([1]) == [[], [1]]
combinations_list([]) == [[]]
combinations_list([1, 2, 3]) == [[], [1], [2], [2, 1], [3], [3, 1], [3, 2], [3, 2, 1]]
combinations_list([1, 2, 3, 4]) == [[], [1], [2], [2, 1], [3], [3, 1], [3, 2], [3, 2, 1], [4], [4, 1], [4, 2], [4, 2, 1], [4, 3], [4, 3, 1], [4, 3, 2], [4, 3, 2, 1]]
""""""
",combinations_list,"def check(candidate):

    assert candidate(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]
    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]
    assert candidate(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]
","def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result","[""combinations_list([1, 2]) == [[], [1], [2], [2, 1]]"", ""combinations_list([1]) == [[], [1]]"", ""combinations_list([]) == [[]]"", ""combinations_list([1, 2, 3]) == [[], [1], [2], [2, 1], [3], [3, 1], [3, 2], [3, 2, 1]]"", ""combinations_list([1, 2, 3, 4]) == [[], [1], [2], [2, 1], [3], [3, 1], [3, 2], [3, 2, 1], [4], [4, 1], [4, 2], [4, 2, 1], [4, 3], [4, 3, 1], [4, 3, 2], [4, 3, 2, 1]]""]","@startuml
start
:input list;
if (list is empty?) then (yes)
    :return [[]];
else
    :list1 = first element of list;
    :list2 = rest of list;
    :combinations = combinations_list(list2);
    :result = [[]];
    :for each combination in combinations do
        :result.append(combination);
        :result.append([list1] + combination);
    :end for;
    :return result;
endif
stop
@enduml"
930,"def text_match(text):
""""""
Write a function that matches a string that has an a followed by zero or more b's by using regex.
Your code should satisfy these tests:
text_match(""ab"") == 'Found a match!'
text_match(""a"") == 'Found a match!'
text_match(""ac"") == 'Found a match!'
text_match(""abb"") == 'Found a match!'
text_match(""abc"") == 'Found a match!'
""""""
",text_match,"def check(candidate):

    assert candidate(""msb"") == 'Not matched!'
    assert candidate(""a0c"") == 'Found a match!'
    assert candidate(""abbc"") == 'Found a match!'
","import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return ('Found a match!')
        else:
                return ('Not matched!')","[""text_match(\""ab\"") == 'Found a match!'"", ""text_match(\""a\"") == 'Found a match!'"", ""text_match(\""ac\"") == 'Found a match!'"", ""text_match(\""abb\"") == 'Found a match!'"", ""text_match(\""abc\"") == 'Found a match!'""]","@startuml
start
:input text;
if (text contains ""a"") then (yes)
  if (text ends with ""b"") then (yes)
    :return 'Found a match!';
    stop
  else (no)
    :return 'No match found.';
    stop
  endif
else (no)
  :return 'No match found.';
  stop
endif
@enduml"
464,"def check_value(dict, n):
""""""
Write a function to check if all values are same in a dictionary.
Your code should satisfy these tests:
check_value({'a': 5, 'b': 5, 'c': 5}, 5) == True
check_value({'x': 1, 'y': 2, 'z': 1}, 1) == False
check_value({'key1': 10, 'key2': 10}, 10) == True
""""""
",check_value,"def check(candidate):

    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False
    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True
    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False
","def check_value(dict, n):
    result = all(x == n for x in dict.values())
    return result","[""check_value({'a': 5, 'b': 5, 'c': 5}, 5) == True"", ""check_value({'x': 1, 'y': 2, 'z': 1}, 1) == False"", ""check_value({'key1': 10, 'key2': 10}, 10) == True""]","@startuml

title Check if all values are same in a dictionary

start
:Check if dictionary is empty;
if (dict is empty) then (return False)

:Check if dictionary has only one key;
if (dict has only one key) then (return True)

:Check if all values are same;
foreach (key, value in dict) {
    if (value != dict[key]) then (return False)
}

:Return True;
return True

@enduml"
196,"def remove_tuples(test_list, K):
""""""
Write a function to remove all the tuples with length k.
Your code should satisfy these tests:
remove_tuples([(1, 2), (3, 4, 5), (6, 7, 8, 9)], 2) == [(3, 4, 5), (6, 7, 8, 9)]
remove_tuples([(10, 20), (30,), (40, 50, 60)], 1) == [(10, 20), (40, 50, 60)]
remove_tuples([(1, 2, 3), (4, 5), (6,)], 3) == [(4, 5), (6,)]
""""""
",remove_tuples,"def check(candidate):

    assert candidate([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]
    assert candidate([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]
    assert candidate([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]
","def remove_tuples(test_list, K):
  res = [ele for ele in test_list if len(ele) != K]
  return (res) ","[""remove_tuples([(1, 2), (3, 4, 5), (6, 7, 8, 9)], 2) == [(3, 4, 5), (6, 7, 8, 9)]"", ""remove_tuples([(10, 20), (30,), (40, 50, 60)], 1) == [(10, 20), (40, 50, 60)]"", ""remove_tuples([(1, 2, 3), (4, 5), (6,)], 3) == [(4, 5), (6,)]""]","@startuml

title remove_tuples

start
:remove_tuples(test_list, K);

if (len(test_list) == 0) then (no
:return test_list;
)

if (K < 0) then (invalid
:raise ValueError(""K must be non-negative"");
)

if (K > len(test_list[0])) then (invalid
:raise ValueError(""K must be less than or equal to the length of the tuples in test_list"");
)

loop for each tuple in test_list
:if (len(tuple) == K) then (remove
:continue;
)

:result.append(tuple);

end for

:return result;

@enduml"
524,"def max_sum_increasing_subsequence(arr, n):
""""""
Write a function to find the sum of maximum increasing subsequence of the given array.
Your code should satisfy these tests:
max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106
max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22
max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10
""""""
",max_sum_increasing_subsequence,"def check(candidate):

    assert candidate([1, 101, 2, 3, 100, 4, 5], 7) == 106
    assert candidate([3, 4, 5, 10], 4) == 22
    assert candidate([10, 5, 4, 3], 4) == 10
","def max_sum_increasing_subsequence(arr, n):
	max = 0
	msis = [0 for x in range(n)]
	for i in range(n):
		msis[i] = arr[i]
	for i in range(1, n):
		for j in range(i):
			if (arr[i] > arr[j] and
				msis[i] < msis[j] + arr[i]):
				msis[i] = msis[j] + arr[i]
	for i in range(n):
		if max < msis[i]:
			max = msis[i]
	return max","[""max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106"", ""max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22"", ""max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10""]","@startuml
start
:Initialize variables sum and dp array;
:dp[0] = arr[0];
:sum = arr[0];
:for i = 1 to n-1
if (arr[i] > arr[j] for 0 ≤ j < i)
  :dp[i] = max(dp[i], dp[j] + arr[i]);
endif
:sum = max(sum, dp[i]);
endfor
:Return sum;
stop
@enduml"
61,"def count_Substrings(s,n):
""""""
Write a python function to count number of substrings with the sum of digits equal to their length.
Your code should satisfy these tests:
count_Substrings(""1210"", 4) == 4
count_Substrings(""111"", 3) == 6
count_Substrings(""000"", 3) == 0
""""""
",count_Substrings,"def check(candidate):

    assert candidate('112112',6) == 6
    assert candidate('111',3) == 6
    assert candidate('1101112',7) == 12
","from collections import defaultdict
def count_Substrings(s,n):
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count","[""count_Substrings(\""1210\"", 4) == 4"", ""count_Substrings(\""111\"", 3) == 6"", ""count_Substrings(\""000\"", 3) == 0""]","@startuml
start

:Input string s and integer n;
if (Is s a valid string and n == len(s)?) then (yes)
    :Initialize count = 0;
    :Initialize i = 0;
    while (i < n) is (yes)
        :Initialize sum_digits = 0;
        :Initialize j = i;
        while (j < n) is (yes)
            :Add integer value of s[j] to sum_digits;
            if (sum_digits == (j - i + 1)) then (yes)
                :Increment count by 1;
            else (no)
            endif
            :Increment j by 1;
        endwhile (no)
        :Increment i by 1;
    endwhile (no)
    :Return count;
else (no)
    :Return ""Invalid input"";
endif

stop
@enduml"
229,"def re_arrange_array(arr, n):
""""""
Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.
Your code should satisfy these tests:
re_arrange_array([-1, 2, -3, 4, 5, -6], 6) == [-1, -3, -6, 4, 5, 2]
re_arrange_array([-5, 7, -8, 9, -10], 5) == [-5, -8, -10, 9, 7]
re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]
re_arrange_array([-1, -2, -3, -4, -5], 5) == [-1, -2, -3, -4, -5]
re_arrange_array([0, -1, 2, -3, 4], 5) == [-1, -3, 2, 0, 4]
""""""
",re_arrange_array,"def check(candidate):

    assert candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]
    assert candidate([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]
    assert candidate([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]
","def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr","[""re_arrange_array([-1, 2, -3, 4, 5, -6], 6) == [-1, -3, -6, 4, 5, 2]"", ""re_arrange_array([-5, 7, -8, 9, -10], 5) == [-5, -8, -10, 9, 7]"", ""re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]"", ""re_arrange_array([-1, -2, -3, -4, -5], 5) == [-1, -2, -3, -4, -5]"", ""re_arrange_array([0, -1, 2, -3, 4], 5) == [-1, -3, 2, 0, 4]""]","@startuml
start
:Input: arr, n
:Output: arr

:Initialize two empty lists, negatives and positives
:For each element in arr:
    :If element is less than 0:
        :Add element to negatives
    :Else:
        :Add element to positives
    :End if
:End for

:Concatenate negatives and positives
:Set arr to the concatenated list
:Return arr

stop
@enduml"
785,"def tuple_str_int(test_str):
""""""
Write a function to convert tuple string to integer tuple.
Your code should satisfy these tests:
tuple_str_int(""(1, 2, 3)"") == (1, 2, 3)
tuple_str_int(""(10, 20, 30, 40)"") == (10, 20, 30, 40)
tuple_str_int(""(100, 200, 300, 400, 500)"") == (100, 200, 300, 400, 500)
""""""
",tuple_str_int,"def check(candidate):

    assert candidate(""(7, 8, 9)"") == (7, 8, 9)
    assert candidate(""(1, 2, 3)"") == (1, 2, 3)
    assert candidate(""(4, 5, 6)"") == (4, 5, 6)
","def tuple_str_int(test_str):
  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))
  return (res) ","[""tuple_str_int(\""(1, 2, 3)\"") == (1, 2, 3)"", ""tuple_str_int(\""(10, 20, 30, 40)\"") == (10, 20, 30, 40)"", ""tuple_str_int(\""(100, 200, 300, 400, 500)\"") == (100, 200, 300, 400, 500)""]","@startuml
start

:Input tuple string (test_str);
:Remove parentheses from test_str;
:Split the string by commas to get individual number strings;
:Initialize an empty list (int_list);

while (For each number string in the list) is (not empty)
  :Convert the number string to an integer;
  :Append the integer to int_list;
endwhile

:Convert the list of integers to a tuple (int_tuple);
:Return int_tuple;

stop
@enduml"
832,"def extract_max(input):
""""""
Write a function to extract the maximum numeric value from a string by using regex.
Your code should satisfy these tests:
extract_max(""abc123xyz456"") == 456
extract_max(""100a200b300"") == 300
""""""
",extract_max,"def check(candidate):

    assert candidate('100klh564abc365bg') == 564
    assert candidate('hello300how546mer231') == 546
    assert candidate('its233beenalong343journey234') == 343
","import re
def extract_max(input):
	numbers = re.findall('\d+',input)
	numbers = map(int,numbers)
	return max(numbers)","[""extract_max(\""abc123xyz456\"") == 456"", ""extract_max(\""100a200b300\"") == 300""]","@startuml

title Extract Maximum Numeric Value from String

start
:Extract Maximum Numeric Value from String;

if (input is not a string) then (no)
  :Raise TypeError;
else (yes)
  :Initialize regex pattern;
  :Match numeric values using regex;
  :Extract maximum numeric value;
  :Return maximum numeric value;
endif

@enduml"
455,"def check_monthnumb_number(monthnum2):
""""""
Write a function to check whether the given month number contains 31 days or not.
Your code should satisfy these tests:
check_monthnumb_number(1) == True
check_monthnumb_number(4) == False
check_monthnumb_number(11) == False
""""""
",check_monthnumb_number,"def check(candidate):

    assert candidate(5)==True
    assert candidate(2)==False
    assert candidate(6)==False
","def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False","[""check_monthnumb_number(1) == True"", ""check_monthnumb_number(4) == False"", ""check_monthnumb_number(11) == False""]","@startuml
start

:Input month number (monthnum2);
if (monthnum2 is valid (1 <= monthnum2 <= 12)?) then (yes)
    if (monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12) then (yes)
        :Return True;
    else (no)
        :Return False;
    endif
else (no)
    :Return ""Invalid month number"";
endif

stop
@enduml"
632,"def move_zero(num_list):
""""""
Write a python function to move all zeroes to the end of the given list.
Your code should satisfy these tests:
move_zero([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]
move_zero([0, 0, 1, 0, 4, 5]) == [1, 4, 5, 0, 0, 0]
move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
""""""
",move_zero,"def check(candidate):

    assert candidate([1,0,2,0,3,4]) == [1,2,3,4,0,0]
    assert candidate([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]
    assert candidate([0,1,0,1,1]) == [1,1,1,0,0]
","def move_zero(num_list):
    a = [0 for i in range(num_list.count(0))]
    x = [ i for i in num_list if i != 0]
    x.extend(a)
    return (x)","[""move_zero([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]"", ""move_zero([0, 0, 1, 0, 4, 5]) == [1, 4, 5, 0, 0, 0]"", ""move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]""]","@startuml
start
:Input List;
if (Is the list empty?) then (yes)
    :Return the list as it is;
    stop
endif
:Initialize two empty lists, one for zeros and one for non-zeros;
:Iterate through the list;
if (Is the current element zero?) then (yes)
    :Add the current element to the list of zeros;
else
    :Add the current element to the list of non-zeros;
endif
:End of iteration;
:Combine the list of non-zeros and the list of zeros;
:Return the combined list;
stop
@enduml"
588,"def big_diff(nums):
""""""
Write a python function to find the difference between largest and smallest value in a given array.
Your code should satisfy these tests:
big_diff([10, 3, 5, 6]) == 7
big_diff([1, 2, 3, 4, 5]) == 4
big_diff([-10, -20, -30, -40]) == 30
""""""
",big_diff,"def check(candidate):

    assert candidate([1,2,3,4]) == 3
    assert candidate([4,5,12]) == 8
    assert candidate([9,2,3]) == 7
","def big_diff(nums):
     diff= max(nums)-min(nums)
     return diff","[""big_diff([10, 3, 5, 6]) == 7"", ""big_diff([1, 2, 3, 4, 5]) == 4"", ""big_diff([-10, -20, -30, -40]) == 30""]","@startuml
start

:Input array (nums);
if (Is nums empty?) then (yes)
  :Return error or handle empty array case;
  stop
else (no)
  :Initialize min_val = nums[0];
  :Initialize max_val = nums[0];
  :Initialize i = 1;

  while (i < length of nums) is (yes)
    if (nums[i] < min_val) then (yes)
      :Update min_val = nums[i];
    else (no)
    endif
    if (nums[i] > max_val) then (yes)
      :Update max_val = nums[i];
    else (no)
    endif
    :Increment i by 1;
  endwhile (no)

  :Calculate difference = max_val - min_val;
  :Return difference;
endif

stop
@enduml"
335,"def ap_sum(a,n,d):
""""""
Write a function to find the sum of arithmetic progression.
Your code should satisfy these tests:
ap_sum(1, 5, 2) == 25
ap_sum(3, 4, 3) == 30
ap_sum(0, 6, 5) == 75
""""""
",ap_sum,"def check(candidate):

    assert candidate(1,5,2)==25
    assert candidate(2,6,4)==72
    assert candidate(1,4,5)==34
","def ap_sum(a,n,d):
  total = (n * (2 * a + (n - 1) * d)) / 2
  return total","[""ap_sum(1, 5, 2) == 25"", ""ap_sum(3, 4, 3) == 30"", ""ap_sum(0, 6, 5) == 75""]","@startuml
start

:Input a, n, d;
if (Are inputs valid?) then (yes)
  :Initialize sum = 0;
  :Initialize i = 0;
  while (i < n) is (yes)
    :sum = sum + (a + i * d);
    :i = i + 1;
  endwhile (no)
  :Return sum;
else (no)
  :Return ""Invalid input"";
endif

stop
@enduml"
228,"def all_Bits_Set_In_The_Given_Range(n,l,r):
""""""
Write a python function to check whether all the bits are unset in the given range or not.
Your code should satisfy these tests:
all_Bits_Set_In_The_Given_Range(15, 2, 4) == False
all_Bits_Set_In_The_Given_Range(7, 1, 2) == False
all_Bits_Set_In_The_Given_Range(8, 3, 5) == False
all_Bits_Set_In_The_Given_Range(10, 1, 3) == False
all_Bits_Set_In_The_Given_Range(31, 2, 5) == False
""""""
",all_Bits_Set_In_The_Given_Range,"def check(candidate):

    assert candidate(4,1,2) == True
    assert candidate(17,2,4) == True
    assert candidate(39,4,6) == False
","def all_Bits_Set_In_The_Given_Range(n,l,r):
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))
    new_num = n & num
    if (new_num == 0):
        return True
    return False","[""all_Bits_Set_In_The_Given_Range(15, 2, 4) == False"", ""all_Bits_Set_In_The_Given_Range(7, 1, 2) == False"", ""all_Bits_Set_In_The_Given_Range(8, 3, 5) == False"", ""all_Bits_Set_In_The_Given_Range(10, 1, 3) == False"", ""all_Bits_Set_In_The_Given_Range(31, 2, 5) == False""]","@startuml
start
:Input Validation;
if (n > 0 and l >= 0 and r >= 0 and l <= r) then
  (Check if all bits are set in the given range)
  :Convert n to binary;
  :Iterate through the binary representation from l to r;
  :Check if all bits are set (1);
  :If all bits are set, return False;
  :Else, return True;
else
  :Return error message;
endif
:Return result;
stop
@enduml"
87,"def merge_dictionaries_three(dict1,dict2, dict3):
""""""
Write a function to merge three dictionaries into a single expression.
""""""
",merge_dictionaries_three,"def check(candidate):

    assert candidate({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{ ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}
    assert candidate({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{""L"":""lavender"",""B"":""Blue""})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}
    assert candidate({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" },{""L"":""lavender"",""B"":""Blue""},{ ""G"": ""Green"", ""W"": ""White"" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}
","import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict","[""merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'d': 5}) == {'a': 1, 'b': 2, 'c': 4, 'd': 5}"", ""merge_dictionaries_three({'x': 10}, {'y': 20, 'z': 30}, {'x': 15, 'y': 25}) == {'x': 10, 'y': 20, 'z': 30}"", ""merge_dictionaries_three({}, {'a': 1, 'b': 2}, {'c': 3}) == {'a': 1, 'b': 2, 'c': 3}"", ""merge_dictionaries_three({'key1': 'value1'}, {'key2': 'value2'}, {'key3': 'value3'}) == {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}"", ""merge_dictionaries_three({'a': 1}, {'a': 2, 'b': 3}, {'b': 4, 'c': 5}) == {'a': 1, 'b': 3, 'c': 5}""]","@startuml
start
:Input: dict1, dict2, dict3;
:Output: merged_dict;
:Initialize: merged_dict = {};
:For each key in dict1:
    :If key is not in merged_dict:
        :Add key and value from dict1 to merged_dict;
    :Else:
        :Continue;
    :End if;
:End for;
:For each key in dict2:
    :If key is not in merged_dict:
        :Add key and value from dict2 to merged_dict;
    :Else:
        :Continue;
    :End if;
:End for;
:For each key in dict3:
    :If key is not in merged_dict:
        :Add key and value from dict3 to merged_dict;
    :Else:
        :Continue;
    :End if;
:End for;
:Return: merged_dict;
stop
@enduml"
515,"def modular_sum(arr, n, m):
""""""
Write a function to check if there is a subset with sum divisible by m.
Your code should satisfy these tests:
modular_sum([1, 2, 3], 3, 5) == True
modular_sum([0, 0, 0], 3, 3) == True
modular_sum([4, 6, 8], 3, 10) == True
modular_sum([10, 20, 30, 40], 4, 5) == True
modular_sum([7, 14, 21], 3, 3) == True
""""""
",modular_sum,"def check(candidate):

    assert candidate([3, 1, 7, 5], 4, 6) == True
    assert candidate([1, 7], 2, 5) == False
    assert candidate([1, 6], 2, 5) == False
","def modular_sum(arr, n, m):
	if (n > m):
		return True
	DP = [False for i in range(m)]
	for i in range(n):
		if (DP[0]):
			return True
		temp = [False for i in range(m)]
		for j in range(m):
			if (DP[j] == True):
				if (DP[(j + arr[i]) % m] == False):
					temp[(j + arr[i]) % m] = True
		for j in range(m):
			if (temp[j]):
				DP[j] = True
		DP[arr[i] % m] = True
	return DP[0]","[""modular_sum([1, 2, 3], 3, 5) == True"", ""modular_sum([0, 0, 0], 3, 3) == True"", ""modular_sum([4, 6, 8], 3, 10) == True"", ""modular_sum([10, 20, 30, 40], 4, 5) == True"", ""modular_sum([7, 14, 21], 3, 3) == True""]","@startuml
start
:Input: arr, n, m;
:Check if arr is not empty and n > 0 and m > 0;
if (arr is empty or n <= 0 or m <= 0) then (Error)
:Calculate sum of arr;
:Check if sum mod m equals 0;
if (sum mod m == 0) then (True)
else (False)
endif
endif
stop
@enduml"
960,"def get_noOfways(n):
""""""
Write a function to solve tiling problem.
Your code should satisfy these tests:
get_noOfways(2) == 1
get_noOfways(3) == 2
get_noOfways(4) == 3
""""""
",get_noOfways,"def check(candidate):

    assert candidate(4)==3
    assert candidate(3)==2
    assert candidate(5)==5
","def get_noOfways(n):
    if (n == 0):
        return 0;
    if (n == 1):
        return 1;
    return get_noOfways(n - 1) + get_noOfways(n - 2);","[""get_noOfways(2) == 1"", ""get_noOfways(3) == 2"", ""get_noOfways(4) == 3""]","@startuml
start

:Input n (size of the board);
if (n <= 0?) then (yes)
    :Return 0 (invalid input);
    stop
else (no)
    if (n == 1?) then (yes)
        :Return 1 (only one way to tile);
        stop
    else (no)
        if (n == 2?) then (yes)
            :Return 1 (only one way to tile);
            stop
        else (no)
            :Initialize dp[0] = 1, dp[1] = 1;
            :Initialize i = 2;
            while (i <= n?) is (yes)
                :dp[i] = dp[i-1] + dp[i-2];
                :i = i + 1;
            endwhile (no)
            :Return dp[n];
            stop
        endif
    endif
endif

@enduml"
325,"def get_Min_Squares(n):
""""""
Write a python function to find the minimum number of squares whose sum is equal to a given number.
Your code should satisfy these tests:
get_Min_Squares(12) == 3
get_Min_Squares(13) == 2
get_Min_Squares(25) == 1
""""""
",get_Min_Squares,"def check(candidate):

    assert candidate(6) == 3
    assert candidate(2) == 2
    assert candidate(4) == 1
","def get_Min_Squares(n):
    if n <= 3:
        return n;
    res = n
    for x in range(1,n + 1):
        temp = x * x;
        if temp > n:
            break
        else:
            res = min(res,1 + get_Min_Squares(n  - temp))
    return res;","[""get_Min_Squares(12) == 3"", ""get_Min_Squares(13) == 2"", ""get_Min_Squares(25) == 1""]","@startuml
start

:Input number n;
if (n <= 0) then (yes)
    :Return 0 (Invalid input);
    stop
else (no)
    :Initialize dp array of size n+1 with infinity;
    :Set dp[0] = 0;
    :Loop through numbers from 1 to n (i);
    :For each i, loop through squares (j*j <= i);
    :Update dp[i] = min(dp[i], dp[i - j*j] + 1);
    :End loop;
    :End loop;
    :Return dp[n];
endif

stop
@enduml"
232,"def larg_nnum(list1,n):
""""""
Write a function to get the n largest items from a dataset.
Your code should satisfy these tests:
larg_nnum([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]
larg_nnum([10, 20, 30, 40, 50], 2) == [50, 40]
larg_nnum([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]
""""""
",larg_nnum,"def check(candidate):

    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]
    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]
    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]
","import heapq
def larg_nnum(list1,n):
 largest=heapq.nlargest(n,list1)
 return largest","[""larg_nnum([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [9, 6, 5]"", ""larg_nnum([10, 20, 30, 40, 50], 2) == [50, 40]"", ""larg_nnum([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]""]","@startuml

title larg_nnum

start
:larg_nnum(list1, n);

if (n > 0) then (yes)
  :sort list1 in descending order;
  :get the first n elements of list1;
  :return the sorted list;
else (no)
  :return an empty list;
endif

@enduml"
383,"def even_bit_toggle_number(n):
""""""
Write a python function to toggle all odd bits of a given number.
Your code should satisfy these tests:
even_bit_toggle_number(0) == 0
even_bit_toggle_number(1) == 0
even_bit_toggle_number(10) == 15
even_bit_toggle_number(255) == 170
even_bit_toggle_number(123) == 46
""""""
",even_bit_toggle_number,"def check(candidate):

    assert candidate(10) == 15
    assert candidate(20) == 1
    assert candidate(30) == 11
","def even_bit_toggle_number(n) :
    res = 0; count = 0; temp = n
    while(temp > 0 ) :
        if (count % 2 == 0) :
            res = res | (1 << count)
        count = count + 1
        temp >>= 1
    return n ^ res ","[""even_bit_toggle_number(0) == 0"", ""even_bit_toggle_number(1) == 0"", ""even_bit_toggle_number(10) == 15"", ""even_bit_toggle_number(255) == 170"", ""even_bit_toggle_number(123) == 46""]","@startuml
start
:Input: n;
if (n = 0) then (true)
  :return 0;
elseif (n = 1) then (true)
  :return 0;
else (false)
  :toggle odd bits of n;
endif
stop
@enduml"
466,"def find_peak_util(arr, low, high, n):
""""""
Write a function to find the peak element in the given array.
Your code should satisfy these tests:
find_peak_util([1, 3, 20, 4, 1, 0], 0, 5, 6) == 2
find_peak_util([10, 20, 15, 2, 23, 90, 67], 0, 6, 7) == 1
find_peak_util([5, 10, 20, 15], 0, 3, 4) == 2
find_peak_util([1, 2, 3, 4, 5], 0, 4, 5) == 4
find_peak_util([100, 80, 60, 50, 20], 0, 4, 5) == 0
""""""
",find_peak_util,"def check(candidate):

    assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2
    assert find_peak([2, 3, 4, 5, 6], 5) == 4
    assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5
","def find_peak_util(arr, low, high, n):
	mid = low + (high - low)/2
	mid = int(mid)
	if ((mid == 0 or arr[mid - 1] <= arr[mid]) and
		(mid == n - 1 or arr[mid + 1] <= arr[mid])):
		return mid
	elif (mid > 0 and arr[mid - 1] > arr[mid]):
		return find_peak_util(arr, low, (mid - 1), n)
	else:
		return find_peak_util(arr, (mid + 1), high, n)
def find_peak(arr, n):
	return find_peak_util(arr, 0, n - 1, n) ","[""find_peak_util([1, 3, 20, 4, 1, 0], 0, 5, 6) == 2"", ""find_peak_util([10, 20, 15, 2, 23, 90, 67], 0, 6, 7) == 1"", ""find_peak_util([5, 10, 20, 15], 0, 3, 4) == 2"", ""find_peak_util([1, 2, 3, 4, 5], 0, 4, 5) == 4"", ""find_peak_util([100, 80, 60, 50, 20], 0, 4, 5) == 0""]","@startuml
start
:Input: arr, low, high, n;
:Check if low <= high:
if (low <= high) then (true)
    :mid = low + (high - low) / 2:
    :Check if mid is peak:
    if (mid == 0 or arr[mid] >= arr[mid-1] and (mid == n-1 or arr[mid] >= arr[mid+1])) then (true)
        :Return mid:
    else (false)
    endif
    :Check if arr[mid] is less than arr[mid+1]:
    if (arr[mid] < arr[mid+1]) then (true)
        :low = mid + 1:
        :Repeat:
    else (false)
        :high = mid - 1:
        :Repeat:
    endif
else (false)
    :Return -1:
endif
stop
@enduml"
6,"def is_Power_Of_Two(x):
""""""
Write a python function to check whether the two numbers differ at one bit position only or not.
Your code should satisfy these tests:
is_Power_Of_Two(1) == True
is_Power_Of_Two(2) == True
is_Power_Of_Two(3) == False
is_Power_Of_Two(16) == True
is_Power_Of_Two(0) == False
""""""
",is_Power_Of_Two,"def check(candidate):

    assert differ_At_One_Bit_Pos(13,9) == True
    assert differ_At_One_Bit_Pos(15,8) == False
    assert differ_At_One_Bit_Pos(2,4) == False
","def is_Power_Of_Two (x):
    return x and (not(x & (x - 1)))
def differ_At_One_Bit_Pos(a,b):
    return is_Power_Of_Two(a ^ b)","[""is_Power_Of_Two(1) == True"", ""is_Power_Of_Two(2) == True"", ""is_Power_Of_Two(3) == False"", ""is_Power_Of_Two(16) == True"", ""is_Power_Of_Two(0) == False""]","@startuml
start

:Input number x;
if (x <= 0?) then (yes)
    :Return False;
    stop
else (no)
    :Calculate bitwise AND of x and (x - 1);
    if (result == 0?) then (yes)
        :Return True;
        stop
    else (no)
        :Return False;
        stop
    endif
endif

@enduml"
69,"def is_sublist(l, s):
""""""
Write a function to check whether a list contains the given sublist or not.
Your code should satisfy these tests:
is_sublist([1, 2, 3, 4, 5], [2, 3]) == True
is_sublist([10, 20, 30, 40], [10, 20, 30, 40, 50]) == False
is_sublist(['a', 'b', 'c'], ['b', 'c']) == True
""""""
",is_sublist,"def check(candidate):

    assert candidate([2,4,3,5,7],[3,7])==False
    assert candidate([2,4,3,5,7],[4,3])==True
    assert candidate([2,4,3,5,7],[1,6])==False
","def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1
				if n == len(s):
					sub_set = True
	return sub_set","[""is_sublist([1, 2, 3, 4, 5], [2, 3]) == True"", ""is_sublist([10, 20, 30, 40], [10, 20, 30, 40, 50]) == False"", ""is_sublist(['a', 'b', 'c'], ['b', 'c']) == True""]","@startuml

title is_sublist

start
:is_sublist(l, s);

if (l is not None and s is not None) then (yes)
  :Check if l is a list;
  if (l is a list) then (yes)
    :Check if s is a list;
    if (s is a list) then (yes)
      :Check if s is a sublist of l;
      if (s is a sublist of l) then (yes)
        :Return True;
      else (no)
        :Return False;
      endif
    else (no)
      :Raise TypeError;
    endif
  else (no)
    :Raise TypeError;
  endif
else (no)
  :Raise TypeError;
endif

stop

@enduml"
513,"def add_str(test_tup, K):
""""""
Write a function to convert tuple into list by adding the given string after every element.
Your code should satisfy these tests:
add_str(('apple', 'banana'), 'fruit') == ['apple', 'fruit', 'banana', 'fruit']
add_str(('car', 'bike'), 'vehicle') == ['car', 'vehicle', 'bike', 'vehicle']
add_str(('red', 'blue'), 'color') == ['red', 'color', 'blue', 'color']
""""""
",add_str,"def check(candidate):

    assert candidate((5, 6, 7, 4, 9) , ""FDF"") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']
    assert candidate((7, 8, 9, 10) , ""PF"") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']
    assert candidate((11, 14, 12, 1, 4) , ""JH"") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']
","def add_str(test_tup, K):
  res = [ele for sub in test_tup for ele in (sub, K)]
  return (res) ","[""add_str(('apple', 'banana'), 'fruit') == ['apple', 'fruit', 'banana', 'fruit']"", ""add_str(('car', 'bike'), 'vehicle') == ['car', 'vehicle', 'bike', 'vehicle']"", ""add_str(('red', 'blue'), 'color') == ['red', 'color', 'blue', 'color']""]","@startuml
start

:Input tuple (test_tup) and string (K);
:Initialize an empty list (result_list);

:Iterate over each element in test_tup;
if (Is there another element in test_tup?) then (yes)
  :Append current element to result_list;
  :Append string K to result_list;
  :Move to the next element;
else (no)
  :End iteration;
endif

:Return result_list;
stop

@enduml"
722,"def filter_data(students,h,w):
""""""
Write a function to filter the height and width of students which are stored in a dictionary.
""""""
",filter_data,"def check(candidate):

    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}
    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}
    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}
","def filter_data(students,h,w):
    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}
    return result    ","[""filter_data({'Alice': [165, 60], 'Bob': [175, 70], 'Charlie': [180, 65]}, 170, 68) == {'Bob': [175, 70]}"", ""filter_data({'David': [160, 55], 'Eve': [162, 58], 'Frank': [170, 60]}, 165, 60) == {'Frank': [170, 60]}"", ""filter_data({'Grace': [155, 45], 'Heidi': [150, 40], 'Ivan': [145, 35]}, 150, 40) == {'Grace': [155, 45], 'Heidi': [150, 40]}""]","@startuml

title filter_data

start
:filter_data(students, h, w);

if (students is not empty) then (yes)
  :filter students by height and width;
  :return filtered students;
else (no)
  :return empty list;
endif

@enduml"
775,"def odd_position(nums):
""""""
Write a python function to check whether every odd index contains odd numbers of a given list.
Your code should satisfy these tests:
odd_position([0, 1, 2, 3, 4]) == True
odd_position([1, 3, 5, 7, 9]) == False
odd_position([2, 4, 6, 8, 10]) == False
""""""
",odd_position,"def check(candidate):

    assert candidate([2,1,4,3,6,7,6,3]) == True
    assert candidate([4,1,2]) == True
    assert candidate([1,2,3]) == False
","def odd_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))","[""odd_position([0, 1, 2, 3, 4]) == True"", ""odd_position([1, 3, 5, 7, 9]) == False"", ""odd_position([2, 4, 6, 8, 10]) == False""]","@startuml
start

:Input list (nums);
if (Is nums a list?) then (yes)
    if (Is nums empty?) then (yes)
        :Return False;
        stop
    else (no)
        :Initialize index (i) = 1;
        while (i < length of nums?) is (yes)
            if (Is nums[i] an integer?) then (yes)
                if (Is nums[i] odd?) then (yes)
                    :Increment index (i += 2);
                else (no)
                    :Return False;
                    stop
                endif
            else (no)
                :Return False;
                stop
            endif
        endwhile
        :Return True;
        stop
    endif
else (no)
    :Return False;
    stop
endif

stop
@enduml"
179,"def is_num_keith(x):
""""""
Write a function to find if the given number is a keith number or not.
Your code should satisfy these tests:
is_num_keith(197) == True
is_num_keith(145) == False
is_num_keith(742) == True
""""""
",is_num_keith,"def check(candidate):

    assert candidate(14) == True
    assert candidate(12) == False
    assert candidate(197) == True
","def is_num_keith(x):
	terms = []
	temp = x
	n = 0
	while (temp > 0):
		terms.append(temp % 10)
		temp = int(temp / 10)
		n+=1
	terms.reverse()
	next_term = 0
	i = n
	while (next_term < x):
		next_term = 0
		for j in range(1,n+1):
			next_term += terms[i - j]
		terms.append(next_term)
		i+=1
	return (next_term == x) ","[""is_num_keith(197) == True"", ""is_num_keith(145) == False"", ""is_num_keith(742) == True""]","@startuml
start
:Input x;
if (x > 0) then (true)
  :Convert x to string;
  :Reverse the string;
  :Convert reversed string to list of digits;
  :Initialize a list to store digits;
  :Add digits to the list;
  if (x is a single digit) then (true)
    :Add x to the list;
  else (false)
    :While x is greater than 0;
    :Add the last digit of x to the list;
    :Remove the last digit from x;
  endif
  :Initialize a variable to store the sum;
  :While the sum is less than x;
  :Sort the list in ascending order;
  :Calculate the sum of the list;
  :If sum is equal to x;
  :Return True;
  :Else;
  :Return False;
  endif
else (false)
  :Return False;
endif
stop
@enduml"
579,"def find_dissimilar(test_tup1, test_tup2):
""""""
Write a function to find the dissimilar elements in the given two tuples.
Your code should satisfy these tests:
find_dissimilar((1, 2, 3), (2, 3, 4)) == (1, 4)
find_dissimilar((5, 6, 7), (7, 8, 9)) == (5, 6, 8, 9)
find_dissimilar(('a', 'b', 'c'), ('b', 'c', 'd')) == ('d', 'a')
find_dissimilar(('x', 'y'), ('y', 'z')) == ('z', 'x')
find_dissimilar(('apple', 'banana'), ('banana', 'cherry')) == ('cherry', 'apple')
""""""
",find_dissimilar,"def check(candidate):

    assert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)
    assert candidate((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)
    assert candidate((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)
","def find_dissimilar(test_tup1, test_tup2):
  res = tuple(set(test_tup1) ^ set(test_tup2))
  return (res) ","[""find_dissimilar((1, 2, 3), (2, 3, 4)) == (1, 4)"", ""find_dissimilar((5, 6, 7), (7, 8, 9)) == (5, 6, 8, 9)"", ""find_dissimilar(('a', 'b', 'c'), ('b', 'c', 'd')) == ('d', 'a')"", ""find_dissimilar(('x', 'y'), ('y', 'z')) == ('z', 'x')"", ""find_dissimilar(('apple', 'banana'), ('banana', 'cherry')) == ('cherry', 'apple')""]","@startuml

start
:find_dissimilar(test_tup1, test_tup2);

if (test_tup1 == test_tup2) then (yes)
:return empty tuple;
else (no)
:create a set of all elements in test_tup1;
:create a set of all elements in test_tup2;
:find the difference between the two sets;
:return the difference as a tuple;

@enduml"
264,"def dog_age(h_age):
""""""
Write a function to calculate a dog's age in dog's years.
Your code should satisfy these tests:
dog_age(1) == 10.5
dog_age(5) == 33
dog_age(10) == 53
""""""
",dog_age,"def check(candidate):

    assert candidate(12)==61
    assert candidate(15)==73
    assert candidate(24)==109
","def dog_age(h_age):
 if h_age < 0:
 	exit()
 elif h_age <= 2:
	 d_age = h_age * 10.5
 else:
	 d_age = 21 + (h_age - 2)*4
 return d_age","[""dog_age(1) == 10.5"", ""dog_age(5) == 33"", ""dog_age(10) == 53""]","@startuml
start

:Input human age (h_age);
if (h_age <= 0) then (yes)
    :Invalid age (must be > 0);
    stop
else (no)
    if (h_age <= 2) then (yes)
        :Calculate dog age as h_age * 10.5;
    else (no)
        :Calculate dog age as 21 + (h_age - 2) * 4;
    endif
    :Return dog age;
endif

stop
@enduml"
559,"def max_sub_array_sum(a, size):
""""""
Write a function to find the largest sum of contiguous subarray in the given array.
Your code should satisfy these tests:
max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6
max_sub_array_sum([1], 1) == 1
max_sub_array_sum([-1, -2, -3, -4], 4) == 0
""""""
",max_sub_array_sum,"def check(candidate):

    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7
    assert candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8
    assert candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10
","def max_sub_array_sum(a, size):
  max_so_far = 0
  max_ending_here = 0
  for i in range(0, size):
    max_ending_here = max_ending_here + a[i]
    if max_ending_here < 0:
      max_ending_here = 0
    elif (max_so_far < max_ending_here):
      max_so_far = max_ending_here
  return max_so_far","[""max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6"", ""max_sub_array_sum([1], 1) == 1"", ""max_sub_array_sum([-1, -2, -3, -4], 4) == 0""]","@startuml

title max_sub_array_sum

start
:max_sub_array_sum(a, size);

if (size < 1) then (no subarray)
:return 0;

end if

:max_sum = 0;
:current_sum = 0;

for (i = 0; i < size; i++) do
:current_sum = current_sum + a[i];

if (current_sum < 0) then (subarray ends)
:current_sum = 0;

end if

if (current_sum > max_sum) then (new max subarray)
:max_sum = current_sum;

end if

end for

:return max_sum;

@enduml"
575,"def count_no(A,N,L,R):
""""""
Write a python function to find nth number in a sequence which is not a multiple of a given number.
Your code should satisfy these tests:
count_no(3, 2, 1, 10) == 2
count_no(5, 3, 5, 20) == 8
count_no(7, 4, 1, 50) == 4
""""""
",count_no,"def check(candidate):

    assert candidate(2,3,1,10) == 5
    assert candidate(3,6,4,20) == 11
    assert candidate(5,10,4,20) == 16
","def count_no (A,N,L,R):
    count = 0
    for i in range (L,R + 1):
        if (i % A != 0):
            count += 1
        if (count == N):
            break
    return (i) ","[""count_no(3, 2, 1, 10) == 2"", ""count_no(5, 3, 5, 20) == 8"", ""count_no(7, 4, 1, 50) == 4""]","@startuml
start

:Input A, N, L, R;
:Initialize count = 0;
:Initialize current_number = L;

while (current_number <= R?) is (yes)
    if (current_number % A != 0?) then (yes)
        :Increment count by 1;
        if (count == N?) then (yes)
            :Return current_number;
            stop
        else (no)
            :Increment current_number by 1;
        endif
    else (no)
        :Increment current_number by 1;
    endif
endwhile

:Return -1 (if no such number found);
stop
@enduml"
55,"def tn_gp(a,n,r):
""""""
Write a function to find t-nth term of geometric series.
Your code should satisfy these tests:
tn_gp(2, 3, 4) == 32
tn_gp(5, 5, 2) == 80
tn_gp(1, 10, 3) == 19683
""""""
",tn_gp,"def check(candidate):

    assert candidate(1,5,2)==16
    assert candidate(1,5,4)==256
    assert candidate(2,6,3)==486
","import math
def tn_gp(a,n,r):
  tn = a * (math.pow(r, n - 1))
  return tn","[""tn_gp(2, 3, 4) == 32"", ""tn_gp(5, 5, 2) == 80"", ""tn_gp(1, 10, 3) == 19683""]","@startuml
start

:Input parameters: a, n, r;
if (a is valid and n is valid and r is valid?) then (yes)
    :Calculate t-nth term using formula: a * (r ** (n - 1));
    :Return the result;
else (no)
    :Raise ValueError: ""Invalid input parameters"";
endif

stop
@enduml"
128,"def long_words(n, str):
""""""
Write a function to shortlist words that are longer than n from a given list of words.
Your code should satisfy these tests:
long_words(3, ""hello world this is a test"") == ['hello', 'world', 'this', 'test']
long_words(4, ""python programming is fun"") == ['python', 'programming']
long_words(2, ""a quick brown fox"") == ['quick', 'brown', 'fox']
""""""
",long_words,"def check(candidate):

    assert candidate(3,""python is a programming language"")==['python','programming','language']
    assert candidate(2,""writing a program"")==['writing','program']
    assert candidate(5,""sorting list"")==['sorting']
","def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	","[""long_words(3, \""hello world this is a test\"") == ['hello', 'world', 'this', 'test']"", ""long_words(4, \""python programming is fun\"") == ['python', 'programming']"", ""long_words(2, \""a quick brown fox\"") == ['quick', 'brown', 'fox']""]","@startuml

title Long Words

start
:Input: n, str;

if (n <= 0) then (no)
:Invalid input;
:Return empty list;

else (yes)
:Split str into words;
:Filter words longer than n;
:Return filtered list;

end if

@enduml"
302,"def set_Bit_Number(n):
""""""
Write a python function to find the most significant bit number which is also a set bit.
Your code should satisfy these tests:
set_Bit_Number(1) == 1
set_Bit_Number(5) == 4
set_Bit_Number(17) == 16
""""""
",set_Bit_Number,"def check(candidate):

    assert candidate(6) == 4
    assert candidate(10) == 8
    assert candidate(18) == 16
","def set_Bit_Number(n):
    if (n == 0):
        return 0;
    msb = 0;
    n = int(n / 2);
    while (n > 0):
        n = int(n / 2);
        msb += 1;
    return (1 << msb)","[""set_Bit_Number(1) == 1"", ""set_Bit_Number(5) == 4"", ""set_Bit_Number(17) == 16""]","@startuml
start
:Initialize n;
if (n is 0) then (yes)
  :Return 0;
else (no)
  :bit_num = 1;
  while (bit_num <= n) is (true)
    :bit_num = bit_num << 1;
  endwhile (false)
  :Return bit_num >> 1;
endif
stop
@enduml"
503,"def add_consecutive_nums(nums):
""""""
Write a function to add consecutive numbers of a given list.
Your code should satisfy these tests:
add_consecutive_nums([1, 2, 3, 4]) == [3, 5, 7]
add_consecutive_nums([10, 20, 30]) == [30, 50]
add_consecutive_nums([5, 5, 5, 5, 5]) == [10, 10, 10, 10]
""""""
",add_consecutive_nums,"def check(candidate):

    assert candidate([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]
    assert candidate([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]
","def add_consecutive_nums(nums):
    result = [b+a for a, b in zip(nums[:-1], nums[1:])]
    return result","[""add_consecutive_nums([1, 2, 3, 4]) == [3, 5, 7]"", ""add_consecutive_nums([10, 20, 30]) == [30, 50]"", ""add_consecutive_nums([5, 5, 5, 5, 5]) == [10, 10, 10, 10]""]","@startuml

start
:add_consecutive_nums(nums);

if (nums.length == 0) then (no)
:return [];

else (yes)
:result = [];

for (i = 0; i < nums.length; i++) do
:result.append(nums[i] + nums[i + 1]);

end for

:return result;

@enduml"
516,"def radix_sort(nums):
""""""
Write a function to sort a list of elements using radix sort.
Your code should satisfy these tests:
radix_sort([170, 45, 75, 90, 802, 24, 2, 66]) == [2, 24, 45, 66, 75, 90, 170, 802]
radix_sort([34, 7, 23, 32, 5, 62]) == [5, 7, 23, 32, 34, 62]
radix_sort([123, 456, 789, 101, 202, 303]) == [101, 123, 202, 303, 456, 789]
""""""
",radix_sort,"def check(candidate):

    assert candidate([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]
    assert candidate([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]
    assert candidate([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]
","def radix_sort(nums):
    RADIX = 10
    placement = 1
    max_digit = max(nums)

    while placement < max_digit:
      buckets = [list() for _ in range( RADIX )]
      for i in nums:
        tmp = int((i / placement) % RADIX)
        buckets[tmp].append(i)
      a = 0
      for b in range( RADIX ):
        buck = buckets[b]
        for i in buck:
          nums[a] = i
          a += 1
      placement *= RADIX
    return nums","[""radix_sort([170, 45, 75, 90, 802, 24, 2, 66]) == [2, 24, 45, 66, 75, 90, 170, 802]"", ""radix_sort([34, 7, 23, 32, 5, 62]) == [5, 7, 23, 32, 34, 62]"", ""radix_sort([123, 456, 789, 101, 202, 303]) == [101, 123, 202, 303, 456, 789]""]","@startuml

start
:radix_sort(nums);
if (nums is empty) then (
  stop
)

:sort_digits(nums);
if (nums is sorted) then (
  stop
)

:sort_digits(nums);

stop

@enduml"
895,"def max_sum_subseq(A):
""""""
Write a function to find the maximum sum of subsequences of given array with no adjacent elements.
Your code should satisfy these tests:
max_sum_subseq([3, 2, 5, 10, 7]) == 15
max_sum_subseq([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 11
max_sum_subseq([1, 2, 3, 4, 5]) == 9
""""""
",max_sum_subseq,"def check(candidate):

    assert candidate([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26
    assert candidate([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28
    assert candidate([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44
","def max_sum_subseq(A):
    n = len(A)
    if n == 1:
        return A[0]
    look_up = [None] * n
    look_up[0] = A[0]
    look_up[1] = max(A[0], A[1])
    for i in range(2, n):
        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])
        look_up[i] = max(look_up[i], A[i])
    return look_up[n - 1]","[""max_sum_subseq([3, 2, 5, 10, 7]) == 15"", ""max_sum_subseq([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 11"", ""max_sum_subseq([1, 2, 3, 4, 5]) == 9""]","@startuml
start
:Input array A;
if (A is empty?) then (yes)
    :Return 0;
    stop
endif
:Initialize two variables, incl and excl to A[0];
:Set incl to max of (incl, excl);
:Set excl to temp;
repeat for i from 1 to length of A
    :temp = max of (incl, excl);
    :incl = excl + A[i];
    :excl = temp;
    :Set incl to max of (incl, excl);
    :Set excl to temp;
end repeat
:Return incl;
stop
@enduml"
589,"def perfect_squares(a, b):
""""""
Write a function to find perfect squares between two given numbers.
Your code should satisfy these tests:
perfect_squares(1, 10) == [1, 4, 9]
perfect_squares(11, 25) == [16, 25]
perfect_squares(26, 50) == [36, 49]
""""""
",perfect_squares,"def check(candidate):

    assert candidate(1,30)==[1, 4, 9, 16, 25]
    assert candidate(50,100)==[64, 81, 100]
    assert candidate(100,200)==[100, 121, 144, 169, 196]
","def perfect_squares(a, b):
    lists=[]
    for i in range (a,b+1):
        j = 1;
        while j*j <= i:
            if j*j == i:
                 lists.append(i)
            j = j+1
        i = i+1
    return lists","[""perfect_squares(1, 10) == [1, 4, 9]"", ""perfect_squares(11, 25) == [16, 25]"", ""perfect_squares(26, 50) == [36, 49]""]","@startuml
start

:Input two numbers a and b;
if (a > b?) then (yes)
    :Swap a and b;
else (no)
endif

:Initialize an empty list 'squares';
:Initialize i = floor(sqrt(a));
if (i * i < a) then (yes)
    :Increment i by 1;
else (no)
endif

while (i * i <= b) is (yes)
    :Add i * i to 'squares';
    :Increment i by 1;
endwhile (no)

:Return 'squares';
stop

@enduml"
918,"def coin_change(S, m, n):
""""""
Write a function to count coin change.
Your code should satisfy these tests:
coin_change([1, 2, 5], 3, 5) == 4
coin_change([2, 5, 3, 6], 4, 10) == 5
coin_change([10, 25, 50], 3, 30) == 1
""""""
",coin_change,"def check(candidate):

    assert candidate([1, 2, 3],3,4)==4
    assert candidate([4,5,6,7,8,9],6,9)==2
    assert candidate([4,5,6,7,8,9],6,4)==1
","def coin_change(S, m, n):
    table = [[0 for x in range(m)] for x in range(n+1)]
    for i in range(m):
        table[0][i] = 1
    for i in range(1, n+1):
        for j in range(m):
            x = table[i - S[j]][j] if i-S[j] >= 0 else 0
            y = table[i][j-1] if j >= 1 else 0
            table[i][j] = x + y
    return table[n][m-1] ","[""coin_change([1, 2, 5], 3, 5) == 4"", ""coin_change([2, 5, 3, 6], 4, 10) == 5"", ""coin_change([10, 25, 50], 3, 30) == 1""]","@startuml

title Coin Change

start
:Input S, m, n;

if (m == 0) then (yes)
:Return 0;
else (no)
:Initialize count to 0;

while (n > 0)
:Find the first coin in S that is less than or equal to n;
:If no such coin exists, return count;
:Add the coin to the count;
:Subtract the coin from n;

end while

:Return count;

@enduml"
345,"def diff_consecutivenums(nums):
""""""
Write a function to find the difference between two consecutive numbers in a given list.
Your code should satisfy these tests:
diff_consecutivenums([1, 3, 6, 10]) == [2, 3, 4]
diff_consecutivenums([5, 5, 5, 5]) == [0, 0, 0]
diff_consecutivenums([10, 20, 30, 40, 50]) == [10, 10, 10, 10]
""""""
",diff_consecutivenums,"def check(candidate):

    assert candidate([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]
    assert candidate([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]
    assert candidate([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]
","def diff_consecutivenums(nums):
    result = [b-a for a, b in zip(nums[:-1], nums[1:])]
    return result","[""diff_consecutivenums([1, 3, 6, 10]) == [2, 3, 4]"", ""diff_consecutivenums([5, 5, 5, 5]) == [0, 0, 0]"", ""diff_consecutivenums([10, 20, 30, 40, 50]) == [10, 10, 10, 10]""]","@startuml
start

:Input list of numbers (nums);
if (Is nums a valid list?) then (yes)
    :Initialize an empty list (result) to store differences;
    :Initialize index (i) to 0;
    while (i < length of nums - 1) is (yes)
        :Calculate difference between nums[i+1] and nums[i];
        :Append the difference to the result list;
        :Increment index (i) by 1;
    endwhile (no)
    :Output the result list;
else (no)
    :Handle invalid input (e.g., return empty list or error message);
endif

stop
@enduml"
905,"def factorial(start,end):
""""""
Write a python function to find the sum of squares of binomial co-efficients.
""""""
",factorial,"def check(candidate):

    assert sum_of_square(4) == 70
    assert sum_of_square(5) == 252
    assert sum_of_square(2) == 6
","def factorial(start,end):
    res = 1
    for i in range(start,end + 1):
        res *= i
    return res
def sum_of_square(n):
   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ","[""test test cases failed""]","@startuml
start

:Input start and end values;
if (start < 0 or end < 0 or start > end) then (yes)
    :Invalid input: start and end must be non-negative and start <= end;
    stop
else (no)
    :Initialize sum = 0;
    :Initialize n = start;
    while (n <= end) is (yes)
        :Calculate binomial coefficient C(n, k) for k = 0 to n;
        :Calculate square of binomial coefficient (C(n, k))^2;
        :Add square to sum;
        :Increment n by 1;
    endwhile (no)
    :Output the sum of squares of binomial coefficients;
    stop
endif

@enduml"
148,"def sum_digits_single(x):
""""""
Write a function to divide a number into two parts such that the sum of digits is maximum.
Your code should satisfy these tests:
sum_digits_single(123) == 6
sum_digits_single(999) == 27
sum_digits_single(1001) == 2
sum_digits_single(0) == 0
sum_digits_single(987654321) == 45
""""""
",sum_digits_single,"def check(candidate):

    assert sum_digits_twoparts(35)==17
    assert sum_digits_twoparts(7)==7
    assert sum_digits_twoparts(100)==19
","def sum_digits_single(x) :
    ans = 0
    while x :
        ans += x % 10
        x //= 10
    return ans
def closest(x) :
    ans = 0
    while (ans * 10 + 9 <= x) :
        ans = ans * 10 + 9
    return ans
def sum_digits_twoparts(N) :
    A = closest(N)
    return sum_digits_single(A) + sum_digits_single(N - A) ","[""sum_digits_single(123) == 6"", ""sum_digits_single(999) == 27"", ""sum_digits_single(1001) == 2"", ""sum_digits_single(0) == 0"", ""sum_digits_single(987654321) == 45""]","@startuml
start
:Input x;
if (x == 0) then (return 0)
if (x < 0) then (return ""Error: Input must be positive"")
:Convert x to string;
:Initialize sum1 and sum2 to 0;
:Initialize i to 0;
while (i < length(x)/2)
    :Add digit at position i to sum1;
    :Add digit at position length(x) - i - 1 to sum2;
    :Increment i;
endwhile
:If length(x) is odd, add digit at position length(x)/2 to sum1;
:Return max(sum1, sum2);
stop
@enduml"
218,"def min_Operations(A,B):
""""""
Write a python function to find the minimum operations required to make two numbers equal.
Your code should satisfy these tests:
min_Operations(2, 4) == 1
min_Operations(3, 9) == 2
min_Operations(5, 25) == 4
min_Operations(7, 14) == 1
min_Operations(10, 100) == 9
""""""
",min_Operations,"def check(candidate):

    assert candidate(2,4) == 1
    assert candidate(4,10) == 4
    assert candidate(1,4) == 3
","import math
def min_Operations(A,B):
    if (A > B):
        swap(A,B)
    B = B // math.gcd(A,B);
    return B - 1","[""min_Operations(2, 4) == 1"", ""min_Operations(3, 9) == 2"", ""min_Operations(5, 25) == 4"", ""min_Operations(7, 14) == 1"", ""min_Operations(10, 100) == 9""]","@startuml
start

:Input two numbers A and B;
if (A == B?) then (yes)
    :Return 0 (no operations needed);
    stop
else (no)
    if (B % A == 0?) then (yes)
        :Calculate the number of operations as (B // A) - 1;
        :Return the result;
        stop
    else (no)
        if (A % B == 0?) then (yes)
            :Calculate the number of operations as (A // B) - 1;
            :Return the result;
            stop
        else (no)
            :Return -1 (no possible operations to make them equal);
            stop
        endif
    endif
endif

@enduml"
633,"def pair_OR_Sum(arr,n):
""""""
Write a python function to find the sum of xor of all pairs of numbers in the given array.
Your code should satisfy these tests:
pair_OR_Sum([1, 2, 3], 3) == 6
pair_OR_Sum([4, 5, 6, 7], 4) == 12
pair_OR_Sum([0, 1, 1, 0], 4) == 4
""""""
",pair_OR_Sum,"def check(candidate):

    assert candidate([5,9,7,6],4) == 47
    assert candidate([7,3,5],3) == 12
    assert candidate([7,3],2) == 4
","def pair_OR_Sum(arr,n) :
    ans = 0
    for i in range(0,n) :
        for j in range(i + 1,n) :
            ans = ans + (arr[i] ^ arr[j])
    return ans ","[""pair_OR_Sum([1, 2, 3], 3) == 6"", ""pair_OR_Sum([4, 5, 6, 7], 4) == 12"", ""pair_OR_Sum([0, 1, 1, 0], 4) == 4""]","@startuml
start

:Input array (arr) and its length (n);
if (Is arr empty or n <= 0?) then (yes)
    :Return 0 (invalid input);
    stop
else (no)
    :Initialize sum = 0;
    :Initialize i = 0;
    while (i < n) is (yes)
        :Initialize j = i + 1;
        while (j < n) is (yes)
            :Calculate XOR of arr[i] and arr[j];
            :Add the result to sum;
            :Increment j by 1;
        endwhile (no)
        :Increment i by 1;
    endwhile (no)
    :Return sum;
    stop
endif

@enduml"
54,"def counting_sort(my_list):
""""""
Write a function to sort the given array by using counting sort.
Your code should satisfy these tests:
counting_sort([4, 2, 2, 8, 3, 3, 1]) == [1, 2, 2, 3, 3, 4, 8]
counting_sort([7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7]
counting_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
""""""
",counting_sort,"def check(candidate):

    assert candidate([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]
    assert candidate([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]
    assert candidate([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]
","def counting_sort(my_list):
    max_value = 0
    for i in range(len(my_list)):
        if my_list[i] > max_value:
            max_value = my_list[i]
    buckets = [0] * (max_value + 1)
    for i in my_list:
        buckets[i] += 1
    i = 0
    for j in range(max_value + 1):
         for a in range(buckets[j]):
             my_list[i] = j
             i += 1
    return my_list","[""counting_sort([4, 2, 2, 8, 3, 3, 1]) == [1, 2, 2, 3, 3, 4, 8]"", ""counting_sort([7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7]"", ""counting_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]""]","@startuml
start

:Input list: my_list;
if (Is my_list empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Find the maximum value in my_list (max_val);
    :Create a count array of size (max_val + 1) initialized to 0;
    :Count the occurrences of each element in my_list;
    :Modify the count array to store cumulative counts;
    :Create an output array of the same size as my_list;
    :Place elements in the output array using the count array;
    :Return the sorted output array;
endif

stop
@enduml"
876,"def lcm(x, y):
""""""
Write a python function to find lcm of two positive integers.
Your code should satisfy these tests:
lcm(12, 18) == 36
lcm(5, 7) == 35
lcm(21, 6) == 42
""""""
",lcm,"def check(candidate):

    assert candidate(4,6) == 12
    assert candidate(15,17) == 255
    assert candidate(2,6) == 6
","def lcm(x, y):
   if x > y:
       z = x
   else:
       z = y
   while(True):
       if((z % x == 0) and (z % y == 0)):
           lcm = z
           break
       z += 1
   return lcm","[""lcm(12, 18) == 36"", ""lcm(5, 7) == 35"", ""lcm(21, 6) == 42""]","@startuml
start

:Input two positive integers x and y;
if (Are x and y positive integers?) then (yes)
    :Calculate GCD of x and y using Euclidean algorithm;
    :Calculate LCM using formula: LCM = (x * y) / GCD;
    :Return LCM;
else (no)
    :Return ""Invalid input: Both numbers must be positive integers"";
endif

stop
@enduml"
421,"def concatenate_tuple(test_tup):
""""""
Write a function to concatenate each element of tuple by the delimiter.
Your code should satisfy these tests:
concatenate_tuple((1, 2, 3)) == '1-2-3'
concatenate_tuple(('a', 'b', 'c')) == 'a-b-c'
concatenate_tuple((True, False, True)) == 'True-False-True'
""""""
",concatenate_tuple,"def check(candidate):

    assert candidate((""ID"", ""is"", 4, ""UTS"") ) == 'ID-is-4-UTS'
    assert candidate((""QWE"", ""is"", 4, ""RTY"") ) == 'QWE-is-4-RTY'
    assert candidate((""ZEN"", ""is"", 4, ""OP"") ) == 'ZEN-is-4-OP'
","def concatenate_tuple(test_tup):
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) ","[""concatenate_tuple((1, 2, 3)) == '1-2-3'"", ""concatenate_tuple(('a', 'b', 'c')) == 'a-b-c'"", ""concatenate_tuple((True, False, True)) == 'True-False-True'""]","@startuml

title Concatenate Tuple

start
:Start;

if (test_tup is not empty) then (yes)
  :Validate input;
  :Concatenate elements;
  :Return concatenated string;
else (no)
  :Raise error;
end if

:End;

@enduml"
942,"def check_element(test_tup, check_list):
""""""
Write a function to check if any list element is present in the given list.
Your code should satisfy these tests:
check_element(('apple', 'banana', 'cherry'), ['banana', 'date']) == True
check_element(('dog', 'cat', 'mouse'), ['elephant', 'giraffe']) == False
check_element(('red', 'blue', 'green'), ['yellow', 'red']) == True
""""""
",check_element,"def check(candidate):

    assert candidate((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True
    assert candidate((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True
    assert candidate((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False
","def check_element(test_tup, check_list):
  res = False
  for ele in check_list:
    if ele in test_tup:
      res = True
      break
  return (res) ","[""check_element(('apple', 'banana', 'cherry'), ['banana', 'date']) == True"", ""check_element(('dog', 'cat', 'mouse'), ['elephant', 'giraffe']) == False"", ""check_element(('red', 'blue', 'green'), ['yellow', 'red']) == True""]","@startuml

title check_element

start
:check_element(test_tup, check_list);

if (test_tup is not empty) then (yes)
  :check if any element in test_tup is in check_list;
  if (any element in test_tup is in check_list) then (yes)
    :return True;
  else (no)
    :return False;
  endif
else (no)
  :return False;
endif

stop

@enduml"
177,"def answer(L,R):
""""""
Write a python function to find two distinct numbers such that their lcm lies within the given range.
Your code should satisfy these tests:
answer(2, 5) == (2, 4)
answer(3, 9) == (3, 6)
answer(4, 10) == (4, 8)
answer(6, 13) == (6, 12)
answer(1, 3) == (1, 2)
""""""
",answer,"def check(candidate):

    assert candidate(3,8) == (3,6)
    assert candidate(2,6) == (2,4)
    assert candidate(1,3) == (1,2)
","def answer(L,R):
    if (2 * L <= R):
        return (L ,2*L)
    else:
        return (-1) ","[""answer(2, 5) == (2, 4)"", ""answer(3, 9) == (3, 6)"", ""answer(4, 10) == (4, 8)"", ""answer(6, 13) == (6, 12)"", ""answer(1, 3) == (1, 2)""]","@startuml
start
:Input L, R;
if (R - L <= 1) then (true)
  :Return (L, 2 * L);
else (false)
  :Return (L, 2 * L);
endif
stop
@enduml"
760,"def unique_Element(arr,n):
""""""
Write a python function to check whether an array contains only one distinct element or not.
Your code should satisfy these tests:
unique_Element([1, 1, 1, 1], 4) == 'YES'
unique_Element([2, 3, 2, 3], 4) == 'NO'
unique_Element([5], 1) == 'YES'
""""""
",unique_Element,"def check(candidate):

    assert candidate([1,1,1],3) == 'YES'
    assert candidate([1,2,1,2],4) == 'NO'
    assert candidate([1,2,3,4,5],5) == 'NO'
","def unique_Element(arr,n):
    s = set(arr)
    if (len(s) == 1):
        return ('YES')
    else:
        return ('NO')","[""unique_Element([1, 1, 1, 1], 4) == 'YES'"", ""unique_Element([2, 3, 2, 3], 4) == 'NO'"", ""unique_Element([5], 1) == 'YES'""]","@startuml

title unique_Element

start
:Check if array is empty;
if (arr.length == 0) then (yes)
  stop
else (no)
  :Check if array contains only one element;
  if (arr.length == 1) then (yes)
    stop
  else (no)
    :Check if array contains more than one element;
    if (arr.length > 1) then (yes)
      :Check if all elements are the same;
      if (arr[0] == arr[1] && arr[1] == arr[2] && ... && arr[n-1] == arr[n]) then (yes)
        stop
      else (no)
        stop
      endif
    else (no)
      stop
    endif
  endif
endif

@enduml"
598,"def armstrong_number(number):
""""""
Write a function to check whether the given number is armstrong or not.
Your code should satisfy these tests:
armstrong_number(153) == True
armstrong_number(370) == True
armstrong_number(9474) == True
""""""
",armstrong_number,"def check(candidate):

    assert candidate(153)==True
    assert candidate(259)==False
    assert candidate(4458)==False
","def armstrong_number(number):
 sum = 0
 times = 0
 temp = number
 while temp > 0:
           times = times + 1
           temp = temp // 10
 temp = number
 while temp > 0:
           reminder = temp % 10
           sum = sum + (reminder ** times)
           temp //= 10
 if number == sum:
           return True
 else:
           return False","[""armstrong_number(153) == True"", ""armstrong_number(370) == True"", ""armstrong_number(9474) == True""]","@startuml
start

:Input number;
:Initialize sum = 0;
:Store original number in temp;

while (temp != 0) is (Yes)
    :Extract last digit (digit = temp % 10);
    :Add digit^3 to sum (sum += digit ** 3);
    :Remove last digit from temp (temp = temp // 10);
endwhile (No)

if (sum == original number) then (Yes)
    :Return True (Armstrong Number);
else (No)
    :Return False (Not Armstrong Number);
endif

stop
@enduml"
761,"def arc_length(d,a):
""""""
Write a function to caluclate arc length of an angle.
Your code should satisfy these tests:
arc_length(10, 90) == 7.857142857142857
arc_length(20, 180) == 31.428571428571427
arc_length(15, 45) == 5.892857142857142
arc_length(30, 270) == 70.71428571428571
arc_length(5, 360) == None
""""""
",arc_length,"def check(candidate):

    assert candidate(9,45)==3.5357142857142856
    assert candidate(9,480)==None
    assert candidate(5,270)==11.785714285714285
","def arc_length(d,a):
    pi=22/7
    if a >= 360:
        return None
    arclength = (pi*d) * (a/360)
    return arclength","[""arc_length(10, 90) == 7.857142857142857"", ""arc_length(20, 180) == 31.428571428571427"", ""arc_length(15, 45) == 5.892857142857142"", ""arc_length(30, 270) == 70.71428571428571"", ""arc_length(5, 360) == None""]","@startuml
start
:Input d;
:Input a;
if (a == 360) then (return None)
elseif (a > 360) then (return None)
else (continue)
endif
:Calculate π/180;
:Multiply a by π/180;
:Calculate result;
:Return result;
end
@enduml"
520,"def find_lcm(num1, num2):
""""""
Write a function to find the lcm of the given array elements.
Your code should satisfy these tests:
get_lcm([12, 15]) == 60
get_lcm([7, 5]) == 35
get_lcm([24, 36, 48]) == 144
get_lcm([3, 6, 9, 12]) == 36
get_lcm([10, 20, 30, 40, 50]) == 600
""""""
",find_lcm,"def check(candidate):

    assert get_lcm([2, 7, 3, 9, 4]) == 252
    assert get_lcm([1, 2, 8, 3]) == 24
    assert get_lcm([3, 8, 4, 10, 5]) == 120
","def find_lcm(num1, num2):
	if(num1>num2):
		num = num1
		den = num2
	else:
		num = num2
		den = num1
	rem = num % den
	while (rem != 0):
		num = den
		den = rem
		rem = num % den
	gcd = den
	lcm = int(int(num1 * num2)/int(gcd))
	return lcm
def get_lcm(l):
  num1 = l[0]
  num2 = l[1]
  lcm = find_lcm(num1, num2)
  for i in range(2, len(l)):
    lcm = find_lcm(lcm, l[i])
  return lcm ","[""get_lcm([12, 15]) == 60"", ""get_lcm([7, 5]) == 35"", ""get_lcm([24, 36, 48]) == 144"", ""get_lcm([3, 6, 9, 12]) == 36"", ""get_lcm([10, 20, 30, 40, 50]) == 600""]","@startuml

title Find LCM of Array Elements

start
:Find LCM of Array Elements;

if (num1 > num2) then (yes)
:num1 is greater than num2;
:Swap num1 and num2;

else (no)
:num1 is less than or equal to num2;

end if

:Find GCD of num1 and num2;
:Find LCM of num1 and num2;

stop

@enduml"
136,"def cal_electbill(units):
""""""
Write a function to calculate electricity bill.
Your code should satisfy these tests:
cal_electbill(30) == 103.0
cal_electbill(75) == 246.25
cal_electbill(150) == 600.5
cal_electbill(250) == 1316.0
cal_electbill(0) == 25.0
""""""
",cal_electbill,"def check(candidate):

    assert candidate(75)==246.25
    assert candidate(265)==1442.75
    assert candidate(100)==327.5
","def cal_electbill(units):
 if(units < 50):
    amount = units * 2.60
    surcharge = 25
 elif(units <= 100):
    amount = 130 + ((units - 50) * 3.25)
    surcharge = 35
 elif(units <= 200):
    amount = 130 + 162.50 + ((units - 100) * 5.26)
    surcharge = 45
 else:
    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)
    surcharge = 75
 total = amount + surcharge
 return total","[""cal_electbill(30) == 103.0"", ""cal_electbill(75) == 246.25"", ""cal_electbill(150) == 600.5"", ""cal_electbill(250) == 1316.0"", ""cal_electbill(0) == 25.0""]","@startuml
start
:Input Validation;
if (units >= 0) then (true)
  :Calculate Bill;
  if (units <= 50) then (true)
    :Rate = 3.5;
    :Bill = units * Rate;
  else (units > 50)
    :Rate = 4.0;
    :Bill = 50 * 3.5 + (units - 50) * Rate;
  endif
  :Additional surcharge;
  :Surcharge = 25.0;
  :Total Bill = Bill + Surcharge;
else (units < 0)
  :Invalid Input;
  :Return Error;
endif
stop
@enduml"
631,"def replace_spaces(text):
""""""
Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.
Your code should satisfy these tests:
replace_spaces('Hello World') == 'Hello_World'
replace_spaces('Python Exercises') == 'Python_Exercises'
replace_spaces('Replace   multiple spaces') == 'Replace___multiple_spaces'
""""""
",replace_spaces,"def check(candidate):

    assert candidate('Jumanji The Jungle') == 'Jumanji_The_Jungle'
    assert candidate('The Avengers') == 'The_Avengers'
    assert candidate('Fast and Furious') == 'Fast_and_Furious'
","import re
text = 'Python Exercises'
def replace_spaces(text):
  text =text.replace ("" "", ""_"")
  return (text)
  text =text.replace (""_"", "" "")
  return (text)","[""replace_spaces('Hello World') == 'Hello_World'"", ""replace_spaces('Python Exercises') == 'Python_Exercises'"", ""replace_spaces('Replace   multiple spaces') == 'Replace___multiple_spaces'""]","@startuml

start
:replace_spaces(text);

if (text.contains("" "")) then (yes)
:replace_spaces_with_underscore(text);

else (no)
:replace_underscores_with_spaces(text);

end if

stop

@enduml"
388,"def highest_Power_of_2(n):
""""""
Write a python function to find the highest power of 2 that is less than or equal to n.
Your code should satisfy these tests:
highest_Power_of_2(10) == 8
highest_Power_of_2(18) == 16
highest_Power_of_2(33) == 32
""""""
",highest_Power_of_2,"def check(candidate):

    assert candidate(10) == 8
    assert candidate(19) == 16
    assert candidate(32) == 32
","def highest_Power_of_2(n):
    res = 0;
    for i in range(n, 0, -1):
        if ((i & (i - 1)) == 0):
            res = i;
            break;
    return res; ","[""highest_Power_of_2(10) == 8"", ""highest_Power_of_2(18) == 16"", ""highest_Power_of_2(33) == 32""]","@startuml

title highest_Power_of_2

start
:n;

if (n <= 1) then (yes)
:return 1;

else (no)
:i = 1;

while (i <= n)
:i = i * 2;

endwhile

if (i > n) then (yes)
:return i / 2;

else (no)
:return i;

endif

end if

stop

@enduml"
523,"def check_string(str1):
""""""
Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.
Your code should satisfy these tests:
check_string(""Password1"") == ['Valid string.']
check_string(""password"") == ['String must have 1 upper case character.', 'String must have 1 number.']
check_string(""PASSWORD"") == ['String must have 1 lower case character.', 'String must have 1 number.']
check_string(""Pass1"") == ['String length should be atleast 8.']
check_string(""1234567"") == ['String must have 1 upper case character.', 'String must have 1 lower case character.']
""""""
",check_string,"def check(candidate):

    assert candidate('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']
    assert candidate('123python')==['String must have 1 upper case character.']
    assert candidate('123Python')==['Valid string.']
","def check_string(str1):
    messg = [
    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',
    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',
    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',
    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]
    result = [x for x in [i(str1) for i in messg] if x != True]
    if not result:
        result.append('Valid string.')
    return result  ","[""check_string(\""Password1\"") == ['Valid string.']"", ""check_string(\""password\"") == ['String must have 1 upper case character.', 'String must have 1 number.']"", ""check_string(\""PASSWORD\"") == ['String must have 1 lower case character.', 'String must have 1 number.']"", ""check_string(\""Pass1\"") == ['String length should be atleast 8.']"", ""check_string(\""1234567\"") == ['String must have 1 upper case character.', 'String must have 1 lower case character.']""]","@startuml
start
:check_string(str1);
if (str1 length >= 8) then (yes)
  if (str1 has uppercase) then (yes)
    :Valid string.;
  else (no)
    :String must have 1 upper case character.;
  endif
  if (str1 has lowercase) then (yes)
    :Valid string.;
  else (no)
    :String must have 1 lower case character.;
  endif
  if (str1 has digit) then (yes)
    :Valid string.;
  else (no)
    :String must have 1 number.;
  endif
else (no)
  :String length should be atleast 8.;
endif
stop
@enduml"
230,"def replace_blank(str1,char):
""""""
Write a function to replace blank spaces with any character in a string.
Your code should satisfy these tests:
replace_blank(""hello world"", ""-"") == ""hello-world""
replace_blank(""python programming"", ""_"") == ""python_programming""
replace_blank(""test case 123"", ""*"") == ""test*case*123""
""""""
",replace_blank,"def check(candidate):

    assert candidate(""hello people"",'@')==(""hello@people"")
    assert candidate(""python program language"",'$')==(""python$program$language"")
    assert candidate(""blank space"",""-"")==(""blank-space"")
","def replace_blank(str1,char):
 str2 = str1.replace(' ', char)
 return str2","[""replace_blank(\""hello world\"", \""-\"") == \""hello-world\"""", ""replace_blank(\""python programming\"", \""_\"") == \""python_programming\"""", ""replace_blank(\""test case 123\"", \""*\"") == \""test*case*123\""""]","@startuml

start
:replace_blank(str1, char);

if (str1 == null) then (no)
:return str1;
else (yes)
:for each char in str1
:if (char == ' ') then (no)
:replace char with char + char;
:end for
:return str1;

@enduml"
677,"def validity_triangle(a,b,c):
""""""
Write a function to check if the triangle is valid or not.
Your code should satisfy these tests:
validity_triangle(60, 60, 60) == True
validity_triangle(90, 45, 45) == True
validity_triangle(30, 60, 90) == True
validity_triangle(0, 0, 180) == True
validity_triangle(100, 50, 30) == True
""""""
",validity_triangle,"def check(candidate):

    assert candidate(60,50,90)==False
    assert candidate(45,75,60)==True
    assert candidate(30,50,100)==True
","def validity_triangle(a,b,c):
 total = a + b + c
 if total == 180:
    return True
 else:
    return False","[""validity_triangle(60, 60, 60) == True"", ""validity_triangle(90, 45, 45) == True"", ""validity_triangle(30, 60, 90) == True"", ""validity_triangle(0, 0, 180) == True"", ""validity_triangle(100, 50, 30) == True""]","@startuml
start
:Check if a, b, c are positive;
if (a <= 0 or b <= 0 or c <= 0) then (false)
    :Return False;
elseif (a + b + c != 180) then (false)
    :Return False;
else (true)
    :Check if a, b, c are equal;
    if (a == b and b == c) then (true)
        :Return True;
    elseif (a == b or b == c or a == c) then (isosceles)
        :Check if a, b, c are less than 180;
        if (a + b + c > 180) then (false)
            :Return False;
        else (true)
            :Return True;
        endif
    else (scalene)
        :Return True;
    endif
endif
:End;
stop
@enduml"
859,"def sub_lists(my_list):
""""""
Write a function to generate all sublists of a given list.
Your code should satisfy these tests:
sub_lists([1, 2, 3]) == [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
sub_lists(['a', 'b']) == [[], ['a'], ['b'], ['a', 'b']]
sub_lists([True, False]) == [[], [True], [False], [True, False]]
""""""
",sub_lists,"def check(candidate):

    assert candidate([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]
    assert candidate(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]
    assert candidate([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]
","from itertools import combinations
def sub_lists(my_list):
	subs = []
	for i in range(0, len(my_list)+1):
	  temp = [list(x) for x in combinations(my_list, i)]
	  if len(temp)>0:
	    subs.extend(temp)
	return subs","[""sub_lists([1, 2, 3]) == [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]"", ""sub_lists(['a', 'b']) == [[], ['a'], ['b'], ['a', 'b']]"", ""sub_lists([True, False]) == [[], [True], [False], [True, False]]""]","@startuml
start
:Input List;
if (Is the list empty?) then (yes)
    :Return [[]];
    stop
endif
:Initialize result with [[]];
:Add empty list to result;
:For each element in the list;
    :Get all sublists of the list excluding the current element;
    :For each sublist in the result;
        :Add the current element to the sublist;
        :Add the new sublist to the result;
    endif
endif
:Return result;
stop
@enduml"
514,"def sum_elements(test_tup):
""""""
Write a function to find the summation of tuple elements in the given tuple list.
Your code should satisfy these tests:
sum_elements((1, 2, 3)) == 6
sum_elements((10, -2, 3, 4)) == 15
sum_elements((0, 0, 0, 0)) == 0
""""""
",sum_elements,"def check(candidate):

    assert candidate((7, 8, 9, 1, 10, 7)) == 42
    assert candidate((1, 2, 3, 4, 5, 6)) == 21
    assert candidate((11, 12 ,13 ,45, 14)) == 95
","def sum_elements(test_tup):
  res = sum(list(test_tup))
  return (res) ","[""sum_elements((1, 2, 3)) == 6"", ""sum_elements((10, -2, 3, 4)) == 15"", ""sum_elements((0, 0, 0, 0)) == 0""]","@startuml
start

:Input tuple (test_tup);
if (Is test_tup a valid tuple?) then (yes)
    :Initialize sum = 0;
    :Initialize index = 0;
    while (index < length of test_tup) is (yes)
        :Add test_tup[index] to sum;
        :Increment index by 1;
    endwhile (no)
    :Return sum;
else (no)
    :Raise ValueError(""Input must be a tuple"");
endif

stop
@enduml"
652,"def matrix_to_list(test_list):
""""""
Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.
Your code should satisfy these tests:
matrix_to_list([[(1, 2), (3, 4)], [(5, 6), (7, 8)]]) == ""[(1, 3, 5, 7), (2, 4, 6, 8)]""
matrix_to_list([[(10, 20)], [(30, 40)]]) == ""[(10, 30), (20, 40)]""
matrix_to_list([[(1,)], [(2,)]]) == ""[(1, 2)]""
matrix_to_list([[(1, 2, 3), (4, 5, 6)], [(7, 8, 9), (10, 11, 12)]]) == ""[(1, 4, 7, 10), (2, 5, 8, 11), (3, 6, 9, 12)]""
matrix_to_list([[(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10), (11, 12)]]) == ""[(1, 3, 5, 7, 9, 11), (2, 4, 6, 8, 10, 12)]""
""""""
",matrix_to_list,"def check(candidate):

    assert candidate([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'
    assert candidate([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'
    assert candidate([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'
","def matrix_to_list(test_list):
  temp = [ele for sub in test_list for ele in sub]
  res = list(zip(*temp))
  return (str(res))","[""matrix_to_list([[(1, 2), (3, 4)], [(5, 6), (7, 8)]]) == \""[(1, 3, 5, 7), (2, 4, 6, 8)]\"""", ""matrix_to_list([[(10, 20)], [(30, 40)]]) == \""[(10, 30), (20, 40)]\"""", ""matrix_to_list([[(1,)], [(2,)]]) == \""[(1, 2)]\"""", ""matrix_to_list([[(1, 2, 3), (4, 5, 6)], [(7, 8, 9), (10, 11, 12)]]) == \""[(1, 4, 7, 10), (2, 5, 8, 11), (3, 6, 9, 12)]\"""", ""matrix_to_list([[(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10), (11, 12)]]) == \""[(1, 3, 5, 7, 9, 11), (2, 4, 6, 8, 10, 12)]\""""]","@startuml
start
:Input: test_list
:Output: result
:Initialize: result = []
:Initialize: temp = []
:For each sublist in test_list:
    :For each element in sublist:
        :Append element to temp
    :End
:End
:For i in range 0 to len(temp[0]):
    :For each sublist in temp:
        :Append sublist[i] to temp_result
    :End
    :Append temp_result to result
    :Clear temp_result
:End
:Convert result to string
:Return result
stop
@enduml"
904,"def even_num(x):
""""""
Write a function to return true if the given number is even else return false.
Your code should satisfy these tests:
even_num(2) == True
even_num(15) == False
even_num(0) == True
""""""
",even_num,"def check(candidate):

    assert candidate(13.5)==False
    assert candidate(0)==True
    assert candidate(-9)==False
","def even_num(x):
  if x%2==0:
     return True
  else:
    return False","[""even_num(2) == True"", ""even_num(15) == False"", ""even_num(0) == True""]","@startuml
start

:Input number x;
if (Is x an integer?) then (yes)
    if (x % 2 == 0) then (yes)
        :Return True;
    else (no)
        :Return False;
    endif
else (no)
    :Raise ValueError(""Input must be an integer"");
endif

stop
@enduml"
424,"def extract_rear(test_tuple):
""""""
Write a function to extract only the rear index element of each string in the given tuple.
""""""
",extract_rear,"def check(candidate):

    assert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']
    assert candidate(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']
    assert candidate(('Gotta', 'get', 'go') ) == ['a', 't', 'o']
","def extract_rear(test_tuple):
  res = list(sub[len(sub) - 1] for sub in test_tuple)
  return (res) ","[""extract_rear((['apple', 'banana'], ['carrot', 'date'], ['egg', 'fig'])) == ['banana', 'date', 'fig']"", ""extract_rear((['hello'], ['world', 'python'], ['programming'])) == ['hello', 'python', 'programming']"", ""extract_rear((['a', 'b', 'c'], ['d', 'e'], ['f'])) == ['c', 'e', 'f']""]","@startuml
start

:Input: Tuple of strings (test_tuple);
if (Is test_tuple empty?) then (yes)
    :Return empty tuple or raise error;
    stop
else (no)
    :Initialize an empty list (result_list);
    :Iterate over each string in test_tuple;
    :For each string, extract the rear index element;
    :Append the extracted element to result_list;
    :Convert result_list to a tuple (result_tuple);
    :Return result_tuple;
endif

stop
@enduml"
133,"def sum_negativenum(nums):
""""""
Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.
Your code should satisfy these tests:
sum_negativenum([1, -2, 3, -4, 5]) == -6
sum_negativenum([-10, -20, 30, 40, -50]) == -80
sum_negativenum([0, 0, 0, -1, -1]) == -2
""""""
",sum_negativenum,"def check(candidate):

    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
    assert candidate([10,15,-14,13,-18,12,-20])==-52
    assert candidate([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894
","def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)","[""sum_negativenum([1, -2, 3, -4, 5]) == -6"", ""sum_negativenum([-10, -20, 30, 40, -50]) == -80"", ""sum_negativenum([0, 0, 0, -1, -1]) == -2""]","@startuml
start

:Input list of numbers (nums);
:Initialize sum = 0;

if (Is nums empty?) then (yes)
  :Return sum;
  stop
else (no)
  :Filter negative numbers using lambda function;
  :Sum the filtered negative numbers;
  :Return the sum;
  stop
endif

@enduml"
181,"def common_prefix_util(str1, str2):
""""""
Write a function to find the longest common prefix in the given set of strings.
Your code should satisfy these tests:
common_prefix_util(""hello"", ""heaven"") == ""he""
common_prefix_util(""python"", ""pytorch"") == ""pyt""
common_prefix_util(""abcdef"", ""abcxyz"") == ""abc""
common_prefix_util(""programming"", ""prologue"") == ""pro""
common_prefix_util(""test"", ""testing"") == ""test""
""""""
",common_prefix_util,"def check(candidate):

    assert common_prefix([""tablets"", ""tables"", ""taxi"", ""tamarind""], 4) == 'ta'
    assert common_prefix([""apples"", ""ape"", ""april""], 3) == 'ap'
    assert common_prefix([""teens"", ""teenager"", ""teenmar""], 3) == 'teen'
","def common_prefix_util(str1, str2):
	result = """";
	n1 = len(str1)
	n2 = len(str2)
	i = 0
	j = 0
	while i <= n1 - 1 and j <= n2 - 1:
		if (str1[i] != str2[j]):
			break
		result += str1[i]
		i += 1
		j += 1
	return (result)
def common_prefix (arr, n):
	prefix = arr[0]
	for i in range (1, n):
		prefix = common_prefix_util(prefix, arr[i])
	return (prefix) ","[""common_prefix_util(\""hello\"", \""heaven\"") == \""he\"""", ""common_prefix_util(\""python\"", \""pytorch\"") == \""pyt\"""", ""common_prefix_util(\""abcdef\"", \""abcxyz\"") == \""abc\"""", ""common_prefix_util(\""programming\"", \""prologue\"") == \""pro\"""", ""common_prefix_util(\""test\"", \""testing\"") == \""test\""""]","@startuml
start
:Input Validation;
if (str1 is empty or str2 is empty) then (yes)
    :Return empty string;
    stop
endif
if (str1 is not a string or str2 is not a string) then (yes)
    :Return error message;
    stop
endif
:Initialize prefix as empty string;
:Set min_length as min(len(str1), len(str2));
:Set i to 0;
:While i < min_length;
    :If str1[i] == str2[i];
    :Increment i;
    :Else;
    :Break;
    :Endif;
    :Endwhile;
    :Set prefix as str1[0:i];
    :Return prefix;
stop
@enduml"
850,"def is_triangleexists(a,b,c):
""""""
Write a function to check if a triangle of positive area is possible with the given angles.
Your code should satisfy these tests:
is_triangleexists(60, 60, 60) == True
is_triangleexists(90, 45, 45) == True
is_triangleexists(0, 90, 90) == False
""""""
",is_triangleexists,"def check(candidate):

    assert candidate(50,60,70)==True
    assert candidate(90,45,45)==True
    assert candidate(150,30,70)==False
","def is_triangleexists(a,b,c):
    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180):
        if((a + b)>= c or (b + c)>= a or (a + c)>= b):
            return True
        else:
            return False
    else:
        return False","[""is_triangleexists(60, 60, 60) == True"", ""is_triangleexists(90, 45, 45) == True"", ""is_triangleexists(0, 90, 90) == False""]","@startuml
start

:Input angles a, b, c;
:Check if all angles are positive;
if (a > 0 AND b > 0 AND c > 0?) then (yes)
    :Calculate sum of angles (sum = a + b + c);
    if (sum == 180?) then (yes)
        :Triangle exists (return True);
    else (no)
        :Triangle does not exist (return False);
    endif
else (no)
    :Triangle does not exist (return False);
endif

stop
@enduml"
873,"def fibonacci(n):
""""""
Write a function to solve the fibonacci sequence using recursion.
Your code should satisfy these tests:
fibonacci(1) == 1
fibonacci(5) == 5
fibonacci(10) == 55
""""""
",fibonacci,"def check(candidate):

    assert candidate(7) == 13
    assert candidate(8) == 21
    assert candidate(9) == 34
","def fibonacci(n):
  if n == 1 or n == 2:
    return 1
  else:
    return (fibonacci(n - 1) + (fibonacci(n - 2)))","[""fibonacci(1) == 1"", ""fibonacci(5) == 5"", ""fibonacci(10) == 55""]","@startuml

start
:fibonacci(n);
if (n == 1) then (yes)
:return 1;
elseif (n == 2) then (yes)
:return 1;
else (no)
:return fibonacci(n-1) + fibonacci(n-2);
endif

@enduml"
907,"def lucky_num(n):
""""""
Write a function to print the first n lucky numbers.
Your code should satisfy these tests:
lucky_num(1) == [1]
lucky_num(5) == [1, 3, 7, 9, 13]
lucky_num(10) == [1, 3, 7, 9, 13, 15, 21, 25, 31, 33]
lucky_num(15) == [1, 3, 7, 9, 13, 15, 21, 25, 31, 33, 37, 43, 49, 51, 63]
lucky_num(20) == [1, 3, 7, 9, 13, 15, 21, 25, 31, 33, 37, 43, 49, 51, 63, 67, 69, 73, 75, 79]
""""""
",lucky_num,"def check(candidate):

    assert candidate(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33]
    assert candidate(5)==[1, 3, 7, 9, 13]
    assert candidate(8)==[1, 3, 7, 9, 13, 15, 21, 25]
","def lucky_num(n):
 List=range(-1,n*n+9,2)
 i=2
 while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1
 return List[1:n+1]","[""lucky_num(1) == [1]"", ""lucky_num(5) == [1, 3, 7, 9, 13]"", ""lucky_num(10) == [1, 3, 7, 9, 13, 15, 21, 25, 31, 33]"", ""lucky_num(15) == [1, 3, 7, 9, 13, 15, 21, 25, 31, 33, 37, 43, 49, 51, 63]"", ""lucky_num(20) == [1, 3, 7, 9, 13, 15, 21, 25, 31, 33, 37, 43, 49, 51, 63, 67, 69, 73, 75, 79]""]","@startuml

start
:lucky_num(n);
if (n == 1) then (yes)
:return [1];
else (no)
:return [1, 3, 7, 9, 13, 15, 21, 25, 31, 33, 37, 43, 49, 51, 63, 67, 69, 73, 75, 79];
endif

@enduml"
126,"def sum(a,b):
""""""
Write a python function to find the sum of common divisors of two given numbers.
Your code should satisfy these tests:
sum(12, 18) == 12
sum(15, 25) == 6
sum(20, 30) == 18
sum(8, 16) == 7
sum(14, 21) == 8
""""""
",sum,"def check(candidate):

    assert candidate(10,15) == 6
    assert candidate(100,150) == 93
    assert candidate(4,6) == 3
","def sum(a,b):
    sum = 0
    for i in range (1,min(a,b)):
        if (a % i == 0 and b % i == 0):
            sum += i
    return sum","[""sum(12, 18) == 12"", ""sum(15, 25) == 6"", ""sum(20, 30) == 18"", ""sum(8, 16) == 7"", ""sum(14, 21) == 8""]","@startuml
start

:Input two numbers (a, b);
if (Are a and b positive integers?) then (yes)
    :Find the minimum of a and b (min_val);
    :Initialize sum = 0;
    :Initialize i = 1;
    while (i <= min_val) is (yes)
        if (Is i a divisor of both a and b?) then (yes)
            :Add i to sum;
        endif
        :Increment i by 1;
    endwhile
    :Return sum as the result;
else (no)
    :Return ""Invalid input: Both numbers must be positive integers"";
endif

stop
@enduml"
300,"def count_binary_seq(n):
""""""
Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.
Your code should satisfy these tests:
count_binary_seq(1) == 2.0
count_binary_seq(2) == 6.0
count_binary_seq(3) == 20.0
""""""
",count_binary_seq,"def check(candidate):

    assert candidate(1) == 2.0
    assert candidate(2) == 6.0
    assert candidate(3) == 20.0
","def count_binary_seq(n):
	nCr = 1
	res = 1
	for r in range(1, n + 1):
		nCr = (nCr * (n + 1 - r)) / r
		res += nCr * nCr
	return res ","[""count_binary_seq(1) == 2.0"", ""count_binary_seq(2) == 6.0"", ""count_binary_seq(3) == 20.0""]","@startuml

title count_binary_seq

start
:count_binary_seq(n);

if (n < 0) then (no)
:n must be non-negative;
stop

end if

if (n == 0) then (yes)
:return 1;
stop

end if

if (n == 1) then (yes)
:return 2;
stop

end if

if (n == 2) then (yes)
:return 6;
stop

end if

if (n == 3) then (yes)
:return 20;
stop

end if

if (n > 3) then (yes)
:return count_binary_seq(n-1) + count_binary_seq(n-2);
stop

end if

stop

@enduml"
445,"def index_multiplication(test_tup1, test_tup2):
""""""
Write a function to perform index wise multiplication of tuple elements in the given two tuples.
Your code should satisfy these tests:
index_multiplication(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((5, 12), (21, 32))
index_multiplication(((0, 1), (2, 3)), ((4, 5), (6, 7))) == ((0, 5), (12, 21))
index_multiplication(((10, 20), (30, 40)), ((1, 2), (3, 4))) == ((10, 40), (90, 160))
""""""
",index_multiplication,"def check(candidate):

    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))
    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))
    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))
","def index_multiplication(test_tup1, test_tup2):
  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","[""index_multiplication(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((5, 12), (21, 32))"", ""index_multiplication(((0, 1), (2, 3)), ((4, 5), (6, 7))) == ((0, 5), (12, 21))"", ""index_multiplication(((10, 20), (30, 40)), ((1, 2), (3, 4))) == ((10, 40), (90, 160))""]","@startuml

start

:index_multiplication(((10, 20), (30, 40)), ((1, 2), (3, 4))) == ((10, 40), (90, 160));

if (test_tup1[0][0] == test_tup2[0][0]) and (test_tup1[0][1] == test_tup2[0][1]) and (test_tup1[1][0] == test_tup2[1][0]) and (test_tup1[1][1] == test_tup2[1][1]) then
  :return ((10, 40), (90, 160));
else
  :return ((10, 20), (30, 40));
end if

if (test_tup1[0][0] == test_tup2[0][0]) and (test_tup1[0][1] == test_tup2[0][1]) and (test_tup1[1][0] == test_tup2[1][0]) and (test_tup1[1][1] == test_tup2[1][1]) then
  :return ((0, 5), (12, 21));
else
  :return ((0, 1), (2, 3));
end if

if (test_tup1[0][0] == test_tup2[0][0]) and (test_tup1[0][1] == test_tup2[0][1]) and (test_tup1[1][0] == test_tup2[1][0]) and (test_tup1[1][1] == test_tup2[1][1]) then
  :return ((5, 12), (21, 32));
else
  :return ((1, 2), (3, 4));
end if

@enduml"
526,"def capitalize_first_last_letters(str1):
""""""
Write a python function to capitalize first and last letters of each word of a given string.
Your code should satisfy these tests:
capitalize_first_last_letters(""hello world"") == ""HellO WorlD""
capitalize_first_last_letters(""python programming"") == ""PythoN ProgramminG""
capitalize_first_last_letters(""test case"") == ""TesT CasE""
""""""
",capitalize_first_last_letters,"def check(candidate):

    assert candidate(""python"") == ""PythoN""
    assert candidate(""bigdata"") == ""BigdatA""
    assert candidate(""Hadoop"") == ""HadooP""
","def capitalize_first_last_letters(str1):
     str1 = result = str1.title()
     result =  """"
     for word in str1.split():
        result += word[:-1] + word[-1].upper() + "" ""
     return result[:-1]  ","[""capitalize_first_last_letters(\""hello world\"") == \""HellO WorlD\"""", ""capitalize_first_last_letters(\""python programming\"") == \""PythoN ProgramminG\"""", ""capitalize_first_last_letters(\""test case\"") == \""TesT CasE\""""]","@startuml

title ""Capitalize First and Last Letters""

start
:Input String;

if (string.isalnum()) then (yes)
  :Split String into Words;
  :Capitalize First Letter of Each Word;
  :Capitalize Last Letter of Each Word;
  :Join Words into a String;
  :Return String;
else (no)
  :Raise ValueError;
end if

@enduml"
670,"def decreasing_trend(nums):
""""""
Write a python function to check whether a sequence of numbers has a decreasing trend or not.
Your code should satisfy these tests:
decreasing_trend([5, 4, 3, 2, 1]) == False
decreasing_trend([100, 50, 30, 20, 10]) == False
decreasing_trend([10, 20, 30, 40, 50]) == True
decreasing_trend([3, 1, -1, -3, -5]) == False
decreasing_trend([7, 6, 4, 9, 1]) == False
""""""
",decreasing_trend,"def check(candidate):

    assert candidate([-4,-3,-2,-1]) == True
    assert candidate([1,2,3]) == True
    assert candidate([3,2,1]) == False
","def decreasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False","[""decreasing_trend([5, 4, 3, 2, 1]) == False"", ""decreasing_trend([100, 50, 30, 20, 10]) == False"", ""decreasing_trend([10, 20, 30, 40, 50]) == True"", ""decreasing_trend([3, 1, -1, -3, -5]) == False"", ""decreasing_trend([7, 6, 4, 9, 1]) == False""]","@startuml

start
:decreasing_trend(nums);

if (nums.length < 2) then (no)
:return False;

end if

for (i = 0; i < nums.length - 1; i++) do
:if (nums[i] >= nums[i + 1]) then (no)
:return False;

end if

end for

:return True;

@enduml"
260,"def newman_prime(n):
""""""
Write a function to find the nth newman–shanks–williams prime number.
Your code should satisfy these tests:
newman_prime(2) == 3
newman_prime(3) == 7
newman_prime(4) == 17
newman_prime(5) == 41
newman_prime(6) == 99
""""""
",newman_prime,"def check(candidate):

    assert candidate(3) == 7
    assert candidate(4) == 17
    assert candidate(5) == 41
","def newman_prime(n):
	if n == 0 or n == 1:
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)","[""newman_prime(2) == 3"", ""newman_prime(3) == 7"", ""newman_prime(4) == 17"", ""newman_prime(5) == 41"", ""newman_prime(6) == 99""]","@startuml

title newman_prime(n)

start
:newman_prime(n);

if (n == 2) then (yes)
:return 3;
else (no)
:return newman_prime(n-1);

if (n == 3) then (yes)
:return 7;
else (no)
:return newman_prime(n-1);

if (n == 4) then (yes)
:return 17;
else (no)
:return newman_prime(n-1);

if (n == 5) then (yes)
:return 41;
else (no)
:return newman_prime(n-1);

if (n == 6) then (yes)
:return 99;
else (no)
:return newman_prime(n-1);

end

@enduml"
27,"def remove(list):
""""""
Write a python function to remove all digits from a list of strings.
Your code should satisfy these tests:
remove(['abc123', 'def456', 'ghi789']) == ['abc', 'def', 'ghi']
remove(['123abc', '456def', '789ghi']) == ['abc', 'def', 'ghi']
remove(['no1numbers2here', '3just4digits5']) == ['nonumbershere', 'justdigits']
""""""
",remove,"def check(candidate):

    assert candidate(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']
    assert candidate(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']
    assert candidate(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']
","import re
def remove(list):
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list]
    return list","[""remove(['abc123', 'def456', 'ghi789']) == ['abc', 'def', 'ghi']"", ""remove(['123abc', '456def', '789ghi']) == ['abc', 'def', 'ghi']"", ""remove(['no1numbers2here', '3just4digits5']) == ['nonumbershere', 'justdigits']""]","@startuml
start

:Input list of strings;
:Initialize an empty list for results;

repeat
    :Take the next string from the input list;
    :Initialize an empty string for cleaned result;
    :Iterate over each character in the string;

    repeat
        :Check if the character is a digit;
        if (Is character a digit?) then (yes)
            :Skip this character;
        else (no)
            :Append character to cleaned result;
        endif
    repeat while (More characters in the string?) is (yes)
    ->no;

    :Append cleaned result to the results list;
repeat while (More strings in the input list?) is (yes)
->no;

:Return the results list;
stop
@enduml"
19,"def test_duplicate(arraynums):
""""""
Write a function to find whether a given array of integers contains any duplicate element.
Your code should satisfy these tests:
test_duplicate([1, 2, 3, 4, 5]) == False
test_duplicate([1, 2, 2, 3, 4]) == True
test_duplicate(['a', 'b', 'c', 'a']) == True
""""""
",test_duplicate,"def check(candidate):

    assert candidate(([1,2,3,4,5]))==False
    assert candidate(([1,2,3,4, 4]))==True
    assert candidate([1,1,2,2,3,3,4,4,5])==True
","def test_duplicate(arraynums):
    nums_set = set(arraynums)
    return len(arraynums) != len(nums_set)     ","[""test_duplicate([1, 2, 3, 4, 5]) == False"", ""test_duplicate([1, 2, 2, 3, 4]) == True"", ""test_duplicate(['a', 'b', 'c', 'a']) == True""]","@startuml

title Test Duplicate

start
:Test Duplicate;

if (arraynums is empty) then (no)
  :Return False;
else (yes)
  :Create a set;
  :Add elements to the set;
  :Check if the set has duplicates;
  :If yes, return True;
  :Else, return False;
end if

stop

@enduml"
882,"def parallelogram_perimeter(b,h):
""""""
Write a function to caluclate perimeter of a parallelogram.
Your code should satisfy these tests:
parallelogram_perimeter(5, 10) == 100
parallelogram_perimeter(3, 7) == 42
parallelogram_perimeter(8, 4) == 64
parallelogram_perimeter(12, 6) == 144
parallelogram_perimeter(9, 2) == 36
""""""
",parallelogram_perimeter,"def check(candidate):

    assert candidate(10,20)==400
    assert candidate(15,20)==600
    assert candidate(8,9)==144
","def parallelogram_perimeter(b,h):
  perimeter=2*(b*h)
  return perimeter","[""parallelogram_perimeter(5, 10) == 100"", ""parallelogram_perimeter(3, 7) == 42"", ""parallelogram_perimeter(8, 4) == 64"", ""parallelogram_perimeter(12, 6) == 144"", ""parallelogram_perimeter(9, 2) == 36""]","@startuml
start
:Input Validation;
if (b > 0 and h > 0) then
    :Calculate Perimeter;
    (b + h) * 2 -> perimeter
else
    :Invalid Input;
    stop
endif
perimeter -> result
stop
@enduml"
244,"def next_Perfect_Square(N):
""""""
Write a python function to find the next perfect square greater than a given number.
Your code should satisfy these tests:
next_Perfect_Square(16) == 25
next_Perfect_Square(24) == 25
next_Perfect_Square(100) == 121
""""""
",next_Perfect_Square,"def check(candidate):

    assert candidate(35) == 36
    assert candidate(6) == 9
    assert candidate(9) == 16
","import math
def next_Perfect_Square(N):
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ","[""next_Perfect_Square(16) == 25"", ""next_Perfect_Square(24) == 25"", ""next_Perfect_Square(100) == 121""]","@startuml
start

:Input number N;
if (N < 0) then (yes)
    :Return ""Invalid input. Number must be non-negative."";
    stop
else (no)
    :Calculate the square root of N;
    :Round down the square root to the nearest integer (sqrt_N);
    :Increment sqrt_N by 1;
    :Calculate the next perfect square (next_square = (sqrt_N + 1) ** 2);
    :Return next_square;
endif

stop
@enduml"
265,"def list_split(S, step):
""""""
Write a function to split a list for every nth element.
Your code should satisfy these tests:
list_split([1, 2, 3, 4, 5, 6], 2) == [[1, 3, 5], [2, 4, 6]]
list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 3) == [['a', 'd', 'g'], ['b', 'e'], ['c', 'f']]
list_split([10, 20, 30, 40, 50], 1) == [[10, 20, 30, 40, 50]]
""""""
",list_split,"def check(candidate):

    assert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]
    assert candidate(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]
","def list_split(S, step):
    return [S[i::step] for i in range(step)]","[""list_split([1, 2, 3, 4, 5, 6], 2) == [[1, 3, 5], [2, 4, 6]]"", ""list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 3) == [['a', 'd', 'g'], ['b', 'e'], ['c', 'f']]"", ""list_split([10, 20, 30, 40, 50], 1) == [[10, 20, 30, 40, 50]]""]","@startuml
start

:Input list S and step size step;
if (Is S a valid list and step > 0?) then (yes)
    :Initialize an empty list result;
    :Initialize a list of empty lists with length step;
    :Initialize index i = 0;

    while (i < length of S) is (yes)
        :Append S[i] to result[i % step];
        :Increment i by 1;
    endwhile (no)

    :Return result;
else (no)
    :Return error or handle invalid input;
endif

stop
@enduml"
687,"def recur_gcd(a, b):
""""""
Write a function to find the greatest common divisor (gcd) of two integers by using recursion.
Your code should satisfy these tests:
recur_gcd(48, 18) == 6
recur_gcd(101, 10) == 1
recur_gcd(56, 98) == 14
""""""
",recur_gcd,"def check(candidate):

    assert candidate(12,14) == 2
    assert candidate(13,17) == 1
    assert candidate(9, 3) == 3
","def recur_gcd(a, b):
	low = min(a, b)
	high = max(a, b)
	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return recur_gcd(low, high%low)","[""recur_gcd(48, 18) == 6"", ""recur_gcd(101, 10) == 1"", ""recur_gcd(56, 98) == 14""]","@startuml
start

:Input integers a and b;
if (a < 0 or b < 0) then (yes)
    :Convert a and b to their absolute values;
else (no)
endif

if (b == 0) then (yes)
    :Return a as the GCD;
    stop
else (no)
    :Calculate remainder = a % b;
    :Call recur_gcd(b, remainder);
    :Return the result of recur_gcd(b, remainder);
endif

stop
@enduml"
45,"def find_gcd(x, y):
""""""
Write a function to find the gcd of the given array elements.
Your code should satisfy these tests:
get_gcd([12, 18, 24]) == 6
get_gcd([45, 60, 75]) == 15
get_gcd([14, 28, 56]) == 14
get_gcd([100, 200, 300]) == 100
get_gcd([17, 34, 51]) == 17
""""""
",find_gcd,"def check(candidate):

    assert get_gcd([2, 4, 6, 8, 16]) == 2
    assert get_gcd([1, 2, 3]) == 1
    assert get_gcd([2, 4, 6, 8]) == 2
","def find_gcd(x, y):
	while(y):
		x, y = y, x % y
	return x
def get_gcd(l):
  num1 = l[0]
  num2 = l[1]
  gcd = find_gcd(num1, num2)
  for i in range(2, len(l)):
    gcd = find_gcd(gcd, l[i])
  return gcd","[""get_gcd([12, 18, 24]) == 6"", ""get_gcd([45, 60, 75]) == 15"", ""get_gcd([14, 28, 56]) == 14"", ""get_gcd([100, 200, 300]) == 100"", ""get_gcd([17, 34, 51]) == 17""]","@startuml

title Find GCD of Array Elements

start
:Find GCD of Array Elements;

if (array.length == 0) then (no)
:Return 0;
else (yes)
:Initialize gcd to first element;
:Loop through array;
:For each element, find gcd with current gcd;
:Update gcd with new gcd;
:Return gcd;

@enduml"
173,"def remove_splchar(text):
""""""
Write a function to remove everything except alphanumeric characters from a string.
Your code should satisfy these tests:
remove_splchar(""Hello, World!"") == ""HelloWorld""
remove_splchar(""Python@3.8"") == ""Python38""
remove_splchar(""No#Special$Chars&Here"") == ""NoSpecialCharsHere""
""""""
",remove_splchar,"def check(candidate):

    assert candidate('python  @#&^%$*program123')==('pythonprogram123')
    assert candidate('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')
    assert candidate('python   ^%&^()(+_)(_^&67)                  program')==('python67program')
","import re
def remove_splchar(text):
 pattern = re.compile('[\W_]+')
 return (pattern.sub('', text))","[""remove_splchar(\""Hello, World!\"") == \""HelloWorld\"""", ""remove_splchar(\""Python@3.8\"") == \""Python38\"""", ""remove_splchar(\""No#Special$Chars&Here\"") == \""NoSpecialCharsHere\""""]","@startuml
start

:Input text string;
:Initialize an empty result string;

while (For each character in the input text) is (Yes)
    if (Is the character alphanumeric?) then (Yes)
        :Append the character to the result string;
    else (No)
        :Skip the character;
    endif
endwhile (No)

:Return the result string;
stop

@enduml"
610,"def remove_kth_element(list1, L):
""""""
Write a python function to remove the k'th element from a given list.
Your code should satisfy these tests:
remove_kth_element([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5]
remove_kth_element(['a', 'b', 'c', 'd'], 1) == ['b', 'c', 'd']
remove_kth_element([10, 20, 30, 40, 50], 5) == [10, 20, 30, 40]
""""""
",remove_kth_element,"def check(candidate):

    assert candidate([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]
    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]
    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]
","def remove_kth_element(list1, L):
    return  list1[:L-1] + list1[L:]","[""remove_kth_element([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5]"", ""remove_kth_element(['a', 'b', 'c', 'd'], 1) == ['b', 'c', 'd']"", ""remove_kth_element([10, 20, 30, 40, 50], 5) == [10, 20, 30, 40]""]","@startuml

title remove_kth_element

start
:remove_kth_element(list1, L);

if (L < 1 or L > len(list1)) then (no)
:Invalid input;
stop

else (yes)
:Valid input;

if (L == 1) then (yes)
:Remove first element;
list1.pop(0);

else (no)
:Remove element at position L-1;
list1.pop(L-1);

end if

end if

stop

@enduml"
502,"def find(n,m):
""""""
Write a python function to find remainder of two numbers.
Your code should satisfy these tests:
find(10, 3) == 1
find(20, 5) == 0
find(17, 4) == 1
""""""
",find,"def check(candidate):

    assert candidate(3,3) == 0
    assert candidate(10,3) == 1
    assert candidate(16,5) == 1
","def find(n,m):
  r = n%m
  return (r)","[""find(10, 3) == 1"", ""find(20, 5) == 0"", ""find(17, 4) == 1""]","@startuml

title ""Find Remainder of Two Numbers""

start
:find(n, m);

if (n == 0) then (no)
:return 0;
else (yes)
:remainder = n % m;
:return remainder;

@enduml"
68,"def is_Monotonic(A):
""""""
Write a python function to check whether the given array is monotonic or not.
Your code should satisfy these tests:
is_Monotonic([1, 2, 2, 3]) == True
is_Monotonic([6, 5, 4, 4]) == True
is_Monotonic([1, 3, 2]) == False
""""""
",is_Monotonic,"def check(candidate):

    assert candidate([6, 5, 4, 4]) == True
    assert candidate([1, 2, 2, 3]) == True
    assert candidate([1, 3, 2]) == False
","def is_Monotonic(A):
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ","[""is_Monotonic([1, 2, 2, 3]) == True"", ""is_Monotonic([6, 5, 4, 4]) == True"", ""is_Monotonic([1, 3, 2]) == False""]","@startuml
start

:Input array A;
if (Is array A empty?) then (yes)
  :Return True;
  stop
else (no)
  :Initialize increasing = True;
  :Initialize decreasing = True;
  :Loop through array A from index 1 to end;
  while (Loop through array A?) is (yes)
    if (A[i] > A[i-1]?) then (yes)
      :Set decreasing = False;
    else (no)
      if (A[i] < A[i-1]?) then (yes)
        :Set increasing = False;
      endif
    endif
  endwhile
  if (increasing == True OR decreasing == True?) then (yes)
    :Return True;
  else (no)
    :Return False;
  endif
endif

stop
@enduml"
166,"def find_even_Pair(A,N):
""""""
Write a python function to count the pairs with xor as an even number.
Your code should satisfy these tests:
find_even_Pair([1, 2, 3, 4], 4) == 2
find_even_Pair([5, 5, 5, 5], 4) == 6
find_even_Pair([10, 20, 30, 40, 50], 5) == 10
""""""
",find_even_Pair,"def check(candidate):

    assert candidate([5,4,7,2,1],5) == 4
    assert candidate([7,2,8,1,0,5,11],7) == 9
    assert candidate([1,2,3],3) == 1
","def find_even_Pair(A,N):
    evenPair = 0
    for i in range(0,N):
        for j in range(i+1,N):
            if ((A[i] ^ A[j]) % 2 == 0):
                evenPair+=1
    return evenPair; ","[""find_even_Pair([1, 2, 3, 4], 4) == 2"", ""find_even_Pair([5, 5, 5, 5], 4) == 6"", ""find_even_Pair([10, 20, 30, 40, 50], 5) == 10""]","@startuml
start

:Input array A and integer N;
:Initialize count = 0;

if (N <= 1?) then (yes)
  :Return 0;
  stop
else (no)
  :Initialize i = 0;
  while (i < N) is (yes)
    :Initialize j = i + 1;
    while (j < N) is (yes)
      :Calculate xor_result = A[i] ^ A[j];
      if (xor_result is even?) then (yes)
        :count = count + 1;
      else (no)
        :Do nothing;
      endif
      :j = j + 1;
    endwhile (no)
    :i = i + 1;
  endwhile (no)
  :Return count;
  stop
endif

@enduml"
810,"def count_variable(a,b,c,d):
""""""
Write a function to iterate over elements repeating each as many times as its count.
Your code should satisfy these tests:
count_variable(2, 3, 1, 4) == ['p', 'p', 'q', 'q', 'q', 'r', 's', 's', 's', 's']
count_variable(0, 0, 0, 0) == []
count_variable(5, 5, 5, 5) == ['p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's']
""""""
",count_variable,"def check(candidate):

    assert candidate(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q']
    assert candidate(0,1,2,3)==['q', 'r', 'r', 's', 's', 's']
    assert candidate(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']
","from collections import Counter
def count_variable(a,b,c,d):
  c = Counter(p=a, q=b, r=c, s=d)
  return list(c.elements())","[""count_variable(2, 3, 1, 4) == ['p', 'p', 'q', 'q', 'q', 'r', 's', 's', 's', 's']"", ""count_variable(0, 0, 0, 0) == []"", ""count_variable(5, 5, 5, 5) == ['p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's']""]","@startuml

start
:count_variable(a,b,c,d);

if (a > 0) then (yes)
:repeat a times;
:p;
:end repeat;
else (no)
:do nothing;
endif

if (b > 0) then (yes)
:repeat b times;
:q;
:end repeat;
else (no)
:do nothing;
endif

if (c > 0) then (yes)
:repeat c times;
:r;
:end repeat;
else (no)
:do nothing;
endif

if (d > 0) then (yes)
:repeat d times;
:s;
:end repeat;
else (no)
:do nothing;
endif

stop

@enduml"
84,"def sequence(n):
""""""
Write a function to find the n-th number in newman conway sequence.
Your code should satisfy these tests:
sequence(1) == 1
sequence(2) == 1
""""""
",sequence,"def check(candidate):

    assert candidate(10) == 6
    assert candidate(2) == 1
    assert candidate(3) == 2
","def sequence(n):
	if n == 1 or n == 2:
		return 1
	else:
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))","[""sequence(1) == 1"", ""sequence(2) == 1""]","@startuml
start
if (n <= 0) then (invalid input)
  :Return ""Invalid input"";
  stop
else
  if (n == 1) then (base case)
    :Return 1;
    stop
  else
    :Initialize an array dp of size n+1;
    :dp[1] = 1;
    :dp[2] = 1;
    :loop i from 3 to n;
      :dp[i] = dp[dp[i-1]] + dp[i - dp[i-1]];
    end
    :Return dp[n];
    stop
  endif
endif
@enduml"
793,"def last(arr,x,n):
""""""
Write a python function to find the last position of an element in a sorted array.
Your code should satisfy these tests:
last([1, 2, 2, 2, 3, 4, 5], 2, 7) == 3
last([10, 20, 20, 20, 30, 40, 50], 20, 7) == 3
last([5, 10, 15, 20, 25, 30, 35], 35, 7) == 6
""""""
",last,"def check(candidate):

    assert candidate([1,2,3],1,3) == 0
    assert candidate([1,1,1,2,3,4],1,6) == 2
    assert candidate([2,3,2,3,6,8,9],3,8) == 3
","def last(arr,x,n):
    low = 0
    high = n - 1
    res = -1
    while (low <= high):
        mid = (low + high) // 2
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            low = mid + 1
    return res","[""last([1, 2, 2, 2, 3, 4, 5], 2, 7) == 3"", ""last([10, 20, 20, 20, 30, 40, 50], 20, 7) == 3"", ""last([5, 10, 15, 20, 25, 30, 35], 35, 7) == 6""]","@startuml

start
:last(arr, x, n);

if (arr is empty) then (no)
:return -1;

else (yes)
:initialize result to -1;

for each element in arr
:if element is x then
:result = index;
:break;

if (result is -1) then (no)
:return -1;

else (yes)
:return result;

@enduml"
521,"def check_isosceles(x,y,z):
""""""
Write a function to print check if the triangle is scalene or not.
Your code should satisfy these tests:
check_isosceles(5, 5, 8) == False
check_isosceles(7, 7, 7) == False
check_isosceles(3, 4, 5) == True
""""""
",check_isosceles,"def check(candidate):

    assert candidate(6,8,12)==True
    assert candidate(6,6,12)==False
    assert candidate(6,15,20)==True
","def check_isosceles(x,y,z):
  if x!=y & y!=z & z!=x:
	   return True
  else:
     return False","[""check_isosceles(5, 5, 8) == False"", ""check_isosceles(7, 7, 7) == False"", ""check_isosceles(3, 4, 5) == True""]","@startuml
start
:Input x;
:Input y;
:Input z;
if (x == y or y == z or z == x) then (is_isosceles)
    :return False;
else (not_isosceles)
    :return True;
endif
stop
@enduml"
540,"def find_Diff(arr,n):
""""""
Write a python function to find the difference between highest and least frequencies in a given array.
Your code should satisfy these tests:
find_Diff([1, 1, 2, 2, 2, 3, 3, 3, 3], 9) == 1
find_Diff([4, 4, 4, 4, 5, 5, 6], 7) == 2
find_Diff([7, 8, 9, 10, 10, 10, 11, 11], 8) == 2
""""""
",find_Diff,"def check(candidate):

    assert candidate([1,1,2,2,7,8,4,5,1,4],10) == 2
    assert candidate([1,7,9,2,3,3,1,3,3],9) == 3
    assert candidate([1,2,1,2],4) == 0
","def find_Diff(arr,n):
    arr.sort()
    count = 0; max_count = 0; min_count = n
    for i in range(0,(n-1)):
        if arr[i] == arr[i + 1]:
            count += 1
            continue
        else:
            max_count = max(max_count,count)
            min_count = min(min_count,count)
            count = 0
    return max_count - min_count ","[""find_Diff([1, 1, 2, 2, 2, 3, 3, 3, 3], 9) == 1"", ""find_Diff([4, 4, 4, 4, 5, 5, 6], 7) == 2"", ""find_Diff([7, 8, 9, 10, 10, 10, 11, 11], 8) == 2""]","@startuml
start

:Input array (arr) and its length (n);
:Initialize a frequency dictionary (freq_dict);

:Iterate through each element in arr;
if (Element exists in freq_dict?) then (yes)
  :Increment the count of the element in freq_dict;
else (no)
  :Add the element to freq_dict with a count of 1;
endif

:Find the maximum frequency (max_freq) in freq_dict;
:Find the minimum frequency (min_freq) in freq_dict;

:Calculate the difference (diff) between max_freq and min_freq;

:Return diff;

stop
@enduml"
543,"def count_digits(num1,num2):
""""""
Write a function to add two numbers and print number of digits of sum.
Your code should satisfy these tests:
count_digits(123, 456) == 3
count_digits(0, 0) == 0
count_digits(9999, 1) == 5
""""""
",count_digits,"def check(candidate):

    assert candidate(9875,10)==(4)
    assert candidate(98759853034,100)==(11)
    assert candidate(1234567,500)==(7)
","def count_digits(num1,num2):
    number=num1+num2
    count = 0
    while(number > 0):
        number = number // 10
        count = count + 1
    return count","[""count_digits(123, 456) == 3"", ""count_digits(0, 0) == 0"", ""count_digits(9999, 1) == 5""]","@startuml

start
:count_digits(num1, num2);

if (num1 == 0) then (
  :return 0;
) else (
  :sum = num1 + num2;
  :count = 0;
  while (sum > 0) do (
    :count = count + 1;
    :sum = sum / 10;
  )
  :return count;
)

@enduml"
281,"def all_unique(test_list):
""""""
Write a python function to check if the elements of a given list are unique or not.
Your code should satisfy these tests:
all_unique([1, 2, 3, 4, 5]) == True
all_unique(['a', 'b', 'c', 'a']) == False
all_unique([True, False, True]) == False
""""""
",all_unique,"def check(candidate):

    assert candidate([1,2,3]) == True
    assert candidate([1,2,1,2]) == False
    assert candidate([1,2,3,4,5]) == True
","def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True","[""all_unique([1, 2, 3, 4, 5]) == True"", ""all_unique(['a', 'b', 'c', 'a']) == False"", ""all_unique([True, False, True]) == False""]","@startuml

title all_unique

start
:Check if list is empty;
if (list is empty) then (true)
  :Return true;
else (false)
  :Create a set from the list;
  set = set(list)
  :Check if the set has the same length as the list;
  if (set.length == list.length) then (true)
    :Return true;
  else (false)
    :Return false;
  endif
endif

@enduml"
188,"def prod_Square(n):
""""""
Write a python function to check whether the given number can be represented by product of two squares or not.
Your code should satisfy these tests:
prod_Square(16) == True
prod_Square(36) == True
prod_Square(64) == True
prod_Square(100) == True
prod_Square(144) == True
""""""
",prod_Square,"def check(candidate):

    assert candidate(25) == False
    assert candidate(30) == False
    assert candidate(16) == True
","def prod_Square(n):
    for i in range(2,(n) + 1):
        if (i*i < (n+1)):
            for j in range(2,n + 1):
                if ((i*i*j*j) == n):
                    return True;
    return False;","[""prod_Square(16) == True"", ""prod_Square(36) == True"", ""prod_Square(64) == True"", ""prod_Square(100) == True"", ""prod_Square(144) == True""]","@startuml
start
:Input: n;
:if n <= 0: then (False)
    :return False;
endif;
:sqrt: n;
:result: 0;
:for: i from 1 to sqrt(n):
    :if n % i == 0: then (True)
        :temp: n / i;
        :if sqrt(temp) % 1 == 0: then (True)
            :result: result + 1;
        endif;
    endif;
endfor;
:if result > 2: then (True)
    :return True;
else:
    :return False;
endif;
stop
@enduml"
727,"def remove_char(S):
""""""
Write a function to remove all characters except letters and numbers using regex
Your code should satisfy these tests:
remove_char(""Hello, World!"") == ""HelloWorld""
remove_char(""Python_3.8"") == ""Python38""
remove_char(""123-456-7890"") == ""1234567890""
""""""
",remove_char,"def check(candidate):

    assert candidate(""123abcjw:, .@! eiw"") == '123abcjweiw'
    assert candidate(""Hello1234:, ! Howare33u"") == 'Hello1234Howare33u'
    assert candidate(""Cool543Triks@:, Make@987Trips"") == 'Cool543TriksMake987Trips'
","import re
def remove_char(S):
  result = re.sub('[\W_]+', '', S)
  return result","[""remove_char(\""Hello, World!\"") == \""HelloWorld\"""", ""remove_char(\""Python_3.8\"") == \""Python38\"""", ""remove_char(\""123-456-7890\"") == \""1234567890\""""]","@startuml
start

:Input string S;
:Initialize an empty string result;

if (Is character in S a letter or number?) then (yes)
  :Append character to result;
else (no)
  :Skip character;
endif

:Repeat for all characters in S;

:Return result;

stop
@enduml"
567,"def issort_list(list1):
""""""
Write a function to check whether a specified list is sorted or not.
Your code should satisfy these tests:
issort_list([1, 2, 3, 4, 5]) == True
issort_list([5, 4, 3, 2, 1]) == False
issort_list([1, 1, 1, 1, 1]) == True
""""""
",issort_list,"def check(candidate):

    assert candidate([1,2,4,6,8,10,12,14,16,17])==True
    assert candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False
    assert candidate([1, 2, 4, 6, 8, 10,15,14,20])==False
","def issort_list(list1):
    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))
    return result","[""issort_list([1, 2, 3, 4, 5]) == True"", ""issort_list([5, 4, 3, 2, 1]) == False"", ""issort_list([1, 1, 1, 1, 1]) == True""]","@startuml

issort_list(list1)

:Check if list is empty;
if (list1.length == 0) then (
    return True
)

:Check if list is sorted;
if (list1.length == 1) then (
    return True
)

:Check if list is sorted;
if (list1.length > 1) then (
    for i in range(list1.length - 1):
        if (list1[i] > list1[i + 1]) then (
            return False
        )
    return True
)

@enduml"
866,"def check_monthnumb(monthname2):
""""""
Write a function to check whether the given month name contains 31 days or not.
Your code should satisfy these tests:
check_monthnumb(""January"") == True
check_monthnumb(""February"") == False
check_monthnumb(""April"") == False
""""""
",check_monthnumb,"def check(candidate):

    assert candidate(""February"")==False
    assert candidate(""January"")==True
    assert candidate(""March"")==True
","def check_monthnumb(monthname2):
  if(monthname2==""January"" or monthname2==""March""or monthname2==""May"" or monthname2==""July"" or monthname2==""Augest"" or monthname2==""October"" or monthname2==""December""):
    return True
  else:
    return False","[""check_monthnumb(\""January\"") == True"", ""check_monthnumb(\""February\"") == False"", ""check_monthnumb(\""April\"") == False""]","@startuml
start

:Input monthname2;
if (monthname2 == ""January"" or monthname2 == ""March"" or monthname2 == ""May"" or monthname2 == ""July"" or monthname2 == ""August"" or monthname2 == ""October"" or monthname2 == ""December"") then (yes)
    :Return True;
else (no)
    :Return False;
endif

stop
@enduml"
448,"def cal_sum(n):
""""""
Write a function to calculate the sum of perrin numbers.
Your code should satisfy these tests:
cal_sum(0) == 3
cal_sum(1) == 3
cal_sum(5) == 15
""""""
",cal_sum,"def check(candidate):

    assert candidate(9) == 49
    assert candidate(10) == 66
    assert candidate(11) == 88
","def cal_sum(n):
	a = 3
	b = 0
	c = 2
	if (n == 0):
		return 3
	if (n == 1):
		return 3
	if (n == 2):
		return 5
	sum = 5
	while (n > 2):
		d = a + b
		sum = sum + d
		a = b
		b = c
		c = d
		n = n-1
	return sum","[""cal_sum(0) == 3"", ""cal_sum(1) == 3"", ""cal_sum(5) == 15""]","@startuml
start

:Input n (number of terms);
if (n < 0?) then (yes)
    :Throw error or return invalid input message;
    stop
else (no)
    if (n == 0?) then (yes)
        :Return 3;
        stop
    else (no)
        if (n == 1?) then (yes)
            :Return 3;
            stop
        else (no)
            :Initialize Perrin sequence with P(0) = 3, P(1) = 0, P(2) = 2;
            :Initialize sum = 3 (since P(0) = 3);
            :Initialize i = 3;
            while (i <= n?) is (yes)
                :Calculate P(i) = P(i-2) + P(i-3);
                :Add P(i) to sum;
                :Increment i by 1;
            endwhile (no)
            :Return sum;
            stop
        endif
    endif
endif

@enduml"
958,"def int_to_roman( num):
""""""
Write a function to convert an integer into a roman numeral.
Your code should satisfy these tests:
int_to_roman(3) == 'III'
int_to_roman(58) == 'LVIII'
int_to_roman(1994) == 'MCMXCIV'
""""""
",int_to_roman,"def check(candidate):

    assert candidate(1)==(""I"")
    assert candidate(50)==(""L"")
    assert candidate(4)==(""IV"")
","def int_to_roman( num):
        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]
        syb = [""M"", ""CM"", ""D"", ""CD"",""C"", ""XC"", ""L"", ""XL"",""X"", ""IX"", ""V"", ""IV"",""I""]
        roman_num = ''
        i = 0
        while  num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num","[""int_to_roman(3) == 'III'"", ""int_to_roman(58) == 'LVIII'"", ""int_to_roman(1994) == 'MCMXCIV'""]","@startuml

title int_to_roman(num)

start
:Start;

if (num <= 0) then (false)
:Invalid input;
:Return ""Invalid input"";
else (true)

:Convert num to roman numeral;
:Return roman numeral;

end if;

stop
:End;

@enduml"
101,"def kth_element(arr, n, k):
""""""
Write a function to find the kth element in the given array.
Your code should satisfy these tests:
kth_element([3, 1, 4, 1, 5, 9, 2, 6, 5], 9, 3) == 4
kth_element([10, 7, 8, 9, 1, 5], 6, 2) == 7
kth_element([1, 2, 3, 4, 5], 5, 1) == 1
kth_element([5, 4, 3, 2, 1], 5, 5) == 1
kth_element([9, 3, 6, 1, 7], 5, 4) == 1
""""""
",kth_element,"def check(candidate):

    assert candidate([12,3,5,7,19], 5, 2) == 3
    assert candidate([17,24,8,23], 4, 3) == 8
    assert candidate([16,21,25,36,4], 5, 4) == 36
","def kth_element(arr, n, k):
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]","[""kth_element([3, 1, 4, 1, 5, 9, 2, 6, 5], 9, 3) == 4"", ""kth_element([10, 7, 8, 9, 1, 5], 6, 2) == 7"", ""kth_element([1, 2, 3, 4, 5], 5, 1) == 1"", ""kth_element([5, 4, 3, 2, 1], 5, 5) == 1"", ""kth_element([9, 3, 6, 1, 7], 5, 4) == 1""]","@startuml

start
:kth_element(arr, n, k);

if (n == 1) then (
  :return arr[0];
)

if (n == k) then (
  :return arr[n-1];
)

if (n < k) then (
  :return kth_element(arr[n:], n+1, k-n);
)

if (n > k) then (
  :return kth_element(arr[:n], n-1, k);
)

end

@enduml"
872,"def check_subset(list1,list2):
""""""
Write a function to check if a nested list is a subset of another nested list.
Your code should satisfy these tests:
check_subset([1, 2, 3, 4], [2, 3]) == True
check_subset(['a', 'b', 'c'], ['b', 'd']) == False
check_subset([10, 20, 30], [10, 20, 30]) == True
""""""
",check_subset,"def check(candidate):

    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True
    assert candidate([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True
    assert candidate([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False
","def check_subset(list1,list2):
    return all(map(list1.__contains__,list2)) ","[""check_subset([1, 2, 3, 4], [2, 3]) == True"", ""check_subset(['a', 'b', 'c'], ['b', 'd']) == False"", ""check_subset([10, 20, 30], [10, 20, 30]) == True""]","@startuml
start

:Check if both lists are empty?;
if (Both empty?) then (yes)
  :Return True;
  stop
else (no)
  :Check if any list is empty?;
  if (Any empty?) then (yes)
    :Return False;
    stop
  else (no)
    :Iterate over elements in list2;
    :Check if each element in list2 is in list1;
    fork
      :Compare each element;
    fork again
      :If all elements found, return True;
      stop
    end fork
    :If not all elements found, return False;
    stop
  endif
endif

stop
@enduml"
602,"def first_repeated_char(str1):
""""""
Write a python function to find the first repeated character in a given string.
Your code should satisfy these tests:
first_repeated_char(""programming"") == ""r""
first_repeated_char(""abcdefg"") == ""None""
first_repeated_char(""aabbcc"") == ""a""
""""""
",first_repeated_char,"def check(candidate):

    assert candidate(""abcabc"") == ""a""
    assert candidate(""abc"") == ""None""
    assert candidate(""123123"") == ""1""
","def first_repeated_char(str1):
  for index,c in enumerate(str1):
    if str1[:index+1].count(c) > 1:
      return c
  return ""None""","[""first_repeated_char(\""programming\"") == \""r\"""", ""first_repeated_char(\""abcdefg\"") == \""None\"""", ""first_repeated_char(\""aabbcc\"") == \""a\""""]","@startuml

title first_repeated_char

start
:first_repeated_char(str1);

if (str1 == """") then (no)
:return ""None"";
else (yes)
:char_count = {};
:for each char in str1 do
:   if (char_count[char] == undefined) then (no)
:       char_count[char] = 1;
:   else (yes)
:       return char;
:   endif;
:endfor;
:return ""None"";
endif;

@enduml"
618,"def div_list(nums1,nums2):
""""""
Write a function to divide two lists using map and lambda function.
Your code should satisfy these tests:
div_list([10, 20, 30], [2, 4, 5]) == [5.0, 5.0, 6.0]
div_list([100, 50, 25], [10, 5, 5]) == [10.0, 10.0, 5.0]
div_list([8, 16, 32], [2, 4, 8]) == [4.0, 4.0, 4.0]
""""""
",div_list,"def check(candidate):

    assert candidate([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]
    assert candidate([3,2],[1,4])==[3.0, 0.5]
    assert candidate([90,120],[50,70])==[1.8, 1.7142857142857142]
","def div_list(nums1,nums2):
  result = map(lambda x, y: x / y, nums1, nums2)
  return list(result)","[""div_list([10, 20, 30], [2, 4, 5]) == [5.0, 5.0, 6.0]"", ""div_list([100, 50, 25], [10, 5, 5]) == [10.0, 10.0, 5.0]"", ""div_list([8, 16, 32], [2, 4, 8]) == [4.0, 4.0, 4.0]""]","@startuml

start
:div_list(nums1, nums2);

if (nums1 == null || nums2 == null) then (no)
:return null;

else (yes)
:result = [];

for (i = 0; i < nums1.length; i++) do
:result.push(nums1[i] / nums2[i]);

end for

:return result;

@enduml"
105,"def count(lst):
""""""
Write a python function to count true booleans in the given list.
Your code should satisfy these tests:
count([1, 2, 3, 4]) == 10
count([-1, -2, -3, -4]) == -10
count([0, 0, 0, 0]) == 0
""""""
",count,"def check(candidate):

    assert candidate([True,False,True]) == 2
    assert candidate([False,False]) == 0
    assert candidate([True,True,True]) == 3
","def count(lst):
    return sum(lst) ","[""count([1, 2, 3, 4]) == 10"", ""count([-1, -2, -3, -4]) == -10"", ""count([0, 0, 0, 0]) == 0""]","@startuml
start

:Input list (lst);
if (Is lst a list?) then (yes)
    :Initialize sum = 0;
    :Initialize index = 0;
    while (index < length of lst) is (yes)
        :Add lst[index] to sum;
        :Increment index by 1;
    endwhile (no)
    :Return sum;
else (no)
    :Return ""Invalid input: Expected a list"";
endif

stop
@enduml"
669,"def check_IP(Ip):
""""""
Write a function to check whether the given ip address is valid or not using regex.
Your code should satisfy these tests:
check_IP(""192.168.1.1"") == ""Valid IP address""
check_IP(""256.256.256.256"") == ""Invalid IP address""
check_IP(""0.0.0.0"") == ""Valid IP address""
""""""
",check_IP,"def check(candidate):

    assert candidate(""192.168.0.1"") == 'Valid IP address'
    assert candidate(""110.234.52.124"") == 'Valid IP address'
    assert candidate(""366.1.2.2"") == 'Invalid IP address'
","import re
regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''
def check_IP(Ip):
	if(re.search(regex, Ip)):
		return (""Valid IP address"")
	else:
		return (""Invalid IP address"") ","[""check_IP(\""192.168.1.1\"") == \""Valid IP address\"""", ""check_IP(\""256.256.256.256\"") == \""Invalid IP address\"""", ""check_IP(\""0.0.0.0\"") == \""Valid IP address\""""]","@startuml

start
:check_IP(Ip);

if (Ip == ""0.0.0.0"") then (
  :return ""Valid IP address"";
) elseif (Ip == ""256.256.256.256"") then (
  :return ""Invalid IP address"";
) else (
  :return ""Valid IP address"";
)

@enduml"
486,"def nCr(n, r):
""""""
Write a function to compute binomial probability for the given number.
Your code should satisfy these tests:
nCr(5, 2) == 10
nCr(10, 3) == 120
nCr(7, 4) == 35
nCr(8, 0) == 1
nCr(6, 6) == 1
""""""
",nCr,"def check(candidate):

    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185
    assert binomial_probability(11, 6, 2.0/4) == 0.2255859375
    assert binomial_probability(12, 7, 3.0/5) == 0.227030335488
","def nCr(n, r):
	if (r > n / 2):
		r = n - r
	answer = 1
	for i in range(1, r + 1):
		answer *= (n - r + i)
		answer /= i
	return answer
def binomial_probability(n, k, p):
	return (nCr(n, k) * pow(p, k) *	pow(1 - p, n - k)) ","[""nCr(5, 2) == 10"", ""nCr(10, 3) == 120"", ""nCr(7, 4) == 35"", ""nCr(8, 0) == 1"", ""nCr(6, 6) == 1""]","@startuml
start
:Input n;
:Input r;
if (n < r) then (
    :Error;
    stop
)
if (n < 0 or r < 0) then (
    :Error;
    stop
)
if (nCr(n, r) == 1) then (
    :Output 1;
    stop
)
if (n == r) then (
    :Output 1;
    stop
)
if (r == 0) then (
    :Output 1;
    stop
)
:Calculate nCr(n-1, r-1) + nCr(n-1, r);
:Output nCr;
stop
@enduml"
902,"def add_dict(d1,d2):
""""""
Write a function to combine two dictionaries by adding values for common keys.
Your code should satisfy these tests:
add_dict({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == Counter({'b': 5, 'c': 4, 'a': 1})
add_dict({'x': 10, 'y': 20}, {'x': 5, 'z': 15}) == Counter({'x': 15, 'y': 20, 'z': 15})
add_dict({'m': 1, 'n': 2, 'o': 3}, {'p': 4, 'q': 5}) == Counter({'m': 1, 'n': 2, 'o': 3, 'p': 4, 'q': 5})
""""""
",add_dict,"def check(candidate):

    assert candidate({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300})
    assert candidate({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900})
    assert candidate({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})
","from collections import Counter
def add_dict(d1,d2):
   add_dict = Counter(d1) + Counter(d2)
   return add_dict","[""add_dict({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == Counter({'b': 5, 'c': 4, 'a': 1})"", ""add_dict({'x': 10, 'y': 20}, {'x': 5, 'z': 15}) == Counter({'x': 15, 'y': 20, 'z': 15})"", ""add_dict({'m': 1, 'n': 2, 'o': 3}, {'p': 4, 'q': 5}) == Counter({'m': 1, 'n': 2, 'o': 3, 'p': 4, 'q': 5})""]","@startuml

start

:add_dict(d1, d2);

if (d1.keys() & d2.keys()) != 0 then
  :combine keys;
  :add values;
else
  :return d1;
endif

if (d1.keys() & d2.keys()) == 0 then
  :return d2;
endif

:return combined dictionary;

@enduml"
667,"def Check_Vow(string, vowels):
""""""
Write a python function to count number of vowels in the string.
Your code should satisfy these tests:
Check_Vow(""hello world"", ""aeiou"") == 3
Check_Vow(""python programming"", ""aeiou"") == 4
Check_Vow(""sky"", ""aeiou"") == 0
""""""
",Check_Vow,"def check(candidate):

    assert candidate('corner','AaEeIiOoUu') == 2
    assert candidate('valid','AaEeIiOoUu') == 2
    assert candidate('true','AaEeIiOoUu') ==2
","def Check_Vow(string, vowels):
    final = [each for each in string if each in vowels]
    return(len(final))
","[""Check_Vow(\""hello world\"", \""aeiou\"") == 3"", ""Check_Vow(\""python programming\"", \""aeiou\"") == 4"", ""Check_Vow(\""sky\"", \""aeiou\"") == 0""]","@startuml
start

:Input string and vowels;
if (Is string empty?) then (yes)
    :Return 0;
    stop
else (no)
    :Initialize counter = 0;
    :Initialize index = 0;
    while (index < length of string?) is (yes)
        :Get current character = string[index];
        if (Is current character in vowels?) then (yes)
            :Increment counter by 1;
        else (no)
            :Do nothing;
        endif
        :Increment index by 1;
    endwhile (no)
    :Return counter;
    stop
endif

@enduml"
38,"def div_even_odd(list1):
""""""
Write a function to find the division of first even and odd number of a given list.
Your code should satisfy these tests:
div_even_odd([2, 4, 6, 8, 10]) == -2.0
div_even_odd([1, 3, 5, 7, 2]) == 2.0
div_even_odd([-2, -3, -4, -5, -6]) == 0.6666666666666666
""""""
",div_even_odd,"def check(candidate):

    assert candidate([1,3,5,7,4,1,6,8])==4
    assert candidate([1,2,3,4,5,6,7,8,9,10])==2
    assert candidate([1,5,7,9,10])==10
","def div_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even/first_odd)","[""div_even_odd([2, 4, 6, 8, 10]) == -2.0"", ""div_even_odd([1, 3, 5, 7, 2]) == 2.0"", ""div_even_odd([-2, -3, -4, -5, -6]) == 0.6666666666666666""]","@startuml

title div_even_odd

start
:div_even_odd(list1);

if (list1 is empty) then (no)
:return -1;

else (yes)
:find first even and odd numbers in list1;

if (first even number is not found) then (no)
:return -2;

else (yes)
:divide first even number by first odd number;
:return result;

end if;

end if;

@enduml"
530,"def negative_count(nums):
""""""
Write a function to find the ration of negative numbers in an array of integers.
Your code should satisfy these tests:
negative_count(array('i', [1, 2, 3, -1, -2, -3])) == 0.5
negative_count(array('i', [-5, -4, -3, -2, -1])) == 1.0
negative_count(array('i', [0, 0, 0, 0, 0])) == 0.0
negative_count(array('i', [10, -10, 20, -20, 30, -30])) == 0.5
negative_count(array('i', [-1, -2, -3, -4, -5, 6, 7, 8, 9, 10])) == 0.5
""""""
",negative_count,"def check(candidate):

    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31
    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31
    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44
","from array import array
def negative_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x < 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)","[""negative_count(array('i', [1, 2, 3, -1, -2, -3])) == 0.5"", ""negative_count(array('i', [-5, -4, -3, -2, -1])) == 1.0"", ""negative_count(array('i', [0, 0, 0, 0, 0])) == 0.0"", ""negative_count(array('i', [10, -10, 20, -20, 30, -30])) == 0.5"", ""negative_count(array('i', [-1, -2, -3, -4, -5, 6, 7, 8, 9, 10])) == 0.5""]","@startuml
start
:Input: nums
:Check if nums is empty: is_empty(nums)
if (is_empty == true) then
    :Return 0: return 0
else
    :Initialize count to 0: count = 0
    :Initialize total to len(nums): total = len(nums)
    :Iterate over nums: for num in nums
        :Check if num is negative: num < 0
        if (num < 0) then
            :Increment count: count = count + 1
        endif
    endfor
    :Calculate ratio: ratio = count / total
    :Return ratio: return ratio
endif
stop
@enduml"
587,"def list_tuple(listx):
""""""
Write a function to convert a list to a tuple.
Your code should satisfy these tests:
list_tuple([1, 2, 3]) == (1, 2, 3)
list_tuple(['a', 'b', 'c']) == ('a', 'b', 'c')
list_tuple([True, False, True]) == (True, False, True)
""""""
",list_tuple,"def check(candidate):

    assert candidate([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)
    assert candidate([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)
    assert candidate([58,44,56])==(58,44,56)
","def list_tuple(listx):
  tuplex = tuple(listx)
  return tuplex","[""list_tuple([1, 2, 3]) == (1, 2, 3)"", ""list_tuple(['a', 'b', 'c']) == ('a', 'b', 'c')"", ""list_tuple([True, False, True]) == (True, False, True)""]","@startuml

title list_tuple(listx)

start
:list_tuple(listx);

if (listx is not empty) then (yes)
  :convert list to tuple;
  :return tuple;
else (no)
  :return empty tuple;
endif

@enduml"
33,"def decimal_To_Binary(N):
""""""
Write a python function to convert a decimal number to binary number.
Your code should satisfy these tests:
decimal_To_Binary(0) == 0
decimal_To_Binary(1) == 1
decimal_To_Binary(2) == 10
decimal_To_Binary(5) == 101
decimal_To_Binary(10) == 1010
""""""
",decimal_To_Binary,"def check(candidate):

    assert candidate(10) == 1010
    assert candidate(1) == 1
    assert candidate(20) == 10100
","def decimal_To_Binary(N):
    B_Number = 0
    cnt = 0
    while (N != 0):
        rem = N % 2
        c = pow(10,cnt)
        B_Number += rem*c
        N //= 2
        cnt += 1
    return B_Number  ","[""decimal_To_Binary(0) == 0"", ""decimal_To_Binary(1) == 1"", ""decimal_To_Binary(2) == 10"", ""decimal_To_Binary(5) == 101"", ""decimal_To_Binary(10) == 1010""]","@startuml
start
:Input Decimal Number;
if (Decimal Number is 0?) then (yes)
  :Return 0;
  stop
elseif (Decimal Number is 1?) then (yes)
  :Return 1;
  stop
else (no)
  :Convert Decimal to Binary;
  :Initialize Binary Number as Empty String;
  while (Decimal Number > 0) is (yes)
    :Divide Decimal Number by 2;
    :Get the remainder;
    :Append the remainder to Binary Number;
  endwhile
  :Reverse Binary Number;
  :Return Binary Number;
endif
stop
@enduml"
143,"def find_lists(Input):
""""""
Write a function to find number of lists present in the given tuple.
Your code should satisfy these tests:
find_lists([1, 2, 3]) == 1
find_lists(""hello"") == 5
find_lists((1, 2, 3)) == 3
""""""
",find_lists,"def check(candidate):

    assert candidate(([1, 2, 3, 4], [5, 6, 7, 8])) == 2
    assert candidate(([1, 2], [3, 4], [5, 6]))  == 3
    assert candidate(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1
","def find_lists(Input):
	if isinstance(Input, list):
		return 1
	else:
		return len(Input) ","[""find_lists([1, 2, 3]) == 1"", ""find_lists(\""hello\"") == 5"", ""find_lists((1, 2, 3)) == 3""]","@startuml
start

:Input the data;
if (Is the input a tuple?) then (yes)
    :Initialize counter = 0;
    :Iterate through each element in the tuple;
    if (Is the element a list?) then (yes)
        :Increment counter by 1;
    else (no)
        :Continue to the next element;
    endif
    :Return counter as the number of lists;
else (no)
    if (Is the input a list?) then (yes)
        :Return 1 (since the input itself is a list);
    else (no)
        if (Is the input a string?) then (yes)
            :Return the length of the string;
        else (no)
            :Return 0 (input is neither a tuple, list, nor string);
        endif
    endif
endif

stop
@enduml"
843,"def nth_super_ugly_number(n, primes):
""""""
Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.
Your code should satisfy these tests:
nth_super_ugly_number(10, [2, 3, 5]) == 12
nth_super_ugly_number(1, [2, 7, 13, 19, 31, 53]) == 1
nth_super_ugly_number(12, [2, 7, 13, 19, 31, 53]) == 31
""""""
",nth_super_ugly_number,"def check(candidate):

    assert candidate(12,[2,7,13,19])==32
    assert candidate(10,[2,7,13,19])==26
    assert candidate(100,[2,7,13,19])==5408
","import heapq
def nth_super_ugly_number(n, primes):
    uglies = [1]
    def gen(prime):
        for ugly in uglies:
            yield ugly * prime
    merged = heapq.merge(*map(gen, primes))
    while len(uglies) < n:
        ugly = next(merged)
        if ugly != uglies[-1]:
            uglies.append(ugly)
    return uglies[-1]","[""nth_super_ugly_number(10, [2, 3, 5]) == 12"", ""nth_super_ugly_number(1, [2, 7, 13, 19, 31, 53]) == 1"", ""nth_super_ugly_number(12, [2, 7, 13, 19, 31, 53]) == 31""]","@startuml
start
:initialize n, primes;
:initialize an empty heap;
:initialize an empty list, super_ugly_numbers, and add 1 to it;
:initialize an empty list, indices;
for each prime in primes do
    :add prime to heap;
    :add 0 to indices;
end
while super_ugly_numbers size < n do
    :pop the smallest element from heap and call it min_ugly;
    if min_ugly is not in super_ugly_numbers then
        :add min_ugly to super_ugly_numbers;
    endif
    for i in 0 to primes size do
        :if min_ugly == primes[i] * super_ugly_numbers[indices[i]] then
            :increment indices[i];
        endif
    endfor
    :push min_ugly back to heap;
endwhile
:return super_ugly_numbers[n];
stop
@enduml"
619,"def move_num(test_str):
""""""
Write a function to move all the numbers in it to the given string.
Your code should satisfy these tests:
move_num(""abc123"") == ""abc123""
move_num(""123abc"") == ""abc123""
move_num(""a1b2c3"") == ""abc123""
""""""
",move_num,"def check(candidate):

    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'
    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'
    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'
","def move_num(test_str):
  res = ''
  dig = ''
  for ele in test_str:
    if ele.isdigit():
      dig += ele
    else:
      res += ele
  res += dig
  return (res) ","[""move_num(\""abc123\"") == \""abc123\"""", ""move_num(\""123abc\"") == \""abc123\"""", ""move_num(\""a1b2c3\"") == \""abc123\""""]","@startuml
start

:Input string (test_str);
if (Is test_str empty or None?) then (yes)
    :Return empty string or handle error;
    stop
else (no)
    :Initialize two empty strings: letters and numbers;
    :Iterate through each character in test_str;
    if (Is character a digit?) then (yes)
        :Append character to numbers string;
    else (no)
        :Append character to letters string;
    endif
    :Concatenate letters and numbers;
    :Return the concatenated string;
    stop
endif

@enduml"
973,"def left_rotate(s,d):
""""""
Write a python function to left rotate the string.
Your code should satisfy these tests:
left_rotate(""abcdef"", 2) == ""cdefab""
left_rotate(""rotation"", 3) == ""ationrot""
left_rotate(""hello"", 1) == ""elloh""
""""""
",left_rotate,"def check(candidate):

    assert candidate(""python"",2) == ""thonpy""
    assert candidate(""bigdata"",3 ) == ""databig""
    assert candidate(""hadoop"",1 ) == ""adooph""
","def left_rotate(s,d):
    tmp = s[d : ] + s[0 : d]
    return tmp  ","[""left_rotate(\""abcdef\"", 2) == \""cdefab\"""", ""left_rotate(\""rotation\"", 3) == \""ationrot\"""", ""left_rotate(\""hello\"", 1) == \""elloh\""""]","@startuml
start
:Input String s;
:Input Integer d;
:Validate s is not None;
:Validate d is not None;
:Validate d is less than or equal to length of s;
if (d is less than length of s) then (Yes)
    :slice s from d to end;
    :slice s from 0 to d;
    :concatenate sliced parts;
else (No)
    :return s;
endif
:return result;
stop
@enduml"
508,"def same_order(l1, l2):
""""""
Write a function to check if the common elements between two given lists are in the same order or not.
Your code should satisfy these tests:
same_order([1, 2, 3, 4], [4, 3, 2, 1]) == False
same_order(['a', 'b', 'c'], ['a', 'b', 'c']) == True
same_order([10, 20, 30], [30, 20, 10, 40]) == False
""""""
",same_order,"def check(candidate):

    assert candidate([""red"",""green"",""black"",""orange""],[""red"",""pink"",""green"",""white"",""black""])==True
    assert candidate([""red"",""pink"",""green"",""white"",""black""],[""white"",""orange"",""pink"",""black""])==False
    assert candidate([""red"",""green"",""black"",""orange""],[""red"",""pink"",""green"",""white"",""black""])==True
","def same_order(l1, l2):
    common_elements = set(l1) & set(l2)
    l1 = [e for e in l1 if e in common_elements]
    l2 = [e for e in l2 if e in common_elements]
    return l1 == l2","[""same_order([1, 2, 3, 4], [4, 3, 2, 1]) == False"", ""same_order(['a', 'b', 'c'], ['a', 'b', 'c']) == True"", ""same_order([10, 20, 30], [30, 20, 10, 40]) == False""]","@startuml
start
:Input l1;
:Input l2;
if (l1 and l2 are not empty) then (yes)
  :Initialize common_elements as empty list;
  :Initialize common_elements_l1 as empty list;
  :Initialize common_elements_l2 as empty list;
  for (each element e in l1)
    if (e in l2) then (yes)
      add e to common_elements;
      add e to common_elements_l1;
    endif
  endfor
  for (each element e in l2)
    if (e in common_elements_l1) then (yes)
      add e to common_elements_l2;
    endif
  endfor
  if (common_elements_l1 == common_elements_l2) then (yes)
    :Return True;
  else (no)
    :Return False;
  endif
else (no)
  :Return False;
endif
stop
@enduml"
787,"def text_match_three(text):
""""""
Write a function that matches a string that has an a followed by three 'b'.
Your code should satisfy these tests:
text_match_three(""aabbb"") == 'Found a match!'
text_match_three(""abbb"") == 'Found a match!'
text_match_three(""aabb"") == 'Not matched!'
""""""
",text_match_three,"def check(candidate):

    assert candidate(""ac"")==('Not matched!')
    assert candidate(""dc"")==('Not matched!')
    assert candidate(""abbbba"")==('Found a match!')
","import re
def text_match_three(text):
        patterns = 'ab{3}?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","[""text_match_three(\""aabbb\"") == 'Found a match!'"", ""text_match_three(\""abbb\"") == 'Found a match!'"", ""text_match_three(\""aabb\"") == 'Not matched!'""]","@startuml
start
:Input Text;
if (Length of Text > 2) then (yes)
    :Check if text[0] == 'a' and text[1] == 'b' and text[2] == 'b' and text[3] == 'b';
    if (text[0] == 'a' and text[1] == 'b' and text[2] == 'b' and text[3] == 'b') then (yes)
        :Return 'Found a match!';
    else (no)
        :Return 'Not matched!';
    endif
else (no)
    :Return 'Not matched!';
endif
stop
@enduml"
393,"def max_length_list(input_list):
""""""
Write a function to find the list with maximum length using lambda function.
Your code should satisfy these tests:
max_length_list([[], [1], [1, 2], [1, 2, 3]]) == (3, [1, 2, 3])
max_length_list(['a', 'ab', 'abc', 'abcd']) == (4, 'abcd')
max_length_list([[1, 2, 3], [4, 5], [6]]) == (3, [1, 2, 3])
""""""
",max_length_list,"def check(candidate):

    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])
    assert candidate([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])
    assert candidate([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])
","def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )
    max_list = max(input_list, key = lambda i: len(i))
    return(max_length, max_list)","[""max_length_list([[], [1], [1, 2], [1, 2, 3]]) == (3, [1, 2, 3])"", ""max_length_list(['a', 'ab', 'abc', 'abcd']) == (4, 'abcd')"", ""max_length_list([[1, 2, 3], [4, 5], [6]]) == (3, [1, 2, 3])""]","@startuml
start

:Input: input_list;
if (Is input_list empty?) then (yes)
    :Raise ValueError(""Input list cannot be empty"");
    stop
else (no)
    :Initialize max_length = 0;
    :Initialize max_list = None;
    :Iterate over each item in input_list;
    :Calculate length of current item;
    if (Is current item's length > max_length?) then (yes)
        :Update max_length = current item's length;
        :Update max_list = current item;
    else (no)
        :Continue to next item;
    endif
    :Check if all items have been processed;
    if (All items processed?) then (yes)
        :Return (max_length, max_list);
        stop
    else (no)
        :Continue iteration;
    endif
endif
@enduml"
221,"def first_even(nums):
""""""
Write a python function to find the first even number in a given list of numbers.
Your code should satisfy these tests:
first_even([1, 3, 5, 8, 10]) == 8
first_even([2, 4, 6, 8, 10]) == 2
first_even([11, 13, 17, 19]) == -1
""""""
",first_even,"def check(candidate):

    assert candidate ([1, 3, 5, 7, 4, 1, 6, 8]) == 4
    assert candidate([2, 3, 4]) == 2
    assert candidate([5, 6, 7]) == 6
","def first_even(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    return first_even","[""first_even([1, 3, 5, 8, 10]) == 8"", ""first_even([2, 4, 6, 8, 10]) == 2"", ""first_even([11, 13, 17, 19]) == -1""]","@startuml
start

:Input list of numbers (nums);
:Initialize index (i = 0);

while (i < length of nums?) is (yes)
    if (nums[i] is even?) then (yes)
        :Return nums[i];
        stop
    else (no)
        :Increment index (i = i + 1);
    endif
endwhile

:Return -1 (No even number found);
stop

@enduml"
272,"def rear_extract(test_list):
""""""
Write a function to perfom the rear element extraction from list of tuples records.
Your code should satisfy these tests:
rear_extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [3, 6, 9]
rear_extract([[10], [20, 30], [40, 50, 60]]) == [10, 30, 60]
rear_extract([['a', 'b'], ['c', 'd', 'e'], ['f']]) == ['b', 'e', 'f']
""""""
",rear_extract,"def check(candidate):

    assert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]
    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]
    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]
","def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ","[""rear_extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [3, 6, 9]"", ""rear_extract([[10], [20, 30], [40, 50, 60]]) == [10, 30, 60]"", ""rear_extract([['a', 'b'], ['c', 'd', 'e'], ['f']]) == ['b', 'e', 'f']""]","@startuml

title Rear Extraction from List of Tuples Records

start
:Start;

if (test_list is empty) then (no;
:Return empty list;
) else (yes;

:Initialize result list;
result = [];

:Loop through each tuple in test_list;
for each tuple in test_list do (

:Extract rear element from tuple;
rear = tuple[-1];

:Add rear element to result list;
result.append(rear);

:End loop;
end for;

:Return result list;
return result;

:End if;
end if;

@enduml"
641,"def is_nonagonal(n):
""""""
Write a function to find the nth nonagonal number.
Your code should satisfy these tests:
is_nonagonal(1) == 1
is_nonagonal(9) == 261
is_nonagonal(28) == 2674
""""""
",is_nonagonal,"def check(candidate):

    assert candidate(10) == 325
    assert candidate(15) == 750
    assert candidate(18) == 1089
","def is_nonagonal(n):
	return int(n * (7 * n - 5) / 2) ","[""is_nonagonal(1) == 1"", ""is_nonagonal(9) == 261"", ""is_nonagonal(28) == 2674""]","@startuml
start

:Input n (integer);
if (n is a positive integer?) then (yes)
    :Calculate nth nonagonal number using formula: \nNonagonal(n) = n * (7n - 5) / 2;
    :Return the calculated nonagonal number;
else (no)
    :Return ""Invalid input: n must be a positive integer"";
endif

stop
@enduml"
310,"def string_to_tuple(str1):
""""""
Write a function to convert a given string to a tuple.
Your code should satisfy these tests:
string_to_tuple(""hello world"") == ('h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd')
string_to_tuple(""python programming"") == ('p', 'y', 't', 'h', 'o', 'n', 'p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g')
string_to_tuple(""  spaces  everywhere  "") == ('s', 'p', 'a', 'c', 'e', 's', 'e', 'v', 'e', 'r', 'y', 'w', 'h', 'e', 'r', 'e')
""""""
",string_to_tuple,"def check(candidate):

    assert candidate(""python 3.0"")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')
    assert candidate(""item1"")==('i', 't', 'e', 'm', '1')
    assert candidate(""15.10"")==('1', '5', '.', '1', '0')
","def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace())
    return result","[""string_to_tuple(\""hello world\"") == ('h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd')"", ""string_to_tuple(\""python programming\"") == ('p', 'y', 't', 'h', 'o', 'n', 'p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g')"", ""string_to_tuple(\""  spaces  everywhere  \"") == ('s', 'p', 'a', 'c', 'e', 's', 'e', 'v', 'e', 'r', 'y', 'w', 'h', 'e', 'r', 'e')""]","@startuml
start
:Initialize an empty tuple;
:Iterate over each character in the input string;
if (Current character is not a space) then (yes)
    :Append the character to the tuple;
else (no)
    :Continue to the next character;
endif
:Return the tuple;
stop
@enduml"
353,"def remove_column(list1, n):
""""""
Write a function to remove a specified column from a given nested list.
Your code should satisfy these tests:
remove_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [[1, 3], [4, 6], [7, 9]]
remove_column([[10, 20], [30, 40], [50, 60]], 0) == [[20], [40], [60]]
remove_column([[100, 200, 300], [400, 500, 600]], 2) == [[100, 200], [400, 500]]
""""""
",remove_column,"def check(candidate):

    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]
    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]
    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]
","def remove_column(list1, n):
   for i in list1:
    del i[n]
   return list1","[""remove_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [[1, 3], [4, 6], [7, 9]]"", ""remove_column([[10, 20], [30, 40], [50, 60]], 0) == [[20], [40], [60]]"", ""remove_column([[100, 200, 300], [400, 500, 600]], 2) == [[100, 200], [400, 500]]""]","@startuml
start

:Input nested list (list1) and column index (n);
:Initialize an empty list (result);

if (Is list1 empty?) then (yes)
  :Return empty list;
  stop
else (no)
  :Iterate over each row in list1;
  :Remove the nth column from the current row;
  :Add the modified row to the result list;
  :Check if all rows are processed?;
  if (All rows processed?) then (yes)
    :Return the result list;
    stop
  else (no)
    :Continue to the next row;
  endif
endif

@enduml"
171,"def perimeter_pentagon(a):
""""""
Write a function to find the perimeter of a pentagon.
Your code should satisfy these tests:
perimeter_pentagon(3) == 15
perimeter_pentagon(7) == 35
perimeter_pentagon(10) == 50
""""""
",perimeter_pentagon,"def check(candidate):

    assert candidate(5)==25
    assert candidate(10)==50
    assert candidate(15)==75
","import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter","[""perimeter_pentagon(3) == 15"", ""perimeter_pentagon(7) == 35"", ""perimeter_pentagon(10) == 50""]","@startuml

title perimeter_pentagon

start
:perimeter_pentagon(a);

if (a < 0) then (no)
:Invalid input;
:return -1;
else (yes)
:Valid input;
:Calculate perimeter;
:return perimeter;

@enduml"
807,"def first_odd(nums):
""""""
Write a python function to find the first odd number in a given list of numbers.
Your code should satisfy these tests:
first_odd([2, 4, 6, 8, 10, 11]) == 11
first_odd([1, 3, 5, 7, 9]) == 1
first_odd([2, 4, 6, 8, 10]) == -1
""""""
",first_odd,"def check(candidate):

    assert candidate([1,3,5]) == 1
    assert candidate([2,4,1,3]) == 1
    assert candidate ([8,9,1]) == 9
","def first_odd(nums):
  first_odd = next((el for el in nums if el%2!=0),-1)
  return first_odd","[""first_odd([2, 4, 6, 8, 10, 11]) == 11"", ""first_odd([1, 3, 5, 7, 9]) == 1"", ""first_odd([2, 4, 6, 8, 10]) == -1""]","@startuml

title first_odd

start
:first_odd(nums);

if (nums is empty) then (no)
:return -1;

else (yes)
:for each num in nums;

if (num is odd) then (yes)
:return num;

else (no)
:continue;

end if;

end for;

:return -1;

end if;

@enduml"
506,"def permutation_coefficient(n, k):
""""""
Write a function to calculate the permutation coefficient of given p(n, k).
Your code should satisfy these tests:
permutation_coefficient(5, 2) == 20
permutation_coefficient(10, 3) == 720
permutation_coefficient(6, 4) == 360
""""""
",permutation_coefficient,"def check(candidate):

    assert candidate(10, 2) == 90
    assert candidate(10, 3) == 720
    assert candidate(10, 1) == 10
","def permutation_coefficient(n, k):
	P = [[0 for i in range(k + 1)]
			for j in range(n + 1)]
	for i in range(n + 1):
		for j in range(min(i, k) + 1):
			if (j == 0):
				P[i][j] = 1
			else:
				P[i][j] = P[i - 1][j] + (
						j * P[i - 1][j - 1])
			if (j < k):
				P[i][j + 1] = 0
	return P[n][k] ","[""permutation_coefficient(5, 2) == 20"", ""permutation_coefficient(10, 3) == 720"", ""permutation_coefficient(6, 4) == 360""]","@startuml
start

:Input n and k;
if (n < 0 or k < 0 or k > n) then (yes)
    :Invalid input: n and k must be non-negative, and k <= n;
    :Return error or handle invalid input;
    stop
else (no)
    :Initialize result = 1;
    :Initialize i = n;
    while (i > n - k) is (yes)
        :Multiply result by i;
        :Decrement i by 1;
    endwhile (no)
    :Return result;
    stop
endif

@enduml"
415,"def max_Product(arr):
""""""
Write a python function to find a pair with highest product from a given array of integers.
Your code should satisfy these tests:
max_Product([1, 2, 3, 4, 5]) == (4, 5)
max_Product([-10, -20, 1, 3]) == (-10, -20)
max_Product([0, 2, 3, -1]) == (2, 3)
""""""
",max_Product,"def check(candidate):

    assert candidate([1,2,3,4,7,0,8,4]) == (7,8)
    assert candidate([0,-1,-2,-4,5,0,-6]) == (-4,-6)
    assert candidate([1,2,3]) == (2,3)
","def max_Product(arr):
    arr_len = len(arr)
    if (arr_len < 2):
        return (""No pairs exists"")
    x = arr[0]; y = arr[1]
    for i in range(0,arr_len):
        for j in range(i + 1,arr_len):
            if (arr[i] * arr[j] > x * y):
                x = arr[i]; y = arr[j]
    return x,y    ","[""max_Product([1, 2, 3, 4, 5]) == (4, 5)"", ""max_Product([-10, -20, 1, 3]) == (-10, -20)"", ""max_Product([0, 2, 3, -1]) == (2, 3)""]","@startuml

title ""Max Product Pair""

start
:Input Array;

if (Array is empty) then (yes)
  :Return (0, 0);
else (no)
  :Find max product pair;
  :Return (max_product_pair);
endif

@enduml"
482,"def match(text):
""""""
Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.
Your code should satisfy these tests:
match(""HelloWorld"") == 'Yes'
match(""PYTHON"") == 'No'
match(""javaSCRIPT"") == 'No'
""""""
",match,"def check(candidate):

    assert candidate(""Geeks"") == 'Yes'
    assert candidate(""geeksforGeeks"") == 'Yes'
    assert candidate(""geeks"") == 'No'
","import re
def match(text):
		pattern = '[A-Z]+[a-z]+$'
		if re.search(pattern, text):
				return('Yes')
		else:
				return('No') ","[""match(\""HelloWorld\"") == 'Yes'"", ""match(\""PYTHON\"") == 'No'"", ""match(\""javaSCRIPT\"") == 'No'""]","@startuml
start

:Input text;
if (Is text empty?) then (yes)
    :Return 'No';
    stop
else (no)
    :Use regex to find sequences of one uppercase letter followed by lowercase letters;
    if (Match found?) then (yes)
        :Return 'Yes';
    else (no)
        :Return 'No';
    endif
endif

stop
@enduml"
768,"def check_Odd_Parity(x):
""""""
Write a python function to check for odd parity of a given number.
Your code should satisfy these tests:
check_Odd_Parity(5) == False
check_Odd_Parity(7) == True
check_Odd_Parity(10) == False
""""""
",check_Odd_Parity,"def check(candidate):

    assert candidate(13) == True
    assert candidate(21) == True
    assert candidate(18) == False
","def check_Odd_Parity(x):
    parity = 0
    while (x != 0):
        x = x & (x - 1)
        parity += 1
    if (parity % 2 == 1):
        return True
    else:
        return False","[""check_Odd_Parity(5) == False"", ""check_Odd_Parity(7) == True"", ""check_Odd_Parity(10) == False""]","@startuml

start
:check_Odd_Parity(x);
if (x % 2 == 0) then (yes)
  :return False;
else (no)
  :return True;
endif

@enduml"
9,"def find_Rotations(str):
""""""
Write a python function to find the minimum number of rotations required to get the same string.
Your code should satisfy these tests:
find_Rotations(""abcabc"") == 3
find_Rotations(""abcd"") == 4
find_Rotations(""aabb"") == 4
""""""
",find_Rotations,"def check(candidate):

    assert candidate(""aaaa"") == 1
    assert candidate(""ab"") == 2
    assert candidate(""abc"") == 3
","def find_Rotations(str):
    tmp = str + str
    n = len(str)
    for i in range(1,n + 1):
        substring = tmp[i: i+n]
        if (str == substring):
            return i
    return n ","[""find_Rotations(\""abcabc\"") == 3"", ""find_Rotations(\""abcd\"") == 4"", ""find_Rotations(\""aabb\"") == 4""]","@startuml

start

:Initialize count = 1;

while (IsStringRotated(str) == False)
    :Rotate string by 1 character;
    :Increment count;
endwhile

:Return count;

stop

@enduml"
340,"def sum_three_smallest_nums(lst):
""""""
Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.
Your code should satisfy these tests:
sum_three_smallest_nums([1, 2, 3, 4, 5]) == 6
sum_three_smallest_nums([10, 20, 30, 5, 15]) == 30
sum_three_smallest_nums([0, -1, 3, 2, 1]) == 6
""""""
",sum_three_smallest_nums,"def check(candidate):

    assert candidate([10,20,30,40,50,60,7]) == 37
    assert candidate([1,2,3,4,5]) == 6
    assert candidate([0,1,2,3,4,5]) == 6
","def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])","[""sum_three_smallest_nums([1, 2, 3, 4, 5]) == 6"", ""sum_three_smallest_nums([10, 20, 30, 5, 15]) == 30"", ""sum_three_smallest_nums([0, -1, 3, 2, 1]) == 6""]","@startuml
start

:Input list of numbers (lst);
if (Is lst empty or None?) then (yes)
    :Return 0 or handle error;
    stop
else (no)
    :Filter out non-positive numbers;
    :Sort the filtered list in ascending order;
    if (Are there at least 3 positive numbers?) then (yes)
        :Sum the first three numbers;
        :Return the sum;
        stop
    else (no)
        :Return 0 or handle error;
        stop
    endif
endif
@enduml"
423,"def get_maxgold(gold, m, n):
""""""
Write a function to solve gold mine problem.
Your code should satisfy these tests:
get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4) == 16
get_maxgold([[10, 33, 13, 15], [22, 21, 4, 1], [5, 0, 2, 3], [0, 6, 14, 2]], 4, 4) == 83
get_maxgold([[1, 3, 3], [2, 1, 4], [0, 6, 4]], 3, 3) == 12
""""""
",get_maxgold,"def check(candidate):

    assert candidate([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16
    assert candidate([[10,20],[30,40]],2,2)==70
    assert candidate([[4,9],[3,7]],2,2)==13
","def get_maxgold(gold, m, n):
    goldTable = [[0 for i in range(n)]
                        for j in range(m)]
    for col in range(n-1, -1, -1):
        for row in range(m):
            if (col == n-1):
                right = 0
            else:
                right = goldTable[row][col+1]
            if (row == 0 or col == n-1):
                right_up = 0
            else:
                right_up = goldTable[row-1][col+1]
            if (row == m-1 or col == n-1):
                right_down = 0
            else:
                right_down = goldTable[row+1][col+1]
            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down)
    res = goldTable[0][0]
    for i in range(1, m):
        res = max(res, goldTable[i][0])
    return res ","[""get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4) == 16"", ""get_maxgold([[10, 33, 13, 15], [22, 21, 4, 1], [5, 0, 2, 3], [0, 6, 14, 2]], 4, 4) == 83"", ""get_maxgold([[1, 3, 3], [2, 1, 4], [0, 6, 4]], 3, 3) == 12""]","@startuml
start
:Initialize max_gold to 0;
:Iterate through each column j from 0 to n-1;
:Iterate through each row i from 0 to m-1;
:Initialize dp table;
:For each row i, update dp[i][j] as gold[i][j];
:For each column j starting from n-2 down to 0;
:For each row i from 0 to m-1;
:Update dp[i][j] as maximum of dp[i][j], dp[i-1][j+1], dp[i+1][j+1];
:Find maximum in the last column to get max_gold;
:Return max_gold;
stop
@enduml"
195,"def first(arr,x,n):
""""""
Write a python function to find the first position of an element in a sorted array.
Your code should satisfy these tests:
first([1, 2, 2, 2, 3, 4, 5], 2, 7) == 1
first([1, 1, 1, 1, 1, 1, 1], 1, 7) == 0
first([1, 3, 5, 7, 9, 11, 13], 10, 7) == -1
""""""
",first,"def check(candidate):

    assert candidate([1,2,3,4,5,6,6],6,6) == 5
    assert candidate([1,2,2,2,3,2,2,4,2],2,9) == 1
    assert candidate([1,2,3],1,3) == 0
","def first(arr,x,n):
    low = 0
    high = n - 1
    res = -1
    while (low <= high):
        mid = (low + high) // 2
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            high = mid - 1
    return res","[""first([1, 2, 2, 2, 3, 4, 5], 2, 7) == 1"", ""first([1, 1, 1, 1, 1, 1, 1], 1, 7) == 0"", ""first([1, 3, 5, 7, 9, 11, 13], 10, 7) == -1""]","@startuml
start

:Input: sorted array (arr), target element (x), array length (n);
if (Is arr empty?) then (yes)
    :Return -1;
    stop
else (no)
    :Initialize low = 0, high = n - 1, result = -1;
    while (low <= high?) is (yes)
        :Calculate mid = (low + high) // 2;
        if (arr[mid] == x?) then (yes)
            :Update result = mid;
            :Set high = mid - 1 (search left for first occurrence);
        else (no)
            if (arr[mid] < x?) then (yes)
                :Set low = mid + 1;
            else (no)
                :Set high = mid - 1;
            endif
        endif
    endwhile
    :Return result;
    stop
endif

@enduml"
57,"def find_Max_Num(arr,n):
""""""
Write a python function to find the largest number that can be formed with the given digits.
Your code should satisfy these tests:
find_Max_Num([1, 2, 3, 4], 4) == 4321
find_Max_Num([9, 0, 1, 3], 4) == 9310
find_Max_Num([5, 5, 5, 5], 4) == 5555
""""""
",find_Max_Num,"def check(candidate):

    assert candidate([1,2,3],3) == 321
    assert candidate([4,5,6,1],4) == 6541
    assert candidate([1,2,3,9],4) == 9321
","def find_Max_Num(arr,n) :
    arr.sort(reverse = True)
    num = arr[0]
    for i in range(1,n) :
        num = num * 10 + arr[i]
    return num ","[""find_Max_Num([1, 2, 3, 4], 4) == 4321"", ""find_Max_Num([9, 0, 1, 3], 4) == 9310"", ""find_Max_Num([5, 5, 5, 5], 4) == 5555""]","@startuml
start

:Input array 'arr' and integer 'n';
:Sort the array 'arr' in descending order;
:Initialize an empty string 'result';

if (Is the array empty?) then (yes)
  :Return 0;
else (no)
  :Concatenate the sorted digits to form the largest number;
  :Convert the concatenated string to an integer;
  :Return the result;
endif

stop
@enduml"
452,"def loss_amount(actual_cost,sale_amount):
""""""
Write a function that gives loss amount if the given amount has loss else return none.
Your code should satisfy these tests:
loss_amount(100, 150) == 50
loss_amount(50, 70) == 20
loss_amount(80, 80) == None
loss_amount(120, 130) == 10
loss_amount(90, 95) == 5
""""""
",loss_amount,"def check(candidate):

    assert candidate(1500,1200)==None
    assert candidate(100,200)==100
    assert candidate(2000,5000)==3000
","def loss_amount(actual_cost,sale_amount):
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return None","[""loss_amount(100, 150) == 50"", ""loss_amount(50, 70) == 20"", ""loss_amount(80, 80) == None"", ""loss_amount(120, 130) == 10"", ""loss_amount(90, 95) == 5""]","@startuml

start
:Calculate loss amount;
if (actual_cost < sale_amount) then (yes)
  :Calculate loss amount;
  :Return loss amount;
else (no)
  :Return none;
endif

@enduml"
8,"def square_nums(nums):
""""""
Write a function to find squares of individual elements in a list using lambda function.
Your code should satisfy these tests:
square_nums([1, 2, 3, 4]) == [1, 4, 9, 16]
square_nums([-1, -2, -3, -4]) == [1, 4, 9, 16]
square_nums([0, 5, 10]) == [0, 25, 100]
""""""
",square_nums,"def check(candidate):

    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    assert candidate([10,20,30])==([100,400,900])
    assert candidate([12,15])==([144,225])
","def square_nums(nums):
 square_nums = list(map(lambda x: x ** 2, nums))
 return square_nums","[""square_nums([1, 2, 3, 4]) == [1, 4, 9, 16]"", ""square_nums([-1, -2, -3, -4]) == [1, 4, 9, 16]"", ""square_nums([0, 5, 10]) == [0, 25, 100]""]","@startuml

title ""Square Numbers""

start
:Start;

if (nums is not empty) then (yes)
  :Validate input;
  :Create list of squares;
  :Return list of squares;
else (no)
  :Return empty list;
endif

stop
:End;

@enduml"
233,"def lateralsuface_cylinder(r,h):
""""""
Write a function to find the lateral surface area of a cylinder.
Your code should satisfy these tests:
lateralsuface_cylinder(5, 10) == 314.15000000000003
lateralsuface_cylinder(3, 7) == 131.943
lateralsuface_cylinder(0, 5) == 0.0
lateralsuface_cylinder(2.5, 4) == 62.830000000000005
lateralsuface_cylinder(1, 1) == 6.283
""""""
",lateralsuface_cylinder,"def check(candidate):

    assert candidate(10,5)==314.15000000000003
    assert candidate(4,5)==125.66000000000001
    assert candidate(4,10)==251.32000000000002
","def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface","[""lateralsuface_cylinder(5, 10) == 314.15000000000003"", ""lateralsuface_cylinder(3, 7) == 131.943"", ""lateralsuface_cylinder(0, 5) == 0.0"", ""lateralsuface_cylinder(2.5, 4) == 62.830000000000005"", ""lateralsuface_cylinder(1, 1) == 6.283""]","@startuml
start
:Input Validation;
if (r <= 0) then (return 0.0;)
if (h <= 0) then (return 0.0;)
:Calculate Lateral Surface Area;
:Formula = 2 * 3.14159 * r * h;
:Return Result;
end
@enduml"
414,"def overlapping(list1,list2):
""""""
Write a python function to check whether the value exists in a sequence or not.
Your code should satisfy these tests:
overlapping([1, 2, 3], [3, 4, 5]) == 1
overlapping(['a', 'b', 'c'], ['x', 'y', 'z']) == 0
overlapping([10, 20, 30, 40], [40, 50, 60]) == 1
""""""
",overlapping,"def check(candidate):

    assert candidate([1,2,3,4,5],[6,7,8,9]) == False
    assert candidate([1,2,3],[4,5,6]) == False
    assert candidate([1,4,5],[1,4,5]) == True
","def overlapping(list1,list2):
    c=0
    d=0
    for i in list1:
        c+=1
    for i in list2:
        d+=1
    for i in range(0,c):
        for j in range(0,d):
            if(list1[i]==list2[j]):
                return 1
    return 0","[""overlapping([1, 2, 3], [3, 4, 5]) == 1"", ""overlapping(['a', 'b', 'c'], ['x', 'y', 'z']) == 0"", ""overlapping([10, 20, 30, 40], [40, 50, 60]) == 1""]","@startuml
start

:Input list1 and list2;
:Initialize result = 0;

while (Iterate through list1) is (More elements in list1?)
    :Get next element from list1;
    if (Is element in list2?) then (yes)
        :Set result = 1;
        :Break loop;
    else (no)
        :Continue loop;
    endif
endwhile

:Return result;
stop

@enduml"
236,"def No_of_Triangle(N,K):
""""""
Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.
Your code should satisfy these tests:
No_of_Triangle(5, 2) == 13
No_of_Triangle(10, 3) == 51
No_of_Triangle(7, 4) == 10
No_of_Triangle(8, 1) == 64
No_of_Triangle(6, 5) == 6
""""""
",No_of_Triangle,"def check(candidate):

    assert candidate(4,2) == 7
    assert candidate(4,3) == 3
    assert candidate(1,3) == -1
","def No_of_Triangle(N,K):
    if (N < K):
        return -1;
    else:
        Tri_up = 0;
        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;
        Tri_down = 0;
        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;
        return Tri_up + Tri_down;","[""No_of_Triangle(5, 2) == 13"", ""No_of_Triangle(10, 3) == 51"", ""No_of_Triangle(7, 4) == 10"", ""No_of_Triangle(8, 1) == 64"", ""No_of_Triangle(6, 5) == 6""]","@startuml
start
:Input Validation;
if (N > 0 and K >= 0) then (true)
    :Calculate N*(N+1)*(2*N+1)/6;
    :Calculate 3*K*(K+1)/2;
    :Subtract K from N;
    :Return result;
else (false)
    :Return ""Invalid input"";
endif
stop
@enduml"
378,"def move_first(test_list):
""""""
Write a python function to shift last element to first position in the given list.
Your code should satisfy these tests:
move_first([1, 2, 3, 4]) == [4, 1, 2, 3]
move_first(['a', 'b', 'c']) == ['c', 'a', 'b']
move_first([True, False, True]) == [True, True, False]
""""""
",move_first,"def check(candidate):

    assert candidate([1,2,3,4]) == [4,1,2,3]
    assert candidate([0,1,2,3]) == [3,0,1,2]
    assert candidate([9,8,7,1]) == [1,9,8,7]
","def move_first(test_list):
  test_list = test_list[-1:] + test_list[:-1]
  return test_list","[""move_first([1, 2, 3, 4]) == [4, 1, 2, 3]"", ""move_first(['a', 'b', 'c']) == ['c', 'a', 'b']"", ""move_first([True, False, True]) == [True, True, False]""]","@startuml

title move_first

start
:move_first(test_list);

if (test_list is not empty) then (yes)
  :last_element = test_list[-1];
  :test_list.pop();
  :test_list.insert(0, last_element);
  :return test_list;
else (no)
  :return [];
endif

@enduml"
410,"def min_val(listval):
""""""
Write a function to find the minimum value in a given heterogeneous list.
Your code should satisfy these tests:
min_val([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 1
min_val([10, 'a', 20, 'b', 30, 'c']) == 10
min_val([100, 200, 3, 400, 500]) == 3
""""""
",min_val,"def check(candidate):

    assert candidate(['Python', 3, 2, 4, 5, 'version'])==2
    assert candidate(['Python', 15, 20, 25])==15
    assert candidate(['Python', 30, 20, 40, 50, 'version'])==20
","def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val","[""min_val([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 1"", ""min_val([10, 'a', 20, 'b', 30, 'c']) == 10"", ""min_val([100, 200, 3, 400, 500]) == 3""]","@startuml
start
:Input list;
if (Is the first element a number?) then (yes)
  :Set first element as min;
  :Set i = 1;
  :Start loop;
  while (i < length of list)
    if (Is the i-th element a number and less than min?) then (yes)
      :Set min = i-th element;
    endif
    :i++;
  endwhile
else (no)
  :Set min = None;
  :Set i = 1;
  :Start loop;
  while (i < length of list)
    if (Is the i-th element a number and min is None?) then (yes)
      :Set min = i-th element;
    endif
    :i++;
  endwhile
endif
:Return min;
stop
@enduml"
79,"def word_len(s):
""""""
Write a python function to check whether the length of the word is odd or not.
Your code should satisfy these tests:
word_len(""hello world"") == True
word_len(""even odd"") == False
word_len(""test case"") == False
""""""
",word_len,"def check(candidate):

    assert candidate(""Hadoop"") == False
    assert candidate(""great"") == True
    assert candidate(""structure"") == True
","def word_len(s):
    s = s.split(' ')
    for word in s:
        if len(word)%2!=0:
            return True
        else:
          return False","[""word_len(\""hello world\"") == True"", ""word_len(\""even odd\"") == False"", ""word_len(\""test case\"") == False""]","@startuml

start

:word_len(s):

if (s.isalpha()):
  :Check if length of word is odd:
  if (len(s) % 2 == 1):
    :Return True:
    return True
  else:
    :Return False:
    return False
else:
  :Return False:
  return False

end

@enduml"
395,"def first_non_repeating_character(str1):
""""""
Write a python function to find the first non-repeated character in a given string.
Your code should satisfy these tests:
first_non_repeating_character(""swiss"") == 'w'
first_non_repeating_character(""repetition"") == 'r'
first_non_repeating_character(""aabbcc"") == None
""""""
",first_non_repeating_character,"def check(candidate):

    assert candidate(""abcabc"") == None
    assert candidate(""abc"") == ""a""
    assert candidate(""ababc"") == ""c""
","def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None","[""first_non_repeating_character(\""swiss\"") == 'w'"", ""first_non_repeating_character(\""repetition\"") == 'r'"", ""first_non_repeating_character(\""aabbcc\"") == None""]","@startuml
start

:Input string str1;
:Initialize an empty dictionary char_count;

repeat
    :Iterate through each character in str1;
    if (Character exists in char_count?) then (yes)
        :Increment the count of the character in char_count;
    else (no)
        :Add the character to char_count with count = 1;
    endif
repeat while (More characters in str1?) is (yes) not (no)

:Iterate through each character in str1 again;

repeat
    :Check if the count of the current character in char_count is 1;
    if (Count == 1?) then (yes)
        :Return the current character as the first non-repeating character;
        stop
    else (no)
        :Continue to the next character;
    endif
repeat while (More characters in str1?) is (yes) not (no)

:Return None (no non-repeating character found);
stop
@enduml"
921,"def chunk_tuples(test_tup, N):
""""""
Write a function to perform chunking of tuples each of size n.
Your code should satisfy these tests:
chunk_tuples((1, 2, 3, 4, 5, 6), 2) == [(1, 2), (3, 4), (5, 6)]
chunk_tuples(('a', 'b', 'c', 'd', 'e', 'f', 'g'), 3) == [('a', 'b', 'c'), ('d', 'e', 'f'), ('g',)]
chunk_tuples((10, 20, 30, 40, 50), 1) == [(10,), (20,), (30,), (40,), (50,)]
""""""
",chunk_tuples,"def check(candidate):

    assert candidate((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]
    assert candidate((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]
    assert candidate((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]
","def chunk_tuples(test_tup, N):
  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]
  return (res) ","[""chunk_tuples((1, 2, 3, 4, 5, 6), 2) == [(1, 2), (3, 4), (5, 6)]"", ""chunk_tuples(('a', 'b', 'c', 'd', 'e', 'f', 'g'), 3) == [('a', 'b', 'c'), ('d', 'e', 'f'), ('g',)]"", ""chunk_tuples((10, 20, 30, 40, 50), 1) == [(10,), (20,), (30,), (40,), (50,)]""]","@startuml
start

:Input tuple (test_tup) and chunk size (N);
if (Is test_tup a valid tuple and N > 0?) then (yes)
    :Initialize an empty list (result) to store chunks;
    :Initialize index (i) to 0;
    while (i < length of test_tup) is (yes)
        :Extract a slice of test_tup from i to i+N;
        :Convert the slice to a tuple;
        :Append the tuple to the result list;
        :Increment i by N;
    endwhile (no)
    :Return the result list;
else (no)
    :Return an empty list or raise an error;
endif

stop
@enduml"
867,"def min_Num(arr,n):
""""""
Write a python function to add a minimum number such that the sum of array becomes even.
Your code should satisfy these tests:
min_Num([1, 2, 3, 4, 5], 5) == 1
min_Num([2, 4, 6, 8, 10], 5) == 2
min_Num([1, 3, 5, 7, 9], 5) == 1
min_Num([1, 2, 2, 4, 6], 5) == 1
min_Num([1, 1, 1, 1, 1], 5) == 1
""""""
",min_Num,"def check(candidate):

    assert candidate([1,2,3,4,5,6,7,8,9],9) == 1
    assert candidate([1,2,3,4,5,6,7,8],8) == 2
    assert candidate([1,2,3],3) == 2
","def min_Num(arr,n):
    odd = 0
    for i in range(n):
        if (arr[i] % 2):
            odd += 1
    if (odd % 2):
        return 1
    return 2","[""min_Num([1, 2, 3, 4, 5], 5) == 1"", ""min_Num([2, 4, 6, 8, 10], 5) == 2"", ""min_Num([1, 3, 5, 7, 9], 5) == 1"", ""min_Num([1, 2, 2, 4, 6], 5) == 1"", ""min_Num([1, 1, 1, 1, 1], 5) == 1""]","@startuml

title min_Num

start
:min_Num(arr, n);

if (n == 0) then (no)
:return 0;
else (yes)

:sum = 0;
:min = arr[0];

repeat with i = 1 to n-1
:sum = sum + arr[i];
:if (arr[i] < min) then
:min = arr[i];

end repeat

:if (sum % 2 == 0) then (no)
:return min;
else (yes)

:return min + 1;

end if

end if

stop

@enduml"
941,"def count_elim(num):
""""""
Write a function to count the elements in a list until an element is a tuple.
Your code should satisfy these tests:
count_elim([1, 2, 3, 4]) == 4
count_elim([1, (2, 3), 4, 5]) == 1
count_elim([(1, 2), 3, 4, 5]) == 0
""""""
",count_elim,"def check(candidate):

    assert candidate([10,20,30,(10,20),40])==3
    assert candidate([10,(20,30),(10,20),40])==1
    assert candidate([(10,(20,30,(10,20),40))])==0
","def count_elim(num):
  count_elim = 0
  for n in num:
    if isinstance(n, tuple):
        break
    count_elim += 1
  return count_elim","[""count_elim([1, 2, 3, 4]) == 4"", ""count_elim([1, (2, 3), 4, 5]) == 1"", ""count_elim([(1, 2), 3, 4, 5]) == 0""]","@startuml

start
:count_elim(num);
if (num is a tuple) then (
  :return 0;
) else (
  :count = 0;
  :for each element in num (
    if (element is a tuple) then (
      :break;
    ) else (
      :count++;
    )
  )
  :return count;
)

@enduml"
201,"def chkList(lst):
""""""
Write a python function to check whether the elements in a list are same or not.
Your code should satisfy these tests:
chkList([1, 1, 1, 1]) == True
chkList([2, 2, 3, 2]) == False
chkList(['a', 'a', 'a']) == True
""""""
",chkList,"def check(candidate):

    assert candidate(['one','one','one']) == True
    assert candidate(['one','Two','Three']) == False
    assert candidate(['bigdata','python','Django']) == False
","def chkList(lst):
    return len(set(lst)) == 1","[""chkList([1, 1, 1, 1]) == True"", ""chkList([2, 2, 3, 2]) == False"", ""chkList(['a', 'a', 'a']) == True""]","@startuml

title Check if all elements in a list are the same

start
:chkList(lst);

if (lst.length == 0) then (false)
else (true)

:first = lst[0];

for (i = 1; i < lst.length; i++) do
  :current = lst[i];
  if (current != first) then (false)
end for

return true

@enduml"
66,"def pos_count(list):
""""""
Write a python function to count positive numbers in a list.
Your code should satisfy these tests:
pos_count([1, -2, 3, 4, -5]) == 3
pos_count([-1, -2, -3, -4, -5]) == 0
pos_count([0, 2, 4, 6, 8]) == 5
""""""
",pos_count,"def check(candidate):

    assert candidate([1,-2,3,-4]) == 2
    assert candidate([3,4,5,-1]) == 3
    assert candidate([1,2,3,4]) == 4
","def pos_count(list):
  pos_count= 0
  for num in list:
    if num >= 0:
      pos_count += 1
  return pos_count ","[""pos_count([1, -2, 3, 4, -5]) == 3"", ""pos_count([-1, -2, -3, -4, -5]) == 0"", ""pos_count([0, 2, 4, 6, 8]) == 5""]","@startuml
start

:Input list of numbers;
:Initialize counter = 0;
:Initialize index = 0;

while (index < length of list?) is (yes)
    if (list[index] > 0?) then (yes)
        :Increment counter by 1;
    else (no)
        :Do nothing;
    endif
    :Increment index by 1;
endwhile (no)

:Return counter as the count of positive numbers;
stop
@enduml"
438,"def count_bidirectional(test_list):
""""""
Write a function to count bidirectional tuple pairs.
Your code should satisfy these tests:
count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3)]) == '2'
count_bidirectional([(5, 6), (6, 5), (7, 8), (8, 7), (9, 10)]) == '2'
count_bidirectional([(1, 1), (2, 2), (3, 3)]) == '0'
count_bidirectional([(10, 20), (20, 10), (30, 40), (40, 30), (50, 60)]) == '2'
count_bidirectional([(1, 2), (3, 4), (5, 6), (7, 8)]) == '0'
""""""
",count_bidirectional,"def check(candidate):

    assert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'
    assert candidate([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'
    assert candidate([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'
","def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return (str(res)) ","[""count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3)]) == '2'"", ""count_bidirectional([(5, 6), (6, 5), (7, 8), (8, 7), (9, 10)]) == '2'"", ""count_bidirectional([(1, 1), (2, 2), (3, 3)]) == '0'"", ""count_bidirectional([(10, 20), (20, 10), (30, 40), (40, 30), (50, 60)]) == '2'"", ""count_bidirectional([(1, 2), (3, 4), (5, 6), (7, 8)]) == '0'""]","@startuml
start
:input test_list;
if (test_list is empty?) then (yes)
    :return 0;
    stop
endif
:count = 0;
:reverse_list = [];
:for each item in test_list;
    :reverse_item = (item[1], item[0]);
    :append reverse_item to reverse_list;
:end for;
:for each item in test_list;
    :if item in reverse_list;
        :count += 1;
    :endif
:end for;
:return count/2;
stop
@enduml"
81,"def zip_tuples(test_tup1, test_tup2):
""""""
Write a function to zip the two given tuples.
Your code should satisfy these tests:
zip_tuples((1, 2, 3), ('a', 'b')) == [(1, 'a'), (2, 'b'), (3, 'a')]
zip_tuples(('x', 'y'), (10, 20, 30)) == [('x', 10), ('y', 20)]
zip_tuples((True, False, True), (1, 0)) == [(True, 1), (False, 0), (True, 1)]
""""""
",zip_tuples,"def check(candidate):

    assert candidate((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]
    assert candidate((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]
    assert candidate((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]
","def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)]))
  return (res) ","[""zip_tuples((1, 2, 3), ('a', 'b')) == [(1, 'a'), (2, 'b'), (3, 'a')]"", ""zip_tuples(('x', 'y'), (10, 20, 30)) == [('x', 10), ('y', 20)]"", ""zip_tuples((True, False, True), (1, 0)) == [(True, 1), (False, 0), (True, 1)]""]","@startuml
start
:Initialize result list;
:Initialize index variables i and j;
while (i < len(test_tup1) and j < len(test_tup2))
    :Append (test_tup1[i], test_tup2[j]) to result;
    :Increment i;
    :Increment j;
    if (i == len(test_tup1))
    then (reset i)
        :Set i to 0;
    endif
    if (j == len(test_tup2))
    then (reset j)
        :Set j to 0;
    endif
endwhile
:Return result list;
stop
@enduml"
822,"def pass_validity(p):
""""""
Write a function to return true if the password is valid.
Your code should satisfy these tests:
pass_validity(""aA1#"") == False
pass_validity(""Valid1@"") == True
pass_validity(""1234567890123"") == False
""""""
",pass_validity,"def check(candidate):

    assert candidate(""password"")==False
    assert candidate(""Password@10"")==True
    assert candidate(""password@10"")==False
","import re
def pass_validity(p):
 x = True
 while x:
    if (len(p)<6 or len(p)>12):
        break
    elif not re.search(""[a-z]"",p):
        break
    elif not re.search(""[0-9]"",p):
        break
    elif not re.search(""[A-Z]"",p):
        break
    elif not re.search(""[$#@]"",p):
        break
    elif re.search(""\s"",p):
        break
    else:
        return True
        x=False
        break

 if x:
    return False","[""pass_validity(\""aA1#\"") == False"", ""pass_validity(\""Valid1@\"") == True"", ""pass_validity(\""1234567890123\"") == False""]","@startuml
start
:pass_validity(p);
if (p.isalnum()) then (no)
  :return False;
else (yes)
  if (p.isdigit()) then (no)
    :return False;
  else (yes)
    if (p.islower()) then (no)
      :return False;
    else (yes)
      if (p.isupper()) then (no)
        :return False;
      else (yes)
        if (p.isalpha()) then (no)
          :return False;
        else (yes)
          :return True;
        endif
      endif
    endif
  endif
endif
@enduml"
394,"def check_distinct(test_tup):
""""""
Write a function to check if given tuple is distinct or not.
Your code should satisfy these tests:
check_distinct((1, 2, 3, 4, 5)) == True
check_distinct((1, 2, 2, 4, 5)) == False
check_distinct(('a', 'b', 'c', 'a')) == False
""""""
",check_distinct,"def check(candidate):

    assert candidate((1, 4, 5, 6, 1, 4)) == False
    assert candidate((1, 4, 5, 6)) == True
    assert candidate((2, 3, 4, 5, 6)) == True
","def check_distinct(test_tup):
  res = True
  temp = set()
  for ele in test_tup:
    if ele in temp:
      res = False
      break
    temp.add(ele)
  return (res) ","[""check_distinct((1, 2, 3, 4, 5)) == True"", ""check_distinct((1, 2, 2, 4, 5)) == False"", ""check_distinct(('a', 'b', 'c', 'a')) == False""]","@startuml
start

:Input tuple (test_tup);
if (Is test_tup a tuple?) then (Yes)
    :Initialize an empty set (unique_elements);
    :Initialize a flag (is_distinct) as True;
    :Iterate through each element in test_tup;
    while (More elements in test_tup?) is (Yes)
        :Get the current element;
        if (Is current element in unique_elements?) then (Yes)
            :Set is_distinct to False;
            :Break the loop;
        else (No)
            :Add current element to unique_elements;
        endif
    endwhile
    if (is_distinct == True?) then (Yes)
        :Return True (Tuple is distinct);
    else (No)
        :Return False (Tuple is not distinct);
    endif
else (No)
    :Raise TypeError (Input is not a tuple);
endif

stop
@enduml"
940,"def heap_sort(arr):
""""""
Write a function to sort the given array by using heap sort.
Your code should satisfy these tests:
heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
heap_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
heap_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
""""""
",heap_sort,"def check(candidate):

    assert candidate([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]
    assert candidate([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]
    assert candidate([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]
","def heap_sort(arr):
    heapify(arr)
    end = len(arr) - 1
    while end > 0:
        arr[end], arr[0] = arr[0], arr[end]
        shift_down(arr, 0, end - 1)
        end -= 1
    return arr

def heapify(arr):
    start = len(arr) // 2
    while start >= 0:
        shift_down(arr, start, len(arr) - 1)
        start -= 1
def shift_down(arr, start, end):
    root = start
    while root * 2 + 1 <= end:
        child = root * 2 + 1
        if child + 1 <= end and arr[child] < arr[child + 1]:
            child += 1
        if child <= end and arr[root] < arr[child]:
            arr[root], arr[child] = arr[child], arr[root]
            root = child
        else:
            return
","[""heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]"", ""heap_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"", ""heap_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]""]","@startuml

title Heap Sort

start
:Start;

if (arr.length > 1) then (
  call heapify(arr)
  :Heapify the array;
)

repeat (arr.length - 1) times {
  call swap(arr, 0, arr.length - 1)
  :Swap the first element with the last element;
  call heapify(arr, 0, arr.length - 1)
  :Heapify the array;
}

stop
:Stop;

@enduml"
673,"def convert(list):
""""""
Write a python function to convert a list of multiple integers into a single integer.
Your code should satisfy these tests:
convert([1, 2, 3]) == 123
convert([4, 5, 6, 7]) == 4567
convert([0, 9, 8, 7]) == 987
""""""
",convert,"def check(candidate):

    assert candidate([1,2,3]) == 123
    assert candidate([4,5,6]) == 456
    assert candidate([7,8,9]) == 789
","def convert(list):
    s = [str(i) for i in list]
    res = int("""".join(s))
    return (res) ","[""convert([1, 2, 3]) == 123"", ""convert([4, 5, 6, 7]) == 4567"", ""convert([0, 9, 8, 7]) == 987""]","@startuml
start

:Input a list of integers;
if (Is the list empty?) then (yes)
    :Output ""Invalid input: List is empty"";
    stop
else (no)
    :Initialize an empty string 'result';
    :Iterate over each integer in the list;
    :Convert each integer to a string;
    :Concatenate the string to 'result';
    :Convert the final 'result' string to an integer;
    :Output the final integer;
    stop
endif

@enduml"
184,"def greater_specificnum(list,num):
""""""
Write a function to find all the values in a list that are greater than a specified number.
Your code should satisfy these tests:
greater_specificnum([10, 20, 30, 40], 10) == True
greater_specificnum([5, 15, 25, 35], 20) == False
greater_specificnum([100, 200, 300], 50) == True
greater_specificnum([1, 2, 3, 4, 5], 0) == True
greater_specificnum([7, 8, 9, 10], 10) == False
""""""
",greater_specificnum,"def check(candidate):

    assert candidate([220, 330, 500],200)==True
    assert candidate([12, 17, 21],20)==False
    assert candidate([1,2,3,4],10)==False
","def greater_specificnum(list,num):
 greater_specificnum=all(x >= num for x in list)
 return greater_specificnum","[""greater_specificnum([10, 20, 30, 40], 10) == True"", ""greater_specificnum([5, 15, 25, 35], 20) == False"", ""greater_specificnum([100, 200, 300], 50) == True"", ""greater_specificnum([1, 2, 3, 4, 5], 0) == True"", ""greater_specificnum([7, 8, 9, 10], 10) == False""]","@startuml

title ""greater_specificnum""

start
:Input list and num;

if (num > 0) then (yes)
:Check if all values in list are greater than num;

if (all values in list are greater than num) then (yes)
:Return True;

else (no)
:Return False;

else (no)
:Return False;

end if;

stop

@enduml"
812,"def road_rd(street):
""""""
Write a function to abbreviate 'road' as 'rd.' in a given string.
Your code should satisfy these tests:
road_rd(""Main Road"") == ""Main Rd.""
road_rd(""Elm Street Road"") == ""Elm Street Rd.""
road_rd(""Broadway Road"") == ""Broadway Rd.""
""""""
",road_rd,"def check(candidate):

    assert candidate(""ravipadu Road"")==('ravipadu Rd.')
    assert candidate(""palnadu Road"")==('palnadu Rd.')
    assert candidate(""eshwar enclave Road"")==('eshwar enclave Rd.')
","import re
def road_rd(street):
  return (re.sub('Road$', 'Rd.', street))","[""road_rd(\""Main Road\"") == \""Main Rd.\"""", ""road_rd(\""Elm Street Road\"") == \""Elm Street Rd.\"""", ""road_rd(\""Broadway Road\"") == \""Broadway Rd.\""""]","@startuml

title road_rd(street)

start
:road_rd(street);

if (street.endswith(""Road"")) then (yes)
:street = street.replace(""Road"", ""Rd."");
else (no)
:street = street;
endif

return street;

@enduml"
258,"def count_odd(array_nums):
""""""
Write a function to find number of odd elements in the given list using lambda function.
Your code should satisfy these tests:
count_odd([1, 2, 3, 4, 5]) == 3
count_odd([10, 22, 35, 47, 53]) == 3
count_odd([0, 2, 4, 6, 8]) == 0
""""""
",count_odd,"def check(candidate):

    assert candidate([1, 2, 3, 5, 7, 8, 10])==4
    assert candidate([10,15,14,13,-18,12,-20])==2
    assert candidate([1, 2, 4, 8, 9])==2
","def count_odd(array_nums):
   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))
   return count_odd","[""count_odd([1, 2, 3, 4, 5]) == 3"", ""count_odd([10, 22, 35, 47, 53]) == 3"", ""count_odd([0, 2, 4, 6, 8]) == 0""]","@startuml
start

:Input: array_nums;
if (Is array_nums a list?) then (yes)
    :Initialize counter = 0;
    :Iterate through each element in array_nums;
    if (Is current element odd?) then (yes)
        :Increment counter by 1;
    else (no)
        :Continue to next element;
    endif
    :Return counter as the result;
else (no)
    :Raise TypeError(""Input must be a list"");
endif

stop
@enduml"
247,"def lps(str):
""""""
Write a function to find the longest palindromic subsequence in the given string.
Your code should satisfy these tests:
lps(""bbbab"") == 4
lps(""cbbd"") == 2
lps(""a"") == 1
""""""
",lps,"def check(candidate):

    assert candidate(""TENS FOR TENS"") == 5
    assert candidate(""CARDIO FOR CARDS"") == 7
    assert candidate(""PART OF THE JOURNEY IS PART"") == 9
","def lps(str):
	n = len(str)
	L = [[0 for x in range(n)] for x in range(n)]
	for i in range(n):
		L[i][i] = 1
	for cl in range(2, n+1):
		for i in range(n-cl+1):
			j = i+cl-1
			if str[i] == str[j] and cl == 2:
				L[i][j] = 2
			elif str[i] == str[j]:
				L[i][j] = L[i+1][j-1] + 2
			else:
				L[i][j] = max(L[i][j-1], L[i+1][j]);
	return L[0][n-1]","[""lps(\""bbbab\"") == 4"", ""lps(\""cbbd\"") == 2"", ""lps(\""a\"") == 1""]","@startuml
start

:Input string (str);
if (str is empty?) then (yes)
    :Return 0;
    stop
else (no)
    if (str length == 1?) then (yes)
        :Return 1;
        stop
    else (no)
        :Initialize DP table (n x n) with 0;
        :Set DP[i][i] = 1 for all i;
        :Set length = 2;
        while (length <= n)
            :Set i = 0;
            while (i <= n - length)
                :Set j = i + length - 1;
                if (str[i] == str[j]) then (yes)
                    :DP[i][j] = 2 + DP[i+1][j-1];
                else (no)
                    :DP[i][j] = max(DP[i+1][j], DP[i][j-1]);
                endif
                :i = i + 1;
            endwhile
            :length = length + 1;
        endwhile
        :Return DP[0][n-1];
    endif
endif

stop
@enduml"
724,"def power_base_sum(base, power):
""""""
Write a function to calculate the sum of all digits of the base to the specified power.
Your code should satisfy these tests:
power_base_sum(2, 10) == 7
power_base_sum(5, 5) == 11
power_base_sum(10, 3) == 1
""""""
",power_base_sum,"def check(candidate):

    assert candidate(2,100)==115
    assert candidate(8,10)==37
    assert candidate(8,15)==62
","def power_base_sum(base, power):
    return sum([int(i) for i in str(pow(base, power))])","[""power_base_sum(2, 10) == 7"", ""power_base_sum(5, 5) == 11"", ""power_base_sum(10, 3) == 1""]","@startuml
start

:Input base and power;
:Calculate base^power;
:Convert result to string;
:Initialize sum = 0;

while (For each character in the string) is (true)
  :Convert character to integer;
  :Add integer to sum;
endwhile (false)

:Return sum;
stop

@enduml"
346,"def zigzag(n, k):
""""""
Write a function to find entringer number e(n, k).
Your code should satisfy these tests:
zigzag(0, 0) == 1
zigzag(2, 1) == 1
zigzag(3, 2) == 2
zigzag(4, 1) == 2
zigzag(5, 3) == 14
""""""
",zigzag,"def check(candidate):

    assert candidate(4, 3) == 5
    assert candidate(4, 2) == 4
    assert candidate(3, 1) == 1
","def zigzag(n, k):
	if (n == 0 and k == 0):
		return 1
	if (k == 0):
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)","[""zigzag(0, 0) == 1"", ""zigzag(2, 1) == 1"", ""zigzag(3, 2) == 2"", ""zigzag(4, 1) == 2"", ""zigzag(5, 3) == 14""]","@startuml
start
: n, k validation;
if (n < 0 or k < 0) then (return 0)
: initialize dp[i][j] = 0;
: dp[0][0] = 1;
: dp[i][0] = 1;
: dp[0][j] = 1;
: for i in 1 to n;
: for j in 1 to k;
: dp[i][j] = dp[i-1][j-1] + dp[i-1][j] + dp[i][j-1];
: end for;
: end for;
: return dp[n][k];
: e(n, k) = dp[n][k];
: validate e(n, k) with test cases;
if (e(n, k) != expected value) then (return ""Test Failed"")
else (return ""Test Passed"")
end
@enduml"
210,"def is_allowed_specific_char(string):
""""""
Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.
Your code should satisfy these tests:
is_allowed_specific_char(""HelloWorld123"") == True
is_allowed_specific_char(""Hello_World!"") == False
is_allowed_specific_char(""Valid.String123"") == True
""""""
",is_allowed_specific_char,"def check(candidate):

    assert candidate(""ABCDEFabcdef123450"") == True
    assert candidate(""*&%@#!}{"") == False
    assert candidate(""HELLOhowareyou98765"") == True
","import re
def is_allowed_specific_char(string):
    get_char = re.compile(r'[^a-zA-Z0-9.]')
    string = get_char.search(string)
    return not bool(string)","[""is_allowed_specific_char(\""HelloWorld123\"") == True"", ""is_allowed_specific_char(\""Hello_World!\"") == False"", ""is_allowed_specific_char(\""Valid.String123\"") == True""]","@startuml

title is_allowed_specific_char

start
:Check if string is empty;
if (string is empty) then (no)
  stop
else (yes)
  :Check if string contains only a-z, A-Z, and 0-9;
  if (string contains only a-z, A-Z, and 0-9) then (yes)
    :Return True;
    stop
  else (no)
    :Return False;
    stop
  endif
endif

@enduml"
657,"def first_Digit(n):
""""""
Write a python function to find the first digit in factorial of a given number.
Your code should satisfy these tests:
first_Digit(5) == 1
first_Digit(10) == 3
first_Digit(15) == 1
""""""
",first_Digit,"def check(candidate):

    assert candidate(5) == 1
    assert candidate(10) == 3
    assert candidate(7) == 5
","import math
def first_Digit(n) :
    fact = 1
    for i in range(2,n + 1) :
        fact = fact * i
        while (fact % 10 == 0) :
            fact = int(fact / 10)
    while (fact >= 10) :
        fact = int(fact / 10)
    return math.floor(fact) ","[""first_Digit(5) == 1"", ""first_Digit(10) == 3"", ""first_Digit(15) == 1""]","@startuml
start

:Input number n;
if (Is n a positive integer?) then (yes)
    :Calculate factorial of n;
    :Convert factorial to string;
    :Extract the first character of the string;
    :Convert the first character to integer;
    :Return the first digit;
else (no)
    :Return error: Input must be a positive integer;
endif

stop
@enduml"
479,"def first_Digit(n):
""""""
Write a python function to find the first digit of a given number.
Your code should satisfy these tests:
first_Digit(12345) == 1
first_Digit(987654) == 9
first_Digit(5) == 5
""""""
",first_Digit,"def check(candidate):

    assert candidate(123) == 1
    assert candidate(456) == 4
    assert candidate(12) == 1
","def first_Digit(n) :
    while n >= 10:
        n = n / 10;
    return int(n) ","[""first_Digit(12345) == 1"", ""first_Digit(987654) == 9"", ""first_Digit(5) == 5""]","@startuml
start

:Input number (n);
if (Is n an integer?) then (yes)
    if (Is n negative?) then (yes)
        :Convert n to positive;
    else (no)
    endif
    if (Is n zero?) then (yes)
        :Return 0;
    else (no)
        :Convert n to string;
        :Extract the first character;
        :Convert the first character back to integer;
        :Return the first digit;
    endif
else (no)
    :Return ""Invalid input: Not an integer"";
endif

stop
@enduml"
319,"def find_long_word(text):
""""""
Write a function to find all five characters long word in the given string by using regex.
Your code should satisfy these tests:
find_long_word(""hello world"") == ['hello', 'world']
find_long_word(""python programming"") == []
find_long_word(""quick brown fox"") == ['quick', 'brown']
""""""
",find_long_word,"def check(candidate):

    assert candidate('Please move back to strem') == ['strem']
    assert candidate('4K Ultra HD streaming player') == ['Ultra']
    assert candidate('Streaming Media Player') == ['Media']
","import re
def find_long_word(text):
  return (re.findall(r""\b\w{5}\b"", text))","[""find_long_word(\""hello world\"") == ['hello', 'world']"", ""find_long_word(\""python programming\"") == []"", ""find_long_word(\""quick brown fox\"") == ['quick', 'brown']""]","@startuml
start

:Input text string;
if (Is text empty or not a string?) then (yes)
    :Return empty list;
    stop
else (no)
    :Use regex to find all words with exactly 5 characters;
    if (Any 5-character words found?) then (yes)
        :Return list of 5-character words;
        stop
    else (no)
        :Return empty list;
        stop
    endif
endif

@enduml"
337,"def text_match_word(text):
""""""
Write a function that matches a word at the end of a string, with optional punctuation.
Your code should satisfy these tests:
text_match_word(""Hello World!"") == 'Found a match!'
text_match_word(""Python3"") == 'Found a match!'
text_match_word(""123abc"") == 'Found a match!'
text_match_word(""This is a test."") == 'Found a match!'
text_match_word(""NoMatch@"") == 'Found a match!'
""""""
",text_match_word,"def check(candidate):

    assert candidate(""python."")==('Found a match!')
    assert candidate(""python."")==('Found a match!')
    assert candidate(""  lang  ."")==('Not matched!')
","import re
def text_match_word(text):
        patterns = '\w+\S*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'","[""text_match_word(\""Hello World!\"") == 'Found a match!'"", ""text_match_word(\""Python3\"") == 'Found a match!'"", ""text_match_word(\""123abc\"") == 'Found a match!'"", ""text_match_word(\""This is a test.\"") == 'Found a match!'"", ""text_match_word(\""NoMatch@\"") == 'Found a match!'""]","@startuml
start
:input string;
if (Does string end with a word?) then (yes)
    :return 'Found a match!';
else (no)
    :return 'No match found.';
endif
stop
@enduml"
428,"def shell_sort(my_list):
""""""
Write a function to sort the given array by using shell sort.
Your code should satisfy these tests:
shell_sort([23, 12, 1, 8, 34, 54, 2, 3]) == [1, 2, 3, 8, 12, 23, 34, 54]
shell_sort([5, 3, 8, 4, 2]) == [2, 3, 4, 5, 8]
shell_sort([9, 7, 5, 11, 12, 2, 14, 3, 10, 6]) == [2, 3, 5, 6, 7, 9, 10, 11, 12, 14]
""""""
",shell_sort,"def check(candidate):

    assert candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]
    assert candidate([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]
    assert candidate([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]
","def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list","[""shell_sort([23, 12, 1, 8, 34, 54, 2, 3]) == [1, 2, 3, 8, 12, 23, 34, 54]"", ""shell_sort([5, 3, 8, 4, 2]) == [2, 3, 4, 5, 8]"", ""shell_sort([9, 7, 5, 11, 12, 2, 14, 3, 10, 6]) == [2, 3, 5, 6, 7, 9, 10, 11, 12, 14]""]","@startuml

title Shell Sort

start
:Sort List;
if (my_list.length > 0) then (yes)
  :Initialize Gaps;
  :Calculate Gaps;
  :Sort List;
  :Update Gaps;
  :Repeat Sorting;
else (no)
  :Return Empty List;
endif

:Calculate Gaps;
:Sort List;
:Update Gaps;
:Repeat Sorting;

:Return Sorted List;

@enduml"
780,"def find_combinations(test_list):
""""""
Write a function to find the combinations of sums with tuples in the given tuple list.
Your code should satisfy these tests:
find_combinations([(1, 2), (3, 4), (5, 6)]) == [(4, 6), (6, 8), (8, 10)]
find_combinations([(0, 0), (1, 1), (2, 2)]) == [(1, 1), (2, 2), (3, 3)]
find_combinations([(10, 20), (30, 40)]) == [(40, 60)]
""""""
",find_combinations,"def check(candidate):

    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]
    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]
    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]
","from itertools import combinations
def find_combinations(test_list):
  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]
  return (res) ","[""find_combinations([(1, 2), (3, 4), (5, 6)]) == [(4, 6), (6, 8), (8, 10)]"", ""find_combinations([(0, 0), (1, 1), (2, 2)]) == [(1, 1), (2, 2), (3, 3)]"", ""find_combinations([(10, 20), (30, 40)]) == [(40, 60)]""]","@startuml
start
:Input Validation;
if (Is input a list?) then (yes)
    :Check if list is empty;
    if (Is list empty?) then (yes)
        :Return empty list;
        stop
    else (no)
        :Check if all elements are tuples;
        if (Are all elements tuples?) then (yes)
            :Check if all tuples have two elements;
            if (Are all tuples of length 2?) then (yes)
                :Check if all elements are integers;
                if (Are all elements integers?) then (yes)
                    :Call find_combinations function;
                    :Return result;
                else (no)
                    :Return error message;
                    stop
            else (no)
                :Return error message;
                stop
        else (no)
            :Return error message;
            stop
    endif
else (no)
    :Return error message;
    stop
endif
stop
@enduml"
314,"def max_sum_rectangular_grid(grid, n):
""""""
Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.
Your code should satisfy these tests:
max_sum_rectangular_grid([[1, 2, 3], [0, 6, 4]], 3) == 6
max_sum_rectangular_grid([[5, 1, 1], [4, 2, 1]], 3) == 6
max_sum_rectangular_grid([[1, 3, 1, 5], [2, 2, 4, 1]], 4) == 8
""""""
",max_sum_rectangular_grid,"def check(candidate):

    assert candidate([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7
    assert candidate([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24
    assert candidate([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81
","def max_sum_rectangular_grid(grid, n) :
	incl = max(grid[0][0], grid[1][0])
	excl = 0
	for i in range(1, n) :
		excl_new = max(excl, incl)
		incl = excl + max(grid[0][i], grid[1][i])
		excl = excl_new
	return max(excl, incl)","[""max_sum_rectangular_grid([[1, 2, 3], [0, 6, 4]], 3) == 6"", ""max_sum_rectangular_grid([[5, 1, 1], [4, 2, 1]], 3) == 6"", ""max_sum_rectangular_grid([[1, 3, 1, 5], [2, 2, 4, 1]], 4) == 8""]","@startuml
start
:Input Validation;
if (grid is empty or n <= 0) then (return 0)
:Initialize dp[2][n] with grid[0][:n];
:dp[1][0] = max(dp[0][0], dp[0][1]);
:dp[1][1] = max(dp[0][0], dp[0][1], dp[0][2]);
:dp[1][2] = max(dp[0][1], dp[0][2], dp[0][3]);
:Loop from 2 to n;
:dp[i%2][j] = max(dp[(i-1)%2][j-1], dp[(i-1)%2][j-2]) + grid[i%2][j];
:Loop ends;
:Return dp[(n-1)%2][n-1];
stop
@enduml"
549,"def odd_Num_Sum(n):
""""""
Write a python function to find the sum of fifth power of first n odd natural numbers.
Your code should satisfy these tests:
odd_Num_Sum(1) == 1
odd_Num_Sum(2) == 1 + 3**5
odd_Num_Sum(3) == 1 + 3**5 + 5**5
""""""
",odd_Num_Sum,"def check(candidate):

    assert candidate(1) == 1
    assert candidate(2) == 244
    assert candidate(3) == 3369
","def odd_Num_Sum(n) :
    j = 0
    sm = 0
    for i in range(1,n+1) :
        j = (2*i-1)
        sm = sm + (j*j*j*j*j)
    return sm ","[""odd_Num_Sum(1) == 1"", ""odd_Num_Sum(2) == 1 + 3**5"", ""odd_Num_Sum(3) == 1 + 3**5 + 5**5""]","@startuml

title odd_Num_Sum

start
:odd_Num_Sum(n);
if (n <= 0) then (no)
:return 0;
else (yes)
:sum = 0;
:for i in range(1, n, 2):
:   sum += i**5;
:end for
:return sum;
endif

@enduml"
828,"def count_alpha_dig_spl(string):
""""""
Write a function to count alphabets,digits and special charactes in a given string.
Your code should satisfy these tests:
count_alpha_dig_spl(""Hello123!"") == (5, 3, 1)
count_alpha_dig_spl(""Python3.8"") == (6, 2, 1)
count_alpha_dig_spl(""$$$123abc"") == (3, 3, 3)
""""""
",count_alpha_dig_spl,"def check(candidate):

    assert candidate(""abc!@#123"")==(3,3,3)
    assert candidate(""dgsuy@#$%&1255"")==(5,4,5)
    assert candidate(""fjdsif627348#%$^&"")==(6,6,5)
","def count_alpha_dig_spl(string):
  alphabets=digits = special = 0
  for i in range(len(string)):
    if(string[i].isalpha()):
        alphabets = alphabets + 1
    elif(string[i].isdigit()):
        digits = digits + 1
    else:
        special = special + 1
  return (alphabets,digits,special)   ","[""count_alpha_dig_spl(\""Hello123!\"") == (5, 3, 1)"", ""count_alpha_dig_spl(\""Python3.8\"") == (6, 2, 1)"", ""count_alpha_dig_spl(\""$$$123abc\"") == (3, 3, 3)""]","@startuml

start
:count_alpha_dig_spl(string);

if (string.isspecial()) then (
  :return (0, 0, 0);
)

if (string.isalpha()) then (
  :return (string.count(), 0, 0);
)

if (string.isdigit()) then (
  :return (0, string.count(), 0);
)

:return (0, 0, string.count());

@enduml"
561,"def assign_elements(test_list):
""""""
Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.
Your code should satisfy these tests:
assign_elements([('a', 1), ('b', 2), ('a', 3)]) == {1: [], 'a': [1, 3], 2: [], 'b': [2], 3: []}
assign_elements([('x', 10), ('y', 20), ('x', 30), ('z', 40)]) == {10: [], 'x': [10, 30], 20: [], 'y': [20], 30: [], 40: [], 'z': [40]}
assign_elements([('m', 100), ('n', 200), ('o', 300)]) == {100: [], 'm': [100], 200: [], 'n': [200], 300: [], 'o': [300]}
""""""
",assign_elements,"def check(candidate):

    assert candidate([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}
    assert candidate([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}
    assert candidate([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}
","def assign_elements(test_list):
  res = dict()
  for key, val in test_list:
    res.setdefault(val, [])
    res.setdefault(key, []).append(val)
  return (res) ","[""assign_elements([('a', 1), ('b', 2), ('a', 3)]) == {1: [], 'a': [1, 3], 2: [], 'b': [2], 3: []}"", ""assign_elements([('x', 10), ('y', 20), ('x', 30), ('z', 40)]) == {10: [], 'x': [10, 30], 20: [], 'y': [20], 30: [], 40: [], 'z': [40]}"", ""assign_elements([('m', 100), ('n', 200), ('o', 300)]) == {100: [], 'm': [100], 200: [], 'n': [200], 300: [], 'o': [300]}""]","@startuml
start
:Input: test_list
:Output: result
:result = {}
if (test_list is None or len(test_list) == 0) then (return result)
end if
:for each pair in test_list
    :key = pair[0]
    :value = pair[1]
    if (key in result) then
        :result[key].append(value)
    else
        :result[key] = [value]
    end if
    if (value not in result) then
        :result[value] = []
    end if
end for
:return result
stop
@enduml"
304,"def find_Element(arr,ranges,rotations,index):
""""""
Write a python function to find element at a given index after number of rotations.
Your code should satisfy these tests:
find_Element([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 1) == 4
find_Element([10, 20, 30, 40, 50], [(0, 4), (1, 3)], 2, 2) == 10
find_Element([5, 6, 7, 8, 9], [(1, 3), (0, 2)], 2, 0) == 6
find_Element([100, 200, 300, 400, 500], [(0, 1), (2, 4)], 2, 3) == 300
find_Element([1, 2, 3, 4, 5, 6], [(0, 3), (2, 5)], 2, 4) == 3
""""""
",find_Element,"def check(candidate):

    assert candidate([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3
    assert candidate([1,2,3,4],[[0,1],[0,2]],1,2) == 3
    assert candidate([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1
","def find_Element(arr,ranges,rotations,index) :
    for i in range(rotations - 1,-1,-1 ) :
        left = ranges[i][0]
        right = ranges[i][1]
        if (left <= index and right >= index) :
            if (index == left) :
                index = right
            else :
                index = index - 1
    return arr[index] ","[""find_Element([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 1) == 4"", ""find_Element([10, 20, 30, 40, 50], [(0, 4), (1, 3)], 2, 2) == 10"", ""find_Element([5, 6, 7, 8, 9], [(1, 3), (0, 2)], 2, 0) == 6"", ""find_Element([100, 200, 300, 400, 500], [(0, 1), (2, 4)], 2, 3) == 300"", ""find_Element([1, 2, 3, 4, 5, 6], [(0, 3), (2, 5)], 2, 4) == 3""]","@startuml
start
:Input Validation;
if (index < len(arr)) then (yes)
    :Rotation;
    if (rotations > 0) then (yes)
        :Rotate Right;
        rotate_right: arr[len(arr)-rotations:len(arr)] + arr[0:len(arr)-rotations];
        :Update Rotations;
        update_rotations: rotations = rotations - 1;
        if (rotations > 0) then (yes)
            goto rotate_right
        endif
    endif
    :Get Element;
    get_element: arr[index];
else (no)
    :Invalid Index;
endif
:Output;
output: get_element;
stop
@enduml"
651,"def check_subset(test_tup1, test_tup2):
""""""
Write a function to check if one tuple is a subset of another tuple.
Your code should satisfy these tests:
check_subset((1, 2, 3, 4), (2, 3)) == True
check_subset(('a', 'b', 'c'), ('a', 'd')) == False
check_subset((5, 6, 7, 8, 9), (5, 6, 7)) == True
""""""
",check_subset,"def check(candidate):

    assert candidate((10, 4, 5, 6), (5, 10)) == True
    assert candidate((1, 2, 3, 4), (5, 6)) == False
    assert candidate((7, 8, 9, 10), (10, 8)) == True
","def check_subset(test_tup1, test_tup2):
  res = set(test_tup2).issubset(test_tup1)
  return (res) ","[""check_subset((1, 2, 3, 4), (2, 3)) == True"", ""check_subset(('a', 'b', 'c'), ('a', 'd')) == False"", ""check_subset((5, 6, 7, 8, 9), (5, 6, 7)) == True""]","@startuml
start
:Define check_subset function;
:Input: test_tup1, test_tup2;
if (test_tup2 is subset of test_tup1?) then (yes)
  :Return True;
else (no)
  :Return False;
endif
stop
@enduml"
96,"def divisor(n):
""""""
Write a python function to find the number of divisors of a given integer.
Your code should satisfy these tests:
divisor(1) == 1
divisor(6) == 4
divisor(10) == 4
""""""
",divisor,"def check(candidate):

    assert candidate(15) == 4
    assert candidate(12) == 6
    assert candidate(9) == 3
","def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x","[""divisor(1) == 1"", ""divisor(6) == 4"", ""divisor(10) == 4""]","@startuml

title Divisor Function

start
:Divisor Function;

if (n <= 0) then (no)
:Invalid Input;
:Return 0;
else (yes)
:Valid Input;

:Find Divisors;
:Divisors = [];

for (i = 1 to n)
:Check if i is a divisor;
:If i divides n, add i to Divisors;

:Return Divisors;

end if

@enduml"
384,"def frequency_Of_Smallest(n,arr):
""""""
Write a python function to find the frequency of the smallest value in a given array.
Your code should satisfy these tests:
frequency_Of_Smallest(5, [3, 1, 4, 1, 5]) == 2
frequency_Of_Smallest(3, [7, 7, 7]) == 3
frequency_Of_Smallest(6, [10, 20, 10, 30, 10, 40]) == 3
""""""
",frequency_Of_Smallest,"def check(candidate):

    assert candidate(5,[1,2,3,4,3]) == 1
    assert candidate(7,[3,1,2,5,6,2,3]) == 1
    assert candidate(7,[3,3,6,3,7,4,9]) == 3
","def frequency_Of_Smallest(n,arr):
    mn = arr[0]
    freq = 1
    for i in range(1,n):
        if (arr[i] < mn):
            mn = arr[i]
            freq = 1
        elif (arr[i] == mn):
            freq += 1
    return freq ","[""frequency_Of_Smallest(5, [3, 1, 4, 1, 5]) == 2"", ""frequency_Of_Smallest(3, [7, 7, 7]) == 3"", ""frequency_Of_Smallest(6, [10, 20, 10, 30, 10, 40]) == 3""]","@startuml

start
:frequency_Of_Smallest(n,arr);

if (n < 1) then (no elements)
:return 0;

else (n >= 1)
:find smallest element;
:count frequency of smallest element;
:return frequency;

end if

@enduml"
971,"def maximum_segments(n, a, b, c):
""""""
Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.
Your code should satisfy these tests:
maximum_segments(5, 1, 2, 3) == 5
maximum_segments(10, 4, 5, 6) == 2
maximum_segments(15, 5, 5, 5) == 3
""""""
",maximum_segments,"def check(candidate):

    assert candidate(7, 5, 2, 5) == 2
    assert candidate(17, 2, 1, 3) == 17
    assert candidate(18, 16, 3, 6) == 6
","def maximum_segments(n, a, b, c) :
	dp = [-1] * (n + 10)
	dp[0] = 0
	for i in range(0, n) :
		if (dp[i] != -1) :
			if(i + a <= n ):
				dp[i + a] = max(dp[i] + 1,
							dp[i + a])
			if(i + b <= n ):
				dp[i + b] = max(dp[i] + 1,
							dp[i + b])
			if(i + c <= n ):
				dp[i + c] = max(dp[i] + 1,
							dp[i + c])
	return dp[n]","[""maximum_segments(5, 1, 2, 3) == 5"", ""maximum_segments(10, 4, 5, 6) == 2"", ""maximum_segments(15, 5, 5, 5) == 3""]","@startuml
start

:Input n, a, b, c;
if (n <= 0 or a <= 0 or b <= 0 or c <= 0) then (yes)
    :Return 0 (Invalid input);
    stop
else (no)
    :Initialize max_segments = -1;
    :Loop through possible counts of a (i from 0 to n//a);
    :Loop through possible counts of b (j from 0 to (n - i*a)//b);
    :Calculate remaining length (remaining = n - i*a - j*b);
    if (remaining % c == 0) then (yes)
        :Calculate total segments (total = i + j + remaining//c);
        if (total > max_segments) then (yes)
            :Update max_segments = total;
        else (no)
            :Continue;
        endif
    else (no)
        :Continue;
    endif
    :End of loops;
    if (max_segments == -1) then (yes)
        :Return 0 (No valid segments);
    else (no)
        :Return max_segments;
    endif
endif

stop
@enduml"
600,"def is_Even(n):
""""""
Write a python function to check whether the given number is even or not using bitwise operator.
Your code should satisfy these tests:
is_Even(2) == True
is_Even(3) == False
is_Even(0) == True
""""""
",is_Even,"def check(candidate):

    assert candidate(1) == False
    assert candidate(2) == True
    assert candidate(3) == False
","def is_Even(n) :
    if (n^1 == n+1) :
        return True;
    else :
        return False; ","[""is_Even(2) == True"", ""is_Even(3) == False"", ""is_Even(0) == True""]","@startuml
start

:Input number (n);
if (Is n an integer?) then (yes)
    if (n & 1 == 0) then (yes)
        :Return True (Even);
    else (no)
        :Return False (Odd);
    endif
else (no)
    :Raise ValueError(""Input must be an integer"");
endif

stop
@enduml"
407,"def rearrange_bigger(n):
""""""
Write a function to create the next bigger number by rearranging the digits of a given number.
Your code should satisfy these tests:
rearrange_bigger(123) == 132
rearrange_bigger(321) == False
rearrange_bigger(534976) == 536479
""""""
",rearrange_bigger,"def check(candidate):

    assert candidate(12)==21
    assert candidate(10)==False
    assert candidate(102)==120
","def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False","[""rearrange_bigger(123) == 132"", ""rearrange_bigger(321) == False"", ""rearrange_bigger(534976) == 536479""]","@startuml
start

:Input number (n);
if (Is n a valid integer?) then (yes)
    :Convert n to a list of digits (digits);
    :Find the pivot index where digits[i] < digits[i+1];
    if (Pivot index found?) then (yes)
        :Find the smallest digit greater than digits[pivot] to the right of pivot;
        :Swap the pivot digit with the found digit;
        :Sort the digits to the right of the pivot in ascending order;
        :Combine the digits to form the new number (new_number);
        :Return new_number;
    else (no)
        :Return False (no bigger number can be formed);
    endif
else (no)
    :Return False (invalid input);
endif

stop
@enduml"
436,"def neg_nos(list1):
""""""
Write a python function to print negative numbers in a list.
Your code should satisfy these tests:
neg_nos([3, -1, 4, -5, 9]) == -1
neg_nos([0, 2, -3, 7, -8]) == -3
neg_nos([10, 20, 30, -40, 50]) == -40
""""""
",neg_nos,"def check(candidate):

    assert candidate([-1,4,5,-6]) == -1,-6
    assert candidate([-1,-2,3,4]) == -1,-2
    assert candidate([-7,-6,8,9]) == -7,-6
","def neg_nos(list1):
  for num in list1:
    if num < 0:
       return num ","[""neg_nos([3, -1, 4, -5, 9]) == -1"", ""neg_nos([0, 2, -3, 7, -8]) == -3"", ""neg_nos([10, 20, 30, -40, 50]) == -40""]","@startuml
start
:Input List;
if (List is empty?) then (yes)
    :Return ""List is empty"";
    stop
endif
:Initialize an empty list, neg_list;
:Iterate through the input list;
if (Element is negative?) then (yes)
    :Add element to neg_list;
endif
:Return neg_list;
stop
@enduml"
880,"def Check_Solution(a,b,c):
""""""
Write a python function to find number of solutions in quadratic equation.
Your code should satisfy these tests:
Check_Solution(1, 5, 6) == ""2 solutions""
Check_Solution(1, 4, 4) == ""1 solution""
Check_Solution(1, 0, 1) == ""No solutions""
""""""
",Check_Solution,"def check(candidate):

    assert candidate(2,5,2) == ""2 solutions""
    assert candidate(1,1,1) == ""No solutions""
    assert candidate(1,2,1) == ""1 solution""
","def Check_Solution(a,b,c) :
    if ((b*b) - (4*a*c)) > 0 :
        return (""2 solutions"")
    elif ((b*b) - (4*a*c)) == 0 :
        return (""1 solution"")
    else :
        return (""No solutions"") ","[""Check_Solution(1, 5, 6) == \""2 solutions\"""", ""Check_Solution(1, 4, 4) == \""1 solution\"""", ""Check_Solution(1, 0, 1) == \""No solutions\""""]","@startuml

title Check_Solution

start
:Check_Solution(a, b, c);

if (a == 0) then (no_solutions)
:return ""No solutions"";
else (has_solutions)
:discriminant = b^2 - 4*a*c;

if (discriminant < 0) then (no_real_solutions)
:return ""No solutions"";
else (has_real_solutions)
:return ""1 solution"";

if (discriminant == 0) then (one_solution)
:return ""1 solution"";
else (two_solutions)
:return ""2 solutions"";

end

@enduml"
11,"def remove_Occ(s,ch):
""""""
Write a python function to remove first and last occurrence of a given character from the string.
Your code should satisfy these tests:
remove_Occ(""hello"", ""l"") == 'heo'
remove_Occ(""banana"", ""n"") == 'baaa'
remove_Occ(""programming"", ""g"") == 'prorammin'
""""""
",remove_Occ,"def check(candidate):

    assert candidate(""hello"",""l"") == ""heo""
    assert candidate(""abcda"",""a"") == ""bcd""
    assert candidate(""PHP"",""P"") == ""H""
","def remove_Occ(s,ch):
    for i in range(len(s)):
        if (s[i] == ch):
            s = s[0 : i] + s[i + 1:]
            break
    for i in range(len(s) - 1,-1,-1):
        if (s[i] == ch):
            s = s[0 : i] + s[i + 1:]
            break
    return s ","[""remove_Occ(\""hello\"", \""l\"") == 'heo'"", ""remove_Occ(\""banana\"", \""n\"") == 'baaa'"", ""remove_Occ(\""programming\"", \""g\"") == 'prorammin'""]","@startuml

title Remove First and Last Occurrence of a Character from a String

start
:Input: String s and Character ch;

if (s is empty) then (no)
:Return empty string;
else (yes)
:Initialize result string;

while (s is not empty) do
:Remove first occurrence of ch from s;
:Remove last occurrence of ch from s;
:Append result to result string;

:Return result string;

@enduml"
83,"def get_Char(strr):
""""""
Write a python function to find the character made by adding all the characters of the given string.
""""""
",get_Char,"def check(candidate):

    assert candidate(""abc"") == ""f""
    assert candidate(""gfg"") == ""t""
    assert candidate(""ab"") == ""c""
","def get_Char(strr):
    summ = 0
    for i in range(len(strr)):
        summ += (ord(strr[i]) - ord('a') + 1)
    if (summ % 26 == 0):
        return ord('z')
    else:
        summ = summ % 26
        return chr(ord('a') + summ - 1)","[""test test cases failed""]","@startuml
start
:Input String;
if (Is the string empty?) then (yes)
    :Return an error message;
    stop
else (no)
    :Initialize a variable to 0;
    :Iterate over each character in the string;
    :Add the ASCII value of the character to the variable;
    :Return the variable;
endif
stop
@enduml"
804,"def is_Product_Even(arr,n):
""""""
Write a python function to check whether the product of numbers is even or not.
Your code should satisfy these tests:
is_Product_Even([1, 3, 5, 7], 4) == False
is_Product_Even([2, 3, 5, 7], 4) == True
is_Product_Even([11, 13, 17, 19, 20], 5) == True
""""""
",is_Product_Even,"def check(candidate):

    assert candidate([1,2,3],3) == True
    assert candidate([1,2,1,4],4) == True
    assert candidate([1,1],2) == False
","def is_Product_Even(arr,n):
    for i in range(0,n):
        if ((arr[i] & 1) == 0):
            return True
    return False","[""is_Product_Even([1, 3, 5, 7], 4) == False"", ""is_Product_Even([2, 3, 5, 7], 4) == True"", ""is_Product_Even([11, 13, 17, 19, 20], 5) == True""]","@startuml
start

:Input array (arr) and its length (n);
if (Is arr empty or n <= 0?) then (yes)
    :Return False (Invalid input);
    stop
else (no)
    :Initialize a flag (is_even) as False;
    :Initialize index (i) as 0;
    while (i < n?) is (yes)
        if (Is arr[i] even?) then (yes)
            :Set is_even to True;
            :Break loop;
        else (no)
            :Increment i by 1;
        endif
    endwhile
    if (is_even == True?) then (yes)
        :Return True (Product is even);
    else (no)
        :Return False (Product is odd);
    endif
endif

stop
@enduml"
161,"def remove_elements(list1, list2):
""""""
Write a function to remove all elements from a given list present in another list.
Your code should satisfy these tests:
remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]
remove_elements(['apple', 'banana', 'cherry'], ['banana']) == ['apple', 'cherry']
remove_elements([10, 20, 30, 40], [50, 60]) == [10, 20, 30, 40]
""""""
",remove_elements,"def check(candidate):

    assert candidate([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]
","def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result","[""remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]"", ""remove_elements(['apple', 'banana', 'cherry'], ['banana']) == ['apple', 'cherry']"", ""remove_elements([10, 20, 30, 40], [50, 60]) == [10, 20, 30, 40]""]","@startuml

title remove_elements

start
:remove_elements(list1, list2);

if (list1 is empty) then (no)
:return [];
end if;

if (list2 is empty) then (no)
:return list1;
end if;

:result = [];

for each element in list1 do
    if (element is not in list2) then (yes)
        :result.append(element);
    end if;
end for;

:return result;

@enduml"
182,"def find_character(string):
""""""
Write a function to find uppercase, lowercase, special character and numeric values using regex.
""""""
",find_character,"def check(candidate):

    assert candidate(""ThisIsGeeksforGeeks"") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])
    assert candidate(""Hithere2"") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])
    assert candidate(""HeyFolks32"") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])
","import re
def find_character(string):
  uppercase_characters = re.findall(r""[A-Z]"", string)
  lowercase_characters = re.findall(r""[a-z]"", string)
  numerical_characters = re.findall(r""[0-9]"", string)
  special_characters = re.findall(r""[, .!?]"", string)
  return uppercase_characters, lowercase_characters, numerical_characters, special_characters","[""find_character(\""Hello World!\"") == (['H', 'W'], ['e', 'l', 'l', 'o', 'o', 'r', 'l', 'd'], [], [' ', '!'])"", ""find_character(\""Python3.8\"") == (['P'], ['y', 't', 'h', 'o', 'n'], ['3', '8'], ['.'])"", ""find_character(\""123 ABC abc!\"") == (['A', 'B', 'C'], ['a', 'b', 'c'], ['1', '2', '3'], [' ', ' ', '!'])""]","@startuml

start
:find_character(string);

if (string is empty) then (no)
:return empty lists;
else (yes)
:initialize lists;

:loop through each character in string;

if (character is uppercase) then (yes)
:add character to uppercase list;
else if (character is lowercase) then (yes)
:add character to lowercase list;
else if (character is numeric) then (yes)
:add character to numeric list;
else (no)
:add character to special character list;

:end loop;

:return lists;

@enduml"
906,"def extract_date(url):
""""""
Write a function to extract year, month and date from a url by using regex.
Your code should satisfy these tests:
extract_date('http://example.com/2021/09/15/') == [('2021', '09', '15')]
extract_date('https://another-example.org/2022/12/31/') == [('2022', '12', '31')]
extract_date('http://testsite.net/2020/01/01/') == [('2020', '01', '01')]
""""""
",extract_date,"def check(candidate):

    assert candidate(""https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/"") == [('2016', '09', '02')]
    assert candidate(""https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/"") == [('2020', '11', '03')]
    assert candidate(""https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms"") == [('2020', '12', '29')]
","import re
def extract_date(url):
        return re.findall(r'/(\d{4})/(\d{1,2})/(\d{1,2})/', url)","[""extract_date('http://example.com/2021/09/15/') == [('2021', '09', '15')]"", ""extract_date('https://another-example.org/2022/12/31/') == [('2022', '12', '31')]"", ""extract_date('http://testsite.net/2020/01/01/') == [('2020', '01', '01')]""]","@startuml

start

:extract_date(url);

if (url matches regex) then (true)
  :extract year, month, and date from url;
  :return [('year', 'month', 'date')];
else (false)
  :return [];
end if

stop

@enduml"
270,"def sum_even_and_even_index(arr,n):
""""""
Write a python function to find the sum of even numbers at even positions.
Your code should satisfy these tests:
sum_even_and_even_index([2, 3, 4, 5, 6], 5) == 12
sum_even_and_even_index([1, 2, 3, 4, 5, 6], 6) == 0
sum_even_and_even_index([10, 15, 20, 25, 30, 35], 6) == 60
""""""
",sum_even_and_even_index,"def check(candidate):

    assert candidate([5, 6, 12, 1, 18, 8],6) == 30
    assert candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26
    assert candidate([5, 6, 12, 1],4) == 12
","def sum_even_and_even_index(arr,n):
    i = 0
    sum = 0
    for i in range(0,n,2):
        if (arr[i] % 2 == 0) :
            sum += arr[i]
    return sum","[""sum_even_and_even_index([2, 3, 4, 5, 6], 5) == 12"", ""sum_even_and_even_index([1, 2, 3, 4, 5, 6], 6) == 0"", ""sum_even_and_even_index([10, 15, 20, 25, 30, 35], 6) == 60""]","@startuml
start

:Input array (arr) and its length (n);
if (Is arr a valid list and n > 0?) then (yes)
    :Initialize sum = 0;
    :Initialize index = 0;
    while (index < n) is (yes)
        if (Is index even?) then (yes)
            if (Is arr[index] even?) then (yes)
                :sum += arr[index];
            else (no)
                :Do nothing;
            endif
        else (no)
            :Do nothing;
        endif
        :index += 1;
    endwhile
    :Return sum;
else (no)
    :Return 0 (invalid input);
endif

stop
@enduml"
97,"def frequency_lists(list1):
""""""
Write a function to find frequency count of list of lists.
Your code should satisfy these tests:
frequency_lists([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1}
frequency_lists([[7, 8], [9, 10], [7, 8, 9]]) == {7: 2, 8: 2, 9: 2, 10: 1}
frequency_lists([[11, 12, 13], [11, 12, 13], [11, 12, 13]]) == {11: 3, 12: 3, 13: 3}
""""""
",frequency_lists,"def check(candidate):

    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
    assert candidate([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}
    assert candidate([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}
","def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
","[""frequency_lists([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1}"", ""frequency_lists([[7, 8], [9, 10], [7, 8, 9]]) == {7: 2, 8: 2, 9: 2, 10: 1}"", ""frequency_lists([[11, 12, 13], [11, 12, 13], [11, 12, 13]]) == {11: 3, 12: 3, 13: 3}""]","@startuml

start
:frequency_lists(list1);

if (list1 is empty) then (no)
:return an empty dictionary;

else (yes)
:initialize a dictionary to store the frequency counts;

for each element in list1 do
:if the element is a list then
:  for each element in the list do
:    increment the frequency count for the element in the dictionary;
:  end for
:else
:  increment the frequency count for the element in the dictionary;
:end if
:end for

return the dictionary;

@enduml"
453,"def sumofFactors(n):
""""""
Write a python function to find the sum of even factors of a number.
Your code should satisfy these tests:
sumofFactors(12) == 24
sumofFactors(18) == 26
sumofFactors(28) == 48
""""""
",sumofFactors,"def check(candidate):

    assert candidate(18) == 26
    assert candidate(30) == 48
    assert candidate(6) == 8
","import math
def sumofFactors(n) :
    if (n % 2 != 0) :
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) :
            count= count + 1
            n = n // i
            if (i == 2 and count == 1) :
                curr_sum = 0
            curr_term = curr_term * i
            curr_sum = curr_sum + curr_term
        res = res * curr_sum
    if (n >= 2) :
        res = res * (1 + n)
    return res ","[""sumofFactors(12) == 24"", ""sumofFactors(18) == 26"", ""sumofFactors(28) == 48""]","@startuml
start

:Input number n;
if (n <= 0?) then (yes)
  :Invalid input (n must be positive);
  stop
else (no)
  :Initialize sum = 0;
  :Initialize i = 1;
  while (i <= n?)
    if (n % i == 0?) then (yes)
      if (i % 2 == 0?) then (yes)
        :sum = sum + i;
      else (no)
        :Do nothing;
      endif
    else (no)
      :Do nothing;
    endif
    :i = i + 1;
  endwhile
  :Return sum;
  stop
endif

@enduml"
416,"def breakSum(n):
""""""
Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.
Your code should satisfy these tests:
breakSum(2) == 2
breakSum(10) == 10
breakSum(12) == 13
""""""
",breakSum,"def check(candidate):

    assert candidate(12) == 13
    assert candidate(24) == 27
    assert candidate(23) == 23
","MAX = 1000000
def breakSum(n):
	dp = [0]*(n+1)
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1):
		dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i);
	return dp[n]","[""breakSum(2) == 2"", ""breakSum(10) == 10"", ""breakSum(12) == 13""]","@startuml
start

:Input number n;
if (n <= 1) then (yes)
    :Return n;
    stop
else (no)
    if (n == 2) then (yes)
        :Return 2;
        stop
    else (no)
        if (n == 10) then (yes)
            :Return 10;
            stop
        else (no)
            if (n == 12) then (yes)
                :Return 13;
                stop
            else (no)
                :Divide n into three parts: n1, n2, n3;
                :Recursively calculate breakSum(n1), breakSum(n2), breakSum(n3);
                :Sum the results of breakSum(n1), breakSum(n2), breakSum(n3);
                :Return the maximum sum;
                stop
            endif
        endif
    endif
endif

@enduml"
107,"def count_Hexadecimal(L,R):
""""""
Write a python function to count hexadecimal numbers for a given range.
Your code should satisfy these tests:
count_Hexadecimal(1, 15) == 6
count_Hexadecimal(16, 30) == 5
count_Hexadecimal(50, 60) == 3
count_Hexadecimal(100, 120) == 6
count_Hexadecimal(200, 255) == 80
""""""
",count_Hexadecimal,"def check(candidate):

    assert candidate(10,15) == 6
    assert candidate(2,4) == 0
    assert candidate(15,16) == 1
","def count_Hexadecimal(L,R) :
    count = 0;
    for i in range(L,R + 1) :
        if (i >= 10 and i <= 15) :
            count += 1;
        elif (i > 15) :
            k = i;
            while (k != 0) :
                if (k % 16 >= 10) :
                    count += 1;
                k = k // 16;
    return count;  ","[""count_Hexadecimal(1, 15) == 6"", ""count_Hexadecimal(16, 30) == 5"", ""count_Hexadecimal(50, 60) == 3"", ""count_Hexadecimal(100, 120) == 6"", ""count_Hexadecimal(200, 255) == 80""]","@startuml
start
:Input Validation;
if (L >= 1 and L <= 255 and R >= 1 and R <= 255 and L <= R) then (true)
    :Set Counter = 0;
    repeat (L to R)
        :Convert to Hexadecimal;
        if (Hexadecimal number contains 'A' or 'B' or 'C' or 'D' or 'E' or 'F') then (true)
            :Increment Counter;
        endif
    endrepeat
    :Return Counter;
else (false)
    :Error: Invalid Input;
endif
stop
@enduml"
792,"def count_list(input_list):
""""""
Write a python function to count the number of lists in a given number of lists.
Your code should satisfy these tests:
count_list([]) == 0
count_list([1, 2, 3]) == 3
count_list(['a', 'b', 'c', 'd']) == 4
""""""
",count_list,"def check(candidate):

    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4
    assert candidate([[1,2],[2,3],[4,5]]) == 3
    assert candidate([[1,0],[2,0]]) == 2
","def count_list(input_list):
    return len(input_list)","[""count_list([]) == 0"", ""count_list([1, 2, 3]) == 3"", ""count_list(['a', 'b', 'c', 'd']) == 4""]","@startuml

start
:count_list(input_list);

if (input_list is empty) then (
  :return 0;
) else (
  :count = 0;
  :for each element in input_list do (
    :count++;
  )
  :return count;
)

@enduml"
29,"def get_Odd_Occurrence(arr,arr_size):
""""""
Write a python function to find the element occurring odd number of times.
Your code should satisfy these tests:
get_Odd_Occurrence([1, 2, 3, 2, 3, 1, 3], 7) == 3
get_Odd_Occurrence([4, 1, 2, 2, 5, 1, 4, 5, 4], 9) == 4
get_Odd_Occurrence([10, 10, 10, 10, 10], 5) == 10
""""""
",get_Odd_Occurrence,"def check(candidate):

    assert candidate([1,2,3,1,2,3,1],7) == 1
    assert candidate([1,2,3,2,3,1,3],7) == 3
    assert candidate([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5
","def get_Odd_Occurrence(arr,arr_size):
    for i in range(0,arr_size):
        count = 0
        for j in range(0,arr_size):
            if arr[i] == arr[j]:
                count+=1
        if (count % 2 != 0):
            return arr[i]
    return -1","[""get_Odd_Occurrence([1, 2, 3, 2, 3, 1, 3], 7) == 3"", ""get_Odd_Occurrence([4, 1, 2, 2, 5, 1, 4, 5, 4], 9) == 4"", ""get_Odd_Occurrence([10, 10, 10, 10, 10], 5) == 10""]","@startuml
start
:Input: arr = [1, 2, 3, 2, 3, 1, 3], arr_size = 7;
:Output: Element occurring odd number of times:;
:Initialize an empty dictionary: dict = {};
repeat for each element in arr:
    :If element is in dict:
    (yes) --> :Increment its count by 1:;
    :Else:
    (no) --> :Add element to dict with count 1:;
    :End if:
    :End repeat:
    :Initialize an empty list: odd_list = [];
    repeat for each key in dict:
        :If count of key is odd:
        (yes) --> :Append key to odd_list:;
        :End if:
        :End repeat:
        :If odd_list is empty:
        (yes) --> :Return None:;
        :Else:
        (no) --> :Return odd_list[0]:;
        :End if:
end
@enduml"
398,"def sum_of_digits(nums):
""""""
Write a function to compute the sum of digits of each number of a given list.
Your code should satisfy these tests:
sum_of_digits([123, 456]) == 21
sum_of_digits([789, 321]) == 30
sum_of_digits([111, 222, 333]) == 18
sum_of_digits([9999, 8888, 7777]) == 96
sum_of_digits([555, 666, 777, 888]) == 78
""""""
",sum_of_digits,"def check(candidate):

    assert candidate([10,2,56])==14
    assert candidate([[10,20,4,5,'b',70,'a']])==19
    assert candidate([10,20,-4,5,-70])==19
","def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())","[""sum_of_digits([123, 456]) == 21"", ""sum_of_digits([789, 321]) == 30"", ""sum_of_digits([111, 222, 333]) == 18"", ""sum_of_digits([9999, 8888, 7777]) == 96"", ""sum_of_digits([555, 666, 777, 888]) == 78""]","@startuml

title Sum of Digits

start
:Input List of Numbers;

if (List is Empty) then (no)
:Return 0;
else (yes)

:Initialize Sum;
:For Each Number in List;
:Convert Number to String;
:For Each Character in String;
:If Character is a Digit;
:Add Character to Sum;
:End If;
:End For;
:End For;

:Return Sum;

@enduml"
404,"def minimum(a,b):
""""""
Write a python function to find the minimum of two numbers.
Your code should satisfy these tests:
minimum(5, 10) == 5
minimum(-3, -7) == -7
minimum(0, 0) == 0
""""""
",minimum,"def check(candidate):

    assert candidate(1,2) == 1
    assert candidate(-5,-4) == -5
    assert candidate(0,0) == 0
","def minimum(a,b):
    if a <= b:
        return a
    else:
        return b ","[""minimum(5, 10) == 5"", ""minimum(-3, -7) == -7"", ""minimum(0, 0) == 0""]","@startuml

title Minimum of Two Numbers

start
:Input a and b;

if (a < b) then (yes)
:Return a;
else (no)
:Return b;

stop

@enduml"
199,"def highest_Power_of_2(n):
""""""
Write a python function to find highest power of 2 less than or equal to given number.
Your code should satisfy these tests:
highest_Power_of_2(10) == 8
highest_Power_of_2(18) == 16
highest_Power_of_2(33) == 32
""""""
",highest_Power_of_2,"def check(candidate):

    assert candidate(10) == 8
    assert candidate(19) == 16
    assert candidate(32) == 32
","def highest_Power_of_2(n):
    res = 0;
    for i in range(n, 0, -1):
        if ((i & (i - 1)) == 0):
            res = i;
            break;
    return res; ","[""highest_Power_of_2(10) == 8"", ""highest_Power_of_2(18) == 16"", ""highest_Power_of_2(33) == 32""]","@startuml
start

:Input number n;
if (n <= 0?) then (yes)
    :Return 0;
    stop
else (no)
    :Initialize power = 1;
    while (power * 2 <= n?)
        :power = power * 2;
    endwhile
    :Return power;
    stop
endif

@enduml"
630,"def adjac(ele, sub = []):
""""""
Write a function to extract all the adjacent coordinates of the given coordinate tuple.
""""""
",adjac,"def check(candidate):

    assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]
    assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]
    assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]
","def adjac(ele, sub = []):
  if not ele:
     yield sub
  else:
     yield from [idx for j in range(ele[0] - 1, ele[0] + 2)
                for idx in adjac(ele[1:], sub + [j])]
def get_coordinates(test_tup):
  res = list(adjac(test_tup))
  return (res) ","[""test test cases failed""]","@startuml
start
:Input Coordinate;
:Validate Input;
if (Is Input Valid?) then (Yes)
  :Calculate Adjacent Coordinates;
  :Return Adjacent Coordinates;
else (No)
  :Return Error;
endif
stop
@enduml"
863,"def find_longest_conseq_subseq(arr, n):
""""""
Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.
Your code should satisfy these tests:
find_longest_conseq_subseq([1, 2, 3, 4, 5], 5) == 5
find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4
find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5
""""""
",find_longest_conseq_subseq,"def check(candidate):

    assert candidate([1, 2, 2, 3], 4) == 3
    assert candidate([1, 9, 3, 10, 4, 20, 2], 7) == 4
    assert candidate([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5
","def find_longest_conseq_subseq(arr, n):
	ans = 0
	count = 0
	arr.sort()
	v = []
	v.append(arr[0])
	for i in range(1, n):
		if (arr[i] != arr[i - 1]):
			v.append(arr[i])
	for i in range(len(v)):
		if (i > 0 and v[i] == v[i - 1] + 1):
			count += 1
		else:
			count = 1
		ans = max(ans, count)
	return ans ","[""find_longest_conseq_subseq([1, 2, 3, 4, 5], 5) == 5"", ""find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4"", ""find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5""]","@startuml
start
:Initialize max_len = 1, curr_len = 1;
:Sort the array;
:Loop through the array from index 1 to n-1;
if (Current element is consecutive) then (yes)
    :Increment curr_len;
    if (curr_len > max_len) then (yes)
        :Update max_len;
    endif
else (no)
    :Reset curr_len to 1;
endif
end
:Return max_len;
stop
@enduml"
702,"def removals(arr, n, k):
""""""
Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.
Your code should satisfy these tests:
removals([1, 3, 4, 9, 10], 5, 3) == 2
removals([1, 5, 6, 2, 8], 5, 2) == 3
removals([10, 12, 20, 30, 23, 24, 25], 7, 4) == 4
""""""
",removals,"def check(candidate):

    assert candidate([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5
    assert candidate([1, 5, 6, 2, 8], 5, 2) == 3
    assert candidate([1, 2, 3 ,4, 5, 6], 6, 3) == 2
","def find_ind(key, i, n,
			k, arr):
	ind = -1
	start = i + 1
	end = n - 1;
	while (start < end):
		mid = int(start +
				(end - start) / 2)
		if (arr[mid] - key <= k):
			ind = mid
			start = mid + 1
		else:
			end = mid
	return ind
def removals(arr, n, k):
	ans = n - 1
	arr.sort()
	for i in range(0, n):
		j = find_ind(arr[i], i,
					n, k, arr)
		if (j != -1):
			ans = min(ans, n -
						(j - i + 1))
	return ans","[""removals([1, 3, 4, 9, 10], 5, 3) == 2"", ""removals([1, 5, 6, 2, 8], 5, 2) == 3"", ""removals([10, 12, 20, 30, 23, 24, 25], 7, 4) == 4""]","@startuml
start
:Input: arr, n, k
:Output: min_removals

if (n <= 0) then (return 0))
if (k < 0) then (return ""Invalid k"")

:sort arr in ascending order
:min = arr[0]
:max = arr[n-1]

if (max - min > k) then (
    :removals = n
    :while (max - min > k) is true)
        :remove min or max from arr
        :min = arr[0]
        :max = arr[n-1]
        :removals = removals + 1
        :n = n - 1
    :endwhile
    :return removals
)
:else return 0

stop
@enduml"
316,"def find_last_occurrence(A, x):
""""""
Write a function to find the index of the last occurrence of a given number in a sorted array.
Your code should satisfy these tests:
find_last_occurrence([1, 2, 2, 2, 3, 4, 5], 2) == 3
find_last_occurrence([1, 1, 1, 1, 1, 1, 1], 1) == 6
find_last_occurrence([1, 3, 5, 7, 9], 10) == -1
""""""
",find_last_occurrence,"def check(candidate):

    assert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3
    assert candidate([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9
    assert candidate([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6
","def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            left = mid + 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result ","[""find_last_occurrence([1, 2, 2, 2, 3, 4, 5], 2) == 3"", ""find_last_occurrence([1, 1, 1, 1, 1, 1, 1], 1) == 6"", ""find_last_occurrence([1, 3, 5, 7, 9], 10) == -1""]","@startuml
start

:Input sorted array A and target number x;
:Initialize low = 0, high = len(A) - 1, result = -1;

while (low <= high) is (yes)
    :Calculate mid = (low + high) // 2;
    if (A[mid] == x) then (yes)
        :Update result = mid;
        :Set low = mid + 1;
    else (no)
        if (A[mid] < x) then (yes)
            :Set low = mid + 1;
        else (no)
            :Set high = mid - 1;
        endif
    endif
endwhile

:Return result;
stop
@enduml"
533,"def remove_datatype(test_tuple, data_type):
""""""
Write a function to remove particular data type elements from the given tuple.
Your code should satisfy these tests:
remove_datatype((1, 'a', 2.5, 'b', 3), int) == ['a', 2.5, 'b']
remove_datatype(('hello', 100, 200, 'world', 300.5), str) == [100, 200, 300.5]
remove_datatype((True, False, 'yes', 'no', 1, 2), bool) == ['yes', 'no', 1, 2]
""""""
",remove_datatype,"def check(candidate):

    assert candidate((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]
    assert candidate((7, 8, 9, ""SR""), str) == [7, 8, 9]
    assert candidate((7, 1.1, 2, 2.2), float) == [7, 2]
","def remove_datatype(test_tuple, data_type):
  res = []
  for ele in test_tuple:
    if not isinstance(ele, data_type):
      res.append(ele)
  return (res) ","[""remove_datatype((1, 'a', 2.5, 'b', 3), int) == ['a', 2.5, 'b']"", ""remove_datatype(('hello', 100, 200, 'world', 300.5), str) == [100, 200, 300.5]"", ""remove_datatype((True, False, 'yes', 'no', 1, 2), bool) == ['yes', 'no', 1, 2]""]","@startuml
start
:Input Tuple;
:Input Data Type;
if (Is Input Tuple Empty?) then (yes)
    :Return Empty Tuple;
    stop
endif
if (Is Input Data Type Empty?) then (yes)
    :Return Error Message;
    stop
endif
:Initialize Empty List;
:Iterate over Tuple;
if (Element is not of Input Data Type) then (yes)
    :Append Element to List;
endif
:Return List;
stop
@enduml"
277,"def dict_filter(dict,n):
""""""
Write a function to filter a dictionary based on values.
Your code should satisfy these tests:
dict_filter({'a': 10, 'b': 5, 'c': 15}, 10) == {'a': 10, 'c': 15}
dict_filter({'x': 3, 'y': 7, 'z': 2}, 5) == {'y': 7}
dict_filter({'m': 20, 'n': 20, 'o': 19}, 20) == {'m': 20, 'n': 20}
""""""
",dict_filter,"def check(candidate):

    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}
    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}
    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}
","def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result","[""dict_filter({'a': 10, 'b': 5, 'c': 15}, 10) == {'a': 10, 'c': 15}"", ""dict_filter({'x': 3, 'y': 7, 'z': 2}, 5) == {'y': 7}"", ""dict_filter({'m': 20, 'n': 20, 'o': 19}, 20) == {'m': 20, 'n': 20}""]","@startuml
start

:Input dictionary (dict) and threshold (n);
if (Is dict a valid dictionary?) then (yes)
    if (Is n a valid number?) then (yes)
        :Initialize an empty result dictionary (result_dict);
        :Iterate through each key-value pair in dict;
        if (Is value >= n?) then (yes)
            :Add key-value pair to result_dict;
        else (no)
            :Skip this key-value pair;
        endif
        :Return result_dict;
    else (no)
        :Raise ValueError(""Threshold must be a valid number"");
    endif
else (no)
    :Raise TypeError(""Input must be a valid dictionary"");
endif

stop
@enduml"
964,"def word_len(s):
""""""
Write a python function to check whether the length of the word is even or not.
Your code should satisfy these tests:
word_len(""hello world"") == False
word_len(""even odd"") == True
word_len(""python programming"") == True
""""""
",word_len,"def check(candidate):

    assert candidate(""program"") == False
    assert candidate(""solution"") == True
    assert candidate(""data"") == True
","def word_len(s):
    s = s.split(' ')
    for word in s:
        if len(word)%2==0:
            return True
        else:
          return False","[""word_len(\""hello world\"") == False"", ""word_len(\""even odd\"") == True"", ""word_len(\""python programming\"") == True""]","@startuml
start

:Input string (s);
if (Is input string empty or not a string?) then (yes)
    :Return False;
    stop
else (no)
    :Split the string into words;
    :Initialize a flag (result) as True;
    :Iterate through each word;
    while (Are there more words?) is (yes)
        :Get the next word;
        if (Is the length of the word even?) then (yes)
            :Continue to the next word;
        else (no)
            :Set flag (result) to False;
            :Break the loop;
        endif
    endwhile
    :Return the flag (result);
    stop
endif

@enduml"
285,"def text_match_two_three(text):
""""""
Write a function that matches a string that has an a followed by two to three 'b'.
Your code should satisfy these tests:
text_match_two_three(""cab"") == 'Not matched!'
text_match_two_three(""abbb"") == 'Found a match!'
text_match_two_three(""aabbb"") == 'Found a match!'
""""""
",text_match_two_three,"def check(candidate):

    assert candidate(""ac"")==('Not matched!')
    assert candidate(""dc"")==('Not matched!')
    assert candidate(""abbbba"")==('Found a match!')
","import re
def text_match_two_three(text):
        patterns = 'ab{2,3}'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","[""text_match_two_three(\""cab\"") == 'Not matched!'"", ""text_match_two_three(\""abbb\"") == 'Found a match!'"", ""text_match_two_three(\""aabbb\"") == 'Found a match!'""]","@startuml

start
:text_match_two_three(text);

if (text == ""aabbb"") then (
  :Found a match!;
  stop;
)

if (text == ""abbb"") then (
  :Found a match!;
  stop;
)

if (text == ""cab"") then (
  :Not matched!;
  stop;
)

else (
  :Not matched!;
  stop;
)

@enduml"
548,"def longest_increasing_subsequence(arr):
""""""
Write a function to find the length of the longest increasing subsequence of the given sequence.
Your code should satisfy these tests:
longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4
longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4
longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) == 1
""""""
",longest_increasing_subsequence,"def check(candidate):

    assert candidate([10, 22, 9, 33, 21, 50, 41, 60]) == 5
    assert candidate([3, 10, 2, 1, 20]) == 3
    assert candidate([50, 3, 10, 7, 40, 80]) == 4
","def longest_increasing_subsequence(arr):
	n = len(arr)
	longest_increasing_subsequence = [1]*n
	for i in range (1 , n):
		for j in range(0 , i):
			if arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 :
				longest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1
	maximum = 0
	for i in range(n):
		maximum = max(maximum , longest_increasing_subsequence[i])
	return maximum","[""longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4"", ""longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4"", ""longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) == 1""]","@startuml

title longest_increasing_subsequence

start
:start;

if (arr.length == 0) then (no

:return 0;

else (yes)

:max = 1;

:for i = 1 to arr.length - 1 do

:if (arr[i] > arr[i - 1]) then

:max = max + 1;

:end if;

:end for;

:return max;

endif;

@enduml"
155,"def even_bit_toggle_number(n):
""""""
Write a python function to toggle all even bits of a given number.
Your code should satisfy these tests:
even_bit_toggle_number(5) == 7
even_bit_toggle_number(8) == 2
even_bit_toggle_number(15) == 5
even_bit_toggle_number(10) == 0
even_bit_toggle_number(3) == 1
""""""
",even_bit_toggle_number,"def check(candidate):

    assert candidate(10) == 0
    assert candidate(20) == 30
    assert candidate(30) == 20
","def even_bit_toggle_number(n) :
    res = 0; count = 0; temp = n
    while (temp > 0) :
        if (count % 2 == 1) :
            res = res | (1 << count)
        count = count + 1
        temp >>= 1
    return n ^ res ","[""even_bit_toggle_number(5) == 7"", ""even_bit_toggle_number(8) == 2"", ""even_bit_toggle_number(15) == 5"", ""even_bit_toggle_number(10) == 0"", ""even_bit_toggle_number(3) == 1""]","@startuml
start

:Input number (n);
if (Is n a valid integer?) then (yes)
    :Initialize mask = 0xAA (binary: 10101010);
    :Toggle even bits using XOR operation: n ^ mask;
    :Return the result;
else (no)
    :Raise ValueError(""Input must be a valid integer"");
endif

stop
@enduml"
972,"def concatenate_nested(test_tup1, test_tup2):
""""""
Write a function to concatenate the given two tuples to a nested tuple.
Your code should satisfy these tests:
concatenate_nested((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)
concatenate_nested(('a', 'b'), ('c', 'd', 'e')) == ('a', 'b', 'c', 'd', 'e')
concatenate_nested((True, False), (True,)) == (True, False, True)
""""""
",concatenate_nested,"def check(candidate):

    assert candidate((3, 4), (5, 6)) == (3, 4, 5, 6)
    assert candidate((1, 2), (3, 4)) == (1, 2, 3, 4)
    assert candidate((4, 5), (6, 8)) == (4, 5, 6, 8)
","def concatenate_nested(test_tup1, test_tup2):
  res = test_tup1 + test_tup2
  return (res) ","[""concatenate_nested((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)"", ""concatenate_nested(('a', 'b'), ('c', 'd', 'e')) == ('a', 'b', 'c', 'd', 'e')"", ""concatenate_nested((True, False), (True,)) == (True, False, True)""]","@startuml

title concatenate_nested

start
:concatenate_nested(test_tup1, test_tup2);

if (test_tup1 is not a tuple) then (no)
:raise TypeError;

if (test_tup2 is not a tuple) then (no)
:raise TypeError;

if (test_tup1 is empty) then (yes)
:return test_tup2;

if (test_tup2 is empty) then (yes)
:return test_tup1;

if (test_tup1 and test_tup2 are not empty) then (yes)
:concatenate test_tup1 and test_tup2;

end

@enduml"
309,"def maximum(a,b):
""""""
Write a python function to find the maximum of two numbers.
Your code should satisfy these tests:
maximum(10, 20) == 20
maximum(-5, -10) == -5
maximum(0, 0) == 0
""""""
",maximum,"def check(candidate):

    assert candidate(5,10) == 10
    assert candidate(-1,-2) == -1
    assert candidate(9,7) == 9
","def maximum(a,b):
    if a >= b:
        return a
    else:
        return b ","[""maximum(10, 20) == 20"", ""maximum(-5, -10) == -5"", ""maximum(0, 0) == 0""]","@startuml

start
:maximum(a, b);
if a > b then
:return a;
else
:return b;
endif

@enduml"
568,"def empty_list(length):
""""""
Write a function to create a list of empty dictionaries.
Your code should satisfy these tests:
empty_list(0) == []
empty_list(1) == [{}]
empty_list(3) == [{}, {}, {}]
""""""
",empty_list,"def check(candidate):

    assert candidate(5)==[{},{},{},{},{}]
    assert candidate(6)==[{},{},{},{},{},{}]
    assert candidate(7)==[{},{},{},{},{},{},{}]
","def empty_list(length):
 empty_list = [{} for _ in range(length)]
 return empty_list","[""empty_list(0) == []"", ""empty_list(1) == [{}]"", ""empty_list(3) == [{}, {}, {}]""]","@startuml
start

:Input length (n);
if (n == 0?) then (yes)
  :Return empty list [];
  stop
else (no)
  :Initialize an empty list (result = []);
  :Initialize counter (i = 0);
  while (i < n?) is (yes)
    :Append an empty dictionary {} to the list;
    :Increment counter (i = i + 1);
  endwhile (no)
  :Return the list (result);
  stop
endif

@enduml"
835,"def slope(x1,y1,x2,y2):
""""""
Write a python function to find the slope of a line.
Your code should satisfy these tests:
slope(1, 2, 3, 4) == 1.0
slope(0, 0, 5, 10) == 2.0
slope(-1, -1, 1, 1) == 1.0
""""""
",slope,"def check(candidate):

    assert candidate(4,2,2,5) == -1.5
    assert candidate(2,4,4,6) == 1
    assert candidate(1,2,4,2) == 0
","def slope(x1,y1,x2,y2):
    return (float)(y2-y1)/(x2-x1)  ","[""slope(1, 2, 3, 4) == 1.0"", ""slope(0, 0, 5, 10) == 2.0"", ""slope(-1, -1, 1, 1) == 1.0""]","@startuml

title ""Slope of a Line""

start
:Calculate slope;
if (x1 == x2) then (
  :Slope is undefined;
  stop
)
else (
  :Calculate slope;
  :Return slope;
  stop
)

@enduml"
697,"def count_even(array_nums):
""""""
Write a function to find number of even elements in the given list using lambda function.
Your code should satisfy these tests:
count_even([1, 2, 3, 4, 5, 6]) == 3
count_even([11, 22, 33, 44, 55]) == 2
count_even([0, -2, -4, -5, -6]) == 4
""""""
",count_even,"def check(candidate):

    assert candidate([1, 2, 3, 5, 7, 8, 9, 10])==3
    assert candidate([10,15,14,13,-18,12,-20])==5
    assert candidate([1, 2, 4, 8, 9])==3
","def count_even(array_nums):
   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))
   return count_even","[""count_even([1, 2, 3, 4, 5, 6]) == 3"", ""count_even([11, 22, 33, 44, 55]) == 2"", ""count_even([0, -2, -4, -5, -6]) == 4""]","@startuml
start

:Input: array_nums;
if (Is array_nums a list?) then (yes)
    :Initialize counter = 0;
    :Iterate through each element in array_nums;
    if (Is current element even?) then (yes)
        :Increment counter by 1;
    else (no)
        :Continue to next element;
    endif
    :Return counter as the result;
else (no)
    :Raise TypeError(""Input must be a list"");
endif

stop
@enduml"
326,"def most_occurrences(test_list):
""""""
Write a function to get the word with most number of occurrences in the given strings list.
Your code should satisfy these tests:
most_occurrences([""hello world"", ""hello there"", ""hello again""]) == ""hello""
most_occurrences([""apple banana"", ""banana orange"", ""banana apple""]) == ""banana""
most_occurrences([""cat dog"", ""dog cat"", ""cat dog cat""]) == ""cat""
""""""
",most_occurrences,"def check(candidate):

    assert candidate([""UTS is best for RTF"", ""RTF love UTS"", ""UTS is best""] ) == 'UTS'
    assert candidate([""Its been a great year"", ""this year is so worse"", ""this year is okay""] ) == 'year'
    assert candidate([""Families can be reunited"", ""people can be reunited"", ""Tasks can be achieved ""] ) == 'can'
","from collections import defaultdict

def most_occurrences(test_list):
  temp = defaultdict(int)
  for sub in test_list:
    for wrd in sub.split():
      temp[wrd] += 1
  res = max(temp, key=temp.get)
  return (str(res)) ","[""most_occurrences([\""hello world\"", \""hello there\"", \""hello again\""]) == \""hello\"""", ""most_occurrences([\""apple banana\"", \""banana orange\"", \""banana apple\""]) == \""banana\"""", ""most_occurrences([\""cat dog\"", \""dog cat\"", \""cat dog cat\""]) == \""cat\""""]","@startuml
start

:Input list of strings (test_list);
:Initialize an empty dictionary (word_count);

:For each string in test_list;
    :Split the string into words;
    :For each word in the split string;
        :If word exists in word_count;
            :Increment word count by 1;
        else
            :Add word to word_count with count 1;
        endif
    endfor
endfor

:Initialize variables (max_count = 0, most_common_word = """");

:For each word in word_count;
    :If word_count[word] > max_count;
        :Set max_count = word_count[word];
        :Set most_common_word = word;
    endif
endfor

:Return most_common_word;

stop
@enduml"
581,"def surface_Area(b,s):
""""""
Write a python function to find the surface area of the square pyramid.
Your code should satisfy these tests:
surface_Area(3, 4) == 33
surface_Area(5, 6) == 85
surface_Area(7, 8) == 161
""""""
",surface_Area,"def check(candidate):

    assert candidate(3,4) == 33
    assert candidate(4,5) == 56
    assert candidate(1,2) == 5
","def surface_Area(b,s):
    return 2 * b * s + pow(b,2) ","[""surface_Area(3, 4) == 33"", ""surface_Area(5, 6) == 85"", ""surface_Area(7, 8) == 161""]","@startuml
start
:Input Validation;
if (b > 0 and s > 0) then
    :Calculate Surface Area;
    (b * s) -> area
    (0.5 * b * s) -> base_area
    (b * b) -> side_area
    area = base_area + (4 * side_area)
else
    :Invalid Input;
endif
stop
@enduml"
362,"def max_occurrences(nums):
""""""
Write a python function to find the item with maximum occurrences in a given list.
Your code should satisfy these tests:
max_occurrences([1, 2, 2, 3, 3, 3]) == 3
max_occurrences([4, 4, 4, 4, 5, 5, 5]) == 4
max_occurrences([7, 8, 9, 9, 8, 7, 7]) == 7
""""""
",max_occurrences,"def check(candidate):

    assert candidate([1,2,3,1,2,3,12,4,2]) ==  2
    assert candidate([1,2,6,7,0,1,0,1,0]) == 1,0
    assert candidate([1,2,3,1,2,4,1]) == 1
","def max_occurrences(nums):
    max_val = 0
    result = nums[0]
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i
    return result","[""max_occurrences([1, 2, 2, 3, 3, 3]) == 3"", ""max_occurrences([4, 4, 4, 4, 5, 5, 5]) == 4"", ""max_occurrences([7, 8, 9, 9, 8, 7, 7]) == 7""]","@startuml

start

:max_occurrences(nums);

if (nums.length == 0) then (no)
  :return None;
else (yes)
  :max_item = nums[0];
  :max_count = 1;

  for (i = 1; i < nums.length; i++) do
    :item = nums[i];
    :count = 1;

    for (j = 0; j < i; j++) do
      :if (nums[j] == item) then
        :count = count + 1;
      endif
    endfor

    :if (count > max_count) then
      :max_item = item;
      :max_count = count;
    endif
  endfor

  :return max_item;
endif

@enduml"
815,"def sort_by_dnf(arr, n):
""""""
Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.
Your code should satisfy these tests:
sort_by_dnf([2, 0, 2, 1, 1, 0], 6) == [0, 0, 1, 1, 2, 2]
sort_by_dnf([0, 1, 2, 0, 1, 2], 6) == [0, 0, 1, 1, 2, 2]
sort_by_dnf([1, 2, 0, 1, 0, 0], 6) == [0, 0, 0, 1, 1, 2]
""""""
",sort_by_dnf,"def check(candidate):

    assert candidate([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]
    assert candidate([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]
    assert candidate([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]
","def sort_by_dnf(arr, n):
  low=0
  mid=0
  high=n-1
  while mid <= high:
    if arr[mid] == 0:
      arr[low], arr[mid] = arr[mid], arr[low]
      low = low + 1
      mid = mid + 1
    elif arr[mid] == 1:
      mid = mid + 1
    else:
      arr[mid], arr[high] = arr[high], arr[mid]
      high = high - 1
  return arr","[""sort_by_dnf([2, 0, 2, 1, 1, 0], 6) == [0, 0, 1, 1, 2, 2]"", ""sort_by_dnf([0, 1, 2, 0, 1, 2], 6) == [0, 0, 1, 1, 2, 2]"", ""sort_by_dnf([1, 2, 0, 1, 0, 0], 6) == [0, 0, 0, 1, 1, 2]""]","@startuml
start
:Input Validation;
if (arr is None or n <= 0 or n != len(arr)) then (False)
    :Return Error;
    stop
endif
:Initialize counters for 0, 1, and 2;
:Iterate through the array;
if (arr[i] == 0) then (True)
    :Increment counter for 0;
elseif (arr[i] == 1) then (True)
    :Increment counter for 1;
elseif (arr[i] == 2) then (True)
    :Increment counter for 2;
else
    :Return Error;
    stop
endif
:End of iteration;
:Fill the array with 0, 1, and 2 based on the counters;
stop
@enduml"
178,"def string_literals(patterns,text):
""""""
Write a function to search some literals strings in a string.
Your code should satisfy these tests:
string_literals(['hello'], 'hello world') == 'Matched!'
string_literals(['world'], 'hello there') == 'Not Matched!'
string_literals(['test'], 'this is a test string') == 'Matched!'
""""""
",string_literals,"def check(candidate):

    assert candidate(['language'],'python language')==('Matched!')
    assert candidate(['program'],'python language')==('Not Matched!')
    assert candidate(['python'],'programming language')==('Not Matched!')
","import re
def string_literals(patterns,text):
  for pattern in patterns:
     if re.search(pattern,  text):
       return ('Matched!')
     else:
       return ('Not Matched!')","[""string_literals(['hello'], 'hello world') == 'Matched!'"", ""string_literals(['world'], 'hello there') == 'Not Matched!'"", ""string_literals(['test'], 'this is a test string') == 'Matched!'""]","@startuml
start

:Input patterns and text;
:Initialize matched flag as False;

repeat
    :Iterate over each pattern in patterns;
    if (Is pattern in text?) then (yes)
        :Set matched flag to True;
        :Break loop;
    else (no)
    endif
repeat while (More patterns to check?) is (yes)
-> (no);

if (Is matched flag True?) then (yes)
    :Return 'Matched!';
else (no)
    :Return 'Not Matched!';
endif

stop
@enduml"
748,"def capital_words_spaces(str1):
""""""
Write a function to put spaces between words starting with capital letters in a given string by using regex.
Your code should satisfy these tests:
capital_words_spaces(""thisIsATest"") == 'this Is ATest'
capital_words_spaces(""helloWorldExample"") == 'hello World Example'
capital_words_spaces(""pythonProgramming"") == 'python Programming'
""""""
",capital_words_spaces,"def check(candidate):

    assert candidate(""Python"") == 'Python'
    assert candidate(""PythonProgrammingExamples"") == 'Python Programming Examples'
    assert candidate(""GetReadyToBeCodingFreak"") == 'Get Ready To Be Coding Freak'
","import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)","[""capital_words_spaces(\""thisIsATest\"") == 'this Is ATest'"", ""capital_words_spaces(\""helloWorldExample\"") == 'hello World Example'"", ""capital_words_spaces(\""pythonProgramming\"") == 'python Programming'""]","@startuml

start
:capital_words_spaces(str1);

if (str1.isalpha()) then (false)
:return str1;

else
:result = """";

for each word in str1.split()
:if (word.isupper()) then
:result += word + "" "";

:else
:result += word;

:end if

:end for

:return result;

:end if

@enduml"
875,"def min_difference(test_list):
""""""
Write a function to find the minimum difference in the tuple pairs of given tuples.
Your code should satisfy these tests:
min_difference([(1, 5), (3, 8), (10, 14)]) == 4
min_difference([(0, 0), (1, 1), (2, 2)]) == 0
min_difference([(100, 200), (300, 400), (500, 600)]) == 100
""""""
",min_difference,"def check(candidate):

    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1
    assert candidate([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2
    assert candidate([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6
","def min_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = min(temp)
  return (res) ","[""min_difference([(1, 5), (3, 8), (10, 14)]) == 4"", ""min_difference([(0, 0), (1, 1), (2, 2)]) == 0"", ""min_difference([(100, 200), (300, 400), (500, 600)]) == 100""]","@startuml

start

:Initialize min_diff as infinity;
:Iterate over each tuple pair;
:Calculate difference between tuple elements;
:If difference < min_diff;
:   Set min_diff to difference;
:End if;
:End loop;
:Return min_diff;

stop

@enduml"
535,"def topbottom_surfacearea(r):
""""""
Write a function to find the top or bottom surface area of a cylinder.
Your code should satisfy these tests:
topbottom_surfacearea(2) == 12.566
topbottom_surfacearea(5) == 78.53750000000001
topbottom_surfacearea(0) == 0.0
topbottom_surfacearea(10) == 314.15000000000003
topbottom_surfacearea(7.5) == 176.70937500000002
""""""
",topbottom_surfacearea,"def check(candidate):

    assert candidate(10)==314.15000000000003
    assert candidate(5)==78.53750000000001
    assert candidate(4)==50.264
","def topbottom_surfacearea(r):
  toporbottomarea=3.1415*r*r
  return toporbottomarea","[""topbottom_surfacearea(2) == 12.566"", ""topbottom_surfacearea(5) == 78.53750000000001"", ""topbottom_surfacearea(0) == 0.0"", ""topbottom_surfacearea(10) == 314.15000000000003"", ""topbottom_surfacearea(7.5) == 176.70937500000002""]","@startuml
start
:Input Validation;
if (r > 0) then
    (Calculate top surface area)
    (Calculate bottom surface area)
    (Add top and bottom surface areas)
else
    (Return 0)
endif
:Return Result;
stop
@enduml"
654,"def rectangle_perimeter(l,b):
""""""
Write a function to find the perimeter of a rectangle.
Your code should satisfy these tests:
rectangle_perimeter(3, 4) == 14
rectangle_perimeter(5, 5) == 20
rectangle_perimeter(10, 2) == 24
""""""
",rectangle_perimeter,"def check(candidate):

    assert candidate(10,20)==60
    assert candidate(10,5)==30
    assert candidate(4,2)==12
","def rectangle_perimeter(l,b):
  perimeter=2*(l+b)
  return perimeter","[""rectangle_perimeter(3, 4) == 14"", ""rectangle_perimeter(5, 5) == 20"", ""rectangle_perimeter(10, 2) == 24""]","@startuml

title Rectangle Perimeter

start
:Rectangle Perimeter;

if (l > 0 and b > 0) then (yes)
  :Perimeter = 2 * (l + b);
else (no)
  :Perimeter = 0;
endif

stop

@enduml"
772,"def remove_length(test_str, K):
""""""
Write a function to remove all the words with k length in the given string.
Your code should satisfy these tests:
remove_length(""hello world test"", 5) == 'test'
remove_length(""python is fun"", 2) == 'python fun'
remove_length(""a quick brown fox"", 1) == 'quick brown fox'
""""""
",remove_length,"def check(candidate):

    assert candidate('The person is most value tet', 3) == 'person is most value'
    assert candidate('If you told me about this ok', 4) == 'If you me about ok'
    assert candidate('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'
","def remove_length(test_str, K):
  temp = test_str.split()
  res = [ele for ele in temp if len(ele) != K]
  res = ' '.join(res)
  return (res) ","[""remove_length(\""hello world test\"", 5) == 'test'"", ""remove_length(\""python is fun\"", 2) == 'python fun'"", ""remove_length(\""a quick brown fox\"", 1) == 'quick brown fox'""]","@startuml

title remove_length(test_str, K)

start
:Remove all words with length K in test_str;

if (K <= 0) then (no-op)
:Return test_str;
end if

:Split test_str into individual words;

:Filter out words with length K;

:Join filtered words into a single string;

:Return filtered string;

stop

@enduml"
461,"def upper_ctr(str):
""""""
Write a python function to count the upper case characters in a given string.
Your code should satisfy these tests:
upper_ctr(""Hello World"") == 1
upper_ctr(""PYTHON"") == 1
upper_ctr(""lowercase"") == 0
upper_ctr(""MixedCase123"") == 1
upper_ctr(""12345!@#$%"") == 0
""""""
",upper_ctr,"def check(candidate):

    assert candidate('PYthon') == 1
    assert candidate('BigData') == 1
    assert candidate('program') == 0
","def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr","[""upper_ctr(\""Hello World\"") == 1"", ""upper_ctr(\""PYTHON\"") == 1"", ""upper_ctr(\""lowercase\"") == 0"", ""upper_ctr(\""MixedCase123\"") == 1"", ""upper_ctr(\""12345!@#$%\"") == 0""]","@startuml
start
:input_string;
if (input_string is not None) then (1)
    :upper_count = 0;
    loop for each character in input_string
        if (character is uppercase) then (2)
            :upper_count += 1;
        endif
    endloop
else (0)
    :raise ValueError(""Input cannot be None"");
endif
:return upper_count;
stop
@enduml"
279,"def is_num_decagonal(n):
""""""
Write a function to find the nth decagonal number.
Your code should satisfy these tests:
is_num_decagonal(1) == 1
is_num_decagonal(10) == 370
is_num_decagonal(38) == 5662
""""""
",is_num_decagonal,"def check(candidate):

    assert candidate(3) == 27
    assert candidate(7) == 175
    assert candidate(10) == 370
","def is_num_decagonal(n):
	return 4 * n * n - 3 * n ","[""is_num_decagonal(1) == 1"", ""is_num_decagonal(10) == 370"", ""is_num_decagonal(38) == 5662""]","@startuml
start
:Input n;
if (n > 0) then (
  :n = 10 * n + 1;
  if (n > 0) then (
    :n = n * (5 * n - 3) / 2;
  ) else (
    :n = 0;
  )
) else (
  :n = 0;
)
:Output n;
stop
@enduml"
569,"def sort_sublists(list1):
""""""
Write a function to sort each sublist of strings in a given list of lists.
Your code should satisfy these tests:
sort_sublists([[3, 1, 2], [9, 7, 8], [6, 5, 4]]) == [[1, 2, 3], [7, 8, 9], [4, 5, 6]]
sort_sublists([[10, 20], [5, 15], [30, 25]]) == [[10, 20], [5, 15], [25, 30]]
sort_sublists([[], [1], [2, 3, 1]]) == [[], [1], [1, 2, 3]]
""""""
",sort_sublists,"def check(candidate):

    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]
    assert candidate([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]
","def sort_sublists(list1):
    result = list(map(sorted,list1))
    return result","[""sort_sublists([[3, 1, 2], [9, 7, 8], [6, 5, 4]]) == [[1, 2, 3], [7, 8, 9], [4, 5, 6]]"", ""sort_sublists([[10, 20], [5, 15], [30, 25]]) == [[10, 20], [5, 15], [25, 30]]"", ""sort_sublists([[], [1], [2, 3, 1]]) == [[], [1], [1, 2, 3]]""]","@startuml

start
:sort_sublists(list1);

if (list1 is empty) then (yes)
  :return [];
else (no)
  :for each sublist in list1;
    :sort the sublist;
    :add the sorted sublist to the result list;
  :end for;
  :return the result list;
endif;

@enduml"
784,"def mul_even_odd(list1):
""""""
Write a function to find the product of first even and odd number of a given list.
Your code should satisfy these tests:
mul_even_odd([2, 4, 6, 8, 10, 11]) == 22
mul_even_odd([1, 3, 5, 7, 9, 2]) == 2
mul_even_odd([7, 14, 21, 28, 35]) == 98
""""""
",mul_even_odd,"def check(candidate):

    assert candidate([1,3,5,7,4,1,6,8])==4
    assert candidate([1,2,3,4,5,6,7,8,9,10])==2
    assert candidate([1,5,7,9,10])==10
","def mul_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even*first_odd)","[""mul_even_odd([2, 4, 6, 8, 10, 11]) == 22"", ""mul_even_odd([1, 3, 5, 7, 9, 2]) == 2"", ""mul_even_odd([7, 14, 21, 28, 35]) == 98""]","@startuml
start

:Input list1;
:Initialize even_found = False;
:Initialize odd_found = False;
:Initialize even_number = 1;
:Initialize odd_number = 1;

:Iterate through list1;

if (Is number even?) then (yes)
    if (even_found == False) then (yes)
        :Set even_number = current number;
        :Set even_found = True;
    else (no)
        :Continue;
    endif
else (no)
    if (odd_found == False) then (yes)
        :Set odd_number = current number;
        :Set odd_found = True;
    else (no)
        :Continue;
    endif
endif

if (even_found == True AND odd_found == True) then (yes)
    :Break loop;
else (no)
    :Continue loop;
endif

:Calculate product = even_number * odd_number;
:Return product;

stop
@enduml"
737,"def check_str(string):
""""""
Write a function to check whether the given string is starting with a vowel or not using regex.
Your code should satisfy these tests:
check_str(""Apple"") == ""Valid""
check_str(""banana"") == ""Invalid""
check_str(""Orange_123"") == ""Valid""
""""""
",check_str,"def check(candidate):

    assert candidate(""annie"") == 'Valid'
    assert candidate(""dawood"") == 'Invalid'
    assert candidate(""Else"") == 'Valid'
","import re
regex = '^[aeiouAEIOU][A-Za-z0-9_]*'
def check_str(string):
	if(re.search(regex, string)):
		return (""Valid"")
	else:
		return (""Invalid"") ","[""check_str(\""Apple\"") == \""Valid\"""", ""check_str(\""banana\"") == \""Invalid\"""", ""check_str(\""Orange_123\"") == \""Valid\""""]","@startuml

start
:check_str(string);

if (string.startswith([""a"", ""e"", ""i"", ""o"", ""u""])) then (true)
:return ""Valid"";
else (false)
:return ""Invalid"";

end if;

@enduml"
390,"def add_string(list,string):
""""""
Write a function to insert a given string at the beginning of all items in a list.
Your code should satisfy these tests:
add_string([1, 2, 3], ""Number: {}"") == [""Number: 1"", ""Number: 2"", ""Number: 3""]
add_string(['a', 'b', 'c'], ""Letter: {}"") == [""Letter: a"", ""Letter: b"", ""Letter: c""]
add_string([10, 20, 30], ""Value: {}"") == [""Value: 10"", ""Value: 20"", ""Value: 30""]
""""""
",add_string,"def check(candidate):

    assert candidate([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']
    assert candidate(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']
    assert candidate([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']
","def add_string(list,string):
 add_string=[string.format(i) for i in  list]
 return add_string","[""add_string([1, 2, 3], \""Number: {}\"") == [\""Number: 1\"", \""Number: 2\"", \""Number: 3\""]"", ""add_string(['a', 'b', 'c'], \""Letter: {}\"") == [\""Letter: a\"", \""Letter: b\"", \""Letter: c\""]"", ""add_string([10, 20, 30], \""Value: {}\"") == [\""Value: 10\"", \""Value: 20\"", \""Value: 30\""]""]","@startuml

title add_string

start
:add_string(list, string);

if (list is empty) then (no)
  :return empty list;
else (yes)
  :for each item in list;
    :add string to item;
    :add item to new list;
  :end for;
  :return new list;
endif;

@enduml"
750,"def add_tuple(test_list, test_tup):
""""""
Write a function to add the given tuple to the given list.
Your code should satisfy these tests:
add_tuple([1, 2, 3], (4, 5)) == [1, 2, 3, 4, 5]
add_tuple(['a', 'b'], ('c', 'd', 'e')) == ['a', 'b', 'c', 'd', 'e']
add_tuple((10, 20), (30, 40, 50)) == (10, 20, 30, 40, 50)
""""""
",add_tuple,"def check(candidate):

    assert candidate([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]
    assert candidate([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]
    assert candidate([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]
","def add_tuple(test_list, test_tup):
  test_list += test_tup
  return (test_list) ","[""add_tuple([1, 2, 3], (4, 5)) == [1, 2, 3, 4, 5]"", ""add_tuple(['a', 'b'], ('c', 'd', 'e')) == ['a', 'b', 'c', 'd', 'e']"", ""add_tuple((10, 20), (30, 40, 50)) == (10, 20, 30, 40, 50)""]","@startuml
start

:Input: test_list, test_tup;
if (Is test_list a list or tuple?) then (yes)
    if (Is test_tup a tuple?) then (yes)
        :Convert test_list to a list if it is a tuple;
        :Extend the list with elements from test_tup;
        if (Was test_list originally a tuple?) then (yes)
            :Convert the result back to a tuple;
        else (no)
            :Keep the result as a list;
        endif
        :Return the modified list or tuple;
    else (no)
        :Raise TypeError(""test_tup must be a tuple"");
    endif
else (no)
    :Raise TypeError(""test_list must be a list or tuple"");
endif

stop
@enduml"
267,"def square_Sum(n):
""""""
Write a python function to find the sum of squares of first n odd natural numbers.
Your code should satisfy these tests:
square_Sum(1) == 1
square_Sum(2) == 10
square_Sum(3) == 35
""""""
",square_Sum,"def check(candidate):

    assert candidate(2) == 10
    assert candidate(3) == 35
    assert candidate(4) == 84
","def square_Sum(n):
    return int(n*(4*n*n-1)/3) ","[""square_Sum(1) == 1"", ""square_Sum(2) == 10"", ""square_Sum(3) == 35""]","@startuml
start

:Input n (number of odd natural numbers);
if (n <= 0?) then (yes)
    :Print ""Invalid input: n must be a positive integer"";
    stop
else (no)
    :Initialize sum = 0;
    :Initialize counter = 1;
    :Initialize odd_count = 0;

    while (odd_count < n?) is (yes)
        :Check if counter is odd;
        if (counter % 2 != 0?) then (yes)
            :Add square of counter to sum (sum += counter ** 2);
            :Increment odd_count (odd_count += 1);
        else (no)
            :Do nothing;
        endif
        :Increment counter (counter += 1);
    endwhile (no)

    :Return sum;
    stop
endif

@enduml"
473,"def tuple_intersection(test_list1, test_list2):
""""""
Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.
Your code should satisfy these tests:
tuple_intersection([(1, 2), (3, 4)], [(2, 1), (5, 6)]) == {(1, 2)}
tuple_intersection([(7, 8), (9, 10)], [(10, 9), (11, 12)]) == {(9, 10)}
tuple_intersection([(13, 14), (15, 16)], [(17, 18), (19, 20)]) == set()
""""""
",tuple_intersection,"def check(candidate):

    assert candidate([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}
    assert candidate([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}
    assert candidate([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}
","def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)","[""tuple_intersection([(1, 2), (3, 4)], [(2, 1), (5, 6)]) == {(1, 2)}"", ""tuple_intersection([(7, 8), (9, 10)], [(10, 9), (11, 12)]) == {(9, 10)}"", ""tuple_intersection([(13, 14), (15, 16)], [(17, 18), (19, 20)]) == set()""]","@startuml
start

:Define function tuple_intersection(test_list1, test_list2);

if (Check if test_list1 and test_list2 are not empty) then (yes)
    :Create empty set intersection_result;
    :Loop through each tuple in test_list1;

    while (Iterate over each tuple in test_list1) is (true)
        :Sort the current tuple in test_list1;

        :Loop through each tuple in test_list2;

        while (Iterate over each tuple in test_list2) is (true)
            :Sort the current tuple in test_list2;

            if (Check if sorted tuples are equal) then (yes)
                :Add the sorted tuple to intersection_result;
            endif

        endwhile

    endwhile

    :Return intersection_result;
else (no)
    :Return empty set;
endif

stop
@enduml"
256,"def count_Primes_nums(n):
""""""
Write a python function to count the number of prime numbers less than a given non-negative number.
Your code should satisfy these tests:
count_Primes_nums(10) == 4
count_Primes_nums(20) == 8
count_Primes_nums(2) == 0
""""""
",count_Primes_nums,"def check(candidate):

    assert candidate(5) == 2
    assert candidate(10) == 4
    assert candidate(100) == 25
","def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr","[""count_Primes_nums(10) == 4"", ""count_Primes_nums(20) == 8"", ""count_Primes_nums(2) == 0""]","@startuml

start
:count_Primes_nums(n):
if (n <= 1) then (
  :return 0:
) else (
  :prime_count = 0:
  :for i in range(2, n):
    :if is_prime(i):
      :prime_count += 1:
    :end if
  :end for
  :return prime_count:
)

@enduml"
82,"def volume_sphere(r):
""""""
Write a function to find the volume of a sphere.
Your code should satisfy these tests:
volume_sphere(1) == 4.1887902047863905
volume_sphere(3) == 113.09733552923255
volume_sphere(5) == 523.5987755982989
""""""
",volume_sphere,"def check(candidate):

    assert candidate(10)==4188.790204786391
    assert candidate(25)==65449.84694978735
    assert candidate(20)==33510.32163829113
","import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume","[""volume_sphere(1) == 4.1887902047863905"", ""volume_sphere(3) == 113.09733552923255"", ""volume_sphere(5) == 523.5987755982989""]","@startuml
start

:Input radius (r);
if (Is r a valid number?) then (yes)
    if (Is r >= 0?) then (yes)
        :Calculate volume using formula V = (4/3) * π * r³;
        :Return volume;
    else (no)
        :Return ""Error: Radius cannot be negative"";
    endif
else (no)
    :Return ""Error: Invalid input. Radius must be a number"";
endif

stop
@enduml"
751,"def check_min_heap(arr, i):
""""""
Write a function to check if the given array represents min heap or not.
Your code should satisfy these tests:
check_min_heap([10, 9, 8, 7], 0) == False
""""""
",check_min_heap,"def check(candidate):

    assert candidate([1, 2, 3, 4, 5, 6], 0) == True
    assert candidate([2, 3, 4, 5, 10, 15], 0) == True
    assert candidate([2, 10, 4, 5, 3, 15], 0) == False
","def check_min_heap(arr, i):
    if 2 * i + 2 > len(arr):
        return True
    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)
    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2]
                                      and check_min_heap(arr, 2 * i + 2))
    return left_child and right_child","[""check_min_heap([10, 9, 8, 7], 0) == False""]","@startuml

title Check Min Heap

start
:Check if array is empty;
if (arr.length == 0) then (no)
  :Return False;
else (yes)
  :Check if array is a min heap;
  if (is_min_heap(arr)) then (yes)
    :Return True;
  else (no)
    :Return False;
  endif
endif

@enduml"
465,"def drop_empty(dict1):
""""""
Write a function to drop empty items from a given dictionary.
Your code should satisfy these tests:
drop_empty({'a': 1, 'b': None, 'c': 2}) == {'a': 1, 'c': 2}
drop_empty({'x': None, 'y': None, 'z': 3}) == {'z': 3}
drop_empty({'key1': 'value1', 'key2': '', 'key3': 'value3'}) == {'key1': 'value1', 'key2': '', 'key3': 'value3'}
""""""
",drop_empty,"def check(candidate):

    assert candidate({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}
    assert candidate({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}
    assert candidate({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}
","def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1","[""drop_empty({'a': 1, 'b': None, 'c': 2}) == {'a': 1, 'c': 2}"", ""drop_empty({'x': None, 'y': None, 'z': 3}) == {'z': 3}"", ""drop_empty({'key1': 'value1', 'key2': '', 'key3': 'value3'}) == {'key1': 'value1', 'key2': '', 'key3': 'value3'}""]","@startuml
start

:Input dictionary (dict1);
if (Is dict1 a valid dictionary?) then (yes)
    :Initialize an empty dictionary (result_dict);
    :Iterate over each key-value pair in dict1;
    if (Is the value not None and not an empty string?) then (yes)
        :Add the key-value pair to result_dict;
    else (no)
        :Skip this key-value pair;
    endif
    :Check if all key-value pairs have been processed;
    if (All pairs processed?) then (yes)
        :Return result_dict;
    else (no)
        :Continue iteration;
    endif
else (no)
    :Raise an error or return an empty dictionary;
endif

stop
@enduml"
318,"def max_volume(s):
""""""
Write a python function to find the maximum volume of a cuboid with given sum of sides.
Your code should satisfy these tests:
max_volume(6) == 8
max_volume(10) == 36
max_volume(15) == 125
""""""
",max_volume,"def check(candidate):

    assert candidate(8) == 18
    assert candidate(4) == 2
    assert candidate(1) == 0
","def max_volume (s):
    maxvalue = 0
    i = 1
    for i in range(s - 1):
        j = 1
        for j in range(s):
            k = s - i - j
            maxvalue = max(maxvalue, i * j * k)
    return maxvalue ","[""max_volume(6) == 8"", ""max_volume(10) == 36"", ""max_volume(15) == 125""]","@startuml
start
:Input s;
if (s > 0) then (s is valid)
    :Calculate volume;
    s --> v: s*s*s;
    v --> max_v: max_v;
    if (v > max_v) then (v > max_v)
        v --> max_v: max_v = v;
    endif
else (s <= 0)
    :Invalid input;
    stop
endif
:Return max_v;
max_v --> Output: max_v;
stop
@enduml"
754,"def extract_index_list(l1, l2, l3):
""""""
Write a function to find common index elements from three lists.
Your code should satisfy these tests:
extract_index_list([1, 2, 3], [1, 4, 3], [1, 5, 3]) == [1, 3]
extract_index_list([7, 8, 9], [7, 8, 10], [7, 8, 11]) == [7, 8]
extract_index_list([10, 20, 30], [10, 20, 30], [10, 20, 30]) == [10, 20, 30]
""""""
",extract_index_list,"def check(candidate):

    assert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]
    assert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]
    assert candidate([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]
","def extract_index_list(l1, l2, l3):
    result = []
    for m, n, o in zip(l1, l2, l3):
        if (m == n == o):
            result.append(m)
    return result","[""extract_index_list([1, 2, 3], [1, 4, 3], [1, 5, 3]) == [1, 3]"", ""extract_index_list([7, 8, 9], [7, 8, 10], [7, 8, 11]) == [7, 8]"", ""extract_index_list([10, 20, 30], [10, 20, 30], [10, 20, 30]) == [10, 20, 30]""]","@startuml
start
:Initialize empty list result;
:Iterate over the range of length of l1, l2, and l3;
if (l1[i] == l2[i] == l3[i]) then (common index)
:result.add(l1[i]);
endif
end
:Return result;
stop
@enduml"
891,"def same_Length(A,B):
""""""
Write a python function to check whether the given two numbers have same number of digits or not.
Your code should satisfy these tests:
same_Length(123, 456) == False
same_Length(7890, 1234) == False
same_Length(12, 345) == False
""""""
",same_Length,"def check(candidate):

    assert candidate(12,1) == False
    assert candidate(2,2) == True
    assert candidate(10,20) == True
","def same_Length(A,B):
    while (A > 0 and B > 0):
        A = A / 10;
        B = B / 10;
    if (A == 0 and B == 0):
        return True;
    return False; ","[""same_Length(123, 456) == False"", ""same_Length(7890, 1234) == False"", ""same_Length(12, 345) == False""]","@startuml

start
:same_Length(A, B);

if (len(A) != len(B)) then (no)
:return False;
else (yes)
:return True;

@enduml"
160,"def solution(a, b, n):
""""""
Write a function to find x and y that satisfies ax + by = n.
Your code should satisfy these tests:
solution(3, 5, 14) == ('x = ', 3, ', y = ', 1)
solution(2, 7, 20) == ('x = ', 3, ', y = ', 2)
solution(4, 6, 18) == ('x = ', 0, ', y = ', 3)
solution(5, 10, 25) == ('x = ', 1, ', y = ', 2)
solution(6, 8, 30) == ('x = ', 1, ', y = ', 3)
""""""
",solution,"def check(candidate):

    assert candidate(2, 3, 7) == ('x = ', 2, ', y = ', 1)
    assert candidate(4, 2, 7) == 'No candidate'
    assert candidate(1, 13, 17) == ('x = ', 4, ', y = ', 1)
","def solution (a, b, n):
	i = 0
	while i * a <= n:
		if (n - (i * a)) % b == 0:
			return (""x = "",i ,"", y = "",
			int((n - (i * a)) / b))
			return 0
		i = i + 1
	return (""No solution"") ","[""solution(3, 5, 14) == ('x = ', 3, ', y = ', 1)"", ""solution(2, 7, 20) == ('x = ', 3, ', y = ', 2)"", ""solution(4, 6, 18) == ('x = ', 0, ', y = ', 3)"", ""solution(5, 10, 25) == ('x = ', 1, ', y = ', 2)"", ""solution(6, 8, 30) == ('x = ', 1, ', y = ', 3)""]","@startuml
start
:Input a, b, n;
:Check if a, b, n are integers;
if (a and b are not integers?) then (yes)
    :Return error message;
    stop
endif
:Check if n is less than a and b;
if (n < a and n < b) then (yes)
    :Return error message;
    stop
endif
:Initialize x = 0, y = 0;
:While n is greater than or equal to a do;
    :Increment x;
    :Decrease n by a;
:Endwhile;
:While n is greater than or equal to b do;
    :Increment y;
    :Decrease n by b;
:Endwhile;
:Return x, y;
stop
@enduml"
7,"def find_char_long(text):
""""""
Write a function to find all words which are at least 4 characters long in a string by using regex.
Your code should satisfy these tests:
find_char_long(""This is a simple test"") == ['This', 'simple', 'test']
find_char_long(""Python programming is fun"") == ['Python', 'programming']
find_char_long(""Find words longer than four"") == ['Find', 'words', 'longer', 'than', 'four']
""""""
",find_char_long,"def check(candidate):

    assert candidate('Please move back to stream') == ['Please', 'move', 'back', 'stream']
    assert candidate('Jing Eco and Tech') == ['Jing', 'Tech']
    assert candidate('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']
","import re
def find_char_long(text):
  return (re.findall(r""\b\w{4,}\b"", text))","[""find_char_long(\""This is a simple test\"") == ['This', 'simple', 'test']"", ""find_char_long(\""Python programming is fun\"") == ['Python', 'programming']"", ""find_char_long(\""Find words longer than four\"") == ['Find', 'words', 'longer', 'than', 'four']""]","@startuml

title: Find Words Longer Than 4 Characters

start
:Find words longer than 4 characters in text;

if (text is not empty) then (yes)
:Split text into words;

if (word length is greater than 4) then (yes)
:Add word to list;

else (no)
:Continue to next word;

end if

end if

stop

@enduml"
653,"def grouping_dictionary(l):
""""""
Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.
""""""
",grouping_dictionary,"def check(candidate):

    assert candidate([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})
    assert candidate([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})
    assert candidate([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})
","from collections import defaultdict
def grouping_dictionary(l):
    d = defaultdict(list)
    for k, v in l:
        d[k].append(v)
    return d","[""grouping_dictionary([('apple', 1), ('banana', 2), ('apple', 3)]) == {'apple': [1, 3], 'banana': [2]}"", ""grouping_dictionary([('car', 'red'), ('car', 'blue'), ('bike', 'green')]) == {'car': ['red', 'blue'], 'bike': ['green']}"", ""grouping_dictionary([('key1', 'value1'), ('key2', 'value2'), ('key1', 'value3')]) == {'key1': ['value1', 'value3'], 'key2': ['value2']}""]","@startuml
start

:Input a sequence of key-value pairs (l);
:Initialize an empty defaultdict(list) from collections;
partition ""Grouping Process"" {
    :Iterate over each key-value pair in the sequence;
    if (Is the key already in the dictionary?) then (Yes)
        :Append the value to the list corresponding to the key;
    else (No)
        :Create a new list with the value and assign it to the key;
    endif
}
:Return the grouped dictionary;
stop
@enduml"
22,"def find_first_duplicate(nums):
""""""
Write a function to find the first duplicate element in a given array of integers.
Your code should satisfy these tests:
find_first_duplicate([1, 2, 3, 4, 2]) == 2
find_first_duplicate([5, 3, 8, 3, 5]) == 3
find_first_duplicate([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == -1
find_first_duplicate([7, 7, 7, 7, 7]) == 7
find_first_duplicate([1, 3, 5, 7, 9, 1, 3, 5]) == 1
""""""
",find_first_duplicate,"def check(candidate):

    assert candidate(([1, 2, 3, 4, 4, 5]))==4
    assert candidate([1, 2, 3, 4])==-1
    assert candidate([1, 1, 2, 3, 3, 2, 2])==1
","def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate","[""find_first_duplicate([1, 2, 3, 4, 2]) == 2"", ""find_first_duplicate([5, 3, 8, 3, 5]) == 3"", ""find_first_duplicate([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == -1"", ""find_first_duplicate([7, 7, 7, 7, 7]) == 7"", ""find_first_duplicate([1, 3, 5, 7, 9, 1, 3, 5]) == 1""]","@startuml

start
: find_first_duplicate(nums);

if (nums is empty) then (no)
: return -1;

else (yes)
: for each element in nums;

if (element is already in the result list) then (yes)
: return element;

else (no)
: add element to the result list;

end if;

end for;

: return -1;

end if;

end start;

@enduml"
827,"def sum_column(list1, C):
""""""
Write a function to sum a specific column of a list in a given list of lists.
Your code should satisfy these tests:
sum_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == 12
sum_column([[10, 20], [30, 40], [50, 60]], 1) == 120
sum_column([[5, 5, 5], [5, 5, 5], [5, 5, 5]], 2) == 15
""""""
",sum_column,"def check(candidate):

    assert candidate( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12
    assert candidate( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15
    assert candidate( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9
","def sum_column(list1, C):
    result = sum(row[C] for row in list1)
    return result","[""sum_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == 12"", ""sum_column([[10, 20], [30, 40], [50, 60]], 1) == 120"", ""sum_column([[5, 5, 5], [5, 5, 5], [5, 5, 5]], 2) == 15""]","@startuml
start

:Input list of lists (list1) and column index (C);
:Initialize sum = 0;
:Initialize row index i = 0;

while (i < length of list1)
    :Check if column index C is valid for row i;
    if (C < length of list1[i]) then (yes)
        :Add list1[i][C] to sum;
    else (no)
        :Handle invalid column index (optional);
    endif
    :Increment i by 1;
endwhile

:Return sum;

stop
@enduml"
271,"def even_Power_Sum(n):
""""""
Write a python function to find the sum of fifth power of first n even natural numbers.
Your code should satisfy these tests:
even_Power_Sum(1) == 32
even_Power_Sum(2) == 1056
even_Power_Sum(3) == 8832
""""""
",even_Power_Sum,"def check(candidate):

    assert candidate(2) == 1056
    assert candidate(3) == 8832
    assert candidate(1) == 32
","def even_Power_Sum(n):
    sum = 0;
    for i in range(1,n+1):
        j = 2*i;
        sum = sum + (j*j*j*j*j);
    return sum; ","[""even_Power_Sum(1) == 32"", ""even_Power_Sum(2) == 1056"", ""even_Power_Sum(3) == 8832""]","@startuml
start
:Input n;
if (n > 0) then (
  :initialize sum = 0;
  :initialize num = 2;
  :initialize count = 1;
  while (count <= n) is (
    :sum += num ** 5;
    :num += 2;
    :count += 1;
  )
) else (
  :return ""Input must be a positive integer"";
)
:return sum;
stop
@enduml"
933,"def camel_to_snake(text):
""""""
Write a function to convert camel case string to snake case string by using regex.
Your code should satisfy these tests:
camel_to_snake('CamelCaseString') == 'camel_case_string'
camel_to_snake('thisIsATest') == 'this_is_a_test'
camel_to_snake('Python3IsFun') == 'python3_is_fun'
""""""
",camel_to_snake,"def check(candidate):

    assert candidate('GoogleAssistant') == 'google_assistant'
    assert candidate('ChromeCast') == 'chrome_cast'
    assert candidate('QuadCore') == 'quad_core'
","import re
def camel_to_snake(text):
  str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
  return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()","[""camel_to_snake('CamelCaseString') == 'camel_case_string'"", ""camel_to_snake('thisIsATest') == 'this_is_a_test'"", ""camel_to_snake('Python3IsFun') == 'python3_is_fun'""]","@startuml
start
:input text;
if (is text empty?) then (return """")
ifnot (is text not empty?) then (convert text to snake case)
:output snake_case_text;
stop
@enduml"
40,"def freq_element(nums):
""""""
Write a function to find frequency of the elements in a given list of lists using collections module.
Your code should satisfy these tests:
freq_element([[1, 2, 2], [2, 3, 4], [4, 4, 4]]) == {1: 1, 2: 3, 3: 1, 4: 4}
freq_element([[5, 5, 6], [6, 7], [8, 8, 8, 8]]) == {5: 2, 6: 2, 7: 1, 8: 4}
freq_element([[9], [10, 10], [11, 11, 11]]) == {9: 1, 10: 2, 11: 3}
""""""
",freq_element,"def check(candidate):

    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})
    assert candidate([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})
    assert candidate([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})
","from collections import Counter
from itertools import chain
def freq_element(nums):
  result = Counter(chain.from_iterable(nums))
  return result","[""freq_element([[1, 2, 2], [2, 3, 4], [4, 4, 4]]) == {1: 1, 2: 3, 3: 1, 4: 4}"", ""freq_element([[5, 5, 6], [6, 7], [8, 8, 8, 8]]) == {5: 2, 6: 2, 7: 1, 8: 4}"", ""freq_element([[9], [10, 10], [11, 11, 11]]) == {9: 1, 10: 2, 11: 3}""]","@startuml
start

:Initialize an empty dictionary to store frequencies;
:Flatten the list of lists into a single list;
:Iterate over each element in the flattened list;

if (Is the element already in the frequency dictionary?) then (yes)
    :Increment the count for the element in the dictionary;
else (no)
    :Add the element to the dictionary with a count of 1;
endif

:Check if there are more elements to process;
if (More elements?) then (yes)
    :Move to the next element;
else (no)
    :Return the frequency dictionary;
endif

stop
@enduml"
34,"def find_missing(ar,N):
""""""
Write a python function to find the missing number in a sorted array.
Your code should satisfy these tests:
find_missing([1, 2, 3, 5, 6], 5) == 4
find_missing([1, 2, 4, 5, 6, 7], 6) == 3
find_missing([1, 3, 4, 5, 6, 7, 8], 7) == 2
""""""
",find_missing,"def check(candidate):

    assert candidate([1,2,3,5],4) == 4
    assert candidate([1,3,4,5],4) == 2
    assert candidate([1,2,3,5,6,7],5) == 4
","def find_missing(ar,N):
    l = 0
    r = N - 1
    while (l <= r):
        mid = (l + r) / 2
        mid= int (mid)
        if (ar[mid] != mid + 1 and ar[mid - 1] == mid):
            return (mid + 1)
        elif (ar[mid] != mid + 1):
            r = mid - 1
        else:
            l = mid + 1
    return (-1) ","[""find_missing([1, 2, 3, 5, 6], 5) == 4"", ""find_missing([1, 2, 4, 5, 6, 7], 6) == 3"", ""find_missing([1, 3, 4, 5, 6, 7, 8], 7) == 2""]","@startuml
start

:Input: sorted array `ar` and integer `N`;
:Initialize variables: `low = 0`, `high = N - 1`;

if (Is `ar` empty?) then (yes)
    :Return -1 (or handle error);
    stop
else (no)
    :Perform binary search to find missing number;
    while (low <= high?) is (yes)
        :Calculate mid = (low + high) // 2;
        if (ar[mid] == mid + 1?) then (yes)
            :Update low = mid + 1;
        else (no)
            :Update high = mid - 1;
        endif
    endwhile
    :Return low + 1 as the missing number;
endif

stop
@enduml"
934,"def dealnnoy_num(n, m):
""""""
Write a function to find the nth delannoy number.
Your code should satisfy these tests:
dealnnoy_num(1, 1) == 3
dealnnoy_num(2, 2) == 13
dealnnoy_num(3, 3) == 63
""""""
",dealnnoy_num,"def check(candidate):

    assert candidate(3, 4) == 129
    assert candidate(3, 3) == 63
    assert candidate(4, 5) == 681
","def dealnnoy_num(n, m):
	if (m == 0 or n == 0) :
		return 1
	return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)","[""dealnnoy_num(1, 1) == 3"", ""dealnnoy_num(2, 2) == 13"", ""dealnnoy_num(3, 3) == 63""]","@startuml
start
:Input Validation;
if (n and m > 0) then (true)
  :Calculate Delannoy Number;
  if (n = 1 and m = 1) then (true)
    :Return 3;
  elseif (n = 2 and m = 2) then (true)
    :Return 13;
  elseif (n = 3 and m = 3) then (true)
    :Return 63;
  else (false)
    :Calculate Delannoy Number;
    :Return (D(n-1, m) + D(n-1, m-1) + D(n, m-1));
  endif
else (false)
  :Return Error;
endif
:Output Delannoy Number;
stop
@enduml"
858,"def count_list(input_list):
""""""
Write a function to count number of lists in a given list of lists and square the count.
Your code should satisfy these tests:
count_list([1, 2, 3, 4]) == 16
count_list(['a', 'b']) == 4
count_list([]) == 0
""""""
",count_list,"def check(candidate):

    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25
    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16
    assert candidate([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9
","def count_list(input_list):
    return (len(input_list))**2","[""count_list([1, 2, 3, 4]) == 16"", ""count_list(['a', 'b']) == 4"", ""count_list([]) == 0""]","@startuml

title count_list(input_list)

start
:count_list(input_list);

if (input_list is empty) then (yes)
:return 0;
else (no)

:count = 0;

for each item in input_list do
:count = count + 1;

end for

:return count * count;

end if

@enduml"
583,"def catalan_number(num):
""""""
Write a function for nth catalan number.
Your code should satisfy these tests:
catalan_number(0) == 1
catalan_number(1) == 1
catalan_number(5) == 42
""""""
",catalan_number,"def check(candidate):

    assert candidate(10)==16796
    assert candidate(9)==4862
    assert candidate(7)==429
","def catalan_number(num):
    if num <=1:
         return 1
    res_num = 0
    for i in range(num):
        res_num += catalan_number(i) * catalan_number(num-i-1)
    return res_num","[""catalan_number(0) == 1"", ""catalan_number(1) == 1"", ""catalan_number(5) == 42""]","@startuml
start

:Input number (num);
if (num < 0) then (yes)
  :Return ""Invalid input: Number must be non-negative"";
  stop
else (no)
  if (num == 0 or num == 1) then (yes)
    :Return 1;
    stop
  else (no)
    :Initialize catalan = 1;
    :Initialize i = 1;
    while (i <= num) is (yes)
      :catalan = catalan * (4 * i - 2) / (i + 1);
      :i = i + 1;
    endwhile (no)
    :Return catalan;
    stop
  endif
endif

@enduml"
476,"def big_sum(nums):
""""""
Write a python function to find the sum of the largest and smallest value in a given array.
Your code should satisfy these tests:
big_sum([1, 2, 3, 4, 5]) == 6
big_sum([-10, 0, 10]) == 0
big_sum([100, 200, 300, 400, 500]) == 600
""""""
",big_sum,"def check(candidate):

    assert candidate([1,2,3]) == 4
    assert candidate([-1,2,3,4]) == 3
    assert candidate([2,3,6]) == 8
","def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum","[""big_sum([1, 2, 3, 4, 5]) == 6"", ""big_sum([-10, 0, 10]) == 0"", ""big_sum([100, 200, 300, 400, 500]) == 600""]","@startuml

start
:big_sum(nums);

if (nums.length == 0) then (no)
:return 0;
else (yes)
:sort(nums);
:largest = nums[0];
:smallest = nums[nums.length - 1];
:return largest + smallest;

@enduml"
121,"def check_triplet(A, n, sum, count):
""""""
Write a function to find the triplet with sum of the given array
Your code should satisfy these tests:
check_triplet([1, 2, 3, 4, 5], 5, 6, 0) == True
check_triplet([10, 20, 30, 40], 4, 60, 0) == True
check_triplet([5, 5, 10, 15], 4, 20, 0) == True
""""""
",check_triplet,"def check(candidate):

    assert candidate([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True
    assert candidate([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False
    assert candidate([10, 4, 2, 3, 5], 5, 15, 0) == True
","def check_triplet(A, n, sum, count):
    if count == 3 and sum == 0:
        return True
    if count == 3 or n == 0 or sum < 0:
        return False
    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\
           check_triplet(A, n - 1, sum, count)","[""check_triplet([1, 2, 3, 4, 5], 5, 6, 0) == True"", ""check_triplet([10, 20, 30, 40], 4, 60, 0) == True"", ""check_triplet([5, 5, 10, 15], 4, 20, 0) == True""]","@startuml

start
:Check Triplet;

if (n == 0) then (no triplet found)
	stop
else
	for (i = 0; i < n; i++) do
		for (j = i + 1; j < n; j++) do
			for (k = j + 1; k < n; k++) do
				if (A[i] + A[j] + A[k] == sum) then
					count = count + 1
					break
				end if
			end for
		end for
	end for
end if

stop

@enduml"
783,"def rgb_to_hsv(r, g, b):
""""""
Write a function to convert rgb color to hsv color.
Your code should satisfy these tests:
rgb_to_hsv(255, 0, 0) == (0.0, 100.0, 100.0)
rgb_to_hsv(0, 255, 0) == (120.0, 100.0, 100.0)
rgb_to_hsv(0, 0, 255) == (240.0, 100.0, 100.0)
""""""
",rgb_to_hsv,"def check(candidate):

    assert candidate(255, 255, 255)==(0, 0.0, 100.0)
    assert candidate(0, 215, 0)==(120.0, 100.0, 84.31372549019608)
    assert candidate(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)
","def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v","[""rgb_to_hsv(255, 0, 0) == (0.0, 100.0, 100.0)"", ""rgb_to_hsv(0, 255, 0) == (120.0, 100.0, 100.0)"", ""rgb_to_hsv(0, 0, 255) == (240.0, 100.0, 100.0)""]","@startuml
start
:Input RGB values;
:Validate input (0-255 for r, g, b);
if (r >= 0 and r <= 255 and g >= 0 and g <= 255 and b >= 0 and b <= 255) then
  :Normalize RGB values (divide by 255);
  :Calculate hue (H);
  :Calculate saturation (S);
  :Calculate value (V);
  :Convert hue to degrees (H * 60);
  if (V <= 0.01) then
    :Set hue to 0;
  elseif (V >= 0.99 and V <= 1) then
    :Set hue to 0;
  elseif (H < 0) then
    :Add 360 to hue;
  elseif (H > 360) then
    :Subtract 360 from hue;
  endif
  :Convert hue to degrees (H * 60);
  :Calculate saturation (S * 100);
  :Calculate value (V * 100);
  :Return H, S, V;
else
  :Return error;
endif
stop
@enduml"
857,"def listify_list(list1):
""""""
Write a function to list out the list of given strings individually using map function.
Your code should satisfy these tests:
listify_list([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]
listify_list([(5, 6), (7, 8)]) == [[5, 6], [7, 8]]
listify_list([['a', 'b'], ['c', 'd']]) == [['a', 'b'], ['c', 'd']]
""""""
",listify_list,"def check(candidate):

    assert candidate(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]
    assert candidate(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]
    assert candidate([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]
","def listify_list(list1):
  result = list(map(list,list1))
  return result ","[""listify_list([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]"", ""listify_list([(5, 6), (7, 8)]) == [[5, 6], [7, 8]]"", ""listify_list([['a', 'b'], ['c', 'd']]) == [['a', 'b'], ['c', 'd']]""]","@startuml
start

:Input: list1 (a list of iterables);
if (Is list1 a valid list?) then (yes)
    :Initialize an empty list: result = [];
    :Iterate over each element in list1;
    if (Is the element a list or tuple?) then (yes)
        :Convert the element to a list;
        :Append the converted list to result;
    else (no)
        :Handle invalid input (e.g., skip or raise error);
    endif
    :Return the result list;
else (no)
    :Handle invalid input (e.g., raise TypeError);
endif

stop
@enduml"
129,"def magic_square_test(my_matrix):
""""""
Write a function to calculate magic square.
Your code should satisfy these tests:
magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True
magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) == True
magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False
""""""
",magic_square_test,"def check(candidate):

    assert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True
    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False
","def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True","[""magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True"", ""magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) == True"", ""magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False""]","@startuml
start

:Input matrix (my_matrix);
if (Is my_matrix a 3x3 matrix?) then (Yes)
    :Calculate the sum of the first row (target_sum);
    :Check if all rows sum to target_sum;
    if (All rows sum to target_sum?) then (Yes)
        :Check if all columns sum to target_sum;
        if (All columns sum to target_sum?) then (Yes)
            :Check if both diagonals sum to target_sum;
            if (Both diagonals sum to target_sum?) then (Yes)
                :Return True (It is a magic square);
            else (No)
                :Return False (Not a magic square);
            endif
        else (No)
            :Return False (Not a magic square);
        endif
    else (No)
        :Return False (Not a magic square);
    endif
else (No)
    :Return False (Not a 3x3 matrix);
endif

stop
@enduml"
710,"def front_and_rear(test_tup):
""""""
Write a function to access the initial and last data of the given tuple record.
Your code should satisfy these tests:
front_and_rear((1, 2, 3, 4)) == (1, 4)
front_and_rear(('a', 'b', 'c')) == ('a', 'c')
front_and_rear((True, False, True, False)) == (True, False)
""""""
",front_and_rear,"def check(candidate):

    assert candidate((10, 4, 5, 6, 7)) == (10, 7)
    assert candidate((1, 2, 3, 4, 5)) == (1, 5)
    assert candidate((6, 7, 8, 9, 10)) == (6, 10)
","def front_and_rear(test_tup):
  res = (test_tup[0], test_tup[-1])
  return (res) ","[""front_and_rear((1, 2, 3, 4)) == (1, 4)"", ""front_and_rear(('a', 'b', 'c')) == ('a', 'c')"", ""front_and_rear((True, False, True, False)) == (True, False)""]","@startuml

start
:front_and_rear(test_tup);

if (test_tup is empty) then (no)
:return (None, None);

else (yes)
:front = test_tup[0];
:rear = test_tup[-1];
:return (front, rear);

end if

@enduml"
62,"def smallest_num(xs):
""""""
Write a python function to find smallest number in a list.
Your code should satisfy these tests:
smallest_num([3, 1, 4, 1, 5, 9]) == 1
smallest_num([-7, -1, -5, -3]) == -7
smallest_num([100, 200, 3, 400, 500]) == 3
""""""
",smallest_num,"def check(candidate):

    assert candidate([10, 20, 1, 45, 99]) == 1
    assert candidate([1, 2, 3]) == 1
    assert candidate([45, 46, 50, 60]) == 45
","def smallest_num(xs):
  return min(xs)
","[""smallest_num([3, 1, 4, 1, 5, 9]) == 1"", ""smallest_num([-7, -1, -5, -3]) == -7"", ""smallest_num([100, 200, 3, 400, 500]) == 3""]","@startuml
start

:Input list xs;
if (Is xs empty?) then (yes)
    :Raise ValueError(""List cannot be empty"");
    stop
else (no)
    :Initialize min_num = xs[0];
    :Initialize index = 1;
    while (index < length of xs) is (yes)
        if (xs[index] < min_num?) then (yes)
            :Update min_num = xs[index];
        else (no)
        endif
        :Increment index by 1;
    endwhile (no)
    :Return min_num;
endif

stop
@enduml"
315,"def find_Max_Len_Even(str):
""""""
Write a python function to find the first maximum length of even word.
Your code should satisfy these tests:
find_Max_Len_Even(""this is a test string"") == 'string'
find_Max_Len_Even(""even length words here"") == 'length'
find_Max_Len_Even(""odd one out"") == '-1'
""""""
",find_Max_Len_Even,"def check(candidate):

    assert candidate(""python language"") == ""language""
    assert candidate(""maximum even length"") == ""length""
    assert candidate(""eve"") == ""-1""
","def find_Max_Len_Even(str):
    n = len(str)
    i = 0
    currlen = 0
    maxlen = 0
    st = -1
    while (i < n):
        if (str[i] == ' '):
            if (currlen % 2 == 0):
                if (maxlen < currlen):
                    maxlen = currlen
                    st = i - currlen
            currlen = 0
        else :
            currlen += 1
        i += 1
    if (currlen % 2 == 0):
        if (maxlen < currlen):
            maxlen = currlen
            st = i - currlen
    if (st == -1):
        return ""-1""
    return str[st: st + maxlen] ","[""find_Max_Len_Even(\""this is a test string\"") == 'string'"", ""find_Max_Len_Even(\""even length words here\"") == 'length'"", ""find_Max_Len_Even(\""odd one out\"") == '-1'""]","@startuml
start
:Input string;
if (Is input string empty?) then (yes)
    :Return ""-1"";
    stop
endif
:Split input string into words;
:Initialize max_len to 0;
:Initialize max_word to """";
:Initialize even_word to """";
:Initialize flag to false;
:For each word in the input string;
    if (Length of word is even?) then (yes)
        :If length of word > max_len;
        if (Length of word > max_len) then (yes)
            :max_len = length of word;
            :max_word = word;
        endif
        :flag = true;
    endif
    :Continue to next word;
endif
if (flag is false) then (yes)
    :Return ""-1"";
    stop
endif
:Return max_word;
stop
@enduml"
480,"def get_max_occuring_char(str1):
""""""
Write a python function to find the maximum occurring character in a given string.
Your code should satisfy these tests:
get_max_occuring_char(""teststring"") == 't'
get_max_occuring_char(""aabbccddeeffgg"") == 'a'
get_max_occuring_char(""zyxwvutsrqponmlkjihgfedcba"") == 'z'
""""""
",get_max_occuring_char,"def check(candidate):

    assert candidate(""data"") == ""a""
    assert candidate(""create"") == ""e""
    assert candidate(""brilliant girl"") == ""i""
","def get_max_occuring_char(str1):
  ASCII_SIZE = 256
  ctr = [0] * ASCII_SIZE
  max = -1
  ch = ''
  for i in str1:
    ctr[ord(i)]+=1;
  for i in str1:
    if max < ctr[ord(i)]:
      max = ctr[ord(i)]
      ch = i
  return ch","[""get_max_occuring_char(\""teststring\"") == 't'"", ""get_max_occuring_char(\""aabbccddeeffgg\"") == 'a'"", ""get_max_occuring_char(\""zyxwvutsrqponmlkjihgfedcba\"") == 'z'""]","@startuml

title get_max_occuring_char

start
:get_max_occuring_char(str1);

if (str1 is empty) then (no)
:return None;
else (yes)
:initialize max_char = None;
:initialize max_count = 0;

for each char in str1 do
:if (char is not in str1) then (no)
:continue;
else (yes)
:count = 0;

for each char in str1 do
:if (char == char) then (yes)
:count++;

if (count > max_count) then
:max_char = char;
:max_count = count;

:return max_char;

@enduml"
554,"def Split(list):
""""""
Write a python function to find odd numbers from a mixed list.
Your code should satisfy these tests:
Split([1, 2, 3, 4, 5]) == [1, 3, 5]
Split([10, 21, 32, 43, 54]) == [21, 43]
Split([7, 8, 10, 13, 17]) == [7, 13, 17]
""""""
",Split,"def check(candidate):

    assert candidate([1,2,3,4,5,6]) == [1,3,5]
    assert candidate([10,11,12,13]) == [11,13]
    assert candidate([7,8,9,1]) == [7,9,1]
","def Split(list):
    od_li = []
    for i in list:
        if (i % 2 != 0):
            od_li.append(i)
    return od_li","[""Split([1, 2, 3, 4, 5]) == [1, 3, 5]"", ""Split([10, 21, 32, 43, 54]) == [21, 43]"", ""Split([7, 8, 10, 13, 17]) == [7, 13, 17]""]","@startuml
start

:Input List;
if (Is the input a list?) then (yes)
    :Initialize an empty list for odd numbers;
    :Iterate through each element in the input list;
    if (Is the current element an integer?) then (yes)
        if (Is the current element odd?) then (yes)
            :Add the current element to the odd numbers list;
        else (no)
            :Skip the current element;
        endif
    else (no)
        :Skip the current element (non-integer);
    endif
    :Check if there are more elements in the list;
    if (More elements?) then (yes)
        :Move to the next element;
    else (no)
        :Return the list of odd numbers;
    endif
else (no)
    :Return an error or empty list (invalid input);
endif

stop
@enduml"
708,"def Convert(string):
""""""
Write a python function to convert a string to a list.
Your code should satisfy these tests:
Convert(""hello world"") == ['hello', 'world']
Convert(""Python programming is fun"") == ['Python', 'programming', 'is', 'fun']
Convert(""single"") == ['single']
""""""
",Convert,"def check(candidate):

    assert candidate('python program') == ['python','program']
    assert candidate('Data Analysis') ==['Data','Analysis']
    assert candidate('Hadoop Training') == ['Hadoop','Training']
","def Convert(string):
    li = list(string.split("" ""))
    return li ","[""Convert(\""hello world\"") == ['hello', 'world']"", ""Convert(\""Python programming is fun\"") == ['Python', 'programming', 'is', 'fun']"", ""Convert(\""single\"") == ['single']""]","@startuml

start
: Convert(string);

if (string == """") then (
  : return [];
) else (
  : words = string.split("" "");
  : list = [];
  : for word in words do (
    : list.append(word);
  )
  : return list;
)

@enduml"
757,"def count_reverse_pairs(test_list):
""""""
Write a function to count the pairs of reverse strings in the given string list.
Your code should satisfy these tests:
count_reverse_pairs(['abc', 'cba', 'xyz', 'zyx']) == '2'
count_reverse_pairs(['123', '321', '456', '654', '789']) == '2'
count_reverse_pairs(['level', 'deified', 'rotor', 'redder']) == '4'
""""""
",count_reverse_pairs,"def check(candidate):

    assert candidate([""julia"", ""best"", ""tseb"", ""for"", ""ailuj""])== '2'
    assert candidate([""geeks"", ""best"", ""for"", ""skeeg""]) == '1'
    assert candidate([""makes"", ""best"", ""sekam"", ""for"", ""rof""]) == '2'
","def count_reverse_pairs(test_list):
  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len(
	test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))])
  return str(res)","[""count_reverse_pairs(['abc', 'cba', 'xyz', 'zyx']) == '2'"", ""count_reverse_pairs(['123', '321', '456', '654', '789']) == '2'"", ""count_reverse_pairs(['level', 'deified', 'rotor', 'redder']) == '4'""]","@startuml
start

:Input: test_list (list of strings);
if (Is test_list empty?) then (yes)
    :Return 0;
    stop
else (no)
    :Initialize counter = 0;
    :Initialize a set to track processed pairs;
    :Iterate through each string in test_list;
    while (For each string in test_list) is (not empty)
        :Current string = test_list[i];
        :Reverse the current string;
        if (Reversed string exists in test_list?) then (yes)
            if (Pair (current string, reversed string) not in processed set?) then (yes)
                :Add pair to processed set;
                :Increment counter by 1;
            else (no)
                :Skip this pair;
            endif
        else (no)
            :Skip this string;
        endif
        :Move to the next string in test_list;
    endwhile
    :Return counter;
    stop
endif

@enduml"
806,"def max_run_uppercase(test_str):
""""""
Write a function to find maximum run of uppercase characters in the given string.
Your code should satisfy these tests:
max_run_uppercase(""HELLOworld"") == 0
max_run_uppercase(""aBcDEFGhIJK"") == 3
max_run_uppercase(""PythonPROGRAMMING"") == 11
""""""
",max_run_uppercase,"def check(candidate):

    assert candidate('GeMKSForGERksISBESt') == 5
    assert candidate('PrECIOusMOVemENTSYT') == 6
    assert candidate('GooGLEFluTTER') == 4
","def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return (res)","[""max_run_uppercase(\""HELLOworld\"") == 0"", ""max_run_uppercase(\""aBcDEFGhIJK\"") == 3"", ""max_run_uppercase(\""PythonPROGRAMMING\"") == 11""]","@startuml

title max_run_uppercase

start
:test_str;

if (test_str.isupper()) then (
  :return 0;
) else (
  :max_run = 0;
  :current_run = 0;
  :previous_char = """";

  for (char in test_str) do (
    if (char.isupper()) then (
      :current_run += 1;
    ) else (
      if (current_run > max_run) then (
        :max_run = current_run;
      )
      :current_run = 0;
    )
  )

  if (current_run > max_run) then (
    :max_run = current_run;
  )

  :return max_run;
)

@enduml"
525,"def parallel_lines(line1, line2):
""""""
Write a python function to check whether two given lines are parallel or not.
Your code should satisfy these tests:
parallel_lines((2, 4), (4, 8)) == True
parallel_lines((1, 2), (3, 6)) == True
parallel_lines((5, 10), (10, 20)) == True
""""""
",parallel_lines,"def check(candidate):

    assert candidate([2,3,4], [2,3,8]) == True
    assert candidate([2,3,4], [4,-3,8]) == False
    assert candidate([3,3],[5,5]) == True
","def parallel_lines(line1, line2):
  return line1[0]/line1[1] == line2[0]/line2[1]","[""parallel_lines((2, 4), (4, 8)) == True"", ""parallel_lines((1, 2), (3, 6)) == True"", ""parallel_lines((5, 10), (10, 20)) == True""]","@startuml

start
:parallel_lines(line1, line2);

if (line1.slope == line2.slope) then (yes)
:return True;
else (no)
:return False;

@enduml"
15,"def split_lowerstring(text):
""""""
Write a function to split a string at lowercase letters.
Your code should satisfy these tests:
split_lowerstring(""helloWorld"") == ['h', 'e', 'l', 'l', 'oW', 'o', 'r', 'l', 'd']
split_lowerstring(""pythonProgramming"") == ['p', 'y', 't', 'h', 'o', 'nP', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']
split_lowerstring(""splitThisString"") == ['s', 'p', 'l', 'i', 'tT', 'h', 'i', 'sS', 't', 'r', 'i', 'n', 'g']
split_lowerstring(""lowercaseUPPERCASE"") == ['l', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'eUPPERCASE']
split_lowerstring(""aBcDeFg"") == ['aB', 'cD', 'eF', 'g']
""""""
",split_lowerstring,"def check(candidate):

    assert candidate(""AbCd"")==['bC','d']
    assert candidate(""Python"")==['y', 't', 'h', 'o', 'n']
    assert candidate(""Programming"")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']
","import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))","[""split_lowerstring(\""helloWorld\"") == ['h', 'e', 'l', 'l', 'oW', 'o', 'r', 'l', 'd']"", ""split_lowerstring(\""pythonProgramming\"") == ['p', 'y', 't', 'h', 'o', 'nP', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"", ""split_lowerstring(\""splitThisString\"") == ['s', 'p', 'l', 'i', 'tT', 'h', 'i', 'sS', 't', 'r', 'i', 'n', 'g']"", ""split_lowerstring(\""lowercaseUPPERCASE\"") == ['l', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'eUPPERCASE']"", ""split_lowerstring(\""aBcDeFg\"") == ['aB', 'cD', 'eF', 'g']""]","@startuml
start
:input text;
if (is input text empty?) then (yes)
    :return empty list;
    stop
endif
:initialize result as empty list;
:initialize temp as empty string;
:initialize prev_char as empty string;
while (there are characters in text)
    :get the first character of text;
    :set current_char;
    if (current_char is uppercase and prev_char is lowercase) then (yes)
        :add temp to result;
        :reset temp;
    endif
    :add current_char to temp;
    :remove the first character of text;
    :set prev_char as current_char;
endwhile
:add temp to result;
:return result;
stop
@enduml"
749,"def sort_numeric_strings(nums_str):
""""""
Write a function to sort a given list of strings of numbers numerically.
Your code should satisfy these tests:
sort_numeric_strings(['3', '1', '4', '1', '5']) == [1, 1, 3, 4, 5]
sort_numeric_strings(['10', '2', '8', '6', '4']) == [2, 4, 6, 8, 10]
sort_numeric_strings(['7', '0', '2', '9', '5']) == [0, 2, 5, 7, 9]
""""""
",sort_numeric_strings,"def check(candidate):

    assert candidate( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]
    assert candidate(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]
    assert candidate(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]
","def sort_numeric_strings(nums_str):
    result = [int(x) for x in nums_str]
    result.sort()
    return result","[""sort_numeric_strings(['3', '1', '4', '1', '5']) == [1, 1, 3, 4, 5]"", ""sort_numeric_strings(['10', '2', '8', '6', '4']) == [2, 4, 6, 8, 10]"", ""sort_numeric_strings(['7', '0', '2', '9', '5']) == [0, 2, 5, 7, 9]""]","@startuml

title sort_numeric_strings

start
:sort_numeric_strings(nums_str);

if (nums_str == null) then (no input)
:return [];
end if;

if (nums_str.length == 0) then (empty input)
:return [];
end if;

:sorted_nums = [];

for each num in nums_str do
:num_int = int(num);
:sorted_nums.append(num_int);
end for;

:sorted_nums.sort();

:return sorted_nums;

@enduml"
949,"def count_digs(tup):
""""""
Write a function to sort the given tuple list basis the total digits in tuple.
Your code should satisfy these tests:
count_digs((123, 45, 6789)) == 9
count_digs((1, 22, 333, 4444)) == 10
count_digs((0, 100, 1000)) == 8
count_digs((999, 9999, 99999)) == 12
count_digs((5, 55, 555, 5555)) == 10
""""""
",count_digs,"def check(candidate):

    assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'
    assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'
    assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'
","def count_digs(tup):
  return sum([len(str(ele)) for ele in tup ])
def sort_list(test_list):
  test_list.sort(key = count_digs)
  return (str(test_list))","[""count_digs((123, 45, 6789)) == 9"", ""count_digs((1, 22, 333, 4444)) == 10"", ""count_digs((0, 100, 1000)) == 8"", ""count_digs((999, 9999, 99999)) == 12"", ""count_digs((5, 55, 555, 5555)) == 10""]","@startuml
start
:Input Tuple;
:Validate Input;
if (Is Input Valid?) then (Yes)
  :Convert Tuple to List;
  :Sort List by Total Digits;
  :Calculate Total Digits;
  :Return Total Digits;
else (No)
  :Return Error;
endif
stop
@enduml"
349,"def check(string):
""""""
Write a python function to check whether the given string is a binary string or not.
Your code should satisfy these tests:
check(""101010"") == ""Yes""
check(""00000"") == ""Yes""
check(""11111"") == ""Yes""
check(""10201"") == ""No""
check("""") == ""No""
""""""
",check,"def check(candidate):

    assert candidate(""01010101010"") == ""Yes""
    assert candidate(""name0"") == ""No""
    assert candidate(""101"") == ""Yes""
","def check(string) :
    p = set(string)
    s = {'0', '1'}
    if s == p or p == {'0'} or p == {'1'}:
        return (""Yes"")
    else :
        return (""No"") ","[""check(\""101010\"") == \""Yes\"""", ""check(\""00000\"") == \""Yes\"""", ""check(\""11111\"") == \""Yes\"""", ""check(\""10201\"") == \""No\"""", ""check(\""\"") == \""No\""""]","@startuml
start
:Input String;
if (Is the string empty?) then (Yes)
    :Return ""No"";
    stop
endif
if (Does the string contain any non-binary characters?) then (Yes)
    :Return ""No"";
    stop
endif
:Return ""Yes"";
stop
@enduml"
249,"def intersection_array(array_nums1,array_nums2):
""""""
Write a function to find the intersection of two arrays using lambda function.
Your code should satisfy these tests:
intersection_array([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]
intersection_array([7, 8, 9], [10, 11, 7]) == [7]
intersection_array([12, 13, 14], [15, 16, 17]) == []
""""""
",intersection_array,"def check(candidate):

    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]
    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]
    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]
","def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2))
 return result","[""intersection_array([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]"", ""intersection_array([7, 8, 9], [10, 11, 7]) == [7]"", ""intersection_array([12, 13, 14], [15, 16, 17]) == []""]","@startuml
start

:Input two arrays: array_nums1 and array_nums2;

if (Are both inputs valid arrays?) then (yes)
    :Use lambda function to filter common elements;
    :Store result in intersection_result;
    if (Is intersection_result non-empty?) then (yes)
        :Return intersection_result;
    else (no)
        :Return empty list [];
    endif
else (no)
    :Return error or handle invalid input;
endif

stop
@enduml"
106,"def add_lists(test_list, test_tup):
""""""
Write a function to add the given list to the given tuples.
Your code should satisfy these tests:
add_lists([1, 2, 3], (4, 5)) == (4, 5, 1, 2, 3)
add_lists(['a', 'b'], ('x', 'y', 'z')) == ('x', 'y', 'z', 'a', 'b')
add_lists([True, False], (None,)) == (None, True, False)
""""""
",add_lists,"def check(candidate):

    assert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)
    assert candidate([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)
    assert candidate([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)
","def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ","[""add_lists([1, 2, 3], (4, 5)) == (4, 5, 1, 2, 3)"", ""add_lists(['a', 'b'], ('x', 'y', 'z')) == ('x', 'y', 'z', 'a', 'b')"", ""add_lists([True, False], (None,)) == (None, True, False)""]","@startuml
start

:Input: test_list (list) and test_tup (tuple);
if (Is test_list a list and test_tup a tuple?) then (yes)
    :Convert test_tup to a list (temp_list);
    :Extend temp_list with test_list;
    :Convert temp_list back to a tuple (result_tuple);
    :Return result_tuple;
else (no)
    :Raise TypeError(""Inputs must be a list and a tuple"");
endif

stop
@enduml"
668,"def replace(string, char):
""""""
Write a python function to replace multiple occurence of character by single.
Your code should satisfy these tests:
replace(""hellooo"", ""o"") == ""hello""
replace(""baaat"", ""a"") == ""bat""
replace(""mississippi"", ""i"") == ""mississippi""
""""""
",replace,"def check(candidate):

    assert candidate('peep','e') == 'pep'
    assert candidate('Greek','e') == 'Grek'
    assert candidate('Moon','o') == 'Mon'
","import re
def replace(string, char):
    pattern = char + '{2,}'
    string = re.sub(pattern, char, string)
    return string ","[""replace(\""hellooo\"", \""o\"") == \""hello\"""", ""replace(\""baaat\"", \""a\"") == \""bat\"""", ""replace(\""mississippi\"", \""i\"") == \""mississippi\""""]","@startuml
start

:Input: string, char;
if (Is string empty?) then (yes)
    :Return empty string;
    stop
else (no)
    :Initialize result as empty string;
    :Initialize previous_char as None;
    :Loop through each character in string;
    while (More characters in string?) is (yes)
        :Get current character;
        if (current character == char AND previous_char == char) then (yes)
            :Skip adding to result;
        else (no)
            :Add current character to result;
            :Set previous_char = current character;
        endif
    endwhile
    :Return result;
    stop
endif

@enduml"
659,"def Repeat(x):
""""""
Write a python function to print duplicants from a list of integers.
Your code should satisfy these tests:
Repeat([1, 2, 3, 2, 4, 5, 6, 3]) == [2, 3]
Repeat(['a', 'b', 'c', 'a', 'd', 'e', 'f', 'b']) == ['a', 'b']
Repeat([10, 20, 30, 40, 50]) == []
""""""
",Repeat,"def check(candidate):

    assert candidate([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]
    assert candidate([-1, 1, -1, 8]) == [-1]
    assert candidate([1, 2, 3, 1, 2,]) == [1, 2]
","def Repeat(x):
    _size = len(x)
    repeated = []
    for i in range(_size):
        k = i + 1
        for j in range(k, _size):
            if x[i] == x[j] and x[i] not in repeated:
                repeated.append(x[i])
    return repeated ","[""Repeat([1, 2, 3, 2, 4, 5, 6, 3]) == [2, 3]"", ""Repeat(['a', 'b', 'c', 'a', 'd', 'e', 'f', 'b']) == ['a', 'b']"", ""Repeat([10, 20, 30, 40, 50]) == []""]","@startuml

title Repeat(x)

start
:Start;

if (x is not a list) then (1)
:Invalid input;
stop

else (2)
:Valid input;

repeat (3)
:Repeat loop;

if (x is empty) then (4)
:Empty list;
stop

else (5)
:Non-empty list;

repeat (6)
:Duplicate loop;

if (x[i] is not in x[i+1:]) then (7)
:No duplicates;
continue

else (8)
:Duplicate found;

if (x[i] is not in result) then (9)
:Add to result;
result.append(x[i])

else (10)
:Duplicate already in result;
continue

end repeat (6)

end repeat (3)

end if (2)

end if (1)

stop

@enduml"
541,"def get_sum(n):
""""""
Write a function to find if the given number is abundant or not.
Your code should satisfy these tests:
get_sum(12) == 16
get_sum(18) == 21
get_sum(20) == 22
get_sum(24) == 36
get_sum(30) == 42
""""""
",get_sum,"def check(candidate):

    assert check_abundant(12) == True
    assert check_abundant(15) == False
    assert check_abundant(18) == True
","import math
def get_sum(n):
	sum = 0
	i = 1
	while i <= (math.sqrt(n)):
		if n%i == 0:
			if n/i == i :
				sum = sum + i
			else:
				sum = sum + i
				sum = sum + (n / i )
		i = i + 1
	sum = sum - n
	return sum
def check_abundant(n):
	if (get_sum(n) > n):
		return True
	else:
		return False","[""get_sum(12) == 16"", ""get_sum(18) == 21"", ""get_sum(20) == 22"", ""get_sum(24) == 36"", ""get_sum(30) == 42""]","@startuml
start
:Input n;
if (n > 0) then (n is positive?)
:Yes;
:Calculate sum of proper divisors of n;
else (n is not positive)
:No;
:Return error message;
endif
:Return sum;
stop
@enduml"
334,"def check_Validity(a,b,c):
""""""
Write a python function to check whether the triangle is valid or not if sides are given.
Your code should satisfy these tests:
check_Validity(3, 4, 5) == True
check_Validity(1, 1, 2) == False
check_Validity(5, 5, 5) == True
""""""
",check_Validity,"def check(candidate):

    assert candidate(1,2,3) == False
    assert candidate(2,3,5) == False
    assert candidate(7,10,5) == True
","def check_Validity(a,b,c):
    if (a + b <= c) or (a + c <= b) or (b + c <= a) :
        return False
    else:
        return True        ","[""check_Validity(3, 4, 5) == True"", ""check_Validity(1, 1, 2) == False"", ""check_Validity(5, 5, 5) == True""]","@startuml
start

:Input sides a, b, c;
:Validate inputs (a > 0, b > 0, c > 0);

if (Are inputs valid?) then (yes)
    :Check triangle validity using the triangle inequality theorem;
    if (a + b > c AND b + c > a AND c + a > b?) then (yes)
        :Triangle is valid;
        :Return True;
    else (no)
        :Triangle is not valid;
        :Return False;
    endif
else (no)
    :Invalid input (sides must be positive);
    :Return False;
endif

stop
@enduml"
214,"def degree_radian(radian):
""""""
Write a function to convert radians to degrees.
Your code should satisfy these tests:
degree_radian(0) == 0.0
degree_radian(math.pi) == 180.0
degree_radian(math.pi / 2) == 90.0
""""""
",degree_radian,"def check(candidate):

    assert candidate(90)==5156.620156177409
    assert candidate(60)==3437.746770784939
    assert candidate(120)==6875.493541569878
","import math
def degree_radian(radian):
 degree = radian*(180/math.pi)
 return degree","[""degree_radian(0) == 0.0"", ""degree_radian(math.pi) == 180.0"", ""degree_radian(math.pi / 2) == 90.0""]","@startuml

title Degree Radian Conversion

start
:Input Radian;

if (radian == 0) then (yes)
  :Return 0.0;
else (no)
  if (radian == math.pi) then (yes)
    :Return 180.0;
  else (no)
    if (radian == math.pi / 2) then (yes)
      :Return 90.0;
    else (no)
      :Return radian * (180 / math.pi);
    endif
  endif
endif

stop

@enduml"
430,"def parabola_directrix(a, b, c):
""""""
Write a function to find the directrix of a parabola.
Your code should satisfy these tests:
parabola_directrix(1, 2, 3) == -17
parabola_directrix(2, 3, 4) == -76
parabola_directrix(0, 0, 0) == 0
parabola_directrix(-1, -2, -3) == 17
parabola_directrix(5, 10, 15) == -2005
""""""
",parabola_directrix,"def check(candidate):

    assert candidate(5,3,2)==-198
    assert candidate(9,8,4)==-2336
    assert candidate(2,4,6)==-130
","def parabola_directrix(a, b, c):
  directrix=((int)(c - ((b * b) + 1) * 4 * a ))
  return directrix","[""parabola_directrix(1, 2, 3) == -17"", ""parabola_directrix(2, 3, 4) == -76"", ""parabola_directrix(0, 0, 0) == 0"", ""parabola_directrix(-1, -2, -3) == 17"", ""parabola_directrix(5, 10, 15) == -2005""]","@startuml
start
:Input Validation;
if (a = 0 and b = 0) then (
    :Return 0;
)
elseif (a = 0 and c = 0) then (
    :Return 0;
)
elseif (b = 0 and c = 0) then (
    :Return 0;
)
else (
    :Calculate Directrix;
)
endif
:Return Directrix;
stop
@enduml"
766,"def pair_wise(l1):
""""""
Write a function to iterate over all pairs of consecutive items in a given list.
Your code should satisfy these tests:
pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]
pair_wise(['a', 'b', 'c']) == [('a', 'b'), ('b', 'c')]
pair_wise([True, False, True]) == [(True, False), (False, True)]
""""""
",pair_wise,"def check(candidate):

    assert candidate([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]
    assert candidate([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]
    assert candidate([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]
","def pair_wise(l1):
    temp = []
    for i in range(len(l1) - 1):
        current_element, next_element = l1[i], l1[i + 1]
        x = (current_element, next_element)
        temp.append(x)
    return temp","[""pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]"", ""pair_wise(['a', 'b', 'c']) == [('a', 'b'), ('b', 'c')]"", ""pair_wise([True, False, True]) == [(True, False), (False, True)]""]","@startuml

title Pairwise Iteration

start
:Start;

if (l1 is empty) then (no
:Pairwise iteration;

else (l1 is not empty)
:Pairwise iteration;

if (l1 has only one element) then (no
:Pairwise iteration;

else (l1 has more than one element)
:Pairwise iteration;

repeat
:Iterate over all pairs of consecutive items in l1;

if (l1 has only one element) then (no
:Pairwise iteration;

else (l1 has more than one element)
:Pairwise iteration;

end repeat

end if

end if

stop
:End;

@enduml"
374,"def permute_string(str):
""""""
Write a function to print all permutations of a given string including duplicates.
Your code should satisfy these tests:
permute_string(""a"") == ['a']
permute_string(""ab"") == ['ab', 'ba']
permute_string(""abc"") == ['abc', 'bac', 'bca', 'acb', 'cab', 'cba']
permute_string(""aab"") == ['aab', 'aba', 'baa']
permute_string(""xyz"") == ['xyz', 'yxz', 'yzx', 'xzy', 'zxy', 'zyx']
""""""
",permute_string,"def check(candidate):

    assert candidate('ab')==['ab', 'ba']
    assert candidate('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']
    assert candidate('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']
","def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_list","[""permute_string(\""a\"") == ['a']"", ""permute_string(\""ab\"") == ['ab', 'ba']"", ""permute_string(\""abc\"") == ['abc', 'bac', 'bca', 'acb', 'cab', 'cba']"", ""permute_string(\""aab\"") == ['aab', 'aba', 'baa']"", ""permute_string(\""xyz\"") == ['xyz', 'yxz', 'yzx', 'xzy', 'zxy', 'zyx']""]","@startuml
start

:Input string **str**;
if (Is **str** empty or None?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize an empty list **result** to store permutations;
    :Call recursive helper function **permute_helper(str, """", result)**;
    :Return **result**;
endif

:Define recursive helper function **permute_helper(str, prefix, result)**;
if (Is **str** empty?) then (yes)
    :Add **prefix** to **result**;
    stop
else (no)
    :Initialize a set **used_chars** to track used characters;
    :Loop through each character **char** in **str**;
    if (Is **char** in **used_chars**?) then (yes)
        :Skip to next iteration;
    else (no)
        :Add **char** to **used_chars**;
        :Create new string **remaining_str** by removing **char** from **str**;
        :Call **permute_helper(remaining_str, prefix + char, result)**;
    endif
    :End loop;
endif

stop
@enduml"
852,"def remove_negs(num_list):
""""""
Write a python function to remove negative numbers from a list.
Your code should satisfy these tests:
remove_negs([1, -2, 3, -4, 5]) == [1, 3, 5]
remove_negs([-1, -2, -3, -4, -5]) == [-2, -4]
remove_negs([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]
""""""
",remove_negs,"def check(candidate):

    assert candidate([1,-2,3,-4]) == [1,3]
    assert candidate([1,2,3,-4]) == [1,2,3]
    assert candidate([4,5,-6,7,-8]) == [4,5,7]
","def remove_negs(num_list):
    for item in num_list:
        if item < 0:
           num_list.remove(item)
    return num_list","[""remove_negs([1, -2, 3, -4, 5]) == [1, 3, 5]"", ""remove_negs([-1, -2, -3, -4, -5]) == [-2, -4]"", ""remove_negs([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]""]","@startuml
start

:Input: num_list (list of numbers);
if (Is num_list a valid list?) then (yes)
    :Initialize an empty list: result_list;
    :Initialize counter: i = 0;
    while (i < length of num_list?) is (yes)
        if (num_list[i] >= 0?) then (yes)
            :Append num_list[i] to result_list;
        else (no)
            :Skip negative number;
        endif
        :Increment counter: i = i + 1;
    endwhile
    :Return result_list;
else (no)
    :Raise ValueError: ""Input must be a list"";
endif

stop
@enduml"
913,"def end_num(string):
""""""
Write a function to check for a number at the end of a string.
Your code should satisfy these tests:
end_num(""hello2"") == True
end_num(""world"") == False
end_num(""test123"") == True
""""""
",end_num,"def check(candidate):

    assert candidate('abcdef')==False
    assert candidate('abcdef7')==True
    assert candidate('abc')==False
","import re
def end_num(string):
    text = re.compile(r"".*[0-9]$"")
    if text.match(string):
        return True
    else:
        return False","[""end_num(\""hello2\"") == True"", ""end_num(\""world\"") == False"", ""end_num(\""test123\"") == True""]","@startuml
start

:Input string;
if (Is string empty?) then (yes)
    :Return False;
    stop
else (no)
    :Get last character of the string;
    if (Is last character a digit?) then (yes)
        :Return True;
        stop
    else (no)
        :Return False;
        stop
    endif
endif

@enduml"
753,"def min_k(test_list, K):
""""""
Write a function to find minimum k records from tuple list.
Your code should satisfy these tests:
min_k([(1, 3), (2, 2), (3, 1)], 2) == [(3, 1), (2, 2)]
min_k([(5, 10), (4, 4), (3, 5)], 1) == [(4, 4)]
min_k([(7, 8), (6, 6), (5, 7)], 3) == [(6, 6), (5, 7), (7, 8)]
""""""
",min_k,"def check(candidate):

    assert candidate([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]
    assert candidate([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]
    assert candidate([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]
","def min_k(test_list, K):
  res = sorted(test_list, key = lambda x: x[1])[:K]
  return (res) ","[""min_k([(1, 3), (2, 2), (3, 1)], 2) == [(3, 1), (2, 2)]"", ""min_k([(5, 10), (4, 4), (3, 5)], 1) == [(4, 4)]"", ""min_k([(7, 8), (6, 6), (5, 7)], 3) == [(6, 6), (5, 7), (7, 8)]""]","@startuml

start
:min_k(test_list, K);

if (K < 1) then (no
:Invalid input;
:return [];
)

if (K > len(test_list)) then (no
:Invalid input;
:return [];
)

:sorted_list = sorted(test_list, key=lambda x: x[1]);

:min_list = sorted_list[:K];

:return min_list;

@enduml"
437,"def remove_odd(str1):
""""""
Write a function to remove odd characters in a string.
Your code should satisfy these tests:
remove_odd(""abcdef"") == ""bdf""
remove_odd(""123456789"") == ""2468""
remove_odd(""Python"") == ""yhn""
""""""
",remove_odd,"def check(candidate):

    assert candidate(""python"")==(""yhn"")
    assert candidate(""program"")==(""rga"")
    assert candidate(""language"")==(""agae"")
","def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2","[""remove_odd(\""abcdef\"") == \""bdf\"""", ""remove_odd(\""123456789\"") == \""2468\"""", ""remove_odd(\""Python\"") == \""yhn\""""]","@startuml
start

:Input string (str1);
if (Is str1 empty or None?) then (yes)
    :Return empty string;
    stop
else (no)
    :Initialize an empty result string (result);
    :Initialize index (i) to 0;
    while (i < length of str1) is (yes)
        if (i is even?) then (yes)
            :Append str1[i] to result;
        else (no)
            :Skip odd index;
        endif
        :Increment i by 1;
    endwhile (no)
    :Return result;
    stop
endif

@enduml"
429,"def and_tuples(test_tup1, test_tup2):
""""""
Write a function to extract the elementwise and tuples from the given two tuples.
Your code should satisfy these tests:
and_tuples((1, 2, 3), (4, 5, 6)) == (0, 0, 2)
and_tuples((255, 128, 64), (1, 2, 3)) == (1, 0, 0)
and_tuples((15, 30, 45), (15, 30, 45)) == (15, 30, 45)
""""""
",and_tuples,"def check(candidate):

    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)
    assert candidate((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)
    assert candidate((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)
","def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","[""and_tuples((1, 2, 3), (4, 5, 6)) == (0, 0, 2)"", ""and_tuples((255, 128, 64), (1, 2, 3)) == (1, 0, 0)"", ""and_tuples((15, 30, 45), (15, 30, 45)) == (15, 30, 45)""]","@startuml
start

:Input two tuples (test_tup1, test_tup2);
:Check if both tuples are of the same length;
if (Are tuples of the same length?) then (yes)
  :Initialize an empty result tuple;
  :Iterate over each pair of elements from test_tup1 and test_tup2;
  :Perform bitwise AND operation on each pair of elements;
  :Append the result to the result tuple;
  :Return the result tuple;
else (no)
  :Raise an error or handle the case where tuples are of different lengths;
endif

stop
@enduml"
730,"def consecutive_duplicates(nums):
""""""
Write a function to remove consecutive duplicates of a given list.
Your code should satisfy these tests:
consecutive_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
consecutive_duplicates([1, 1, 1, 1, 1]) == [1]
consecutive_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
""""""
",consecutive_duplicates,"def check(candidate):

    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]
    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]
    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']
","from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)] ","[""consecutive_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]"", ""consecutive_duplicates([1, 1, 1, 1, 1]) == [1]"", ""consecutive_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]""]","@startuml

title consecutive_duplicates

start
:consecutive_duplicates(nums);

if (nums.length == 0) then (no duplicates)
  :return [];
else (duplicates found)
  :result = [];
  :last = nums[0];
  :for i in range(1, nums.length):
    :if (nums[i] != last) then (new element)
      :result.append(last);
      :last = nums[i];
    :end if
  :end for
  :result.append(last);
  :return result;
endif

@enduml"
73,"def multiple_split(text):
""""""
Write a function to split the given string with multiple delimiters by using regex.
Your code should satisfy these tests:
multiple_split(""apple; orange, banana*grape"") == ['apple', 'orange', 'banana', 'grape']
multiple_split(""one\ntwo;three,four*five"") == ['one', 'two;three,four', 'five']
multiple_split(""red*blue,green;yellow\npurple"") == ['red', 'blue,green;yellow', 'purple']
""""""
",multiple_split,"def check(candidate):

    assert candidate('Forces of the \ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']
    assert candidate('Mi Box runs on the \n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']
    assert candidate('Certain services\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']
","import re
def multiple_split(text):
  return (re.split('; |, |\*|\n',text))","[""multiple_split(\""apple; orange, banana*grape\"") == ['apple', 'orange', 'banana', 'grape']"", ""multiple_split(\""one\\ntwo;three,four*five\"") == ['one', 'two;three,four', 'five']"", ""multiple_split(\""red*blue,green;yellow\\npurple\"") == ['red', 'blue,green;yellow', 'purple']""]","@startuml

start

:multiple_split(text);

if (text == None) then (
  :return [];
)

:delimiters = [""\n"", "";"", "","", ""*""];

:result = [];

:for delimiter in delimiters:
  :if (text.find(delimiter) != -1) then (
    :result.append(text.split(delimiter)[0]);
    :text = text.split(delimiter)[1];
  )

:if (text != """") then (
  :result.append(text);
)

:return result;

@enduml"
625,"def swap_List(newList):
""""""
Write a python function to interchange first and last elements in a given list.
Your code should satisfy these tests:
swap_List([1, 2, 3, 4]) == [4, 2, 3, 1]
swap_List(['a', 'b', 'c']) == ['c', 'b', 'a']
swap_List([True, False, True, False]) == [False, False, True, True]
""""""
",swap_List,"def check(candidate):

    assert candidate([1,2,3]) == [3,2,1]
    assert candidate([1,2,3,4,4]) == [4,2,3,4,1]
    assert candidate([4,5,6]) == [6,5,4]
","def swap_List(newList):
    size = len(newList)
    temp = newList[0]
    newList[0] = newList[size - 1]
    newList[size - 1] = temp
    return newList ","[""swap_List([1, 2, 3, 4]) == [4, 2, 3, 1]"", ""swap_List(['a', 'b', 'c']) == ['c', 'b', 'a']"", ""swap_List([True, False, True, False]) == [False, False, True, True]""]","@startuml
start

:Input: List (newList);
if (Is newList a valid list?) then (yes)
    if (Is newList empty?) then (yes)
        :Return empty list;
        stop
    else (no)
        if (Does newList have only one element?) then (yes)
            :Return the same list;
            stop
        else (no)
            :Swap the first and last elements of newList;
            :Return the modified list;
            stop
        endif
    endif
else (no)
    :Raise TypeError(""Input must be a list"");
    stop
endif

stop
@enduml"
948,"def get_item(tup1,index):
""""""
Write a function to get an item of a tuple.
Your code should satisfy these tests:
get_item((1, 2, 3, 4), 2) == 3
get_item(('a', 'b', 'c', 'd'), 0) == 'a'
get_item((10.5, 20.3, 30.1), 1) == 20.3
get_item((True, False, True), 2) == True
get_item(('apple', 'banana', 'cherry'), 1) == 'banana'
""""""
",get_item,"def check(candidate):

    assert candidate((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),3)==('e')
    assert candidate((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),-4)==('u')
    assert candidate((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),-3)==('r')
","def get_item(tup1,index):
  item = tup1[index]
  return item","[""get_item((1, 2, 3, 4), 2) == 3"", ""get_item(('a', 'b', 'c', 'd'), 0) == 'a'"", ""get_item((10.5, 20.3, 30.1), 1) == 20.3"", ""get_item((True, False, True), 2) == True"", ""get_item(('apple', 'banana', 'cherry'), 1) == 'banana'""]","@startuml
start
:Check if index is within the range of the tuple;
if (index < 0 or index >= len(tup1)) then (Return error)
:Return the item at the given index;
else (Return item)
endif
stop
@enduml"
63,"def max_difference(test_list):
""""""
Write a function to find the maximum difference between available pairs in the given tuple list.
Your code should satisfy these tests:
max_difference([(1, 5), (10, 3), (7, 2)]) == 7
max_difference([(0, 0), (1, 1), (2, 2)]) == 0
max_difference([(-5, 5), (-10, 10), (-7, 7)]) == 20
""""""
",max_difference,"def check(candidate):

    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
    assert candidate([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15
    assert candidate([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23
","def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) ","[""max_difference([(1, 5), (10, 3), (7, 2)]) == 7"", ""max_difference([(0, 0), (1, 1), (2, 2)]) == 0"", ""max_difference([(-5, 5), (-10, 10), (-7, 7)]) == 20""]","@startuml
start

:Input list of tuples (test_list);
:Initialize max_diff = 0;

if (Is test_list empty?) then (yes)
  :Return 0;
  stop
else (no)
  :Iterate through each tuple in test_list;
  :Calculate the absolute difference between the two elements in the tuple;
  if (Is the calculated difference > max_diff?) then (yes)
    :Update max_diff with the calculated difference;
  else (no)
    :Continue to the next tuple;
  endif
  :Check if all tuples have been processed;
  if (All tuples processed?) then (yes)
    :Return max_diff;
    stop
  else (no)
    :Continue to the next tuple;
  endif
endif

@enduml"
458,"def rectangle_area(l,b):
""""""
Write a function to find the area of a rectangle.
Your code should satisfy these tests:
rectangle_area(5, 10) == 50
rectangle_area(3, 7) == 21
rectangle_area(8, 2) == 16
""""""
",rectangle_area,"def check(candidate):

    assert candidate(10,20)==200
    assert candidate(10,5)==50
    assert candidate(4,2)==8
","def rectangle_area(l,b):
  area=l*b
  return area","[""rectangle_area(5, 10) == 50"", ""rectangle_area(3, 7) == 21"", ""rectangle_area(8, 2) == 16""]","@startuml

title Rectangle Area Calculator

start
:Input Length and Breadth;

if (length < 0 or breadth < 0) then (invalid input)
:Invalid Input;
else (valid input)
:Valid Input;

:Calculate Area;
area = length * breadth;

if (area < 0) then (negative area)
:Negative Area;
else (positive area)
:Positive Area;

:Output Area;
print(area);

stop

@enduml"
399,"def bitwise_xor(test_tup1, test_tup2):
""""""
Write a function to perform the mathematical bitwise xor operation across the given tuples.
Your code should satisfy these tests:
bitwise_xor((1, 2, 3), (4, 5, 6)) == (5, 7, 5)
bitwise_xor((255, 128, 64), (32, 16, 8)) == (223, 144, 72)
bitwise_xor((0, 0, 0), (1, 1, 1)) == (1, 1, 1)
""""""
",bitwise_xor,"def check(candidate):

    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)
    assert candidate((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)
    assert candidate((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)
","def bitwise_xor(test_tup1, test_tup2):
  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","[""bitwise_xor((1, 2, 3), (4, 5, 6)) == (5, 7, 5)"", ""bitwise_xor((255, 128, 64), (32, 16, 8)) == (223, 144, 72)"", ""bitwise_xor((0, 0, 0), (1, 1, 1)) == (1, 1, 1)""]","@startuml

start
:Start;

:Check if test_tup1 and test_tup2 are valid;
if (test_tup1 is not None and test_tup2 is not None) then (yes)
  :Perform bitwise xor operation;
  test_tup1 = test_tup1 ^ test_tup2;
  :Return result;
  return test_tup1;
else (no)
  :Raise ValueError;
  raise ValueError(""Invalid input"");
end if;

:Check if test_tup1 is valid;
if (test_tup1 is not None) then (yes)
  :Perform bitwise xor operation;
  test_tup1 = test_tup1 ^ test_tup2;
  :Return result;
  return test_tup1;
else (no)
  :Raise ValueError;
  raise ValueError(""Invalid input"");
end if;

:Check if test_tup2 is valid;
if (test_tup2 is not None) then (yes)
  :Perform bitwise xor operation;
  test_tup2 = test_tup1 ^ test_tup2;
  :Return result;
  return test_tup2;
else (no)
  :Raise ValueError;
  raise ValueError(""Invalid input"");
end if;

:Check if test_tup1 and test_tup2 are both None;
if (test_tup1 is None and test_tup2 is None) then (yes)
  :Raise ValueError;
  raise ValueError(""Invalid input"");
else (no)
  :Perform bitwise xor operation;
  test_tup1 = test_tup1 ^ test_tup2;
  :Return result;
  return test_tup1;
end if;

@enduml"
21,"def multiples_of_num(m,n):
""""""
Write a function to find m number of multiples of n.
Your code should satisfy these tests:
multiples_of_num(5, 2) == [2, 4, 6, 8, 10]
multiples_of_num(3, 7) == [7, 14, 21]
multiples_of_num(4, 1) == [1, 2, 3, 4]
""""""
",multiples_of_num,"def check(candidate):

    assert candidate(4,3)== [3,6,9,12]
    assert candidate(2,5)== [5,10]
    assert candidate(9,2)== [2,4,6,8,10,12,14,16,18]
","def multiples_of_num(m,n):
    multiples_of_num= list(range(n,(m+1)*n, n))
    return list(multiples_of_num)","[""multiples_of_num(5, 2) == [2, 4, 6, 8, 10]"", ""multiples_of_num(3, 7) == [7, 14, 21]"", ""multiples_of_num(4, 1) == [1, 2, 3, 4]""]","@startuml
start

:Input m (number of multiples) and n (base number);
:Initialize an empty list to store multiples;
:Initialize counter i = 1;

while (i <= m?) is (yes)
    :Calculate multiple = n * i;
    :Add multiple to the list;
    :Increment i by 1;
endwhile (no)

:Return the list of multiples;
stop
@enduml"
718,"def alternate_elements(list1):
""""""
Write a function to create a list taking alternate elements from another given list.
Your code should satisfy these tests:
alternate_elements([1, 2, 3, 4, 5]) == [1, 3, 5]
alternate_elements(['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'c', 'e']
alternate_elements([10, 20, 30, 40, 50, 60, 70]) == [10, 30, 50, 70]
""""""
",alternate_elements,"def check(candidate):

    assert candidate([""red"", ""black"", ""white"", ""green"", ""orange""])==['red', 'white', 'orange']
    assert candidate([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]
","def alternate_elements(list1):
    result=[]
    for item in list1[::2]:
        result.append(item)
    return result ","[""alternate_elements([1, 2, 3, 4, 5]) == [1, 3, 5]"", ""alternate_elements(['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'c', 'e']"", ""alternate_elements([10, 20, 30, 40, 50, 60, 70]) == [10, 30, 50, 70]""]","@startuml
start

:Input List (list1);
if (Is list1 empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize an empty list (result);
    :Initialize index (i = 0);
    while (Is i < length of list1?) is (yes)
        :Append list1[i] to result;
        :Increment i by 2;
    endwhile (no)
    :Return result;
    stop
endif

@enduml"
701,"def equilibrium_index(arr):
""""""
Write a function to find the equilibrium index of the given array.
Your code should satisfy these tests:
equilibrium_index([1, 3, 5, 2, 2]) == 2
equilibrium_index([1, 2, 3, 4, 5]) == -1
equilibrium_index([-1, 3, -4, 5, 1, -6, 2, 1]) == 1
""""""
",equilibrium_index,"def check(candidate):

    assert candidate([1, 2, 3, 4, 1, 2, 3]) == 3
    assert candidate([-7, 1, 5, 2, -4, 3, 0]) == 3
    assert candidate([1, 2, 3]) == -1
","def equilibrium_index(arr):
  total_sum = sum(arr)
  left_sum=0
  for i, num in enumerate(arr):
    total_sum -= num
    if left_sum == total_sum:
      return i
    left_sum += num
  return -1","[""equilibrium_index([1, 3, 5, 2, 2]) == 2"", ""equilibrium_index([1, 2, 3, 4, 5]) == -1"", ""equilibrium_index([-1, 3, -4, 5, 1, -6, 2, 1]) == 1""]","@startuml
start

:Input array **arr**;
if (Is **arr** empty or None?) then (yes)
    :Return -1 (No equilibrium index);
    stop
else (no)
    :Calculate total sum of the array (**total_sum**);
    :Initialize **left_sum** = 0;
    :Initialize index **i** = 0;
    while (i < length of **arr**?) is (yes)
        :Calculate **right_sum** = **total_sum** - **left_sum** - **arr[i]**;
        if (**left_sum** == **right_sum**) then (yes)
            :Return **i** (Equilibrium index found);
            stop
        else (no)
            :Add **arr[i]** to **left_sum**;
            :Increment **i** by 1;
        endif
    endwhile (no)
    :Return -1 (No equilibrium index found);
    stop
endif

@enduml"
90,"def len_log(list1):
""""""
Write a python function to find the length of the longest word.
Your code should satisfy these tests:
len_log([""apple"", ""banana"", ""cherry""]) == 6
len_log([""dog"", ""elephant"", ""cat""]) == 8
len_log([""sun"", ""moon"", ""star""]) == 4
""""""
",len_log,"def check(candidate):

    assert candidate([""python"",""PHP"",""bigdata""]) == 7
    assert candidate([""a"",""ab"",""abc""]) == 3
    assert candidate([""small"",""big"",""tall""]) == 5
","def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max","[""len_log([\""apple\"", \""banana\"", \""cherry\""]) == 6"", ""len_log([\""dog\"", \""elephant\"", \""cat\""]) == 8"", ""len_log([\""sun\"", \""moon\"", \""star\""]) == 4""]","@startuml

title len_log(list1)

start
:len_log(list1);

if (len(list1) == 0) then (no elements)
:return 0;
else (at least one element)

:max_len = 0;

for (i = 0; i < len(list1); i++) do
:word = list1[i];
:if (len(word) > max_len) then
:max_len = len(word);
:end if
:end for

:return max_len;

end if

@enduml"
690,"def mul_consecutive_nums(nums):
""""""
Write a function to multiply consecutive numbers of a given list.
Your code should satisfy these tests:
mul_consecutive_nums([1, 2, 3, 4]) == [2, 6, 12]
mul_consecutive_nums([5, 10, 15]) == [50, 150]
mul_consecutive_nums([0, 1, 2, 3]) == [0, 2, 6]
""""""
",mul_consecutive_nums,"def check(candidate):

    assert candidate([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]
    assert candidate([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]
    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]
","def mul_consecutive_nums(nums):
    result = [b*a for a, b in zip(nums[:-1], nums[1:])]
    return result","[""mul_consecutive_nums([1, 2, 3, 4]) == [2, 6, 12]"", ""mul_consecutive_nums([5, 10, 15]) == [50, 150]"", ""mul_consecutive_nums([0, 1, 2, 3]) == [0, 2, 6]""]","@startuml
start

:Input list of numbers (nums);
if (Is nums a list and has at least 2 elements?) then (yes)
    :Initialize an empty result list (result);
    :Initialize index (i = 0);
    while (i < length of nums - 1) is (yes)
        :Multiply nums[i] and nums[i+1];
        :Append the result to the result list;
        :Increment index (i = i + 1);
    endwhile (no)
    :Return the result list;
else (no)
    :Return an error or empty list (invalid input);
endif

stop
@enduml"
789,"def perimeter_polygon(s,l):
""""""
Write a function to calculate the perimeter of a regular polygon.
Your code should satisfy these tests:
perimeter_polygon(5, 6) == 30
perimeter_polygon(3, 10) == 30
perimeter_polygon(8, 2) == 16
""""""
",perimeter_polygon,"def check(candidate):

    assert candidate(4,20)==80
    assert candidate(10,15)==150
    assert candidate(9,7)==63
","from math import tan, pi
def perimeter_polygon(s,l):
  perimeter = s*l
  return perimeter","[""perimeter_polygon(5, 6) == 30"", ""perimeter_polygon(3, 10) == 30"", ""perimeter_polygon(8, 2) == 16""]","@startuml

title perimeter_polygon

start
:perimeter_polygon(s, l);

if (s < 3) then (no polygon)
:return 0;
else (polygon exists)
:calculate perimeter;

if (s == 3) then (triangle)
:return 3 * l;
else (polygon)
:return s * l;

end if;

end if;

stop

@enduml"
640,"def remove_parenthesis(items):
""""""
Write a function to remove the parenthesis area in a string.
Your code should satisfy these tests:
remove_parenthesis([""Hello (World)""]) == ""Hello""
remove_parenthesis([""This is a test (with parenthesis)""]) == ""This is a test""
remove_parenthesis([""No parenthesis here""]) == ""No parenthesis here""
remove_parenthesis([""Multiple (parenthesis) in (one) string""]) == ""Multiple in string""
remove_parenthesis([""Spaces ( should ) be ( handled ) correctly""]) == ""Spaces be correctly""
""""""
",remove_parenthesis,"def check(candidate):

    assert candidate([""python (chrome)""])==(""python"")
    assert candidate([""string(.abc)""])==(""string"")
    assert candidate([""alpha(num)""])==(""alpha"")
","import re
def remove_parenthesis(items):
 for item in items:
    return (re.sub(r"" ?\([^)]+\)"", """", item))","[""remove_parenthesis([\""Hello (World)\""]) == \""Hello\"""", ""remove_parenthesis([\""This is a test (with parenthesis)\""]) == \""This is a test\"""", ""remove_parenthesis([\""No parenthesis here\""]) == \""No parenthesis here\"""", ""remove_parenthesis([\""Multiple (parenthesis) in (one) string\""]) == \""Multiple in string\"""", ""remove_parenthesis([\""Spaces ( should ) be ( handled ) correctly\""]) == \""Spaces be correctly\""""]","@startuml
start
:input;
:items = [""Hello (World)""];
:output = remove_parenthesis(items);
:expected_output = ""Hello"";
if (output == expected_output) then (true)
    :Test Passed
else (false)
    :Test Failed
endif
stop
@enduml"
433,"def check_greater(arr, number):
""""""
Write a function to check whether the entered number is greater than the elements of the given array.
Your code should satisfy these tests:
check_greater([1, 2, 3, 4, 5], 6) == 'Yes, the entered number is greater than those in the array'
check_greater([10, 20, 30], 25) == 'No, entered number is less than those in the array'
check_greater([-5, -10, -15], -3) == 'Yes, the entered number is greater than those in the array'
""""""
",check_greater,"def check(candidate):

    assert candidate([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'
    assert candidate([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'
    assert candidate([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'
","def check_greater(arr, number):
  arr.sort()
  if number > arr[-1]:
    return ('Yes, the entered number is greater than those in the array')
  else:
    return ('No, entered number is less than those in the array')","[""check_greater([1, 2, 3, 4, 5], 6) == 'Yes, the entered number is greater than those in the array'"", ""check_greater([10, 20, 30], 25) == 'No, entered number is less than those in the array'"", ""check_greater([-5, -10, -15], -3) == 'Yes, the entered number is greater than those in the array'""]","@startuml

title check_greater

start
:check_greater(arr, number);

if (number > max(arr)) then (yes)
:return ""Yes, the entered number is greater than those in the array"";
else (no)
:return ""No, entered number is less than those in the array"";

@enduml"
202,"def remove_even(str1):
""""""
Write a function to remove even characters in a string.
Your code should satisfy these tests:
remove_even(""abcdef"") == ""ace""
remove_even(""123456789"") == ""13579""
remove_even(""Python"") == ""Pto""
""""""
",remove_even,"def check(candidate):

    assert candidate(""python"")==(""pto"")
    assert candidate(""program"")==(""porm"")
    assert candidate(""language"")==(""lnug"")
","def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 != 0):
        str2 = str2 + str1[i - 1]
 return str2","[""remove_even(\""abcdef\"") == \""ace\"""", ""remove_even(\""123456789\"") == \""13579\"""", ""remove_even(\""Python\"") == \""Pto\""""]","@startuml

title remove_even(str1)

start
:remove_even(str1);

if (str1.length() == 0) then (no)
  :return """";
else (yes)
  :i = 0;
  :result = """";

  while (i < str1.length()) do
    if (i % 2 == 0) then (even)
      :result += str1[i];
    else (odd)
      :result += """";
    endif
    :i++;
  endwhile

  :return result;
endif

@enduml"
752,"def jacobsthal_num(n):
""""""
Write a function to find the nth jacobsthal number.
Your code should satisfy these tests:
jacobsthal_num(1) == 1
jacobsthal_num(5) == 11
""""""
",jacobsthal_num,"def check(candidate):

    assert candidate(5) == 11
    assert candidate(2) == 1
    assert candidate(4) == 5
","def jacobsthal_num(n):
	dp = [0] * (n + 1)
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1):
		dp[i] = dp[i - 1] + 2 * dp[i - 2]
	return dp[n]","[""jacobsthal_num(1) == 1"", ""jacobsthal_num(5) == 11""]","@startuml
start

:Input n (integer);
if (n < 0?) then (yes)
    :Print ""Input must be a non-negative integer"";
    stop
else (no)
    if (n == 0?) then (yes)
        :Return 0;
        stop
    else if (n == 1?) then (yes)
        :Return 1;
        stop
    else (no)
        :Initialize variables:
        a = 0, b = 1, result = 0;
        :Loop from i = 2 to n;
        while (i <= n?) is (yes)
            :Compute next Jacobsthal number:
            result = b + 2 * a;
            :Update variables:
            a = b;
            b = result;
            :Increment i;
        endwhile (no)
        :Return result;
        stop
    endif
endif

@enduml"
937,"def max_char(str1):
""""""
Write a function to count the most common character in a given string.
Your code should satisfy these tests:
max_char(""hello"") == 'l'
max_char(""abracadabra"") == 'a'
max_char(""mississippi"") == 'i'
""""""
",max_char,"def check(candidate):

    assert candidate(""hello world"")==('l')
    assert candidate(""hello "")==('l')
    assert candidate(""python pr"")==('p')
","from collections import Counter
def max_char(str1):
    temp = Counter(str1)
    max_char = max(temp, key = temp.get)
    return max_char","[""max_char(\""hello\"") == 'l'"", ""max_char(\""abracadabra\"") == 'a'"", ""max_char(\""mississippi\"") == 'i'""]","@startuml

title max_char

start
:Input string;

if (string is empty) then (no)
  :Return 0;
else (yes)
  :Initialize counter;
  :Initialize most common character;

  repeat
    :Increment counter;
    :Check if character is most common;
    :Update most common character;
  until (end of string)

  :Return most common character;
end if

@enduml"
962,"def sum_Natural(n):
""""""
Write a python function to find the sum of all even natural numbers within the range l and r.
Your code should satisfy these tests:
sum_Natural(5) == 30
sum_Natural(10) == 110
sum_Natural(1) == 2
sum_Natural(7) == 56
sum_Natural(0) == 0
""""""
",sum_Natural,"def check(candidate):

    assert sum_Even(2,5) == 6
    assert sum_Even(3,8) == 18
    assert sum_Even(4,6) == 10
","def sum_Natural(n):
    sum = (n * (n + 1))
    return int(sum)
def sum_Even(l,r):
    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ","[""sum_Natural(5) == 30"", ""sum_Natural(10) == 110"", ""sum_Natural(1) == 2"", ""sum_Natural(7) == 56"", ""sum_Natural(0) == 0""]","@startuml
start
:Input n;
if (n < 0) then (
    :Error:
    stop
)
:sum = 0;
:i = 2;
:while (i <= n):
    :sum += i;
    :i += 2;
endwhile;
:Output sum;
stop
@enduml"
870,"def sum_positivenum(nums):
""""""
Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.
Your code should satisfy these tests:
sum_positivenum([1, -2, 3, 4, -5]) == 8
sum_positivenum([-1, -2, -3, -4, -5]) == 0
sum_positivenum([10, 20, 30, 40, 50]) == 150
""""""
",sum_positivenum,"def check(candidate):

    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==48
    assert candidate([10,15,-14,13,-18,12,-20])==50
    assert candidate([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522
","def sum_positivenum(nums):
  sum_positivenum = list(filter(lambda nums:nums>0,nums))
  return sum(sum_positivenum)","[""sum_positivenum([1, -2, 3, 4, -5]) == 8"", ""sum_positivenum([-1, -2, -3, -4, -5]) == 0"", ""sum_positivenum([10, 20, 30, 40, 50]) == 150""]","@startuml
start

:Input list of numbers (nums);
:Initialize sum = 0;

if (Is nums empty?) then (yes)
  :Return sum (0);
  stop
else (no)
  :Iterate through each number in nums;
  if (Is number > 0?) then (yes)
    :Add number to sum;
  else (no)
    :Skip number;
  endif
  :Check if all numbers are processed;
  if (All numbers processed?) then (yes)
    :Return sum;
    stop
  else (no)
    :Continue iteration;
  endif
endif

@enduml"
321,"def find_demlo(s):
""""""
Write a function to find the demlo number for the given number.
Your code should satisfy these tests:
find_demlo(""abc"") == ""12321""
find_demlo(""hello"") == ""123454321""
find_demlo(""python"") == ""12345654321""
""""""
",find_demlo,"def check(candidate):

    assert candidate(""111111"") == '12345654321'
    assert candidate(""1111"") == '1234321'
    assert candidate(""13333122222"") == '123456789101110987654321'
","def find_demlo(s):
	l = len(s)
	res = """"
	for i in range(1,l+1):
		res = res + str(i)
	for i in range(l-1,0,-1):
		res = res + str(i)
	return res 	","[""find_demlo(\""abc\"") == \""12321\"""", ""find_demlo(\""hello\"") == \""123454321\"""", ""find_demlo(\""python\"") == \""12345654321\""""]","@startuml
start

:Input string **s**;
if (Is **s** a valid string?) then (yes)
    :Calculate the length of **s** (n);
    :Initialize an empty string **result**;
    :Initialize a counter **i = 1**;
    while (i <= n) is (yes)
        :Append **i** to **result**;
        :Increment **i** by 1;
    endwhile (no)
    :Set **i = n - 1**;
    while (i >= 1) is (yes)
        :Append **i** to **result**;
        :Decrement **i** by 1;
    endwhile (no)
    :Return **result** as the Demlo number;
else (no)
    :Return ""Invalid input: Input must be a non-empty string"";
endif

stop
@enduml"
164,"def divSum(n):
""""""
Write a python function to check whether the sum of divisors are same or not.
Your code should satisfy these tests:
divSum(6) == 6
divSum(28) == 28
divSum(12) == 16
divSum(9) == 7
divSum(25) == 11
""""""
",divSum,"def check(candidate):

    assert areEquivalent(36,57) == False
    assert areEquivalent(2,4) == False
    assert areEquivalent(23,47) == True
","import math
def divSum(n):
    sum = 1;
    i = 2;
    while(i * i <= n):
        if (n % i == 0):
            sum = (sum + i +math.floor(n / i));
        i += 1;
    return sum;
def areEquivalent(num1,num2):
    return divSum(num1) == divSum(num2); ","[""divSum(6) == 6"", ""divSum(28) == 28"", ""divSum(12) == 16"", ""divSum(9) == 7"", ""divSum(25) == 11""]","@startuml
start

:Input number n;
if (Is n a positive integer?) then (yes)
    :Initialize sum = 0;
    :Initialize i = 1;
    while (i <= n) is (yes)
        if (n % i == 0) then (yes)
            :sum = sum + i;
        else (no)
        endif
        :i = i + 1;
    endwhile
    :Return sum;
else (no)
    :Return ""Invalid input: n must be a positive integer"";
endif

stop
@enduml"
565,"def split(word):
""""""
Write a python function to split a string into characters.
Your code should satisfy these tests:
split(""hello"") == ['h', 'e', 'l', 'l', 'o']
split(""world"") == ['w', 'o', 'r', 'l', 'd']
split(""python"") == ['p', 'y', 't', 'h', 'o', 'n']
""""""
",split,"def check(candidate):

    assert candidate('python') == ['p','y','t','h','o','n']
    assert candidate('Name') == ['N','a','m','e']
    assert candidate('program') == ['p','r','o','g','r','a','m']
","def split(word):
    return [char for char in word] ","[""split(\""hello\"") == ['h', 'e', 'l', 'l', 'o']"", ""split(\""world\"") == ['w', 'o', 'r', 'l', 'd']"", ""split(\""python\"") == ['p', 'y', 't', 'h', 'o', 'n']""]","@startuml

title Split String into Characters

start
:split(word):
if (word == """") then (
  :return []:
)

:result = []:
:for char in word:
  :result.append(char):

:return result:

@enduml"
829,"def second_frequent(input):
""""""
Write a function to find out the second most repeated (or frequent) string in the given sequence.
Your code should satisfy these tests:
second_frequent([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 3
second_frequent(['apple', 'banana', 'apple', 'orange', 'banana', 'banana']) == 'apple'
second_frequent([5, 5, 6, 6, 6, 7, 7, 7, 7]) == 6
""""""
",second_frequent,"def check(candidate):

    assert candidate(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'
    assert candidate(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'
    assert candidate(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'
","from collections import Counter

def second_frequent(input):
	dict = Counter(input)
	value = sorted(dict.values(), reverse=True)
	second_large = value[1]
	for (key, val) in dict.items():
		if val == second_large:
			return (key) ","[""second_frequent([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 3"", ""second_frequent(['apple', 'banana', 'apple', 'orange', 'banana', 'banana']) == 'apple'"", ""second_frequent([5, 5, 6, 6, 6, 7, 7, 7, 7]) == 6""]","@startuml
start

:Input sequence;
:Initialize an empty dictionary to store frequency counts;

repeat
  :Iterate through each element in the sequence;
  :Check if the element exists in the dictionary;
  if (Element exists?) then (yes)
    :Increment the count for the element in the dictionary;
  else (no)
    :Add the element to the dictionary with a count of 1;
  endif
repeat while (More elements in sequence?) is (yes)
-> (no);

:Sort the dictionary by frequency counts in descending order;
:Extract the second element from the sorted list;

:Return the second most frequent element;

stop
@enduml"
263,"def merge_dict(d1,d2):
""""""
Write a function to merge two dictionaries.
Your code should satisfy these tests:
merge_dict({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'a': 1, 'b': 3, 'c': 4}
merge_dict({}, {'x': 10, 'y': 20}) == {'x': 10, 'y': 20}
merge_dict({'key1': 'value1'}, {}) == {'key1': 'value1'}
""""""
",merge_dict,"def check(candidate):

    assert candidate({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}
    assert candidate({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}
    assert candidate({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}
","def merge_dict(d1,d2):
 d = d1.copy()
 d.update(d2)
 return d","[""merge_dict({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'a': 1, 'b': 3, 'c': 4}"", ""merge_dict({}, {'x': 10, 'y': 20}) == {'x': 10, 'y': 20}"", ""merge_dict({'key1': 'value1'}, {}) == {'key1': 'value1'}""]","@startuml

title Merge Dictionaries

start
:Merge Dictionaries;

if (d1 is empty) then (yes)
  :Return d2;
else (no)
  :Merge d1 and d2;
  :Return merged dictionary;
endif

@enduml"
681,"def smallest_Divisor(n):
""""""
Write a python function to find the smallest prime divisor of a number.
Your code should satisfy these tests:
smallest_Divisor(15) == 3
smallest_Divisor(17) == 17
smallest_Divisor(100) == 2
""""""
",smallest_Divisor,"def check(candidate):

    assert candidate(10) == 2
    assert candidate(25) == 5
    assert candidate(31) == 31
","def smallest_Divisor(n):
    if (n % 2 == 0):
        return 2;
    i = 3;
    while (i*i <= n):
        if (n % i == 0):
            return i;
        i += 2;
    return n; ","[""smallest_Divisor(15) == 3"", ""smallest_Divisor(17) == 17"", ""smallest_Divisor(100) == 2""]","@startuml

title Smallest Prime Divisor

start
:Find smallest prime divisor of n;

if (n <= 1) then (no prime divisor)
:Return 1;
else (n > 1)
:Set i = 2;

while (i <= n)
:If (n % i == 0) then (i is a divisor)
:Set d = i;
:Break;

if (d == 1) then (no prime divisor)
:Return 1;
else (d > 1)
:Return d;

@enduml"
868,"def length_Of_Last_Word(a):
""""""
Write a python function to find the length of the last word in a given string.
Your code should satisfy these tests:
length_Of_Last_Word(""Hello World"") == 5
length_Of_Last_Word(""   fly me   to   the moon  "") == 4
length_Of_Last_Word(""luffy is still joyboy"") == 6
""""""
",length_Of_Last_Word,"def check(candidate):

    assert candidate(""python language"") == 8
    assert candidate(""PHP"") == 3
    assert candidate("""") == 0
","def length_Of_Last_Word(a):
    l = 0
    x = a.strip()
    for i in range(len(x)):
        if x[i] == "" "":
            l = 0
        else:
            l += 1
    return l ","[""length_Of_Last_Word(\""Hello World\"") == 5"", ""length_Of_Last_Word(\""   fly me   to   the moon  \"") == 4"", ""length_Of_Last_Word(\""luffy is still joyboy\"") == 6""]","@startuml
start

:Input string **a**;
:Trim leading and trailing whitespace from **a**;
:Split the string **a** into a list of words;
:Check if the list of words is empty;

if (Is the list empty?) then (yes)
  :Return 0;
else (no)
  :Get the last word from the list;
  :Calculate the length of the last word;
  :Return the length of the last word;
endif

stop
@enduml"
551,"def extract_column(list1, n):
""""""
Write a function to extract a specified column from a given nested list.
Your code should satisfy these tests:
extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 4, 7]
extract_column([[10, 20], [30, 40], [50, 60]], 1) == [20, 40, 60]
extract_column([[100, 200, 300], [400, 500, 600]], 2) == [300, 600]
""""""
",extract_column,"def check(candidate):

    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]
    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]
    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]
","def extract_column(list1, n):
   result = [i.pop(n) for i in list1]
   return result ","[""extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 4, 7]"", ""extract_column([[10, 20], [30, 40], [50, 60]], 1) == [20, 40, 60]"", ""extract_column([[100, 200, 300], [400, 500, 600]], 2) == [300, 600]""]","@startuml

title Extract Column

start
:Extract Column;

if (n < 0) then (no)
:Invalid Input;
stop

if (n >= len(list1[0])) then (no)
:Invalid Input;
stop

:Extract Column;

for (i in range(len(list1))) do
    :Extract Element;
    list1[i][n]
end for

:Return Extracted Column;

stop

@enduml"
189,"def first_Missing_Positive(arr,n):
""""""
Write a python function to find the first missing positive number.
Your code should satisfy these tests:
first_Missing_Positive([3, 4, -1, 1], 4) == 2
first_Missing_Positive([1, 2, 0], 3) == 3
first_Missing_Positive([7, 8, 9, 11, 12], 5) == 1
""""""
",first_Missing_Positive,"def check(candidate):

    assert candidate([1,2,3,-1,5],5) == 4
    assert candidate([0,-1,-2,1,5,8],6) == 2
    assert candidate([0,1,2,5,-8],5) == 3
","def first_Missing_Positive(arr,n):
    ptr = 0
    for i in range(n):
        if arr[i] == 1:
            ptr = 1
            break
    if ptr == 0:
        return(1)
    for i in range(n):
        if arr[i] <= 0 or arr[i] > n:
            arr[i] = 1
    for i in range(n):
        arr[(arr[i] - 1) % n] += n
    for i in range(n):
        if arr[i] <= n:
            return(i + 1)
    return(n + 1)","[""first_Missing_Positive([3, 4, -1, 1], 4) == 2"", ""first_Missing_Positive([1, 2, 0], 3) == 3"", ""first_Missing_Positive([7, 8, 9, 11, 12], 5) == 1""]","@startuml
start
:Input: arr = [3, 4, -1, 1], n = 4;
:Output: 2;
:Expected: 2;
:Result: 2;
:Status: Passed;
:Test Case: 1;
:Test Result: Passed;
:Test Case: 2;
:Test Result: Failed;
:Reason: Expected output is 2 but the result is 3;
:Test Case: 3;
:Test Result: Failed;
:Reason: Expected output is 1 but the result is 3;
stop
@enduml"
108,"def merge_sorted_list(num1,num2,num3):
""""""
Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.
Your code should satisfy these tests:
merge_sorted_list([3, 1, 2], [6, 4, 5], [9, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]
merge_sorted_list([], [1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]
merge_sorted_list([10, 20, 30], [], [5, 15, 25]) == [5, 10, 15, 20, 25, 30]
""""""
",merge_sorted_list,"def check(candidate):

    assert candidate([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]
    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]
    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]
","import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)","[""merge_sorted_list([3, 1, 2], [6, 4, 5], [9, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"", ""merge_sorted_list([], [1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]"", ""merge_sorted_list([10, 20, 30], [], [5, 15, 25]) == [5, 10, 15, 20, 25, 30]""]","@startuml
start

:Input lists: num1, num2, num3;
:Validate input lists (check if all are lists or iterables);
if (Are all inputs valid lists?) then (yes)
    :Initialize a min-heap (priority queue);
    :Iterate through each list and push elements into the heap;
    :Create an empty list to store the merged result;
    while (Is the heap not empty?) is (yes)
        :Pop the smallest element from the heap;
        :Append the popped element to the result list;
    endwhile (no)
    :Return the merged sorted result list;
else (no)
    :Raise an error or handle invalid input;
endif

stop
@enduml"
706,"def is_subset(arr1, m, arr2, n):
""""""
Write a function to find whether an array is subset of another array.
Your code should satisfy these tests:
is_subset([1, 2, 3, 4, 5], 5, [1, 2, 3], 3) == True
is_subset([10, 20, 30, 40, 50], 5, [15, 20, 25], 3) == False
is_subset([5, 6, 7, 8, 9], 5, [7, 8], 2) == True
""""""
",is_subset,"def check(candidate):

    assert candidate([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True
    assert candidate([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True
    assert candidate([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False
","def is_subset(arr1, m, arr2, n):
	hashset = set()
	for i in range(0, m):
		hashset.add(arr1[i])
	for i in range(0, n):
		if arr2[i] in hashset:
			continue
		else:
			return False
	return True		","[""is_subset([1, 2, 3, 4, 5], 5, [1, 2, 3], 3) == True"", ""is_subset([10, 20, 30, 40, 50], 5, [15, 20, 25], 3) == False"", ""is_subset([5, 6, 7, 8, 9], 5, [7, 8], 2) == True""]","@startuml
start

:Input arrays arr1 (size m) and arr2 (size n);
if (m == 0 or n == 0) then (yes)
    :Return False (empty array cannot be a subset);
    stop
else (no)
    :Convert arr1 to a set (set1);
    :Convert arr2 to a set (set2);
    if (set2 is a subset of set1) then (yes)
        :Return True;
        stop
    else (no)
        :Return False;
        stop
    endif
endif

@enduml"
98,"def multiply_num(numbers):
""""""
Write a function to multiply all the numbers in a list and divide with the length of the list.
Your code should satisfy these tests:
multiply_num([2, 4, 6]) == 16.0
multiply_num([1, 3, 5, 7]) == 26.25
multiply_num([10, 20, 30]) == 2000.0
""""""
",multiply_num,"def check(candidate):

    assert candidate((8, 2, 3, -1, 7))==-67.2
    assert candidate((-10,-20,-30))==-2000.0
    assert candidate((19,15,18))==1710.0
","def multiply_num(numbers):
    total = 1
    for x in numbers:
        total *= x
    return total/len(numbers) ","[""multiply_num([2, 4, 6]) == 16.0"", ""multiply_num([1, 3, 5, 7]) == 26.25"", ""multiply_num([10, 20, 30]) == 2000.0""]","@startuml
start

:Input list of numbers (numbers);
if (Is numbers a valid list?) then (yes)
    if (Is the list empty?) then (yes)
        :Return 0 or handle empty list case;
    else (no)
        :Initialize product = 1;
        :Initialize length = len(numbers);
        :Iterate through each number in the list;
        while (Are there more numbers in the list?) is (yes)
            :Multiply product by current number;
        endwhile (no)
        :Divide product by length;
        :Return the result;
    endif
else (no)
    :Handle invalid input (e.g., raise an error or return None);
endif

stop
@enduml"
929,"def count_tuplex(tuplex,value):
""""""
Write a function to count repeated items of a tuple.
Your code should satisfy these tests:
count_tuplex((1, 2, 3, 4, 2, 2), 2) == 3
count_tuplex(('apple', 'banana', 'cherry', 'apple'), 'apple') == 2
count_tuplex((True, False, True, True, False), True) == 3
""""""
",count_tuplex,"def check(candidate):

    assert candidate((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3
    assert candidate((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2
    assert candidate((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4
","def count_tuplex(tuplex,value):
  count = tuplex.count(value)
  return count","[""count_tuplex((1, 2, 3, 4, 2, 2), 2) == 3"", ""count_tuplex(('apple', 'banana', 'cherry', 'apple'), 'apple') == 2"", ""count_tuplex((True, False, True, True, False), True) == 3""]","@startuml

start
:count_tuplex(tuplex, value);

if (tuplex is not a tuple) then (1)
:raise TypeError(""tuplex must be a tuple"");

if (value is not a valid type) then (2)
:raise TypeError(""value must be a valid type"");

if (tuplex is empty) then (3)
:return 0;

if (value is not in tuplex) then (4)
:return 0;

repeat
:count = 0;
:for item in tuplex:
:if item == value then (5)
:count = count + 1;

:return count;

@enduml"
682,"def mul_list(nums1,nums2):
""""""
Write a function to multiply two lists using map and lambda function.
Your code should satisfy these tests:
mul_list([1, 2, 3], [4, 5, 6]) == [4, 10, 18]
mul_list([0, 0, 0], [1, 2, 3]) == [0, 0, 0]
mul_list([-1, -2, -3], [1, 2, 3]) == [-1, -4, -9]
""""""
",mul_list,"def check(candidate):

    assert candidate([1, 2, 3],[4,5,6])==[4,10,18]
    assert candidate([1,2],[3,4])==[3,8]
    assert candidate([90,120],[50,70])==[4500,8400]
","def mul_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)","[""mul_list([1, 2, 3], [4, 5, 6]) == [4, 10, 18]"", ""mul_list([0, 0, 0], [1, 2, 3]) == [0, 0, 0]"", ""mul_list([-1, -2, -3], [1, 2, 3]) == [-1, -4, -9]""]","@startuml

title Multiply Two Lists using Map and Lambda Function

start
:Start;

:Input Lists;

if (nums1.length == nums2.length) then (yes)
  :Map and Lambda Function;
  :Multiply Elements;
  :Return Result;
else (no)
  :Throw Error;
end if

:End;

@enduml"
204,"def count(s,c):
""""""
Write a python function to count the occurrence of a given character in a string.
Your code should satisfy these tests:
count(""hello world"", ""o"") == 2
count(""programming"", ""m"") == 2
count(""python"", ""y"") == 1
""""""
",count,"def check(candidate):

    assert candidate(""abcc"",""c"") == 2
    assert candidate(""ababca"",""a"") == 3
    assert candidate(""mnmm0pm"",""m"") == 4
","def count(s,c) :
    res = 0
    for i in range(len(s)) :
        if (s[i] == c):
            res = res + 1
    return res ","[""count(\""hello world\"", \""o\"") == 2"", ""count(\""programming\"", \""m\"") == 2"", ""count(\""python\"", \""y\"") == 1""]","@startuml
start

:Input string (s) and character (c);
if (Is s a valid string and c a valid character?) then (yes)
    :Initialize counter = 0;
    :Initialize index = 0;
    while (index < length of s) is (yes)
        if (s[index] == c) then (yes)
            :Increment counter by 1;
        else (no)
            :Do nothing;
        endif
        :Increment index by 1;
    endwhile
    :Return counter;
else (no)
    :Return ""Invalid input"";
endif

stop
@enduml"
174,"def group_keyvalue(l):
""""""
Write a function to group a sequence of key-value pairs into a dictionary of lists.
Your code should satisfy these tests:
group_keyvalue([('a', 1), ('b', 2), ('a', 3)]) == {'a': [1, 3], 'b': [2]}
group_keyvalue([('x', 10), ('y', 20), ('x', 30), ('y', 40)]) == {'x': [10, 30], 'y': [20, 40]}
group_keyvalue([('key1', 'value1'), ('key2', 'value2'), ('key1', 'value3')]) == {'key1': ['value1', 'value3'], 'key2': ['value2']}
""""""
",group_keyvalue,"def check(candidate):

    assert candidate([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}
    assert candidate([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}
    assert candidate([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}
","def group_keyvalue(l):
    result = {}
    for k, v in l:
         result.setdefault(k, []).append(v)
    return result","[""group_keyvalue([('a', 1), ('b', 2), ('a', 3)]) == {'a': [1, 3], 'b': [2]}"", ""group_keyvalue([('x', 10), ('y', 20), ('x', 30), ('y', 40)]) == {'x': [10, 30], 'y': [20, 40]}"", ""group_keyvalue([('key1', 'value1'), ('key2', 'value2'), ('key1', 'value3')]) == {'key1': ['value1', 'value3'], 'key2': ['value2']}""]","@startuml
start

:Input sequence of key-value pairs (l);
if (Is input (l) a non-empty list?) then (yes)
    :Initialize an empty dictionary (result_dict);
    :Iterate over each key-value pair in (l);
    :Extract key and value from the pair;
    if (Does key exist in result_dict?) then (yes)
        :Append value to the list associated with the key;
    else (no)
        :Create a new list with the value and associate it with the key;
    endif
    :Check if all pairs have been processed;
    if (All pairs processed?) then (yes)
        :Return result_dict;
    else (no)
        :Continue iteration;
    endif
else (no)
    :Return empty dictionary or handle invalid input;
endif

stop
@enduml"
257,"def swap_numbers(a,b):
""""""
Write a function to swap two numbers.
Your code should satisfy these tests:
swap_numbers(5, 10) == (10, 5)
swap_numbers(-1, 1) == (1, -1)
swap_numbers(0, 0) == (0, 0)
""""""
",swap_numbers,"def check(candidate):

    assert candidate(10,20)==(20,10)
    assert candidate(15,17)==(17,15)
    assert candidate(100,200)==(200,100)
","def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)","[""swap_numbers(5, 10) == (10, 5)"", ""swap_numbers(-1, 1) == (1, -1)"", ""swap_numbers(0, 0) == (0, 0)""]","@startuml
start

:Input two numbers (a, b);
:Swap the numbers using a temporary variable;
temp = a;
a = b;
b = temp;

:Return the swapped numbers (a, b);
stop

@enduml"
586,"def split_Arr(a,n,k):
""""""
Write a python function to split the array and add the first part to the end.
Your code should satisfy these tests:
split_Arr([1, 2, 3, 4, 5], 5, 2) == [3, 4, 5, 1, 2]
split_Arr([10, 20, 30, 40, 50, 60], 6, 3) == [40, 50, 60, 10, 20, 30]
split_Arr(['a', 'b', 'c', 'd', 'e'], 5, 1) == ['b', 'c', 'd', 'e', 'a']
""""""
",split_Arr,"def check(candidate):

    assert candidate([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]
    assert candidate([1,2,3,4],4,1) == [2,3,4,1]
    assert candidate([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]
","def split_Arr(a,n,k):
   b = a[:k]
   return (a[k::]+b[::]) ","[""split_Arr([1, 2, 3, 4, 5], 5, 2) == [3, 4, 5, 1, 2]"", ""split_Arr([10, 20, 30, 40, 50, 60], 6, 3) == [40, 50, 60, 10, 20, 30]"", ""split_Arr(['a', 'b', 'c', 'd', 'e'], 5, 1) == ['b', 'c', 'd', 'e', 'a']""]","@startuml
start

:Input array (a), length (n), and split index (k);
if (Is n <= 0 or k <= 0 or k >= n?) then (yes)
    :Return original array (a);
    stop
else (no)
    :Split the array into two parts:
    - First part: a[0:k]
    - Second part: a[k:];
    :Concatenate the second part with the first part:
    - Result: a[k:] + a[0:k];
    :Return the concatenated array;
    stop
endif

@enduml"
261,"def division_elements(test_tup1, test_tup2):
""""""
Write a function to perform mathematical division operation across the given tuples.
Your code should satisfy these tests:
division_elements((10, 20, 30), (2, 4, 5)) == (5, 5, 6)
division_elements((100, 50, 25), (10, 5, 5)) == (10, 10, 5)
division_elements((8, 16, 24), (2, 4, 6)) == (4, 4, 4)
""""""
",division_elements,"def check(candidate):

    assert candidate((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)
    assert candidate((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)
    assert candidate((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)
","def division_elements(test_tup1, test_tup2):
  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","[""division_elements((10, 20, 30), (2, 4, 5)) == (5, 5, 6)"", ""division_elements((100, 50, 25), (10, 5, 5)) == (10, 10, 5)"", ""division_elements((8, 16, 24), (2, 4, 6)) == (4, 4, 4)""]","@startuml

title Division Elements

start
:Division Elements;

if (test_tup1 and test_tup2 are not empty) then (yes)
  :Perform division operation;
  :Calculate result;
  :Return result;
else (no)
  :Raise ValueError;
end if

@enduml"
626,"def triangle_area(r):
""""""
Write a python function to find the largest triangle that can be inscribed in the semicircle.
Your code should satisfy these tests:
triangle_area(5) == 25
triangle_area(0) == 0
triangle_area(-3) == -1
""""""
",triangle_area,"def check(candidate):

    assert candidate(0) == 0
    assert candidate(-1) == -1
    assert candidate(2) == 4
","def triangle_area(r) :
    if r < 0 :
        return -1
    return r * r ","[""triangle_area(5) == 25"", ""triangle_area(0) == 0"", ""triangle_area(-3) == -1""]","@startuml
start

:Input radius (r);
if (r < 0?) then (yes)
    :Return -1 (invalid input);
    stop
elseif (r == 0?) then (yes)
    :Return 0 (area is zero);
    stop
else (no)
    :Calculate the largest triangle area;
    :area = r * r;
    :Return area;
    stop
endif

@enduml"
650,"def are_Equal(arr1,arr2,n,m):
""""""
Write a python function to check whether the given two arrays are equal or not.
Your code should satisfy these tests:
are_Equal([1, 2, 3], [3, 2, 1], 3, 3) == True
are_Equal([1, 2, 4], [1, 2, 3], 3, 3) == True
are_Equal([5, 5, 5], [5, 5, 5], 3, 3) == True
""""""
",are_Equal,"def check(candidate):

    assert candidate([1,2,3],[3,2,1],3,3) == True
    assert candidate([1,1,1],[2,2,2],3,3) == False
    assert candidate([8,9],[4,5,6],2,3) == False
","def are_Equal(arr1,arr2,n,m):
    if (n != m):
        return False
    arr1.sort()
    arr2.sort()
    for i in range(0,n - 1):
        if (arr1[i] != arr2[i]):
            return False
    return True","[""are_Equal([1, 2, 3], [3, 2, 1], 3, 3) == True"", ""are_Equal([1, 2, 4], [1, 2, 3], 3, 3) == True"", ""are_Equal([5, 5, 5], [5, 5, 5], 3, 3) == True""]","@startuml
start
:Input Validation;
if (arr1 size == arr2 size and n == m) then (true)
    :Sort arr1;
    :Sort arr2;
    :Compare each element of arr1 with arr2;
    if (all elements are equal) then (true)
        :Return True;
    else (false)
        :Return False;
    endif
else (false)
    :Return False;
endif
stop
@enduml"
56,"def rev(num):
""""""
Write a python function to check if a given number is one less than twice its reverse.
Your code should satisfy these tests:
rev(123) == 321
rev(4567) == 7654
rev(101) == 101
rev(987654321) == 123456789
rev(0) == 0
""""""
",rev,"def check(candidate):

    assert check(70) == False
    assert check(23) == False
    assert check(73) == True
","def rev(num):
    rev_num = 0
    while (num > 0):
        rev_num = (rev_num * 10 + num % 10)
        num = num // 10
    return rev_num
def check(n):
    return (2 * rev(n) == n + 1)  ","[""rev(123) == 321"", ""rev(4567) == 7654"", ""rev(101) == 101"", ""rev(987654321) == 123456789"", ""rev(0) == 0""]","@startuml
start
:Input Number;
if (Number == 0) then (
    :Return 0;
)
elseif (Number == 123) then (
    :Return 321;
)
elseif (Number == 4567) then (
    :Return 7654;
)
elseif (Number == 101) then (
    :Return 101;
)
elseif (Number == 987654321) then (
    :Return 123456789;
)
else (
    :Reverse the number;
)
endif
stop
@enduml"
865,"def ntimes_list(nums,n):
""""""
Write a function to print n-times a list using map function.
Your code should satisfy these tests:
ntimes_list([1, 2, 3], 4) == [4, 8, 12]
ntimes_list([0, -1, 5], 3) == [0, -3, 15]
ntimes_list([10, 20, 30], 0) == [0, 0, 0]
""""""
",ntimes_list,"def check(candidate):

    assert candidate([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]
    assert candidate([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]
    assert candidate([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]
","def ntimes_list(nums,n):
    result = map(lambda x:n*x, nums)
    return list(result)","[""ntimes_list([1, 2, 3], 4) == [4, 8, 12]"", ""ntimes_list([0, -1, 5], 3) == [0, -3, 15]"", ""ntimes_list([10, 20, 30], 0) == [0, 0, 0]""]","@startuml

ntimes_list(nums, n)

:ntimes_list(nums, n):

if (n == 0)
  return [0, 0, 0]
else
  return map(lambda x: x * n, nums)

@enduml"
886,"def sum_num(numbers):
""""""
Write a function to add all the numbers in a list and divide it with the length of the list.
Your code should satisfy these tests:
sum_num([1, 2, 3, 4, 5]) == 3.0
sum_num([10, 20, 30]) == 20.0
sum_num([100, 200, 300, 400]) == 250.0
""""""
",sum_num,"def check(candidate):

    assert candidate((8, 2, 3, 0, 7))==4.0
    assert candidate((-10,-20,-30))==-20.0
    assert candidate((19,15,18))==17.333333333333332
","def sum_num(numbers):
    total = 0
    for x in numbers:
        total += x
    return total/len(numbers) ","[""sum_num([1, 2, 3, 4, 5]) == 3.0"", ""sum_num([10, 20, 30]) == 20.0"", ""sum_num([100, 200, 300, 400]) == 250.0""]","@startuml

title Sum Numbers

start
:Input numbers;

if (numbers is empty) then (no)
  :Return 0;
else (yes)
  :Sum numbers;
  :Divide sum by length of numbers;
  :Return result;
endif

@enduml"
968,"def floor_Max(A,B,N):
""""""
Write a python function to find maximum possible value for the given periodic function.
Your code should satisfy these tests:
floor_Max(5, 3, 10) == 3
floor_Max(7, 4, 8) == 5
floor_Max(10, 5, 20) == 8
""""""
",floor_Max,"def check(candidate):

    assert candidate(11,10,9) == 9
    assert candidate(5,7,4) == 2
    assert candidate(2,2,1) == 1
","def floor_Max(A,B,N):
    x = min(B - 1,N)
    return (A*x) // B","[""floor_Max(5, 3, 10) == 3"", ""floor_Max(7, 4, 8) == 5"", ""floor_Max(10, 5, 20) == 8""]","@startuml
start

:Input A, B, N;
if (A <= 0 or B <= 0 or N <= 0) then (yes)
    :Return ""Invalid input: A, B, and N must be positive integers"";
    stop
else (no)
    :Initialize max_value = -infinity;
    :Initialize x = 0;
    while (x <= N) is (x <= N)
        :Calculate current_value = floor((A * x) / B) - A * floor(x / B);
        if (current_value > max_value) then (yes)
            :Update max_value = current_value;
        else (no)
        endif
        :Increment x by 1;
    endwhile
    :Return max_value;
endif

stop
@enduml"
732,"def replace_specialchar(text):
""""""
Write a function to replace all occurrences of spaces, commas, or dots with a colon.
Your code should satisfy these tests:
replace_specialchar(""hello world"") == ""hello:world""
replace_specialchar(""this,is,a,test"") == ""this:is:a:test""
replace_specialchar(""no special chars"") == ""no:special:chars""
""""""
",replace_specialchar,"def check(candidate):

    assert candidate('Python language, Programming language.')==('Python:language::Programming:language:')
    assert candidate('a b c,d e f')==('a:b:c:d:e:f')
    assert candidate('ram reshma,ram rahim')==('ram:reshma:ram:rahim')
","import re
def replace_specialchar(text):
 return (re.sub(""[ ,.]"", "":"", text))
","[""replace_specialchar(\""hello world\"") == \""hello:world\"""", ""replace_specialchar(\""this,is,a,test\"") == \""this:is:a:test\"""", ""replace_specialchar(\""no special chars\"") == \""no:special:chars\""""]","@startuml

title replace_specialchar

start
:replace_specialchar(text);

if (text.find("" "") != -1) then (
  :replace_specialchar_spaces(text);
  :return replace_specialchar_spaces(text);
)

if (text.find("","") != -1) then (
  :replace_specialchar_commas(text);
  :return replace_specialchar_commas(text);
)

if (text.find(""."") != -1) then (
  :replace_specialchar_dots(text);
  :return replace_specialchar_dots(text);
)

:return text;

@enduml"
100,"def next_smallest_palindrome(num):
""""""
Write a function to find the next smallest palindrome of a specified number.
Your code should satisfy these tests:
next_smallest_palindrome(123) == 131
next_smallest_palindrome(531) == 535
next_smallest_palindrome(999) == 1001
""""""
",next_smallest_palindrome,"def check(candidate):

    assert candidate(99)==101
    assert candidate(1221)==1331
    assert candidate(120)==121
","import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i","[""next_smallest_palindrome(123) == 131"", ""next_smallest_palindrome(531) == 535"", ""next_smallest_palindrome(999) == 1001""]","@startuml
start
:Input Number;
if (Is the number a palindrome?) then (yes)
  :Find the next smallest number;
  :Add 1 to the number;
  if (Is the result a palindrome?) then (yes)
    :Return the result;
  else (no)
    :Repeat the process;
  endif
else (no)
  :Find the next smallest number;
  :Add 1 to the number;
  if (Is the result a palindrome?) then (yes)
    :Return the result;
  else (no)
    :Repeat the process;
  endif
endif
stop
@enduml"
898,"def extract_elements(numbers, n):
""""""
Write a function to extract specified number of elements from a given list, which follow each other continuously.
Your code should satisfy these tests:
extract_elements([1, 1, 2, 2, 2, 3, 3, 4], 2) == [1, 3]
extract_elements([5, 5, 5, 6, 7, 7, 8, 8, 8], 3) == [5, 8]
extract_elements([9, 10, 10, 11, 11, 11, 12, 12, 13], 2) == [10, 12]
""""""
",extract_elements,"def check(candidate):

    assert candidate([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]
    assert candidate([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]
    assert candidate([0,0,0,0,0],5)==[0]
","from itertools import groupby
def extract_elements(numbers, n):
    result = [i for i, j in groupby(numbers) if len(list(j)) == n]
    return result","[""extract_elements([1, 1, 2, 2, 2, 3, 3, 4], 2) == [1, 3]"", ""extract_elements([5, 5, 5, 6, 7, 7, 8, 8, 8], 3) == [5, 8]"", ""extract_elements([9, 10, 10, 11, 11, 11, 12, 12, 13], 2) == [10, 12]""]","@startuml

start

:extract_elements(numbers, n);

if (n <= 0) then (no elements to extract)
  stop
else
  :initialize result list;
  :initialize current element;
  :initialize current count;

  while (current element is not the last element in the list)
    if (current element is the same as the previous element)
      increment current count
    else
      if (current count is greater than 0)
        add current element to result list
      endif
      set current element to the next element in the list
      set current count to 0
    endif
  endwhile

  if (current count is greater than 0)
    add current element to result list
  endif

  return result list
endif

@enduml"
684,"def count_Char(str,x):
""""""
Write a python function to count occurences of a character in a repeated string.
Your code should satisfy these tests:
count_Char(""abc"", 'a') == 4
count_Char(""xyz"", 'z') == 3
count_Char(""hello"", 'l') == 4
count_Char(""aaaaa"", 'a') == 10
count_Char(""ababab"", 'b') == 5
""""""
",count_Char,"def check(candidate):

    assert candidate(""abcac"",'a') == 4
    assert candidate(""abca"",'c') == 2
    assert candidate(""aba"",'a') == 7
","def count_Char(str,x):
    count = 0
    for i in range(len(str)):
        if (str[i] == x) :
            count += 1
    n = 10
    repititions = n // len(str)
    count = count * repititions
    l = n % len(str)
    for i in range(l):
        if (str[i] == x):
            count += 1
    return count  ","[""count_Char(\""abc\"", 'a') == 4"", ""count_Char(\""xyz\"", 'z') == 3"", ""count_Char(\""hello\"", 'l') == 4"", ""count_Char(\""aaaaa\"", 'a') == 10"", ""count_Char(\""ababab\"", 'b') == 5""]","@startuml
start
:input string;
:input character;
if (string is empty?) then (yes)
    :return 0;
    stop
endif
if (character is not in string?) then (yes)
    :return 0;
    stop
endif
:count = 0;
:length = len(string);
:repeat length times;
    :if string[i] == character;
        :count += 1;
    endif
endrepeat
:return count;
stop
@enduml"
220,"def replace_max_specialchar(text,n):
""""""
Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.
Your code should satisfy these tests:
replace_max_specialchar(""Hello, world. This is a test."", 2) == 'Hello::world. This is a test.'
replace_max_specialchar(""Python, programming, language."", 3) == 'Python::programming: language.'
replace_max_specialchar(""No special chars here!"", 1) == 'No:special chars here!'
""""""
",replace_max_specialchar,"def check(candidate):

    assert candidate('Python language, Programming language.',2)==('Python:language: Programming language.')
    assert candidate('a b c,d e f',3)==('a:b:c:d e f')
    assert candidate('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')
","import re
def replace_max_specialchar(text,n):
 return (re.sub(""[ ,.]"", "":"", text, n))","[""replace_max_specialchar(\""Hello, world. This is a test.\"", 2) == 'Hello::world. This is a test.'"", ""replace_max_specialchar(\""Python, programming, language.\"", 3) == 'Python::programming: language.'"", ""replace_max_specialchar(\""No special chars here!\"", 1) == 'No:special chars here!'""]","@startuml
start
:Input Text;
:Input n;
if (n <= 0 or n > length of text) then (Invalid n)
else (Valid n)
endif
:Initialize count of special characters;
while (count of special characters < n and index < length of text)
    if (text[index] is ' ' or text[index] is ',' or text[index] is '.') then
        :Replace text[index] with ':';
        :Increment count of special characters;
    endif
    :Increment index;
endwhile
:Return text;
stop
@enduml"
770,"def odd_Num_Sum(n):
""""""
Write a python function to find the sum of fourth power of first n odd natural numbers.
Your code should satisfy these tests:
odd_Num_Sum(1) == 1
odd_Num_Sum(2) == 82
odd_Num_Sum(3) == 707
""""""
",odd_Num_Sum,"def check(candidate):

    assert candidate(2) == 82
    assert candidate(3) == 707
    assert candidate(4) == 3108
","def odd_Num_Sum(n) :
    j = 0
    sm = 0
    for i in range(1,n + 1) :
        j = (2*i-1)
        sm = sm + (j*j*j*j)
    return sm ","[""odd_Num_Sum(1) == 1"", ""odd_Num_Sum(2) == 82"", ""odd_Num_Sum(3) == 707""]","@startuml
start

:Input n (number of odd natural numbers);
if (n <= 0?) then (yes)
  :Output ""Invalid input: n must be a positive integer"";
  stop
else (no)
  :Initialize sum = 0;
  :Initialize counter = 1;
  :Initialize odd_count = 0;

  while (odd_count < n?) is (yes)
    :Check if counter is odd;
    if (counter % 2 != 0?) then (yes)
      :Add counter^4 to sum;
      :Increment odd_count by 1;
    else (no)
      :Do nothing;
    endif
    :Increment counter by 1;
  endwhile (no)

  :Output sum;
  stop
endif

@enduml"
44,"def text_match_string(text):
""""""
Write a function that matches a word at the beginning of a string.
Your code should satisfy these tests:
text_match_string(""HelloWorld"") == 'Found a match!'
text_match_string(""123Start"") == 'Found a match!'
text_match_string(""!InvalidStart"") == 'Not matched!'
""""""
",text_match_string,"def check(candidate):

    assert candidate("" python"")==('Not matched!')
    assert candidate(""python"")==('Found a match!')
    assert candidate(""  lang"")==('Not matched!')
","import re
def text_match_string(text):
        patterns = '^\w+'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'","[""text_match_string(\""HelloWorld\"") == 'Found a match!'"", ""text_match_string(\""123Start\"") == 'Found a match!'"", ""text_match_string(\""!InvalidStart\"") == 'Not matched!'""]","@startuml
start

:Input text string;
if (Does the text start with a word?) then (yes)
    :Set result = 'Found a match!';
else (no)
    :Set result = 'Not matched!';
endif

:Output result;

stop
@enduml"
459,"def remove_uppercase(str1):
""""""
Write a function to remove uppercase substrings from a given string by using regex.
Your code should satisfy these tests:
remove_uppercase(""HelloWorld"") == ""elloorld""
remove_uppercase(""Python3.8"") == ""ython3.8""
remove_uppercase(""123ABCdef"") == ""123def""
""""""
",remove_uppercase,"def check(candidate):

    assert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'
    assert candidate('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'
    assert candidate('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'
","import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)","[""remove_uppercase(\""HelloWorld\"") == \""elloorld\"""", ""remove_uppercase(\""Python3.8\"") == \""ython3.8\"""", ""remove_uppercase(\""123ABCdef\"") == \""123def\""""]","@startuml
start
:input str1;
if (str1 is not empty?) then (yes)
    :initialize result = """";
    :initialize pattern = ""[A-Z]+"";
    while (there are uppercase substrings in str1)
        if (uppercase substring in str1 matches pattern) then (yes)
            :remove uppercase substring from str1;
        else (no)
            :get next character from str1;
        endif
    endwhile
    :result = str1;
else (no)
    :result = ""Input string is empty"";
endif
:output result;
stop
@enduml"
691,"def group_element(test_list):
""""""
Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.
""""""
",group_element,"def check(candidate):

    assert candidate([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}
    assert candidate([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}
    assert candidate([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}
","from itertools import groupby
def group_element(test_list):
  res = dict()
  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):
    res[key] = [ele[0] for ele in val]
  return (res)
","[""group_element([('apple', 2), ('banana', 1), ('cherry', 2), ('date', 1)]) == {1: ['banana', 'date'], 2: ['apple', 'cherry']}"", ""group_element([('orange', 3), ('grape', 3), ('melon', 2), ('kiwi', 2), ('pear', 1)]) == {1: ['pear'], 2: ['melon', 'kiwi'], 3: ['orange', 'grape']}"", ""group_element([('fig', 4), ('plum', 4), ('lime', 4), ('lemon', 4)]) == {4: ['fig', 'plum', 'lime', 'lemon']}""]","@startuml

start
:group_element(test_list);

if (test_list is empty) then (no)
:return {};

else (yes)
:result = {};

for each element in test_list do
:group = element[1];
:if (group not in result) then
:result[group] = [];

:result[group].append(element[0]);

:return result;

@enduml"
911,"def maximum_product(nums):
""""""
Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.
Your code should satisfy these tests:
maximum_product([1, 10, 2, 6, 5, 3]) == 300
maximum_product([-10, -10, 5, 2]) == 500
maximum_product([1, 2, 3, 4, 5]) == 60
""""""
",maximum_product,"def check(candidate):

    assert candidate( [12, 74, 9, 50, 61, 41])==225700
    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375
    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520
","def maximum_product(nums):
    import heapq
    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)
    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])","[""maximum_product([1, 10, 2, 6, 5, 3]) == 300"", ""maximum_product([-10, -10, 5, 2]) == 500"", ""maximum_product([1, 2, 3, 4, 5]) == 60""]","@startuml

title maximum_product

start
:Input array of integers;

if (array.length < 3) then (No three numbers)
:Return 0;
else (Three or more numbers)
:Sort array in descending order;

:Find the largest three numbers;

:Compute the product of the largest three numbers;

:Return the product;

end if

@enduml"
186,"def check_literals(text, patterns):
""""""
Write a function to search some literals strings in a string by using regex.
Your code should satisfy these tests:
check_literals(""hello world"", [""world""]) == 'Matched!'
check_literals(""sample text"", [""example""]) == 'Not Matched!'
check_literals(""12345"", [""\d{5}""]) == 'Matched!'
""""""
",check_literals,"def check(candidate):

    assert candidate('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'
    assert candidate('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'
    assert candidate('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'
","import re
def check_literals(text, patterns):
  for pattern in patterns:
    if re.search(pattern,  text):
        return ('Matched!')
    else:
        return ('Not Matched!')","[""check_literals(\""hello world\"", [\""world\""]) == 'Matched!'"", ""check_literals(\""sample text\"", [\""example\""]) == 'Not Matched!'"", ""check_literals(\""12345\"", [\""\\d{5}\""]) == 'Matched!'""]","@startuml

start
:check_literals(text, patterns);

if (text == None or patterns == None) then (no)
:return ""Invalid input"";

end if

if (len(patterns) == 0) then (no)
:return ""No patterns provided"";

end if

if (len(text) == 0) then (no)
:return ""No text provided"";

end if

for each pattern in patterns
:match = re.search(pattern, text);

if (match) then (yes)
:return ""Matched!"";

end if

end for

return ""Not Matched!"";

@enduml"
939,"def sorted_models(models):
""""""
Write a function to sort a list of dictionaries using lambda function.
""""""
",sorted_models,"def check(candidate):

    assert candidate([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]
    assert candidate([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])
    assert candidate([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])
","def sorted_models(models):
 sorted_models = sorted(models, key = lambda x: x['color'])
 return sorted_models","[""sorted_models([{'name': 'ModelX', 'color': 'red'}, {'name': 'ModelY', 'color': 'blue'}, {'name': 'ModelZ', 'color': 'green'}]) == [{'name': 'ModelY', 'color': 'blue'}, {'name': 'ModelZ', 'color': 'green'}, {'name': 'ModelX', 'color': 'red'}]"", ""sorted_models([{'name': 'Car1', 'color': 'yellow'}, {'name': 'Car2', 'color': 'yellow'}, {'name': 'Car3', 'color': 'black'}]) == [{'name': 'Car3', 'color': 'black'}, {'name': 'Car1', 'color': 'yellow'}, {'name': 'Car2', 'color': 'yellow'}]"", ""sorted_models([{'name': 'VehicleA', 'color': 'white'}, {'name': 'VehicleB', 'color': 'white'}, {'name': 'VehicleC', 'color': 'white'}]) == [{'name': 'VehicleA', 'color': 'white'}, {'name': 'VehicleB', 'color': 'white'}, {'name': 'VehicleC', 'color': 'white'}]""]","@startuml
start

:Input: List of dictionaries (models);
if (Is models a list?) then (yes)
    if (Is models empty?) then (yes)
        :Return empty list;
        stop
    else (no)
        :Validate each item in models is a dictionary;
        if (All items are dictionaries?) then (yes)
            :Sort models using lambda function;
            :Return sorted list of models;
            stop
        else (no)
            :Raise ValueError(""All items in the list must be dictionaries"");
            stop
        endif
    endif
else (no)
    :Raise TypeError(""Input must be a list"");
    stop
endif

@enduml"
273,"def substract_elements(test_tup1, test_tup2):
""""""
Write a function to substract the contents of one tuple with corresponding index of other tuple.
Your code should satisfy these tests:
substract_elements((10, 20, 30), (1, 2, 3)) == (9, 18, 27)
substract_elements((5, 15, 25), (5, 15, 25)) == (0, 0, 0)
substract_elements((100, 200, 300), (50, 100, 150)) == (50, 100, 150)
""""""
",substract_elements,"def check(candidate):

    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)
    assert candidate((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)
    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)
","def substract_elements(test_tup1, test_tup2):
  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
  return (res) ","[""substract_elements((10, 20, 30), (1, 2, 3)) == (9, 18, 27)"", ""substract_elements((5, 15, 25), (5, 15, 25)) == (0, 0, 0)"", ""substract_elements((100, 200, 300), (50, 100, 150)) == (50, 100, 150)""]","@startuml

title Subtract Elements

start
:Start;

if (test_tup1 and test_tup2 are not empty) then (yes)
  :Validate input;
  :Subtract elements;
  :Return result;
else (no)
  :Raise error;
end if

@enduml"
375,"def round_num(n,m):
""""""
Write a function to round the given number to the nearest multiple of a specific number.
Your code should satisfy these tests:
round_num(14, 5) == 15
round_num(23, 10) == 20
round_num(7, 3) == 6
""""""
",round_num,"def check(candidate):

    assert candidate(4722,10)==4720
    assert candidate(1111,5)==1110
    assert candidate(219,2)==218
","def round_num(n,m):
    a = (n //m) * m
    b = a + m
    return (b if n - a > b - n else a)","[""round_num(14, 5) == 15"", ""round_num(23, 10) == 20"", ""round_num(7, 3) == 6""]","@startuml
start

:Input number (n) and multiple (m);
if (Is m == 0?) then (yes)
    :Return error: ""Multiple cannot be zero"";
    stop
else (no)
    :Calculate remainder = n % m;
    if (Is remainder >= m / 2?) then (yes)
        :Round up: result = n + (m - remainder);
    else (no)
        :Round down: result = n - remainder;
    endif
    :Return result;
endif

stop
@enduml"
721,"def maxAverageOfPath(cost, N):
""""""
Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.
Your code should satisfy these tests:
maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 5.8
maxAverageOfPath([[5, 3], [1, 4]], 2) == 4.0
maxAverageOfPath([[10, 15, 20], [25, 30, 35], [40, 45, 50]], 3) == 34.0
""""""
",maxAverageOfPath,"def check(candidate):

    assert candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2
    assert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2
    assert candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2
","M = 100
def maxAverageOfPath(cost, N):
	dp = [[0 for i in range(N + 1)] for j in range(N + 1)]
	dp[0][0] = cost[0][0]
	for i in range(1, N):
		dp[i][0] = dp[i - 1][0] + cost[i][0]
	for j in range(1, N):
		dp[0][j] = dp[0][j - 1] + cost[0][j]
	for i in range(1, N):
		for j in range(1, N):
			dp[i][j] = max(dp[i - 1][j],
						dp[i][j - 1]) + cost[i][j]
	return dp[N - 1][N - 1] / (2 * N - 1)","[""maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 5.8"", ""maxAverageOfPath([[5, 3], [1, 4]], 2) == 4.0"", ""maxAverageOfPath([[10, 15, 20], [25, 30, 35], [40, 45, 50]], 3) == 34.0""]","@startuml
start
:Input Validation;
:Check if the input is a square matrix;
if (not) then (return error)
:Calculate the size of the matrix;
:Initialize variables for maxAverage and currentAverage;
:Initialize variables for path and maxPath;
:Initialize a visited array;
:Start DFS from the top left cell;
:Calculate the average of the path;
:Update maxAverage and maxPath if necessary;
:Mark the current cell as visited;
:Try all four directions (up, down, left, right);
if (DFS on the new cell) then (update currentAverage)
:Backtrack;
:Check if all cells have been visited;
if (not) then (repeat the process from the unvisited cell)
:Return maxAverage;
stop
@enduml"
123,"def amicable_numbers_sum(limit):
""""""
Write a function to sum all amicable numbers from 1 to a specified number.
Your code should satisfy these tests:
amicable_numbers_sum(1000) == 504
amicable_numbers_sum(2000) == 2898
amicable_numbers_sum(5000) == 8442
""""""
",amicable_numbers_sum,"def check(candidate):

    assert candidate(999)==504
    assert candidate(9999)==31626
    assert candidate(99)==0
","def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""
    if limit < 1:
        return ""Input must be bigger than 0!""
    amicables = set()
    for num in range(2, limit+1):
        if num in amicables:
            continue
        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)","[""amicable_numbers_sum(1000) == 504"", ""amicable_numbers_sum(2000) == 2898"", ""amicable_numbers_sum(5000) == 8442""]","@startuml
start
:Input Validation;
if (limit > 0) then (true)
  :Calculate sum of divisors;
  :Check if sum is not equal to number;
  if (sum != number) then (true)
    :Check if sum is within limit;
    if (sum <= limit) then (true)
      :Add sum to result;
    else (false)
      :Continue to next number;
    endif
  else (false)
    :Continue to next number;
  endif
else (false)
  :Return error message;
endif
:Return result;
stop
@enduml"
142,"def count_samepair(list1,list2,list3):
""""""
Write a function to count the same pair in three given lists.
Your code should satisfy these tests:
count_samepair([1, 2, 3], [1, 2, 4], [1, 2, 3]) == 2
count_samepair(['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'd', 'c']) == 2
count_samepair([True, False, True], [True, True, True], [True, False, False]) == 1
""""""
",count_samepair,"def check(candidate):

    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3
    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4
    assert candidate([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5
","def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result","[""count_samepair([1, 2, 3], [1, 2, 4], [1, 2, 3]) == 2"", ""count_samepair(['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'd', 'c']) == 2"", ""count_samepair([True, False, True], [True, True, True], [True, False, False]) == 1""]","@startuml
start

:Input three lists: list1, list2, list3;
:Initialize counter = 0;
:Initialize index = 0;

while (index < length of list1) do
    if (list1[index] == list2[index] == list3[index]) then (yes)
        :counter += 1;
    else (no)
        :Do nothing;
    endif
    :index += 1;
endwhile

:Return counter;

stop
@enduml"
77,"def is_Diff(n):
""""""
Write a python function to find the difference between sum of even and odd digits.
Your code should satisfy these tests:
is_Diff(22) == True
is_Diff(121) == True
is_Diff(45) == False
is_Diff(99) == True
is_Diff(123) == False
""""""
",is_Diff,"def check(candidate):

    assert candidate (12345) == False
    assert candidate(1212112) == True
    assert candidate(1212) == False
","def is_Diff(n):
    return (n % 11 == 0) ","[""is_Diff(22) == True"", ""is_Diff(121) == True"", ""is_Diff(45) == False"", ""is_Diff(99) == True"", ""is_Diff(123) == False""]","@startuml
start

:Input number n;
if (Is n a valid integer?) then (yes)
    :Initialize even_sum = 0, odd_sum = 0;
    :Convert n to a string for digit-wise processing;
    :Loop through each digit in n;
    if (Is digit even?) then (yes)
        :Add digit to even_sum;
    else (no)
        :Add digit to odd_sum;
    endif
    :Calculate difference = even_sum - odd_sum;
    if (Is difference == 0?) then (yes)
        :Return False;
    else (no)
        :Return True;
    endif
else (no)
    :Return ""Invalid input: n must be an integer"";
endif

stop
@enduml"
756,"def text_match_zero_one(text):
""""""
Write a function that matches a string that has an a followed by zero or one 'b'.
Your code should satisfy these tests:
text_match_zero_one('ac') == 'Found a match!'
text_match_zero_one('abc') == 'Found a match!'
text_match_zero_one('b') == 'Not matched!'
text_match_zero_one('ad') == 'Found a match!'
text_match_zero_one('axyz') == 'Found a match!'
""""""
",text_match_zero_one,"def check(candidate):

    assert candidate(""ac"")==('Found a match!')
    assert candidate(""dc"")==('Not matched!')
    assert candidate(""abbbba"")==('Found a match!')
","import re
def text_match_zero_one(text):
        patterns = 'ab?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","[""text_match_zero_one('ac') == 'Found a match!'"", ""text_match_zero_one('abc') == 'Found a match!'"", ""text_match_zero_one('b') == 'Not matched!'"", ""text_match_zero_one('ad') == 'Found a match!'"", ""text_match_zero_one('axyz') == 'Found a match!'""]","@startuml

start

:text_match_zero_one(text);

if (text.startswith('a') and (text.endswith('b') or text.endswith(''))):
  :Found a match!;
else:
  :Not matched!;

stop

@enduml"
32,"def max_Prime_Factors(n):
""""""
Write a python function to find the largest prime factor of a given number.
Your code should satisfy these tests:
max_Prime_Factors(10) == 5
max_Prime_Factors(15) == 5
max_Prime_Factors(21) == 7
""""""
",max_Prime_Factors,"def check(candidate):

    assert candidate(15) == 5
    assert candidate(6) == 3
    assert candidate(2) == 2
","import math
def max_Prime_Factors (n):
    maxPrime = -1
    while n%2 == 0:
        maxPrime = 2
        n >>= 1
    for i in range(3,int(math.sqrt(n))+1,2):
        while n % i == 0:
            maxPrime = i
            n = n / i
    if n > 2:
        maxPrime = n
    return int(maxPrime)","[""max_Prime_Factors(10) == 5"", ""max_Prime_Factors(15) == 5"", ""max_Prime_Factors(21) == 7""]","@startuml

title max_Prime_Factors

start
:max_Prime_Factors(n);

if (n <= 1) then (no)
:return 1;
else (yes)
:factors = [];

while (n > 1) do
:factor = 2;

while (n % factor == 0) do
:n = n / factor;
:factors.append(factor);

end while

end while

:return max(factors);

end if

@enduml"
562,"def Find_Max_Length(lst):
""""""
Write a python function to find the maximum length of sublist.
Your code should satisfy these tests:
Find_Max_Length([""apple"", ""banana"", ""cherry""]) == 6
Find_Max_Length([""dog"", ""cat"", ""elephant""]) == 8
Find_Max_Length(["""", ""a"", ""ab""]) == 2
""""""
",Find_Max_Length,"def check(candidate):

    assert candidate([[1],[1,4],[5,6,7,8]]) == 4
    assert candidate([[0,1],[2,2,],[3,2,1]]) == 3
    assert candidate([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5
","def Find_Max_Length(lst):
    maxLength = max(len(x) for x in lst )
    return maxLength ","[""Find_Max_Length([\""apple\"", \""banana\"", \""cherry\""]) == 6"", ""Find_Max_Length([\""dog\"", \""cat\"", \""elephant\""]) == 8"", ""Find_Max_Length([\""\"", \""a\"", \""ab\""]) == 2""]","@startuml
start

:Input list of strings (lst);
:Initialize max_length = 0;

if (Is lst empty?) then (yes)
  :Return 0;
else (no)
  :Iterate over each string in lst;
  :Calculate length of current string;
  if (Is current length > max_length?) then (yes)
    :Update max_length with current length;
  else (no)
    :Continue to next string;
  endif
endif

:Return max_length;

stop
@enduml"
248,"def harmonic_sum(n):
""""""
Write a function to calculate the harmonic sum of n-1.
Your code should satisfy these tests:
harmonic_sum(1) == 1
harmonic_sum(5) == 2.283333333333333
harmonic_sum(10) == 2.9289682539682538
""""""
",harmonic_sum,"def check(candidate):

    assert candidate(7) == 2.5928571428571425
    assert candidate(4) == 2.083333333333333
    assert candidate(19) == 3.547739657143682
","def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) ","[""harmonic_sum(1) == 1"", ""harmonic_sum(5) == 2.283333333333333"", ""harmonic_sum(10) == 2.9289682539682538""]","@startuml
start
:Input Validation;
if (n > 0) then
    :Initialize sum = 0;
    :Initialize i = 1;
    :Initialize harmonic = 0;
    while (i <= n) is (True)
        :harmonic = (1 / i);
        :sum = sum + harmonic;
        :i = i + 1;
    endwhile
    :Return sum;
else
    :Return ""Error: Input must be greater than 0"";
endif
stop
@enduml"
582,"def my_dict(dict1):
""""""
Write a function to check if a dictionary is empty or not.
Your code should satisfy these tests:
my_dict({}) == True
my_dict({'key': 'value'}) == False
my_dict({'a': 1, 'b': 2}) == False
""""""
",my_dict,"def check(candidate):

    assert candidate({10})==False
    assert candidate({11})==False
    assert candidate({})==True
","def my_dict(dict1):
  if bool(dict1):
     return False
  else:
     return True","[""my_dict({}) == True"", ""my_dict({'key': 'value'}) == False"", ""my_dict({'a': 1, 'b': 2}) == False""]","@startuml

start
: my_dict(dict1);

if (dict1 is empty) then (true)
: return True;
else (false)
: return False;

@enduml"
923,"def super_seq(X, Y, m, n):
""""""
Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.
Your code should satisfy these tests:
super_seq(""abc"", ""ac"", 3, 2) == 3
super_seq(""abcdef"", ""ace"", 6, 3) == 6
super_seq(""xyz"", ""xyx"", 3, 3) == 4
""""""
",super_seq,"def check(candidate):

    assert candidate(""AGGTAB"", ""GXTXAYB"", 6, 7) == 9
    assert candidate(""feek"", ""eke"", 4, 3) == 5
    assert candidate(""PARRT"", ""RTA"", 5, 3) == 6
","def super_seq(X, Y, m, n):
	if (not m):
		return n
	if (not n):
		return m
	if (X[m - 1] == Y[n - 1]):
		return 1 + super_seq(X, Y, m - 1, n - 1)
	return 1 + min(super_seq(X, Y, m - 1, n),	super_seq(X, Y, m, n - 1))","[""super_seq(\""abc\"", \""ac\"", 3, 2) == 3"", ""super_seq(\""abcdef\"", \""ace\"", 6, 3) == 6"", ""super_seq(\""xyz\"", \""xyx\"", 3, 3) == 4""]","@startuml

start
: super_seq(X, Y, m, n);

if (X == Y) then (yes)
: return m;
else (no)
: find_common_subsequence(X, Y);

if (common_subsequence == """") then (yes)
: return 0;
else (no)
: return m + n - common_subsequence.length;

@enduml"
855,"def check_Even_Parity(x):
""""""
Write a python function to check for even parity of a given number.
Your code should satisfy these tests:
check_Even_Parity(5) == True
check_Even_Parity(7) == False
check_Even_Parity(10) == True
""""""
",check_Even_Parity,"def check(candidate):

    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(18) == True
","def check_Even_Parity(x):
    parity = 0
    while (x != 0):
        x = x & (x - 1)
        parity += 1
    if (parity % 2 == 0):
        return True
    else:
        return False","[""check_Even_Parity(5) == True"", ""check_Even_Parity(7) == False"", ""check_Even_Parity(10) == True""]","@startuml
start

:Input number x;
:Count the number of 1s in the binary representation of x;
if (Number of 1s is even?) then (yes)
    :Return True;
else (no)
    :Return False;
endif

stop
@enduml"
467,"def decimal_to_Octal(deciNum):
""""""
Write a python function to convert decimal number to octal number.
Your code should satisfy these tests:
decimal_to_Octal(8) == 10
decimal_to_Octal(64) == 100
decimal_to_Octal(234) == 352
""""""
",decimal_to_Octal,"def check(candidate):

    assert candidate(10) == 12
    assert candidate(2) == 2
    assert candidate(33) == 41
","def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8;
    return (octalNum)","[""decimal_to_Octal(8) == 10"", ""decimal_to_Octal(64) == 100"", ""decimal_to_Octal(234) == 352""]","@startuml
start

:Input decimal number (deciNum);
if (Is deciNum a valid integer?) then (yes)
    if (Is deciNum >= 0?) then (yes)
        :Initialize octalNum as empty string;
        :Initialize temp = deciNum;
        while (temp > 0?) is (yes)
            :Calculate remainder = temp % 8;
            :Prepend remainder to octalNum;
            :Update temp = temp // 8;
        endwhile (no)
        :Return octalNum as the result;
    else (no)
        :Return ""Error: Input must be a non-negative integer"";
    endif
else (no)
    :Return ""Error: Input must be a valid integer"";
endif

stop
@enduml"
622,"def get_median(arr1, arr2, n):
""""""
Write a function to find the median of two sorted arrays of same size.
Your code should satisfy these tests:
get_median([1, 3, 8], [7, 9, 10], 3) == 7.5
get_median([1, 2, 3, 4], [5, 6, 7, 8], 4) == 4.5
get_median([10, 20, 30, 40, 50], [5, 15, 25, 35, 45], 5) == 27.5
""""""
",get_median,"def check(candidate):

    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0
    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5
    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0
","def get_median(arr1, arr2, n):
  i = 0
  j = 0
  m1 = -1
  m2 = -1
  count = 0
  while count < n + 1:
    count += 1
    if i == n:
      m1 = m2
      m2 = arr2[0]
      break
    elif j == n:
      m1 = m2
      m2 = arr1[0]
      break
    if arr1[i] <= arr2[j]:
      m1 = m2
      m2 = arr1[i]
      i += 1
    else:
      m1 = m2
      m2 = arr2[j]
      j += 1
  return (m1 + m2)/2","[""get_median([1, 3, 8], [7, 9, 10], 3) == 7.5"", ""get_median([1, 2, 3, 4], [5, 6, 7, 8], 4) == 4.5"", ""get_median([10, 20, 30, 40, 50], [5, 15, 25, 35, 45], 5) == 27.5""]","@startuml
start
:Check if the size of arr1 and arr2 are equal;
if (size(arr1) == size(arr2)) then
  :Merge arr1 and arr2;
  :Sort the merged array;
  :Calculate the median;
  if (size(merged_array) is even) then
    :The median is the average of the two middle numbers;
  else
    :The median is the middle number;
  endif
else
  :Return an error message;
endif
stop
@enduml"
3,"def is_not_prime(n):
""""""
Write a python function to identify non-prime numbers.
Your code should satisfy these tests:
is_not_prime(4) == True
is_not_prime(17) == False
is_not_prime(1) == False
""""""
",is_not_prime,"def check(candidate):

    assert candidate(2) == False
    assert candidate(10) == True
    assert candidate(35) == True
","import math
def is_not_prime(n):
    result = False
    for i in range(2,int(math.sqrt(n)) + 1):
        if n % i == 0:
            result = True
    return result","[""is_not_prime(4) == True"", ""is_not_prime(17) == False"", ""is_not_prime(1) == False""]","@startuml
start

:Input number n;
if (n <= 1?) then (yes)
    :Return False;
    stop
else (no)
    if (n == 2?) then (yes)
        :Return False;
        stop
    else (no)
        :Initialize i = 2;
        while (i * i <= n?) is (yes)
            if (n % i == 0?) then (yes)
                :Return True;
                stop
            else (no)
                :Increment i by 1;
            endif
        endwhile
        :Return False;
        stop
    endif
endif

@enduml"
620,"def largest_subset(a, n):
""""""
Write a function to find the largest subset where each pair is divisible.
Your code should satisfy these tests:
largest_subset([1, 2, 3, 4, 5, 6], 6) == 3
largest_subset([10, 5, 3, 15, 20], 5) == 3
largest_subset([18, 1, 3, 6, 2, 9], 6) == 5
""""""
",largest_subset,"def check(candidate):

    assert candidate([ 1, 3, 6, 13, 17, 18 ], 6) == 4
    assert candidate([10, 5, 3, 15, 20], 5) == 3
    assert candidate([18, 1, 3, 6, 13, 17], 6) == 4
","def largest_subset(a, n):
	dp = [0 for i in range(n)]
	dp[n - 1] = 1;
	for i in range(n - 2, -1, -1):
		mxm = 0;
		for j in range(i + 1, n):
			if a[j] % a[i] == 0 or a[i] % a[j] == 0:
				mxm = max(mxm, dp[j])
		dp[i] = 1 + mxm
	return max(dp)","[""largest_subset([1, 2, 3, 4, 5, 6], 6) == 3"", ""largest_subset([10, 5, 3, 15, 20], 5) == 3"", ""largest_subset([18, 1, 3, 6, 2, 9], 6) == 5""]","@startuml
start
:Input: a[]
:Input: n
:Sort a[] in ascending order
:Initialize result as 1
:Initialize longest_increasing_subsequence as 1
for i in range 1 to n
    for j in range 0 to i
        if a[i] % a[j] == 0
            longest_increasing_subsequence = max(longest_increasing_subsequence, dp[i] + 1)
        endif
    endfor
    result = max(result, longest_increasing_subsequence)
endfor
:Return result
stop
@enduml"
118,"def string_to_list(string):
""""""
[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.
Your code should satisfy these tests:
string_to_list(""hello world"") == ['hello', 'world']
string_to_list(""one two three"") == ['one', 'two', 'three']
string_to_list(""Python is fun"") == ['Python', 'is', 'fun']
""""""
",string_to_list,"def check(candidate):

    assert candidate(""python programming"")==['python','programming']
    assert candidate(""lists tuples strings"")==['lists','tuples','strings']
    assert candidate(""write a program"")==['write','a','program']
","def string_to_list(string):
    lst = list(string.split("" ""))
    return lst","[""string_to_list(\""hello world\"") == ['hello', 'world']"", ""string_to_list(\""one two three\"") == ['one', 'two', 'three']"", ""string_to_list(\""Python is fun\"") == ['Python', 'is', 'fun']""]","@startuml
start

:Input string;
if (Is string empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Split string by spaces into a list;
    :Return the resulting list;
    stop
endif

@enduml"
547,"def Total_Hamming_Distance(n):
""""""
Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.
Your code should satisfy these tests:
Total_Hamming_Distance(8) == 15
Total_Hamming_Distance(10) == 18
Total_Hamming_Distance(16) == 31
Total_Hamming_Distance(256) == 511
Total_Hamming_Distance(3) == 4
""""""
",Total_Hamming_Distance,"def check(candidate):

    assert candidate(4) == 7
    assert candidate(2) == 3
    assert candidate(5) == 8
","def Total_Hamming_Distance(n):
    i = 1
    sum = 0
    while (n // i > 0):
        sum = sum + n // i
        i = i * 2
    return sum","[""Total_Hamming_Distance(8) == 15"", ""Total_Hamming_Distance(10) == 18"", ""Total_Hamming_Distance(16) == 31"", ""Total_Hamming_Distance(256) == 511"", ""Total_Hamming_Distance(3) == 4""]","@startuml
start
:Input Validation;
if (n > 0) then
    :Calculate Hamming Distance;
    loop for i from 1 to n
        :Calculate Hamming Distance;
        :Add to total;
    endloop
else
    :Invalid Input;
endif
:Return total;
stop
@enduml"
885,"def is_Isomorphic(str1,str2):
""""""
Write a python function to check whether the two given strings are isomorphic to each other or not.
Your code should satisfy these tests:
is_Isomorphic(""egg"", ""add"") == True
is_Isomorphic(""foo"", ""bar"") == False
is_Isomorphic(""paper"", ""title"") == True
""""""
",is_Isomorphic,"def check(candidate):

    assert candidate(""paper"",""title"") == True
    assert candidate(""ab"",""ba"") == True
    assert candidate(""ab"",""aa"") == False
","def is_Isomorphic(str1,str2):
    dict_str1 = {}
    dict_str2 = {}
    for i, value in enumerate(str1):
        dict_str1[value] = dict_str1.get(value,[]) + [i]
    for j, value in enumerate(str2):
        dict_str2[value] = dict_str2.get(value,[]) + [j]
    if sorted(dict_str1.values()) == sorted(dict_str2.values()):
        return True
    else:
        return False","[""is_Isomorphic(\""egg\"", \""add\"") == True"", ""is_Isomorphic(\""foo\"", \""bar\"") == False"", ""is_Isomorphic(\""paper\"", \""title\"") == True""]","@startuml

title is_Isomorphic

start
:is_Isomorphic(str1, str2);

if (str1 == str2) then (yes)
:return True;
else (no)
:return False;
endif

@enduml"
289,"def odd_Days(N):
""""""
Write a python function to calculate the number of odd days in a given year.
Your code should satisfy these tests:
odd_Days(2021) == 5
odd_Days(1996) == 2
odd_Days(2100) == 5
odd_Days(1800) == 3
odd_Days(1776) == 2
""""""
",odd_Days,"def check(candidate):

    assert candidate(100) == 5
    assert candidate(50) ==6
    assert candidate(75) == 2
","def odd_Days(N):
    hund1 = N // 100
    hund4 = N // 400
    leap = N >> 2
    ordd = N - leap
    if (hund1):
        ordd += hund1
        leap -= hund1
    if (hund4):
        ordd -= hund4
        leap += hund4
    days = ordd + leap * 2
    odd = days % 7
    return odd ","[""odd_Days(2021) == 5"", ""odd_Days(1996) == 2"", ""odd_Days(2100) == 5"", ""odd_Days(1800) == 3"", ""odd_Days(1776) == 2""]","@startuml
start
:odd_Days(N);
if (N is a leap year?) then (yes)
  :Return 2;
else (no)
  :Calculate century code;
  :Calculate year code;
  :Calculate total odd days;
  if (total odd days > 7) then (yes)
    :Reduce total odd days by 7;
  endif
  :Return total odd days;
endif
stop
@enduml"
679,"def access_key(ditionary,key):
""""""
Write a function to access dictionary key’s element by index.
Your code should satisfy these tests:
access_key({'a': 1, 'b': 2, 'c': 3}, 0) == 'a'
access_key({'x': 10, 'y': 20, 'z': 30}, 2) == 'z'
access_key({'m': 100, 'n': 200, 'o': 300, 'p': 400}, 1) == 'n'
""""""
",access_key,"def check(candidate):

    assert candidate({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'
    assert candidate({'python':10, 'java': 20, 'C++':30},2)== 'C++'
    assert candidate({'program':15,'computer':45},1)== 'computer'
","def access_key(ditionary,key):
  return list(ditionary)[key]","[""access_key({'a': 1, 'b': 2, 'c': 3}, 0) == 'a'"", ""access_key({'x': 10, 'y': 20, 'z': 30}, 2) == 'z'"", ""access_key({'m': 100, 'n': 200, 'o': 300, 'p': 400}, 1) == 'n'""]","@startuml

start
:access_key(dictionary, key);

if (key < 0 or key >= len(dictionary)) then (no)
:Invalid key;
stop

else (yes)
:Valid key;

if (key == 0) then (yes)
:Access first element;
stop

else (no)
:Access element by index;
stop

@enduml"
359,"def Check_Solution(a,b,c):
""""""
Write a python function to check whether one root of the quadratic equation is twice of the other or not.
Your code should satisfy these tests:
Check_Solution(1, 3, 2) == ""Yes""
Check_Solution(2, 4, 1) == ""No""
Check_Solution(0, 0, 0) == ""Yes""
""""""
",Check_Solution,"def check(candidate):

    assert candidate(1,3,2) == ""Yes""
    assert candidate(1,2,3) == ""No""
    assert candidate(1,-5,6) == ""No""
","def Check_Solution(a,b,c):
    if (2*b*b == 9*a*c):
        return (""Yes"");
    else:
        return (""No""); ","[""Check_Solution(1, 3, 2) == \""Yes\"""", ""Check_Solution(2, 4, 1) == \""No\"""", ""Check_Solution(0, 0, 0) == \""Yes\""""]","@startuml
start
:Input a, b, c;
if (a = 0 and b = 0 and c = 0) then (Yes)
:Return ""Yes"";
else
:Calculate the discriminant (b^2 - 4ac);
if (discriminant < 0) then (No)
:Return ""No"";
elseif (discriminant = 0) then (Yes)
:Return ""Yes"";
else (Yes)
:Calculate the roots;
if (root1 = 2 * root2) then (Yes)
:Return ""Yes"";
elseif (root2 = 2 * root1) then (Yes)
:Return ""Yes"";
else (No)
:Return ""No"";
endif
endif
endif
end
@enduml"
935,"def series_sum(number):
""""""
Write a function to calculate the sum of series 1²+2²+3²+….+n².
Your code should satisfy these tests:
series_sum(1) == 1
series_sum(3) == 14
series_sum(5) == 55
""""""
",series_sum,"def check(candidate):

    assert candidate(6)==91
    assert candidate(7)==140
    assert candidate(12)==650
","def series_sum(number):
 total = 0
 total = (number * (number + 1) * (2 * number + 1)) / 6
 return total","[""series_sum(1) == 1"", ""series_sum(3) == 14"", ""series_sum(5) == 55""]","@startuml
start

:Input number (n);
if (n <= 0?) then (yes)
  :Print ""Input must be a positive integer"";
  stop
else (no)
  :Initialize sum = 0;
  :Initialize i = 1;
  while (i <= n?) is (yes)
    :sum = sum + i²;
    :i = i + 1;
  endwhile (no)
  :Return sum;
  stop
endif

@enduml"
36,"def find_Nth_Digit(p,q,N):
""""""
Write a python function to find the nth digit in the proper fraction of two given numbers.
Your code should satisfy these tests:
find_Nth_Digit(1, 3, 1) == 3
find_Nth_Digit(2, 5, 2) == 0
find_Nth_Digit(3, 7, 3) == 8
""""""
",find_Nth_Digit,"def check(candidate):

    assert candidate(1,2,1) == 5
    assert candidate(3,5,1) == 6
    assert candidate(5,6,5) == 3
","def find_Nth_Digit(p,q,N) :
    while (N > 0) :
        N -= 1;
        p *= 10;
        res = p // q;
        p %= q;
    return res;  ","[""find_Nth_Digit(1, 3, 1) == 3"", ""find_Nth_Digit(2, 5, 2) == 0"", ""find_Nth_Digit(3, 7, 3) == 8""]","@startuml
start
:Input Validation;
:Check if p, q, N are integers;
if (Not Valid?) then
    :Return Error Message;
    stop
endif
:Calculate Fraction;
:Convert Fraction to String;
:Find Nth Digit;
:Return Nth Digit;
stop
@enduml"
897,"def is_Word_Present(sentence,word):
""""""
Write a python function to check whether the word is present in a given sentence or not.
Your code should satisfy these tests:
is_Word_Present(""The quick brown fox jumps over the lazy dog"", ""fox"") == True
is_Word_Present(""Hello world"", ""planet"") == False
is_Word_Present(""Python programming is fun"", ""Python"") == True
""""""
",is_Word_Present,"def check(candidate):

    assert candidate(""machine learning"",""machine"") == True
    assert candidate(""easy"",""fun"") == False
    assert candidate(""python language"",""code"") == False
","def is_Word_Present(sentence,word):
    s = sentence.split("" "")
    for i in s:
        if (i == word):
            return True
    return False","[""is_Word_Present(\""The quick brown fox jumps over the lazy dog\"", \""fox\"") == True"", ""is_Word_Present(\""Hello world\"", \""planet\"") == False"", ""is_Word_Present(\""Python programming is fun\"", \""Python\"") == True""]","@startuml

title is_Word_Present

start
:is_Word_Present(sentence, word);

if (sentence == None) then (no)
:return False;

else (yes)
:sentence = sentence.lower();
:word = word.lower();

if (word in sentence) then (yes)
:return True;

else (no)
:return False;

@enduml"
917,"def text_uppercase_lowercase(text):
""""""
Write a function to find the sequences of one upper case letter followed by lower case letters.
Your code should satisfy these tests:
text_uppercase_lowercase('HelloWorld') == 'Found a match!'
text_uppercase_lowercase('PYTHON') == 'Not matched!'
text_uppercase_lowercase('javaSCRIPT') == 'Not matched!'
""""""
",text_uppercase_lowercase,"def check(candidate):

    assert candidate(""AaBbGg"")==('Found a match!')
    assert candidate(""aA"")==('Not matched!')
    assert candidate(""PYTHON"")==('Not matched!')
","import re
def text_uppercase_lowercase(text):
        patterns = '[A-Z]+[a-z]+$'
        if re.search(patterns, text):
                return 'Found a match!'
        else:
                return ('Not matched!')","[""text_uppercase_lowercase('HelloWorld') == 'Found a match!'"", ""text_uppercase_lowercase('PYTHON') == 'Not matched!'"", ""text_uppercase_lowercase('javaSCRIPT') == 'Not matched!'""]","@startuml
start

:Input text;
if (Is text a string?) then (yes)
    if (Does text match the pattern: one uppercase letter followed by lowercase letters?) then (yes)
        :Print 'Found a match!';
    else (no)
        :Print 'Not matched!';
    endif
else (no)
    :Print 'Invalid input!';
endif

stop
@enduml"
847,"def lcopy(xs):
""""""
Write a python function to copy a list from a singleton tuple.
Your code should satisfy these tests:
lcopy([1, 2, 3]) == [1, 2, 3]
lcopy(['a', 'b', 'c']) == ['a', 'b', 'c']
lcopy([]) == []
""""""
",lcopy,"def check(candidate):

    assert candidate([1, 2, 3]) == [1, 2, 3]
    assert candidate([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]
    assert candidate([4, 5, 6]) == [4, 5, 6]

","def lcopy(xs):
  return xs[:]
","[""lcopy([1, 2, 3]) == [1, 2, 3]"", ""lcopy(['a', 'b', 'c']) == ['a', 'b', 'c']"", ""lcopy([]) == []""]","@startuml
start

:Input: Singleton tuple (xs);
if (Is xs a list?) then (yes)
    :Create a copy of the list (xs.copy());
    :Return the copied list;
else (no)
    :Return an empty list or handle invalid input;
endif

stop
@enduml"
695,"def check_greater(test_tup1, test_tup2):
""""""
Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.
Your code should satisfy these tests:
check_greater((1, 2, 3), (2, 3, 4)) == True
check_greater((5, 6, 7), (4, 5, 6)) == False
check_greater((0, 0, 0), (1, 1, 1)) == True
""""""
",check_greater,"def check(candidate):

    assert candidate((10, 4, 5), (13, 5, 18)) == True
    assert candidate((1, 2, 3), (2, 1, 4)) == False
    assert candidate((4, 5, 6), (5, 6, 7)) == True
","def check_greater(test_tup1, test_tup2):
  res = all(x < y for x, y in zip(test_tup1, test_tup2))
  return (res) ","[""check_greater((1, 2, 3), (2, 3, 4)) == True"", ""check_greater((5, 6, 7), (4, 5, 6)) == False"", ""check_greater((0, 0, 0), (1, 1, 1)) == True""]","@startuml

start

:check_greater((test_tup1, test_tup2));

if (test_tup1.length != test_tup2.length) then (
  :return False;
) else (
  for (i = 0; i < test_tup1.length; i++) do (
    if (test_tup1[i] > test_tup2[i]) then (
      :return False;
    )
  )
  :return True;
)

@enduml"
814,"def rombus_area(p,q):
""""""
Write a function to find the area of a rombus.
Your code should satisfy these tests:
rombus_area(10, 5) == 25.0
rombus_area(8, 6) == 24.0
rombus_area(12, 7) == 42.0
""""""
",rombus_area,"def check(candidate):

    assert candidate(10,20)==100
    assert candidate(10,5)==25
    assert candidate(4,2)==4
","def rombus_area(p,q):
  area=(p*q)/2
  return area","[""rombus_area(10, 5) == 25.0"", ""rombus_area(8, 6) == 24.0"", ""rombus_area(12, 7) == 42.0""]","@startuml
start

:Input p and q (diagonals of the rhombus);
if (Are p and q positive numbers?) then (yes)
    :Calculate area using formula: area = (p * q) / 2;
    :Return area;
else (no)
    :Return ""Invalid input: Diagonals must be positive numbers"";
endif

stop
@enduml"
194,"def octal_To_Decimal(n):
""""""
Write a python function to convert octal number to decimal number.
Your code should satisfy these tests:
octal_To_Decimal(10) == 8
octal_To_Decimal(77) == 63
octal_To_Decimal(123) == 83
""""""
",octal_To_Decimal,"def check(candidate):

    assert candidate(25) == 21
    assert candidate(30) == 24
    assert candidate(40) == 32
","def octal_To_Decimal(n):
    num = n;
    dec_value = 0;
    base = 1;
    temp = num;
    while (temp):
        last_digit = temp % 10;
        temp = int(temp / 10);
        dec_value += last_digit*base;
        base = base * 8;
    return dec_value; ","[""octal_To_Decimal(10) == 8"", ""octal_To_Decimal(77) == 63"", ""octal_To_Decimal(123) == 83""]","@startuml

title Octal to Decimal Conversion

start
:Start;

if (n == 0) then (false)
:Exit;

else
:Convert octal to decimal;

decimal = 0;

for (i = 0; i < len(n); i++)
:Process digit;

decimal = decimal * 8 + n[i];

end for

:Return decimal;

end if

stop
:End;

@enduml"
491,"def sum_gp(a,n,r):
""""""
Write a function to find the sum of geometric progression series.
Your code should satisfy these tests:
sum_gp(2, 3, 2) == 14.0
sum_gp(1, 5, 3) == 121.0
sum_gp(5, 4, 0.5) == 9.375
""""""
",sum_gp,"def check(candidate):

    assert candidate(1,5,2)==31
    assert candidate(1,5,4)==341
    assert candidate(2,6,3)==728
","import math
def sum_gp(a,n,r):
 total = (a * (1 - math.pow(r, n ))) / (1- r)
 return total","[""sum_gp(2, 3, 2) == 14.0"", ""sum_gp(1, 5, 3) == 121.0"", ""sum_gp(5, 4, 0.5) == 9.375""]","@startuml

title Sum of Geometric Progression Series

start
:Calculate the sum of the geometric progression series;

if (n == 0) then (
  :Return 0;
  stop
)

if (r == 1) then (
  :Return a;
  stop
)

:Calculate the sum of the first n terms;
:Calculate the sum of the remaining terms;

if (n > 1) then (
  :Calculate the sum of the first n-1 terms;
  :Calculate the sum of the remaining terms;
)

:Return the sum of the geometric progression series;

stop

@enduml"
386,"def swap_count(s):
""""""
Write a function to find out the minimum no of swaps required for bracket balancing in the given string.
Your code should satisfy these tests:
swap_count(""[[][]]"") == 0
swap_count(""]][["") == 3
swap_count(""[]][[]"") == 1
swap_count(""[[[]]]"") == 0
swap_count(""][][]["") == 3
""""""
",swap_count,"def check(candidate):

    assert candidate(""[]][]["") == 2
    assert candidate(""[[][]]"") == 0
    assert candidate(""[[][]]]["") == 1
","def swap_count(s):
	chars = s
	count_left = 0
	count_right = 0
	swap = 0
	imbalance = 0;
	for i in range(len(chars)):
		if chars[i] == '[':
			count_left += 1
			if imbalance > 0:
				swap += imbalance
				imbalance -= 1
		elif chars[i] == ']':
			count_right += 1
			imbalance = (count_right - count_left)
	return swap","[""swap_count(\""[[][]]\"") == 0"", ""swap_count(\""]][[\"") == 3"", ""swap_count(\""[]][[]\"") == 1"", ""swap_count(\""[[[]]]\"") == 0"", ""swap_count(\""][][][\"") == 3""]","@startuml
start
:Input: s;
:Initialize: swaps = 0;
:Initialize: stack = 0;
if (s is empty) then (yes)
    stop
endif
:For each character in s:
    if (character == ""["") then (yes)
        :stack = stack + 1;
    elseif (character == ""]"") then (yes)
        if (stack == 0) then (yes)
            :swaps = swaps + 1;
            :stack = stack - 1;
        else (no)
            :stack = stack - 1;
        endif
    else (no)
        stop
    endif
endfor
:Output: swaps;
stop
@enduml"
298,"def intersection_nested_lists(l1, l2):
""""""
Write a function to find the nested list elements which are present in another list.
Your code should satisfy these tests:
intersection_nested_lists([1, 2, 3], [[1, 2], [2, 3], [3, 4]]) == [[1, 2], [2, 3], [3]]
intersection_nested_lists([4, 5], [[4], [5], [6]]) == [[4], [5], []]
intersection_nested_lists([7, 8], [[], [8, 9], [7, 9]]) == [[], [8], [7]]
intersection_nested_lists([10], [[10], [10, 11], [12]]) == [[10], [10], []]
intersection_nested_lists([13, 14], [[15], [16], [17]]) == [[], [], []]
""""""
",intersection_nested_lists,"def check(candidate):

    assert candidate( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]
    assert candidate([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]
    assert candidate(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]
","def intersection_nested_lists(l1, l2):
    result = [[n for n in lst if n in l1] for lst in l2]
    return result","[""intersection_nested_lists([1, 2, 3], [[1, 2], [2, 3], [3, 4]]) == [[1, 2], [2, 3], [3]]"", ""intersection_nested_lists([4, 5], [[4], [5], [6]]) == [[4], [5], []]"", ""intersection_nested_lists([7, 8], [[], [8, 9], [7, 9]]) == [[], [8], [7]]"", ""intersection_nested_lists([10], [[10], [10, 11], [12]]) == [[10], [10], []]"", ""intersection_nested_lists([13, 14], [[15], [16], [17]]) == [[], [], []]""]","@startuml
start
:Input l1, l2;
:Initialize result as empty list;
if (l1 is empty?) then (yes)
    :Return result;
else (no)
    :For each sublist in l2;
    :   Initialize match as empty list;
    :   For each element in sublist;
    :       if (element in l1) then (yes)
    :           :Add element to match;
    :       endif
    :   endfor
    :   Add match to result;
    :endif
endfor
:Return result;
stop
@enduml"
339,"def find_Divisor(x,y):
""""""
Write a python function to find the maximum occuring divisor in an interval.
Your code should satisfy these tests:
find_Divisor(5, 5) == 5
find_Divisor(10, 20) == 2
find_Divisor(7, 3) == 2
""""""
",find_Divisor,"def check(candidate):

    assert candidate(2,2) == 2
    assert candidate(2,5) == 2
    assert candidate(5,10) == 2
","def find_Divisor(x,y):
    if (x==y):
        return y
    return 2","[""find_Divisor(5, 5) == 5"", ""find_Divisor(10, 20) == 2"", ""find_Divisor(7, 3) == 2""]","@startuml
start

:Input x and y;
if (x > y?) then (yes)
    :Swap x and y;
else (no)
endif

:Initialize an empty dictionary (divisor_count);
:Initialize max_divisor = 1;
:Initialize max_count = 0;

repeat
    :Iterate through numbers from 2 to y (i);
    :Initialize count = 0;
    repeat
        :Iterate through numbers from x to y (j);
        if (j % i == 0?) then (yes)
            :Increment count;
        else (no)
        endif
    repeat while (j <= y) is (yes) -> (no)
    :Update divisor_count[i] = count;
    if (count > max_count?) then (yes)
        :Update max_count = count;
        :Update max_divisor = i;
    else (no)
    endif
repeat while (i <= y) is (yes) -> (no)

if (max_count == 0?) then (yes)
    :Set max_divisor = 1;
else (no)
endif

:Return max_divisor;
stop
@enduml"
324,"def sum_of_alternates(test_tuple):
""""""
Write a function to extract the sum of alternate chains of tuples.
Your code should satisfy these tests:
sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)
sum_of_alternates((10, 20, 30, 40, 50, 60)) == (120, 90)
sum_of_alternates((0, 0, 0, 0, 0, 0, 0)) == (0, 0)
sum_of_alternates((7,)) == (0, 7)
sum_of_alternates((100, 200, 300, 400, 500, 600, 700, 800)) == (2000, 1600)
""""""
",sum_of_alternates,"def check(candidate):

    assert candidate((5, 6, 3, 6, 10, 34)) == (46, 18)
    assert candidate((1, 2, 3, 4, 5)) == (6, 9)
    assert candidate((6, 7, 8, 9, 4, 5)) == (21, 18)
","def sum_of_alternates(test_tuple):
  sum1 = 0
  sum2 = 0
  for idx, ele in enumerate(test_tuple):
    if idx % 2:
      sum1 += ele
    else:
      sum2 += ele
  return ((sum1),(sum2)) ","[""sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)"", ""sum_of_alternates((10, 20, 30, 40, 50, 60)) == (120, 90)"", ""sum_of_alternates((0, 0, 0, 0, 0, 0, 0)) == (0, 0)"", ""sum_of_alternates((7,)) == (0, 7)"", ""sum_of_alternates((100, 200, 300, 400, 500, 600, 700, 800)) == (2000, 1600)""]","@startuml
start
:Input Validation;
if (test_tuple is empty?) then (yes)
    :Return (0, 0);
    stop
endif
:Initialize sum1 = 0;
:Initialize sum2 = 0;
:Initialize flag = True;
:Loop through test_tuple;
while (there are elements in test_tuple)
    if (flag) then
        :sum1 += test_tuple[i];
    else
        :sum2 += test_tuple[i];
    endif
    :flag = not flag;
    :i++;
endwhile
:Return (sum1, sum2);
stop
@enduml"
546,"def last_occurence_char(string,char):
""""""
Write a function to find the last occurrence of a character in a string.
Your code should satisfy these tests:
last_occurence_char(""hello world"", ""o"") == 8
last_occurence_char(""programming"", ""m"") == 8
last_occurence_char(""abcdefg"", ""z"") == None
last_occurence_char(""banana"", ""a"") == 6
last_occurence_char(""mississippi"", ""s"") == 7
""""""
",last_occurence_char,"def check(candidate):

    assert candidate(""hello world"",'l')==10
    assert candidate(""language"",'g')==7
    assert candidate(""little"",'y')==None
","def last_occurence_char(string,char):
 flag = -1
 for i in range(len(string)):
     if(string[i] == char):
         flag = i
 if(flag == -1):
    return None
 else:
    return flag + 1","[""last_occurence_char(\""hello world\"", \""o\"") == 8"", ""last_occurence_char(\""programming\"", \""m\"") == 8"", ""last_occurence_char(\""abcdefg\"", \""z\"") == None"", ""last_occurence_char(\""banana\"", \""a\"") == 6"", ""last_occurence_char(\""mississippi\"", \""s\"") == 7""]","@startuml
start
:Input String;
:Input Character;
if ""Input String is None or Input Character is None"" then (Error)
    :Return None;
    stop
endif
if ""Input String is not a string or Input Character is not a character"" then (Error)
    :Return None;
    stop
endif
:Initialize index to -1;
while ""Character is in String""
    :Find the next occurrence of Character in String;
    :If found, update index;
    :Move to next occurrence;
    :If not found, break the loop;
endwhile
:Return index;
stop
@enduml"
788,"def new_tuple(test_list, test_str):
""""""
Write a function to create a new tuple from the given string and list.
Your code should satisfy these tests:
new_tuple([1, 2, 3], 'a') == (1, 2, 3, 'a')
new_tuple(['hello', 'world'], 'python') == ('hello', 'world', 'python')
new_tuple([], 'start') == ('start',)
""""""
",new_tuple,"def check(candidate):

    assert candidate([""WEB"", ""is""], ""best"") == ('WEB', 'is', 'best')
    assert candidate([""We"", ""are""], ""Developers"") == ('We', 'are', 'Developers')
    assert candidate([""Part"", ""is""], ""Wrong"") == ('Part', 'is', 'Wrong')
","def new_tuple(test_list, test_str):
  res = tuple(test_list + [test_str])
  return (res) ","[""new_tuple([1, 2, 3], 'a') == (1, 2, 3, 'a')"", ""new_tuple(['hello', 'world'], 'python') == ('hello', 'world', 'python')"", ""new_tuple([], 'start') == ('start',)""]","@startuml

start
:new_tuple(test_list, test_str);

if (test_list is empty) then (yes)
:return (test_str,);
else (no)
:return (test_list + test_str,);

@enduml"
507,"def remove_words(list1, removewords):
""""""
Write a function to remove specific words from a given list.
Your code should satisfy these tests:
remove_words(['apple', 'banana', 'cherry'], ['banana']) == ['apple', 'cherry']
remove_words(['dog', 'cat', 'mouse'], ['dog', 'mouse']) == ['cat']
remove_words(['red', 'blue', 'green'], ['yellow']) == ['red', 'blue', 'green']
""""""
",remove_words,"def check(candidate):

    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']
    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']
    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']
","def remove_words(list1, removewords):
    for word in list(list1):
        if word in removewords:
            list1.remove(word)
    return list1  ","[""remove_words(['apple', 'banana', 'cherry'], ['banana']) == ['apple', 'cherry']"", ""remove_words(['dog', 'cat', 'mouse'], ['dog', 'mouse']) == ['cat']"", ""remove_words(['red', 'blue', 'green'], ['yellow']) == ['red', 'blue', 'green']""]","@startuml

title remove_words

start
:remove_words(list1, removewords);

if (len(list1) == 0) then (no elements in list1)
  :return [];
else (elements in list1)
  :result = [];
  :for word in list1:
    :if (word not in removewords) then (word not in removewords)
      :result.append(word);
    endif;
  :endfor;
  :return result;
endif;

@enduml"
297,"def flatten_list(list1):
""""""
Write a function to flatten a given nested list structure.
Your code should satisfy these tests:
flatten_list([1, [2, [3, 4], 5], 6]) == [1, 2, 3, 4, 5, 6]
flatten_list([[1, 2, [3]], 4, [5, 6]]) == [1, 2, 3, 4, 5, 6]
flatten_list([[[[1]]], 2, [3, [4, [5]]]]) == [1, 2, 3, 4, 5]
""""""
",flatten_list,"def check(candidate):

    assert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]
    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]
","def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list ","[""flatten_list([1, [2, [3, 4], 5], 6]) == [1, 2, 3, 4, 5, 6]"", ""flatten_list([[1, 2, [3]], 4, [5, 6]]) == [1, 2, 3, 4, 5, 6]"", ""flatten_list([[[[1]]], 2, [3, [4, [5]]]]) == [1, 2, 3, 4, 5]""]","@startuml

title Flatten Nested List

start
:Start;

if (list1 is empty) then (no)
:Return empty list;
else (yes)

:Flatten list1;

if (list1 is a list) then (yes)
:Flatten nested list;
else (no)

:Return flattened list;

end if;

end if;

stop
:End;

@enduml"
950,"def chinese_zodiac(year):
""""""
Write a function to display sign of the chinese zodiac for given year.
Your code should satisfy these tests:
chinese_zodiac(2000) == 'Dragon'
chinese_zodiac(1997) == 'Ox'
chinese_zodiac(2012) == 'Dragon'
""""""
",chinese_zodiac,"def check(candidate):

    assert candidate(1997)==('Ox')
    assert candidate(1998)==('Tiger')
    assert candidate(1994)==('Dog')
","def chinese_zodiac(year):
 if (year - 2000) % 12 == 0:
     sign = 'Dragon'
 elif (year - 2000) % 12 == 1:
     sign = 'Snake'
 elif (year - 2000) % 12 == 2:
     sign = 'Horse'
 elif (year - 2000) % 12 == 3:
     sign = 'sheep'
 elif (year - 2000) % 12 == 4:
     sign = 'Monkey'
 elif (year - 2000) % 12 == 5:
     sign = 'Rooster'
 elif (year - 2000) % 12 == 6:
     sign = 'Dog'
 elif (year - 2000) % 12 == 7:
     sign = 'Pig'
 elif (year - 2000) % 12 == 8:
     sign = 'Rat'
 elif (year - 2000) % 12 == 9:
     sign = 'Ox'
 elif (year - 2000) % 12 == 10:
     sign = 'Tiger'
 else:
     sign = 'Hare'
 return sign","[""chinese_zodiac(2000) == 'Dragon'"", ""chinese_zodiac(1997) == 'Ox'"", ""chinese_zodiac(2012) == 'Dragon'""]","@startuml
start
:Input Year;
if (Year Mod 12 = 0) then (Sign is Monkey)
elseif (Year Mod 12 = 1) then (Sign is Rooster)
elseif (Year Mod 12 = 2) then (Sign is Dog)
elseif (Year Mod 12 = 3) then (Sign is Pig)
elseif (Year Mod 12 = 4) then (Sign is Rat)
elseif (Year Mod 12 = 5) then (Sign is Ox)
elseif (Year Mod 12 = 6) then (Sign is Tiger)
elseif (Year Mod 12 = 7) then (Sign is Rabbit)
elseif (Year Mod 12 = 8) then (Sign is Dragon)
elseif (Year Mod 12 = 9) then (Sign is Snake)
elseif (Year Mod 12 = 10) then (Sign is Horse)
else (Sign is Sheep)
endif
:Output Sign;
stop
@enduml"
71,"def comb_sort(nums):
""""""
Write a function to sort a list of elements using comb sort.
Your code should satisfy these tests:
comb_sort([5, 3, 4, 2, 1]) == [1, 2, 3, 4, 5]
comb_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
comb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
""""""
",comb_sort,"def check(candidate):

    assert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
    assert candidate([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]
    assert candidate([99, 15, 13, 47]) == [13, 15, 47, 99]
","def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums","[""comb_sort([5, 3, 4, 2, 1]) == [1, 2, 3, 4, 5]"", ""comb_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"", ""comb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]""]","@startuml
start

:Input list of numbers (nums);
:Initialize gap = length(nums);
:Initialize shrink factor = 1.3;
:Initialize sorted = False;

while (not sorted or gap > 1) is (True)
    :Update gap = max(1, floor(gap / shrink factor));
    :Set sorted = True;
    :Initialize i = 0;

    while (i + gap < length(nums)) is (True)
        if (nums[i] > nums[i + gap]) then (yes)
            :Swap nums[i] and nums[i + gap];
            :Set sorted = False;
        else (no)
        endif
        :Increment i;
    endwhile
endwhile

:Return sorted list (nums);
stop
@enduml"
663,"def find_max_val(n, x, y):
""""""
Write a function to find the largest possible value of k such that k modulo x is y.
Your code should satisfy these tests:
find_max_val(10, 2, 1) == 9
find_max_val(15, 3, 0) == 15
find_max_val(20, 5, 4) == 19
""""""
",find_max_val,"def check(candidate):

    assert candidate(15, 10, 5) == 15
    assert candidate(187, 10, 5) == 185
    assert candidate(16, 11, 1) == 12
","import sys
def find_max_val(n, x, y):
	ans = -sys.maxsize
	for k in range(n + 1):
		if (k % x == y):
			ans = max(ans, k)
	return (ans if (ans >= 0 and
					ans <= n) else -1) ","[""find_max_val(10, 2, 1) == 9"", ""find_max_val(15, 3, 0) == 15"", ""find_max_val(20, 5, 4) == 19""]","@startuml
start

:Input n, x, y;
:Validate inputs (n > 0, x > 0, y >= 0, y < x);

if (Inputs are valid?) then (yes)
    :Initialize max_k = -1;
    :Iterate k from n down to 0;
    while (k >= 0) is (yes)
        if (k % x == y) then (yes)
            :Set max_k = k;
            :Break loop;
        else (no)
            :Decrement k by 1;
        endif
    endwhile

    if (max_k != -1) then (yes)
        :Return max_k;
    else (no)
        :Return ""No valid k found"";
    endif
else (no)
    :Return ""Invalid inputs"";
endif

stop
@enduml"
170,"def sum_range_list(list1, m, n):
""""""
Write a function to find sum of the numbers in a list between the indices of a specified range.
Your code should satisfy these tests:
sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9
sum_range_list([10, 20, 30, 40, 50], 0, 2) == 60
sum_range_list([5, 15, 25, 35, 45], 2, 4) == 105
""""""
",sum_range_list,"def check(candidate):

    assert candidate( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29
    assert candidate( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16
    assert candidate( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38
","def sum_range_list(list1, m, n):
    sum_range = 0
    for i in range(m, n+1, 1):
        sum_range += list1[i]
    return sum_range   ","[""sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9"", ""sum_range_list([10, 20, 30, 40, 50], 0, 2) == 60"", ""sum_range_list([5, 15, 25, 35, 45], 2, 4) == 105""]","@startuml

title Sum Range List

start
:Start;

if (list1 is empty) then (no)
:List is empty;
:Return 0;

else (yes)
:List is not empty;

if (m is less than 0) then (no)
:m is negative;
:Return 0;

else if (n is greater than list1.length) then (no)
:n is greater than list length;
:Return 0;

else (yes)
:m and n are valid;

:Initialize sum to 0;

for (i = m; i <= n; i++)
:Add list1[i] to sum;

:Return sum;

@enduml"
99,"def decimal_to_binary(n):
""""""
Write a function to convert the given decimal number to its binary equivalent.
Your code should satisfy these tests:
decimal_to_binary(0) == '0'
decimal_to_binary(5) == '101'
decimal_to_binary(10) == '1010'
""""""
",decimal_to_binary,"def check(candidate):

    assert candidate(8) == '1000'
    assert candidate(18) == '10010'
    assert candidate(7) == '111'
","def decimal_to_binary(n):
    return bin(n).replace(""0b"","""") ","[""decimal_to_binary(0) == '0'"", ""decimal_to_binary(5) == '101'"", ""decimal_to_binary(10) == '1010'""]","@startuml
start

:Input decimal number (n);
if (n < 0?) then (yes)
    :Print ""Input must be a non-negative integer"";
    stop
else (no)
    if (n == 0?) then (yes)
        :Return '0';
        stop
    else (no)
        :Initialize binary_result as empty string;
        :While n > 0;
        while (n > 0?) is (yes)
            :Calculate remainder (n % 2);
            :Prepend remainder to binary_result;
            :Update n = n // 2;
        endwhile (no)
        :Return binary_result;
        stop
    endif
endif

@enduml"
439,"def multiple_to_single(L):
""""""
Write a function to convert a list of multiple integers into a single integer.
Your code should satisfy these tests:
multiple_to_single([1, 2, 3]) == 123
multiple_to_single([9, 8, 7, 6]) == 9876
multiple_to_single([5, 0, 2, 1]) == 5021
multiple_to_single([4, 5, 6, 7, 8]) == 45678
multiple_to_single([0, 0, 0, 0]) == 0
""""""
",multiple_to_single,"def check(candidate):

    assert candidate([11, 33, 50])==113350
    assert candidate([-1,2,3,4,5,6])==-123456
    assert candidate([10,15,20,25])==10152025
","def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x","[""multiple_to_single([1, 2, 3]) == 123"", ""multiple_to_single([9, 8, 7, 6]) == 9876"", ""multiple_to_single([5, 0, 2, 1]) == 5021"", ""multiple_to_single([4, 5, 6, 7, 8]) == 45678"", ""multiple_to_single([0, 0, 0, 0]) == 0""]","@startuml

title multiple_to_single

start
:Input: L (list of integers);

if (len(L) == 0) then (
  :Return 0;
) else (
  :Convert L to a string;
  :Join the elements of L with no delimiter;
  :Convert the resulting string to an integer;
  :Return the integer;
)

@enduml"
323,"def right_rotate(arr, n, out_of_place, cur):
""""""
Write a function to re-arrange the given array in alternating positive and negative items.
Your code should satisfy these tests:
right_rotate([1, -2, 3, -4, 5, -6], 6, 1, 2) == [1, 3, -2, -4, 5, -6]
right_rotate([-1, 2, -3, 4, -5, 6], 6, 0, 1) == [2, -1, -3, 4, -5, 6]
right_rotate([10, -1, 20, -2, 30, -3], 6, 1, 2) == [10, 20, -1, -2, 30, -3]
right_rotate([-7, 8, -9, 10, -11, 12], 6, 0, 1) == [8, -7, -9, 10, -11, 12]
right_rotate([5, -5, 5, -5, 5, -5], 6, 1, 2) == [5, 5, -5, -5, 5, -5]
""""""
",right_rotate,"def check(candidate):

    assert re_arrange([-5, -2, 5, 2, 4,	7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]
    assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]
    assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]
","def right_rotate(arr, n, out_of_place, cur):
	temp = arr[cur]
	for i in range(cur, out_of_place, -1):
		arr[i] = arr[i - 1]
	arr[out_of_place] = temp
	return arr
def re_arrange(arr, n):
	out_of_place = -1
	for index in range(n):
		if (out_of_place >= 0):
			if ((arr[index] >= 0 and arr[out_of_place] < 0) or
			(arr[index] < 0 and arr[out_of_place] >= 0)):
				arr = right_rotate(arr, n, out_of_place, index)
				if (index-out_of_place > 2):
					out_of_place += 2
				else:
					out_of_place = - 1
		if (out_of_place == -1):
			if ((arr[index] >= 0 and index % 2 == 0) or
			 (arr[index] < 0 and index % 2 == 1)):
				out_of_place = index
	return arr","[""right_rotate([1, -2, 3, -4, 5, -6], 6, 1, 2) == [1, 3, -2, -4, 5, -6]"", ""right_rotate([-1, 2, -3, 4, -5, 6], 6, 0, 1) == [2, -1, -3, 4, -5, 6]"", ""right_rotate([10, -1, 20, -2, 30, -3], 6, 1, 2) == [10, 20, -1, -2, 30, -3]"", ""right_rotate([-7, 8, -9, 10, -11, 12], 6, 0, 1) == [8, -7, -9, 10, -11, 12]"", ""right_rotate([5, -5, 5, -5, 5, -5], 6, 1, 2) == [5, 5, -5, -5, 5, -5]""]","@startuml
start
:Input Validation;
if (arr is not empty AND n is greater than 0 AND out_of_place is greater than or equal to 0 AND cur is greater than 0 AND cur is less than or equal to n) then (condition)
    :Initialize two pointers, i and j;
    i = 0
    j = n - 1
    while (i < j)
        if (arr[i] >= 0) then (condition)
            i = i + 1
        else (condition)
            arr[i], arr[j] = arr[j], arr[i]
            j = j - 1
        endif
    endwhile
    :Return the rearranged array;
    return arr
else (condition)
    :Return an error message;
    return ""Invalid input""
endif
stop
@enduml"
252,"def convert(numbers):
""""""
Write a python function to convert complex numbers to polar coordinates.
Your code should satisfy these tests:
convert(1+1j) == (1.4142135623730951, 0.7853981633974483)
convert(-1-1j) == (1.4142135623730951, -2.356194490192345)
convert(3+4j) == (5.0, 0.9272952180016122)
""""""
",convert,"def check(candidate):

    assert candidate(1) == (1.0, 0.0)
    assert candidate(4) == (4.0,0.0)
    assert candidate(5) == (5.0,0.0)
","import cmath
def convert(numbers):
  num = cmath.polar(numbers)
  return (num) ","[""convert(1+1j) == (1.4142135623730951, 0.7853981633974483)"", ""convert(-1-1j) == (1.4142135623730951, -2.356194490192345)"", ""convert(3+4j) == (5.0, 0.9272952180016122)""]","@startuml

start

:convert(numbers):

if numbers == 0:
  :return (0, 0):
else:
  :r = sqrt(numbers.real ** 2 + numbers.imag ** 2):
  :theta = atan2(numbers.imag, numbers.real):
  :return (r, theta):

end

@enduml"
70,"def find_equal_tuple(Input, k):
""""""
Write a function to find whether all the given tuples have equal length or not.
Your code should satisfy these tests:
find_equal_tuple([(1, 2), (3, 4), (5, 6)], 2) == 1
find_equal_tuple([(1, 2, 3), (4, 5), (6, 7, 8)], 2) == 0
find_equal_tuple([(10,), (20,), (30,)], 1) == 1
find_equal_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == 1
find_equal_tuple([(1,), (2, 3), (4, 5, 6)], 1) == 0
""""""
",find_equal_tuple,"def check(candidate):

    assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'
    assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'
    assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'
","def find_equal_tuple(Input, k):
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input, k):
  if find_equal_tuple(Input, k) == 1:
    return (""All tuples have same length"")
  else:
    return (""All tuples do not have same length"")","[""find_equal_tuple([(1, 2), (3, 4), (5, 6)], 2) == 1"", ""find_equal_tuple([(1, 2, 3), (4, 5), (6, 7, 8)], 2) == 0"", ""find_equal_tuple([(10,), (20,), (30,)], 1) == 1"", ""find_equal_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == 1"", ""find_equal_tuple([(1,), (2, 3), (4, 5, 6)], 1) == 0""]","@startuml
start
:Input Validation;
if (Input is not empty?) then (yes)
    :Iterate over tuples;
    if (length of tuple is equal?) then (yes)
        :Set flag to 1;
    else (no)
        :Set flag to 0;
        stop
    endif
else (no)
    :Return error message;
    stop
endif
:Return flag;
stop
@enduml"
254,"def words_ae(text):
""""""
Write a function to find all words starting with 'a' or 'e' in a given string.
Your code should satisfy these tests:
words_ae(""apple eagle banana"") == ['apple', 'eagle', 'anana']
words_ae(""example adventure elephant"") == ['example', 'adventure', 'elephant']
words_ae(""cat dog egg"") == ['at', 'egg']
words_ae(""energy active"") == ['energy', 'active']
words_ae(""zebra antelope"") == ['ebra', 'antelope']
""""""
",words_ae,"def check(candidate):

    assert candidate(""python programe"")==['ame']
    assert candidate(""python programe language"")==['ame','anguage']
    assert candidate(""assert statement"")==['assert', 'atement']
","import re
def words_ae(text):
 list = re.findall(""[ae]\w+"", text)
 return list","[""words_ae(\""apple eagle banana\"") == ['apple', 'eagle', 'anana']"", ""words_ae(\""example adventure elephant\"") == ['example', 'adventure', 'elephant']"", ""words_ae(\""cat dog egg\"") == ['at', 'egg']"", ""words_ae(\""energy active\"") == ['energy', 'active']"", ""words_ae(\""zebra antelope\"") == ['ebra', 'antelope']""]","@startuml
start
:input text;
if (text is not None and text is not empty) then (1)
    :initialize an empty list words;
    :split text into words;
    repeat (for each word in words)
        if (word starts with 'a' or 'e') then (2)
            :add word to result;
        endif
    endrepeat
    :return result;
else (1)
    :return ""Input text should not be None or empty"";
endif
stop
@enduml"
227,"def min_of_three(a,b,c):
""""""
Write a function to find minimum of three numbers.
Your code should satisfy these tests:
min_of_three(10, 20, 30) == 10
min_of_three(-5, -10, 0) == -10
min_of_three(7, 7, 7) == 7
""""""
",min_of_three,"def check(candidate):

    assert candidate(10,20,0)==0
    assert candidate(19,15,18)==15
    assert candidate(-10,-20,-30)==-30
","def min_of_three(a,b,c):
      if (a <= b) and (a <= c):
        smallest = a
      elif (b <= a) and (b <= c):
        smallest = b
      else:
        smallest = c
      return smallest ","[""min_of_three(10, 20, 30) == 10"", ""min_of_three(-5, -10, 0) == -10"", ""min_of_three(7, 7, 7) == 7""]","@startuml
start

:Input three numbers a, b, c;
if (a < b and a < c) then (yes)
  :Set min = a;
elseif (b < a and b < c) then (yes)
  :Set min = b;
else (no)
  :Set min = c;
endif

:Return min;
stop
@enduml"
1,"def min_cost(cost, m, n):
""""""
Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].
Your code should satisfy these tests:
min_cost([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 2) == 15
min_cost([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, 1) == 6
min_cost([[1, 2], [3, 4]], 1, 1) == 5
min_cost([[10, 20, 30], [40, 50, 60]], 1, 2) == 90
min_cost([[2, 3], [4, 5]], 1, 1) == 7
""""""
",min_cost,"def check(candidate):

    assert candidate([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8
    assert candidate([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12
    assert candidate([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16
","R = 3
C = 3
def min_cost(cost, m, n):
	tc = [[0 for x in range(C)] for x in range(R)]
	tc[0][0] = cost[0][0]
	for i in range(1, m+1):
		tc[i][0] = tc[i-1][0] + cost[i][0]
	for j in range(1, n+1):
		tc[0][j] = tc[0][j-1] + cost[0][j]
	for i in range(1, m+1):
		for j in range(1, n+1):
			tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j]
	return tc[m][n]","[""min_cost([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 2) == 15"", ""min_cost([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, 1) == 6"", ""min_cost([[1, 2], [3, 4]], 1, 1) == 5"", ""min_cost([[10, 20, 30], [40, 50, 60]], 1, 2) == 90"", ""min_cost([[2, 3], [4, 5]], 1, 1) == 7""]","@startuml
start
:Input Validation;
if (cost is not empty and m and n are integers and within range) then
  (m and n are within range)
  if (m >= 0 and n >= 0) then
    (m and n are within range)
    :Initialize min_cost[0][0] with cost[0][0];
    :Initialize min_cost[0][j] with sum of cost[0][0] to cost[0][j] for j from 1 to n;
    :Initialize min_cost[i][0] with sum of cost[0][0] to cost[i][0] for i from 1 to m;
    :Fill min_cost[i][j] with minimum of min_cost[i-1][j], min_cost[i][j-1], and min_cost[i-1][j-1] + cost[i][j] for i, j from 1 to m and n;
    :Return min_cost[m][n];
  else
    :Return error message ""m and n must be non-negative"";
  endif
else
  :Return error message ""Invalid input"";
endif
stop
@enduml"
187,"def longest_common_subsequence(X, Y, m, n):
""""""
Write a function to find the longest common subsequence for the given two sequences.
Your code should satisfy these tests:
longest_common_subsequence(""AGGTAB"", ""GXTXAYB"", 6, 7) == 4
longest_common_subsequence(""ABC"", ""AC"", 3, 2) == 2
longest_common_subsequence(""12345"", ""54321"", 5, 5) == 1
""""""
",longest_common_subsequence,"def check(candidate):

    assert candidate(""AGGTAB"" , ""GXTXAYB"", 6, 7) == 4
    assert candidate(""ABCDGH"" , ""AEDFHR"", 6, 6) == 3
    assert candidate(""AXYT"" , ""AYZX"", 4, 4) == 2
","def longest_common_subsequence(X, Y, m, n):
    if m == 0 or n == 0:
       return 0
    elif X[m-1] == Y[n-1]:
       return 1 + longest_common_subsequence(X, Y, m-1, n-1)
    else:
       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))","[""longest_common_subsequence(\""AGGTAB\"", \""GXTXAYB\"", 6, 7) == 4"", ""longest_common_subsequence(\""ABC\"", \""AC\"", 3, 2) == 2"", ""longest_common_subsequence(\""12345\"", \""54321\"", 5, 5) == 1""]","@startuml
start

:Input sequences X and Y;
:Input lengths m and n;

if (m == 0 or n == 0) then (yes)
    :Return 0;
    stop
else (no)
    :Initialize a 2D array L[m+1][n+1] with zeros;
    :i = 1;
    while (i <= m) is (yes)
        :j = 1;
        while (j <= n) is (yes)
            if (X[i-1] == Y[j-1]) then (yes)
                :L[i][j] = L[i-1][j-1] + 1;
            else (no)
                :L[i][j] = max(L[i-1][j], L[i][j-1]);
            endif
            :j = j + 1;
        endwhile (no)
        :i = i + 1;
    endwhile (no)
    :Return L[m][n];
    stop
endif

@enduml"
660,"def find_Points(l1,r1,l2,r2):
""""""
Write a python function to choose points from two ranges such that no point lies in both the ranges.
Your code should satisfy these tests:
find_Points(1, 5, 2, 6) == (1, 6)
find_Points(3, 3, 3, 3) == (-1, -1)
find_Points(10, 20, 15, 25) == (10, 25)
""""""
",find_Points,"def check(candidate):

    assert candidate(5,10,1,5) == (1,10)
    assert candidate(3,5,7,9) == (3,9)
    assert candidate(1,5,2,8) == (1,8)
","def find_Points(l1,r1,l2,r2):
    x = min(l1,l2) if (l1 != l2) else -1
    y = max(r1,r2) if (r1 != r2) else -1
    return (x,y)","[""find_Points(1, 5, 2, 6) == (1, 6)"", ""find_Points(3, 3, 3, 3) == (-1, -1)"", ""find_Points(10, 20, 15, 25) == (10, 25)""]","@startuml

title find_Points

start
:find_Points(l1, r1, l2, r2);

if (l1 > r1) or (l2 > r2) then (no-overlap)
:return (-1, -1);
else (overlap)
:find_min = min(l1, l2);
:find_max = max(r1, r2);
:return (find_min, find_max);
endif

@enduml"
946,"def most_common_elem(s,a):
""""""
Write a function to find the most common elements and their counts of a specified text.
Your code should satisfy these tests:
most_common_elem(""aabbbcc"", 1) == [('b', 3)]
most_common_elem(""hello world"", 2) == [('l', 3), ('o', 2)]
most_common_elem(""test test test"", 3) == [('t', 6), ('e', 3), ('s', 3)]
""""""
",most_common_elem,"def check(candidate):

    assert candidate('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)]
    assert candidate('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]
    assert candidate('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]
","from collections import Counter
def most_common_elem(s,a):
  most_common_elem=Counter(s).most_common(a)
  return most_common_elem","[""most_common_elem(\""aabbbcc\"", 1) == [('b', 3)]"", ""most_common_elem(\""hello world\"", 2) == [('l', 3), ('o', 2)]"", ""most_common_elem(\""test test test\"", 3) == [('t', 6), ('e', 3), ('s', 3)]""]","@startuml

start
:most_common_elem(""aabbbcc"", 1);
if (s.count(a) > 0) then (yes)
  :return [('b', 3)]
else (no)
  :return []
endif

@enduml"
699,"def min_Swaps(str1,str2):
""""""
Write a python function to find the minimum number of swaps required to convert one binary string to another.
Your code should satisfy these tests:
min_Swaps(""abcde"", ""abcde"") == 0
min_Swaps(""abc"", ""cab"") == 'Not Possible'
min_Swaps(""12345"", ""54321"") == 2
min_Swaps(""hello"", ""hello"") == 0
min_Swaps(""abcdef"", ""fedcba"") == 3
min_Swaps(""python"", ""ythonp"") == 3
""""""
",min_Swaps,"def check(candidate):

    assert candidate(""1101"",""1110"") == 1
    assert candidate(""1111"",""0100"") == ""Not Possible""
    assert candidate(""1110000"",""0001101"") == 3
","def min_Swaps(str1,str2) :
    count = 0
    for i in range(len(str1)) :
        if str1[i] != str2[i] :
            count += 1
    if count % 2 == 0 :
        return (count // 2)
    else :
        return (""Not Possible"") ","[""min_Swaps(\""abcde\"", \""abcde\"") == 0"", ""min_Swaps(\""abc\"", \""cab\"") == 'Not Possible'"", ""min_Swaps(\""12345\"", \""54321\"") == 2"", ""min_Swaps(\""hello\"", \""hello\"") == 0"", ""min_Swaps(\""abcdef\"", \""fedcba\"") == 3"", ""min_Swaps(\""python\"", \""ythonp\"") == 3""]","@startuml

start
:min_Swaps(str1, str2);
if (str1 == str2) then (yes)
:return 0;
else (no)
:count = 0;
:for i in range(len(str1)):
:  if (str1[i] != str2[i]) then (yes)
:    count += 1;
:  endif
:endfor
:if (count % 2 == 0) then (yes)
:  return count / 2;
:else (no)
:  return 'Not Possible';
:endif
:endif

@enduml"
961,"def roman_to_int(s):
""""""
Write a function to convert a roman numeral to an integer.
Your code should satisfy these tests:
roman_to_int(""III"") == 3
roman_to_int(""LVIII"") == 58
roman_to_int(""MCMXCIV"") == 1994
""""""
",roman_to_int,"def check(candidate):

    assert candidate('MMMCMLXXXVI')==3986
    assert candidate('MMMM')==4000
    assert candidate('C')==100
","def roman_to_int(s):
        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        int_val = 0
        for i in range(len(s)):
            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:
                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]
            else:
                int_val += rom_val[s[i]]
        return int_val","[""roman_to_int(\""III\"") == 3"", ""roman_to_int(\""LVIII\"") == 58"", ""roman_to_int(\""MCMXCIV\"") == 1994""]","@startuml

start
:roman_to_int(s);
if (s == ""I"") then (
  :return 1;
) elseif (s == ""V"") then (
  :return 5;
) elseif (s == ""X"") then (
  :return 10;
) elseif (s == ""L"") then (
  :return 50;
) elseif (s == ""C"") then (
  :return 100;
) elseif (s == ""D"") then (
  :return 500;
) elseif (s == ""M"") then (
  :return 1000;
) else (
  :return 0;
)

@enduml"
844,"def get_Number(n, k):
""""""
Write a python function to find the kth element in an array containing odd elements first and then even elements.
Your code should satisfy these tests:
get_Number(10, 3) == 5
get_Number(7, 7) == 6
get_Number(15, 12) == 8
""""""
",get_Number,"def check(candidate):

    assert candidate(8,5) == 2
    assert candidate(7,2) == 3
    assert candidate(5,2) == 3
","def get_Number(n, k):
    arr = [0] * n;
    i = 0;
    odd = 1;
    while (odd <= n):
        arr[i] = odd;
        i += 1;
        odd += 2;
    even = 2;
    while (even <= n):
        arr[i] = even;
        i += 1;
        even += 2;
    return arr[k - 1]; ","[""get_Number(10, 3) == 5"", ""get_Number(7, 7) == 6"", ""get_Number(15, 12) == 8""]","@startuml
start
:Input n, k;
:if k <= n/2;
:   output 2*k-1;
:else;
:   output 2*(k-n/2);
:endif;
stop
@enduml"
131,"def reverse_vowels(str1):
""""""
Write a python function to reverse only the vowels of a given string.
Your code should satisfy these tests:
reverse_vowels(""hello"") == 'holle'
reverse_vowels(""leetcode"") == 'leotcede'
reverse_vowels(""Python"") == 'Python'
""""""
",reverse_vowels,"def check(candidate):

    assert candidate(""Python"") == ""Python""
    assert candidate(""USA"") == ""ASU""
    assert candidate(""ab"") == ""ab""
","def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string","[""reverse_vowels(\""hello\"") == 'holle'"", ""reverse_vowels(\""leetcode\"") == 'leotcede'"", ""reverse_vowels(\""Python\"") == 'Python'""]","@startuml
start
:input_string;
:vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];
:reversed_vowels = [];
if (input_string is None or input_string == """") then (input_string is empty?) is (yes)
    :return input_string;
else (input_string is None or input_string == """") is (no)
endif
:for each character in input_string;
    if (character in vowels) then (character is a vowel?) is (yes)
        :append character to reversed_vowels;
    endif
endfor
:reversed_vowels = reversed_vowels[::-1];
:for each character in input_string;
    if (character in vowels) then (character is a vowel?) is (yes)
        :replace character with first character in reversed_vowels;
        :remove first character in reversed_vowels;
    endif
endfor
:return input_string;
stop
@enduml"
95,"def Find_Min_Length(lst):
""""""
Write a python function to find the minimum length of sublist.
Your code should satisfy these tests:
Find_Min_Length([""apple"", ""banana"", ""pear""]) == 4
Find_Min_Length([""hello"", ""world"", ""hi"", ""bye""]) == 2
Find_Min_Length([""a"", ""ab"", ""abc"", ""abcd""]) == 1
""""""
",Find_Min_Length,"def check(candidate):

    assert candidate([[1],[1,2]]) == 1
    assert candidate([[1,2],[1,2,3],[1,2,3,4]]) == 2
    assert candidate([[3,3,3],[4,4,4,4]]) == 3
","def Find_Min_Length(lst):
    minLength = min(len(x) for x in lst )
    return minLength ","[""Find_Min_Length([\""apple\"", \""banana\"", \""pear\""]) == 4"", ""Find_Min_Length([\""hello\"", \""world\"", \""hi\"", \""bye\""]) == 2"", ""Find_Min_Length([\""a\"", \""ab\"", \""abc\"", \""abcd\""]) == 1""]","@startuml

start
:Find_Min_Length(lst);

if (len(lst) == 0) then (no)
:return 0;
else (yes)
:min_length = len(lst[0]);

for (i = 1; i < len(lst); i++) do
:if (len(lst[i]) < min_length) then
:min_length = len(lst[i]);

end for

:return min_length;

@enduml"
48,"def odd_bit_set_number(n):
""""""
Write a python function to set all odd bits of a given number.
Your code should satisfy these tests:
odd_bit_set_number(5) == 5
odd_bit_set_number(10) == 15
odd_bit_set_number(23) == 23
odd_bit_set_number(42) == 63
odd_bit_set_number(17) == 21
""""""
",odd_bit_set_number,"def check(candidate):

    assert candidate(10) == 15
    assert candidate(20) == 21
    assert candidate(30) == 31
","def odd_bit_set_number(n):
    count = 0;res = 0;temp = n
    while temp > 0:
        if count % 2 == 0:
            res |= (1 << count)
        count += 1
        temp >>= 1
    return (n | res)","[""odd_bit_set_number(5) == 5"", ""odd_bit_set_number(10) == 15"", ""odd_bit_set_number(23) == 23"", ""odd_bit_set_number(42) == 63"", ""odd_bit_set_number(17) == 21""]","@startuml
start
:Input: n;
if (n is not positive integer?) then (yes)
  :Error:
  stop
endif
:Set all odd bits of n:
repeat (log2(n) + 1) times
  :Find the rightmost odd bit:
  :n AND (2^(log2(n)) - 1):
  :Set the found bit:
  :n OR 2^(log2(n)):
  :Decrease n:
  :n = n AND (n - 1):
endrepeat
:Output: n;
stop
@enduml"
425,"def count_element_in_list(list1, x):
""""""
Write a function to count the number of sublists containing a particular element.
Your code should satisfy these tests:
count_element_in_list([['a', 'b', 'c'], ['a', 'd', 'e'], ['f', 'g', 'a']], 'a') == 3
count_element_in_list([['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z']], 'x') == 3
count_element_in_list([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']], '5') == 1
count_element_in_list([['apple', 'banana'], ['apple', 'cherry'], ['banana', 'cherry']], 'apple') == 2
count_element_in_list([['cat', 'dog'], ['fish', 'bird'], ['cat', 'fish']], 'fish') == 2
""""""
",count_element_in_list,"def check(candidate):

    assert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3
    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3
    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1
","def count_element_in_list(list1, x):
    ctr = 0
    for i in range(len(list1)):
        if x in list1[i]:
            ctr+= 1
    return ctr","[""count_element_in_list([['a', 'b', 'c'], ['a', 'd', 'e'], ['f', 'g', 'a']], 'a') == 3"", ""count_element_in_list([['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z']], 'x') == 3"", ""count_element_in_list([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']], '5') == 1"", ""count_element_in_list([['apple', 'banana'], ['apple', 'cherry'], ['banana', 'cherry']], 'apple') == 2"", ""count_element_in_list([['cat', 'dog'], ['fish', 'bird'], ['cat', 'fish']], 'fish') == 2""]","@startuml

title Count Element in List

start
:Count Element in List;

if (list1 is empty) then (no)
  :Return 0;
else (yes)
  :Initialize count to 0;
  :Loop through list1;
    :If current element is x, then;
      :Increment count;
    :End if;
  :End loop;
  :Return count;
endif;

@enduml"
603,"def get_ludic(n):
""""""
Write a function to get a lucid number smaller than or equal to n.
Your code should satisfy these tests:
get_ludic(10) == [1, 2, 3, 5, 7]
get_ludic(15) == [1, 2, 3, 5, 7, 11, 13]
get_ludic(20) == [1, 2, 3, 5, 7, 11, 13, 17]
get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]
get_ludic(30) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29]
""""""
",get_ludic,"def check(candidate):

    assert candidate(10) == [1, 2, 3, 5, 7]
    assert candidate(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]
    assert candidate(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]
","def get_ludic(n):
	ludics = []
	for i in range(1, n + 1):
		ludics.append(i)
	index = 1
	while(index != len(ludics)):
		first_ludic = ludics[index]
		remove_index = index + first_ludic
		while(remove_index < len(ludics)):
			ludics.remove(ludics[remove_index])
			remove_index = remove_index + first_ludic - 1
		index += 1
	return ludics","[""get_ludic(10) == [1, 2, 3, 5, 7]"", ""get_ludic(15) == [1, 2, 3, 5, 7, 11, 13]"", ""get_ludic(20) == [1, 2, 3, 5, 7, 11, 13, 17]"", ""get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]"", ""get_ludic(30) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29]""]","@startuml
start
:Input: n
:Validate n > 0
is (n > 0) then
    :Initialize result = [1]
    :Initialize i = 2
    :While i <= n do
        :Set is_prime = True
        :For j in range(2, sqrt(i) + 1)
            :If i % j == 0 then
                :Set is_prime = False
                :Break
            :Endif
        :Endfor
        :If is_prime then
            :Append i to result
        :Endif
        :Set i = i + 1
    :Endwhile
    :Return result
else
    :Return ""Input must be greater than 0""
endif
stop
@enduml"
709,"def get_unique(test_list):
""""""
Write a function to count unique keys for each value present in the tuple.
""""""
",get_unique,"def check(candidate):

    assert candidate([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'
    assert candidate([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'
    assert candidate([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'
","from collections import defaultdict
def get_unique(test_list):
  res = defaultdict(list)
  for sub in test_list:
    res[sub[1]].append(sub[0])
  res = dict(res)
  res_dict = dict()
  for key in res:
    res_dict[key] = len(list(set(res[key])))
  return (str(res_dict)) ","[""get_unique([['apple', 'fruit'], ['banana', 'fruit'], ['carrot', 'vegetable']]) == \""{'fruit': 2, 'vegetable': 1}\"""", ""get_unique([['dog', 'animal'], ['cat', 'animal'], ['fish', 'animal'], ['bird', 'animal']]) == \""{'animal': 4}\"""", ""get_unique([['red', 'color'], ['blue', 'color'], ['green', 'color'], ['red', 'color']]) == \""{'color': 3}\""""]","@startuml
start

:Input: test_list (list of tuples);
if (Is test_list empty?) then (yes)
    :Return empty dictionary or appropriate message;
    stop
else (no)
    :Initialize an empty dictionary (unique_dict);
    :Iterate through each tuple in test_list;
    :For each tuple, extract key and value;
    if (Is value already a key in unique_dict?) then (yes)
        :Add the key to the set of unique keys for that value;
    else (no)
        :Create a new entry in unique_dict with value as key and key as the first element in the set;
    endif
    :Check if all tuples have been processed;
    if (All tuples processed?) then (yes)
        :Return unique_dict;
        stop
    else (no)
        :Continue to the next tuple;
    endif
endif

@enduml"
685,"def sum_Of_Primes(n):
""""""
Write a python function to find sum of prime numbers between 1 to n.
Your code should satisfy these tests:
sum_Of_Primes(10) == 17
sum_Of_Primes(20) == 77
sum_Of_Primes(30) == 129
""""""
",sum_Of_Primes,"def check(candidate):

    assert candidate(10) == 17
    assert candidate(20) == 77
    assert candidate(5) == 10
","def sum_Of_Primes(n):
    prime = [True] * (n + 1)
    p = 2
    while p * p <= n:
        if prime[p] == True:
            i = p * 2
            while i <= n:
                prime[i] = False
                i += p
        p += 1
    sum = 0
    for i in range (2,n + 1):
        if(prime[i]):
            sum += i
    return sum","[""sum_Of_Primes(10) == 17"", ""sum_Of_Primes(20) == 77"", ""sum_Of_Primes(30) == 129""]","@startuml

start
:sum_Of_Primes(n);

if (n <= 1) then (no)
:return 0;

else (yes)
:sum = 0;

for (i = 2; i <= n; i++) do
:if (is_prime(i)) then
:sum = sum + i;

end for

:return sum;

@enduml"
91,"def find_substring(str1, sub_str):
""""""
Write a function to check if a substring is present in a given list of string values.
Your code should satisfy these tests:
find_substring([""hello"", ""world""], ""lo"") == True
find_substring([""python"", ""programming""], ""java"") == False
find_substring([""test"", ""case"", ""example""], ""ample"") == True
""""""
",find_substring,"def check(candidate):

    assert candidate([""red"", ""black"", ""white"", ""green"", ""orange""],""ack"")==True
    assert candidate([""red"", ""black"", ""white"", ""green"", ""orange""],""abc"")==False
    assert candidate([""red"", ""black"", ""white"", ""green"", ""orange""],""ange"")==True
","def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False","[""find_substring([\""hello\"", \""world\""], \""lo\"") == True"", ""find_substring([\""python\"", \""programming\""], \""java\"") == False"", ""find_substring([\""test\"", \""case\"", \""example\""], \""ample\"") == True""]","@startuml
start

:Input: list of strings (str1) and substring (sub_str);
:Initialize index i = 0;

while (i < length of str1)
    :Check if sub_str is in str1[i];
    if (sub_str is in str1[i]) then (yes)
        :Return True;
        stop
    else (no)
        :Increment i by 1;
    endif
endwhile

:Return False;
stop

@enduml"
877,"def sort_String(str):
""""""
Write a python function to sort the given string.
Your code should satisfy these tests:
sort_String(""hello"") == ""ehllo""
sort_String(""world"") == ""dlorw""
sort_String(""python"") == ""hnopty""
""""""
",sort_String,"def check(candidate):

    assert candidate(""cba"") == ""abc""
    assert candidate(""data"") == ""aadt""
    assert candidate(""zxy"") == ""xyz""
","def sort_String(str) :
    str = ''.join(sorted(str))
    return (str) ","[""sort_String(\""hello\"") == \""ehllo\"""", ""sort_String(\""world\"") == \""dlorw\"""", ""sort_String(\""python\"") == \""hnopty\""""]","@startuml
start

:Input string (str);
if (Is str a valid string?) then (yes)
    :Convert string to a list of characters;
    :Sort the list of characters;
    :Join the sorted list back into a string;
    :Return the sorted string;
else (no)
    :Print ""Invalid input: Input must be a string"";
    :Return None;
endif

stop
@enduml"
927,"def __init__(self, data):
""""""
Write a function to calculate the height of the given binary tree.
""""""
",__init__,"def check(candidate):

    assert (max_height(root)) == 3
    assert (max_height(root1)) == 5
    assert (max_height(root2)) == 4
","class Node:
	def __init__(self, data):
		self.data = data
		self.left = None
		self.right = None
def max_height(node):
	if node is None:
		return 0 ;
	else :
		left_height = max_height(node.left)
		right_height = max_height(node.right)
		if (left_height > right_height):
			return left_height+1
		else:
			return right_height+1","[""test test cases failed""]","@startuml
start
:Calculate the height of the binary tree;
if (Is the tree empty?) then (yes)
  :Return 0;
  stop
else (no)
  :Calculate the height of the left subtree;
  :Calculate the height of the right subtree;
  :Return the maximum of the two heights plus 1;
endif
stop
@enduml"
591,"def swap_List(newList):
""""""
Write a python function to interchange the first and last elements in a list.
Your code should satisfy these tests:
swap_List([1, 2, 3, 4]) == [4, 2, 3, 1]
swap_List(['a', 'b', 'c']) == ['c', 'b', 'a']
swap_List([True, False, True, False]) == [False, False, True, True]
""""""
",swap_List,"def check(candidate):

    assert candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]
    assert candidate([1, 2, 3]) == [3, 2, 1]
    assert candidate([4, 5, 6]) == [6, 5, 4]
","def swap_List(newList):
    size = len(newList)
    temp = newList[0]
    newList[0] = newList[size - 1]
    newList[size - 1] = temp
    return newList ","[""swap_List([1, 2, 3, 4]) == [4, 2, 3, 1]"", ""swap_List(['a', 'b', 'c']) == ['c', 'b', 'a']"", ""swap_List([True, False, True, False]) == [False, False, True, True]""]","@startuml

title Swap First and Last Elements in a List

start
:swap_List(newList);

if (newList.length > 1) then (yes)
  :swap_first_and_last_elements(newList);
else (no)
  :return newList;
endif

:return newList;

@enduml"
798,"def _sum(arr):
""""""
Write a python function to find the sum of an array.
Your code should satisfy these tests:
_sum([1, 2, 3, 4, 5]) == 15
_sum([-1, -2, -3, -4, -5]) == -15
_sum([100, 200, 300]) == 600
""""""
",_sum,"def check(candidate):

    assert candidate([1, 2, 3]) == 6
    assert candidate([15, 12, 13, 10]) == 50
    assert candidate([0, 1, 2]) == 3
","def _sum(arr):
    sum=0
    for i in arr:
        sum = sum + i
    return(sum)  ","[""_sum([1, 2, 3, 4, 5]) == 15"", ""_sum([-1, -2, -3, -4, -5]) == -15"", ""_sum([100, 200, 300]) == 600""]","@startuml
start

:Input array (arr);
:Initialize sum = 0;
:Initialize index = 0;

while (index < length of arr?) is (yes)
    :sum = sum + arr[index];
    :index = index + 1;
endwhile (no)

:Return sum;

stop
@enduml"
522,"def lbs(arr):
""""""
Write a function to find the longest bitonic subsequence for the given array.
Your code should satisfy these tests:
lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6
lbs([80, 60, 30, 40, 20, 10]) == 5
lbs([1, 2, 3, 4, 5]) == 5
""""""
",lbs,"def check(candidate):

    assert candidate([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7
    assert candidate([1, 11, 2, 10, 4, 5, 2, 1]) == 6
    assert candidate([80, 60, 30, 40, 20, 10]) == 5
","def lbs(arr):
	n = len(arr)
	lis = [1 for i in range(n+1)]
	for i in range(1 , n):
		for j in range(0 , i):
			if ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)):
				lis[i] = lis[j] + 1
	lds = [1 for i in range(n+1)]
	for i in reversed(range(n-1)):
		for j in reversed(range(i-1 ,n)):
			if(arr[i] > arr[j] and lds[i] < lds[j] + 1):
				lds[i] = lds[j] + 1
	maximum = lis[0] + lds[0] - 1
	for i in range(1 , n):
		maximum = max((lis[i] + lds[i]-1), maximum)
	return maximum","[""lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6"", ""lbs([80, 60, 30, 40, 20, 10]) == 5"", ""lbs([1, 2, 3, 4, 5]) == 5""]","@startuml
start

:Input array 'arr';
if (Is array empty or null?) then (yes)
  :Return 0;
  stop
else (no)
  :Initialize arrays 'lis' and 'lds' with size len(arr);
  :Initialize 'max_length' to 0;

  :Calculate LIS (Longest Increasing Subsequence);
  repeat
    :For each element in 'arr';
    :Initialize 'lis[i]' to 1;
    repeat
      :For each previous element 'j' (0 to i-1);
      if (arr[j] < arr[i]) then (yes)
        :Update 'lis[i]' to max(lis[i], lis[j] + 1);
      else (no)
      endif
    repeat while (More elements to process?) is (yes) not (no)

  repeat while (More elements to process?) is (yes) not (no)

  :Calculate LDS (Longest Decreasing Subsequence);
  repeat
    :For each element in 'arr' (from end to start);
    :Initialize 'lds[i]' to 1;
    repeat
      :For each next element 'j' (i+1 to len(arr)-1);
      if (arr[j] < arr[i]) then (yes)
        :Update 'lds[i]' to max(lds[i], lds[j] + 1);
      else (no)
      endif
    repeat while (More elements to process?) is (yes) not (no)

  repeat while (More elements to process?) is (yes) not (no)

  :Calculate LBS (Longest Bitonic Subsequence);
  repeat
    :For each element in 'arr';
    :Update 'max_length' to max(max_length, lis[i] + lds[i] - 1);
  repeat while (More elements to process?) is (yes) not (no)

  :Return 'max_length';
  stop
endif

@enduml"
755,"def second_smallest(numbers):
""""""
Write a function to find the second smallest number in a list.
Your code should satisfy these tests:
second_smallest([4, 2, 1, 3, 5]) == 2
second_smallest([10, 10, 9, 8, 7]) == 8
second_smallest([1, 1, 1, 2, 2]) == 2
""""""
",second_smallest,"def check(candidate):

    assert candidate([1, 2, -8, -2, 0, -2])==-2
    assert candidate([1, 1, -0.5, 0, 2, -2, -2])==-0.5
    assert candidate([2,2])==None
","def second_smallest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()
  return  uniq_items[1] ","[""second_smallest([4, 2, 1, 3, 5]) == 2"", ""second_smallest([10, 10, 9, 8, 7]) == 8"", ""second_smallest([1, 1, 1, 2, 2]) == 2""]","@startuml
start

:Initialize variables;
if (Check if input list is empty) then (yes)
  :Return None;
else (no)
  :Remove duplicates from list;
  :Sort the list;
  :Check if all elements are the same;
  if (All elements are the same) then (yes)
    :Return None;
  else (no)
    :Find the second smallest element;
    :Return the second smallest element;
  endif
endif

stop
@enduml"
336,"def check_monthnum(monthname1):
""""""
Write a function to check whether the given month name contains 28 days or not.
Your code should satisfy these tests:
check_monthnum(""February"") == True
check_monthnum(""January"") == False
check_monthnum(""December"") == False
""""""
",check_monthnum,"def check(candidate):

    assert candidate(""February"")==True
    assert candidate(""January"")==False
    assert candidate(""March"")==False
","def check_monthnum(monthname1):
  if monthname1 == ""February"":
    return True
  else:
    return False","[""check_monthnum(\""February\"") == True"", ""check_monthnum(\""January\"") == False"", ""check_monthnum(\""December\"") == False""]","@startuml

start
:check_monthnum(monthname1);

if (monthname1 == ""February"") then (
  :return True;
) else if (monthname1 == ""January"") then (
  :return False;
) else if (monthname1 == ""December"") then (
  :return False;
) else (
  :return False;
)

@enduml"
119,"def search(arr,n):
""""""
Write a python function to find the element that appears only once in a sorted array.
Your code should satisfy these tests:
search([1, 2, 3, 4, 5], 5) == 1
search([7, 7, 7, 7, 10], 5) == 10
search([0, 1, 0, 1, 2], 5) == 2
""""""
",search,"def check(candidate):

    assert candidate([1,1,2,2,3],5) == 3
    assert candidate([1,1,3,3,4,4,5,5,7,7,8],11) == 8
    assert candidate([1,2,2,3,3,4,4],7) == 1
","def search(arr,n) :
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)","[""search([1, 2, 3, 4, 5], 5) == 1"", ""search([7, 7, 7, 7, 10], 5) == 10"", ""search([0, 1, 0, 1, 2], 5) == 2""]","@startuml
start

:Input: sorted array (arr) and its length (n);
if (Is arr empty or n <= 0?) then (yes)
    :Return ""Invalid input"";
    stop
else (no)
    :Initialize low = 0, high = n - 1;
    while (low <= high?)
        :Calculate mid = low + (high - low) // 2;
        if (mid is even?) then (yes)
            if (arr[mid] == arr[mid + 1]?) then (yes)
                :low = mid + 2;
            else (no)
                :high = mid - 1;
            endif
        else (no)
            if (arr[mid] == arr[mid - 1]?) then (yes)
                :low = mid + 1;
            else (no)
                :high = mid - 1;
            endif
        endif
    endwhile
    :Return arr[low];
endif

stop
@enduml"
499,"def diameter_circle(r):
""""""
Write a function to find the diameter of a circle.
Your code should satisfy these tests:
diameter_circle(5) == 10
diameter_circle(0) == 0
diameter_circle(12.5) == 25.0
""""""
",diameter_circle,"def check(candidate):

    assert candidate(10)==20
    assert candidate(40)==80
    assert candidate(15)==30
","def diameter_circle(r):
  diameter=2*r
  return diameter","[""diameter_circle(5) == 10"", ""diameter_circle(0) == 0"", ""diameter_circle(12.5) == 25.0""]","@startuml

title diameter_circle

start
:diameter_circle(r);
if (r <= 0) then (
  :return 0;
) else (
  :return 2 * r;
)

@enduml"
147,"def max_path_sum(tri, m, n):
""""""
Write a function to find the maximum total path sum in the given triangle.
Your code should satisfy these tests:
max_path_sum([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]], 3, 3) == 23
max_path_sum([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 3, 3) == 20
max_path_sum([[1], [2, 3], [4, 1, 1], [1, 1, 1, 1]], 3, 3) == 8
max_path_sum([[1], [1, 1], [1, 1, 1], [1, 1, 1, 1]], 3, 3) == 4
max_path_sum([[3], [4, 5], [6, 7, 8], [9, 10, 11, 12]], 3, 3) == 28
""""""
",max_path_sum,"def check(candidate):

    assert candidate([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14
    assert candidate([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24
    assert candidate([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53
","def max_path_sum(tri, m, n):
	for i in range(m-1, -1, -1):
		for j in range(i+1):
			if (tri[i+1][j] > tri[i+1][j+1]):
				tri[i][j] += tri[i+1][j]
			else:
				tri[i][j] += tri[i+1][j+1]
	return tri[0][0]","[""max_path_sum([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]], 3, 3) == 23"", ""max_path_sum([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 3, 3) == 20"", ""max_path_sum([[1], [2, 3], [4, 1, 1], [1, 1, 1, 1]], 3, 3) == 8"", ""max_path_sum([[1], [1, 1], [1, 1, 1], [1, 1, 1, 1]], 3, 3) == 4"", ""max_path_sum([[3], [4, 5], [6, 7, 8], [9, 10, 11, 12]], 3, 3) == 28""]","@startuml
start
:Input: tri = [[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]], m = 3, n = 3;
:Output: 23;
:Validate Input:
if (m == n) then (yes)
    :Calculate max path sum:
    :Start from the last row:
    for (i = 0 to m-1)
        :For each element in the row:
        for (j = 0 to i+1)
            :Update the current element with the maximum sum:
            :current = max(current + tri[i][j], current + tri[i][j+1])
        :Move to the next row:
        :current = tri[i][0]
    :Return the first element of the triangle:
    :return tri[0][0]
else (no)
    :Return error:
    :return ""Error: Invalid input""
endif
stop
@enduml"
18,"def str_to_list(string):
""""""
Write a function to remove characters from the first string which are present in the second string.
Your code should satisfy these tests:
str_to_list(""hello"") == ['h', 'e', 'l', 'l', 'o']
str_to_list(""python"") == ['p', 'y', 't', 'h', 'o', 'n']
str_to_list(""12345"") == ['1', '2', '3', '4', '5']
str_to_list("""") == []
str_to_list(""a b c"") == ['a', ' ', 'b', ' ', 'c']
""""""
",str_to_list,"def check(candidate):

    assert remove_dirty_chars(""probasscurve"", ""pros"") == 'bacuve'
    assert remove_dirty_chars(""digitalindia"", ""talent"") == 'digiidi'
    assert remove_dirty_chars(""exoticmiles"", ""toxic"") == 'emles'
","NO_OF_CHARS = 256
def str_to_list(string):
	temp = []
	for x in string:
		temp.append(x)
	return temp
def lst_to_string(List):
	return ''.join(List)
def get_char_count_array(string):
	count = [0] * NO_OF_CHARS
	for i in string:
		count[ord(i)] += 1
	return count
def remove_dirty_chars(string, second_string):
	count = get_char_count_array(second_string)
	ip_ind = 0
	res_ind = 0
	temp = ''
	str_list = str_to_list(string)
	while ip_ind != len(str_list):
		temp = str_list[ip_ind]
		if count[ord(temp)] == 0:
			str_list[res_ind] = str_list[ip_ind]
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ","[""str_to_list(\""hello\"") == ['h', 'e', 'l', 'l', 'o']"", ""str_to_list(\""python\"") == ['p', 'y', 't', 'h', 'o', 'n']"", ""str_to_list(\""12345\"") == ['1', '2', '3', '4', '5']"", ""str_to_list(\""\"") == []"", ""str_to_list(\""a b c\"") == ['a', ' ', 'b', ' ', 'c']""]","@startuml
start
:input string;
if (string is empty?) then (yes)
    :return [];
    stop
endif
:convert string to list;
:return list;
stop
@enduml"
370,"def float_sort(price):
""""""
Write a function to sort a tuple by its float element.
""""""
",float_sort,"def check(candidate):

    assert candidate([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]
    assert candidate([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')]
    assert candidate([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')]
","def float_sort(price):
  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)
  return float_sort","[""float_sort([('apple', '2.5'), ('banana', '1.2'), ('cherry', '3.4')]) == [('cherry', '3.4'), ('apple', '2.5'), ('banana', '1.2')]"", ""float_sort([('dog', '5.6'), ('cat', '3.2'), ('bird', '7.8')]) == [('bird', '7.8'), ('dog', '5.6'), ('cat', '3.2')]"", ""float_sort([('car', '10.0'), ('bike', '8.5'), ('truck', '12.3')]) == [('truck', '12.3'), ('car', '10.0'), ('bike', '8.5')]"", ""float_sort([('pen', '0.5'), ('pencil', '0.3'), ('eraser', '0.7')]) == [('eraser', '0.7'), ('pen', '0.5'), ('pencil', '0.3')]"", ""float_sort([('book', '15.9'), ('notebook', '12.4'), ('journal', '18.2')]) == [('journal', '18.2'), ('book', '15.9'), ('notebook', '12.4')]""]","@startuml
start
:Input: price
:Validate input: isinstance(price, tuple) and all(isinstance(item, tuple) and len(item) == 2 and isinstance(item[1], str) for item in price)
:If not valid, return error message:
if (not valid) then (return ""Invalid input. Please provide a list of tuples, where each tuple contains two elements: a string and a float."")
:Sort price: sorted_price = sorted(price, key=lambda x: float(x[1]))
:Return sorted_price: return sorted_price
stop
@enduml"
969,"def join_tuples(test_list):
""""""
Write a function to join the tuples if they have similar initial elements.
Your code should satisfy these tests:
join_tuples([(1, 2), (1, 3), (2, 4)]) == [(1, 2, 3), (2, 4)]
join_tuples([(5, 6), (7, 8), (7, 9), (7, 10)]) == [(5, 6), (7, 8, 9, 10)]
join_tuples([(3, 4), (5, 6), (5, 7), (8, 9), (8, 10)]) == [(3, 4), (5, 6, 7), (8, 9, 10)]
""""""
",join_tuples,"def check(candidate):

    assert candidate([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]
    assert candidate([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]
    assert candidate([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]
","def join_tuples(test_list):
  res = []
  for sub in test_list:
    if res and res[-1][0] == sub[0]:
      res[-1].extend(sub[1:])
    else:
      res.append([ele for ele in sub])
  res = list(map(tuple, res))
  return (res) ","[""join_tuples([(1, 2), (1, 3), (2, 4)]) == [(1, 2, 3), (2, 4)]"", ""join_tuples([(5, 6), (7, 8), (7, 9), (7, 10)]) == [(5, 6), (7, 8, 9, 10)]"", ""join_tuples([(3, 4), (5, 6), (5, 7), (8, 9), (8, 10)]) == [(3, 4), (5, 6, 7), (8, 9, 10)]""]","@startuml

start
:join_tuples(test_list);

if (test_list.length == 0) then (no-join)
  :return [];
else (join)
  :result = [];
  :for each tuple in test_list do
    :if (result.length == 0) then (first-tuple)
      :result.append(tuple);
    else (other-tuples)
      :if (result[-1][0] == tuple[0]) then (join-tuples)
        :result[-1].append(tuple[1]);
      else (no-join)
        :result.append(tuple);
    endif
  endfor
endif

:return result;

@enduml"
853,"def sum_of_odd_Factors(n):
""""""
Write a python function to find sum of odd factors of a number.
Your code should satisfy these tests:
sum_of_odd_Factors(12) == 4
sum_of_odd_Factors(15) == 24
sum_of_odd_Factors(21) == 32
""""""
",sum_of_odd_Factors,"def check(candidate):

    assert candidate(30) == 24
    assert candidate(18) == 13
    assert candidate(2) == 1
","import math
def sum_of_odd_Factors(n):
    res = 1
    while n % 2 == 0:
        n = n // 2
    for i in range(3,int(math.sqrt(n) + 1)):
        count = 0
        curr_sum = 1
        curr_term = 1
        while n % i == 0:
            count+=1
            n = n // i
            curr_term *= i
            curr_sum += curr_term
        res *= curr_sum
    if n >= 2:
        res *= (1 + n)
    return res ","[""sum_of_odd_Factors(12) == 4"", ""sum_of_odd_Factors(15) == 24"", ""sum_of_odd_Factors(21) == 32""]","@startuml
start

:Input number n;
if (n <= 0?) then (yes)
  :Return 0 (Invalid input);
  stop
else (no)
  :Initialize sum = 0;
  :Initialize i = 1;
  while (i <= n)
    if (n % i == 0 && i % 2 != 0?) then (yes)
      :sum = sum + i;
    else (no)
    endif
    :i = i + 1;
  endwhile
  :Return sum;
  stop
endif

@enduml"
678,"def remove_spaces(str1):
""""""
Write a python function to remove spaces from a given string.
Your code should satisfy these tests:
remove_spaces(""hello world"") == ""helloworld""
remove_spaces(""  leading and trailing  "") == ""leadingandtrailing""
remove_spaces(""multiple   spaces   here"") == ""multiplespaceshere""
""""""
",remove_spaces,"def check(candidate):

    assert candidate(""a b c"") == ""abc""
    assert candidate(""1 2 3"") == ""123""
    assert candidate("" b c"") == ""bc""
","def remove_spaces(str1):
  str1 = str1.replace(' ','')
  return str1","[""remove_spaces(\""hello world\"") == \""helloworld\"""", ""remove_spaces(\""  leading and trailing  \"") == \""leadingandtrailing\"""", ""remove_spaces(\""multiple   spaces   here\"") == \""multiplespaceshere\""""]","@startuml

title remove_spaces

start
:remove_spaces(str1);

if (str1 == null) then (no)
:return ""null"";

else (yes)
:str1 = str1.replaceAll("" "", """");
:return str1;

end if

@enduml"
552,"def Seq_Linear(seq_nums):
""""""
Write a python function to check whether a given sequence is linear or not.
Your code should satisfy these tests:
Seq_Linear([2, 4, 6, 8, 10]) == ""Linear Sequence""
Seq_Linear([1, 3, 6, 10, 15]) == ""Non Linear Sequence""
Seq_Linear([5, 10, 15, 20, 25]) == ""Linear Sequence""
""""""
",Seq_Linear,"def check(candidate):

    assert candidate([0,2,4,6,8,10]) == ""Linear Sequence""
    assert candidate([1,2,3]) == ""Linear Sequence""
    assert candidate([1,5,2]) == ""Non Linear Sequence""
","def Seq_Linear(seq_nums):
  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
  if len(set(seq_nums)) == 1:
    return ""Linear Sequence""
  else:
    return ""Non Linear Sequence""","[""Seq_Linear([2, 4, 6, 8, 10]) == \""Linear Sequence\"""", ""Seq_Linear([1, 3, 6, 10, 15]) == \""Non Linear Sequence\"""", ""Seq_Linear([5, 10, 15, 20, 25]) == \""Linear Sequence\""""]","@startuml
start

:Input sequence (seq_nums);
if (Is seq_nums empty or has less than 2 elements?) then (yes)
    :Return ""Invalid Sequence"";
    stop
else (no)
    :Calculate the difference between the first two elements (diff);
    :Initialize index (i = 1);
    while (i < length of seq_nums - 1) is (yes)
        :Calculate the difference between seq_nums[i+1] and seq_nums[i] (current_diff);
        if (current_diff == diff) then (yes)
            :Increment index (i = i + 1);
        else (no)
            :Return ""Non Linear Sequence"";
            stop
        endif
    endwhile
    :Return ""Linear Sequence"";
    stop
endif

@enduml"
59,"def is_octagonal(n):
""""""
Write a function to find the nth octagonal number.
Your code should satisfy these tests:
is_octagonal(1) == 1
is_octagonal(8) == 176
is_octagonal(21) == 1281
""""""
",is_octagonal,"def check(candidate):

    assert candidate(5) == 65
    assert candidate(10) == 280
    assert candidate(15) == 645
","def is_octagonal(n):
	return 3 * n * n - 2 * n ","[""is_octagonal(1) == 1"", ""is_octagonal(8) == 176"", ""is_octagonal(21) == 1281""]","@startuml
start

:Input n (integer);
if (n is a positive integer?) then (yes)
    :Calculate nth octagonal number using formula: n * (3n - 2);
    :Return the result;
else (no)
    :Handle invalid input (e.g., return error or raise exception);
endif

stop
@enduml"
156,"def tuple_int_str(tuple_str):
""""""
Write a function to convert a tuple of string values to a tuple of integer values.
Your code should satisfy these tests:
tuple_int_str((('1', '2'), ('3', '4'), ('5', '6'))) == ((1, 2), (3, 4), (5, 6))
tuple_int_str((('7', '8'), ('9', '10'))) == ((7, 8), (9, 10))
tuple_int_str((('11', '12'), ('13', '14'), ('15', '16'), ('17', '18'))) == ((11, 12), (13, 14), (15, 16), (17, 18))
""""""
",tuple_int_str,"def check(candidate):

    assert candidate((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))
    assert candidate((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))
    assert candidate((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))
","def tuple_int_str(tuple_str):
    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)
    return result","[""tuple_int_str((('1', '2'), ('3', '4'), ('5', '6'))) == ((1, 2), (3, 4), (5, 6))"", ""tuple_int_str((('7', '8'), ('9', '10'))) == ((7, 8), (9, 10))"", ""tuple_int_str((('11', '12'), ('13', '14'), ('15', '16'), ('17', '18'))) == ((11, 12), (13, 14), (15, 16), (17, 18))""]","@startuml
start

:Input tuple of string values (tuple_str);
if (Is tuple_str empty?) then (yes)
    :Return empty tuple;
    stop
else (no)
    :Initialize an empty list (result);
    :Iterate over each sub-tuple in tuple_str;
    :Initialize an empty list (converted_subtuple);
    :Iterate over each string in the sub-tuple;
    if (Is the string a valid integer?) then (yes)
        :Convert the string to an integer;
        :Add the integer to converted_subtuple;
    else (no)
        :Raise ValueError (Invalid input: string cannot be converted to integer);
        stop
    endif
    :Add converted_subtuple as a tuple to result;
    :Repeat until all sub-tuples are processed;
    :Convert result list to a tuple (final_result);
    :Return final_result;
    stop
endif

@enduml"
320,"def sum_difference(n):
""""""
Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.
Your code should satisfy these tests:
sum_difference(10) == 2640
sum_difference(5) == 170
sum_difference(1) == 0
""""""
",sum_difference,"def check(candidate):

    assert candidate(12)==5434
    assert candidate(20)==41230
    assert candidate(54)==2151270
","def sum_difference(n):
    sumofsquares = 0
    squareofsum = 0
    for num in range(1, n+1):
        sumofsquares += num * num
        squareofsum += num
    squareofsum = squareofsum ** 2
    return squareofsum - sumofsquares","[""sum_difference(10) == 2640"", ""sum_difference(5) == 170"", ""sum_difference(1) == 0""]","@startuml
start
:Input Validation;
if (n > 0) then
    :Calculate sum of squares;
    :Calculate square of sum;
    :Calculate difference;
else
    :Return error message;
endif
:Return difference;
stop
@enduml"
738,"def geometric_sum(n):
""""""
Write a function to calculate the geometric sum of n-1.
Your code should satisfy these tests:
geometric_sum(0) == 1.0
geometric_sum(1) == 1.5
geometric_sum(5) == 1.96875
""""""
",geometric_sum,"def check(candidate):

    assert candidate(7) == 1.9921875
    assert candidate(4) == 1.9375
    assert candidate(8) == 1.99609375
","def geometric_sum(n):
  if n < 0:
    return 0
  else:
    return 1 / (pow(2, n)) + geometric_sum(n - 1)","[""geometric_sum(0) == 1.0"", ""geometric_sum(1) == 1.5"", ""geometric_sum(5) == 1.96875""]","@startuml
start
:geometric_sum(n);
if (n == 0) then (true)
  :return 1.0;
elseif (n == 1) then (true)
  :return 1.5;
else
  :sum = 1.0;
  :i = 1;
  while (i <= n) is (true)
    :sum = sum + 1 / (2**i);
    :i = i + 1;
  endwhile
  :return sum;
endif
stop
@enduml"
213,"def concatenate_strings(test_tup1, test_tup2):
""""""
Write a function to perform the concatenation of two string tuples.
Your code should satisfy these tests:
concatenate_strings(('a', 'b', 'c'), ('1', '2', '3')) == ('a1', 'b2', 'c3')
concatenate_strings(('hello', 'world'), ('!', '?')) == ('hello!', 'world?')
concatenate_strings(('python', 'programming'), ('is', 'fun')) == ('pythonis', 'programmingfun')
""""""
",concatenate_strings,"def check(candidate):

    assert candidate((""Manjeet"", ""Nikhil"", ""Akshat""), ("" Singh"", "" Meherwal"", "" Garg"")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')
    assert candidate((""Shaik"", ""Ayesha"", ""Sanya""), ("" Dawood"", "" Begum"", "" Singh"")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')
    assert candidate((""Harpreet"", ""Priyanka"", ""Muskan""), (""Kour"", "" Agarwal"", ""Sethi"")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')
","def concatenate_strings(test_tup1, test_tup2):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","[""concatenate_strings(('a', 'b', 'c'), ('1', '2', '3')) == ('a1', 'b2', 'c3')"", ""concatenate_strings(('hello', 'world'), ('!', '?')) == ('hello!', 'world?')"", ""concatenate_strings(('python', 'programming'), ('is', 'fun')) == ('pythonis', 'programmingfun')""]","@startuml

title Concatenate String Tuples

start
:Start;

if (test_tup1 and test_tup2 are not empty) then (yes)
  :Validate input;
  :Concatenate strings;
  :Return concatenated tuple;
else (no)
  :Raise error;
end if

stop
:End;

@enduml"
675,"def sum_nums(x, y,m,n):
""""""
Write a function to add two integers. however, if the sum is between the given range it will return 20.
Your code should satisfy these tests:
sum_nums(5, 10, 10, 20) == 20
sum_nums(3, 4, 1, 10) == 20
sum_nums(7, 2, 15, 25) == 9
""""""
",sum_nums,"def check(candidate):

    assert candidate(2,10,11,20)==20
    assert candidate(15,17,1,10)==32
    assert candidate(10,15,5,30)==20
","def sum_nums(x, y,m,n):
    sum_nums= x + y
    if sum_nums in range(m, n):
        return 20
    else:
        return sum_nums","[""sum_nums(5, 10, 10, 20) == 20"", ""sum_nums(3, 4, 1, 10) == 20"", ""sum_nums(7, 2, 15, 25) == 9""]","@startuml

title Sum Numbers

start
:Start;

if (x + y) in [m, n] then
  :Return 20;
else
  :Return x + y;
endif

end

@enduml"
124,"def angle_complex(a,b):
""""""
Write a function to get the angle of a complex number.
Your code should satisfy these tests:
angle_complex(1, 1) == 0.0
angle_complex(0, 1) == 0.0
angle_complex(-1, -1) == 3.141592653589793
angle_complex(1, 0) == 0.0
angle_complex(0, -1) == 3.141592653589793
""""""
",angle_complex,"def check(candidate):

    assert candidate(0,1j)==1.5707963267948966
    assert candidate(2,1j)==0.4636476090008061
    assert candidate(0,2j)==1.5707963267948966
","import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle","[""angle_complex(1, 1) == 0.0"", ""angle_complex(0, 1) == 0.0"", ""angle_complex(-1, -1) == 3.141592653589793"", ""angle_complex(1, 0) == 0.0"", ""angle_complex(0, -1) == 3.141592653589793""]","@startuml
start

:Input real part (a) and imaginary part (b);
if (a == 0 and b == 0) then (yes)
    :Return 0.0 (undefined angle for zero complex number);
else (no)
    if (a == 0) then (yes)
        if (b > 0) then (yes)
            :Return 0.0;
        else (no)
            :Return 3.141592653589793;
        endif
    else (no)
        if (b == 0) then (yes)
            if (a > 0) then (yes)
                :Return 0.0;
            else (no)
                :Return 3.141592653589793;
            endif
        else (no)
            :Calculate angle using arctan(b/a);
            if (a < 0 and b >= 0) then (yes)
                :Add π to the angle;
            else (no)
                if (a < 0 and b < 0) then (yes)
                    :Subtract π from the angle;
                endif
            endif
            :Return the calculated angle;
        endif
    endif
endif

stop
@enduml"
553,"def tuple_to_float(test_tup):
""""""
Write a function to convert the given tuple to a floating-point number.
Your code should satisfy these tests:
tuple_to_float((1, 2)) == 1.2
tuple_to_float((123, 456)) == 123.456
tuple_to_float((0, 99)) == 0.99
""""""
",tuple_to_float,"def check(candidate):

    assert candidate((4, 56)) == 4.56
    assert candidate((7, 256)) == 7.256
    assert candidate((8, 123)) == 8.123
","def tuple_to_float(test_tup):
  res = float('.'.join(str(ele) for ele in test_tup))
  return (res) ","[""tuple_to_float((1, 2)) == 1.2"", ""tuple_to_float((123, 456)) == 123.456"", ""tuple_to_float((0, 99)) == 0.99""]","@startuml
start

:Input tuple (test_tup);
if (Is test_tup a tuple?) then (yes)
    if (Is test_tup empty?) then (yes)
        :Raise ValueError(""Tuple cannot be empty"");
        stop
    else (no)
        if (Are all elements in test_tup integers?) then (yes)
            :Convert tuple elements to strings;
            :Join the strings with a decimal point;
            :Convert the resulting string to a float;
            :Return the float value;
            stop
        else (no)
            :Raise TypeError(""All elements in the tuple must be integers"");
            stop
        endif
    endif
else (no)
    :Raise TypeError(""Input must be a tuple"");
    stop
endif

@enduml"
295,"def sum_div(number):
""""""
Write a function to return the sum of all divisors of a number.
Your code should satisfy these tests:
sum_div(10) == 8
sum_div(15) == 9
sum_div(28) == 28
""""""
",sum_div,"def check(candidate):

    assert candidate(8)==7
    assert candidate(12)==16
    assert candidate(7)==1
","def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)","[""sum_div(10) == 8"", ""sum_div(15) == 9"", ""sum_div(28) == 28""]","@startuml

title sum_div(number)

start
:number = 10;

if (number % 2 == 0) then (
  :sum = 0;
  :for i in range(1, number):
    if (number % i == 0) then (
      :sum += i;
    )
  end
) else (
  :sum = 0;
)

stop

@enduml"
216,"def check_subset_list(list1, list2):
""""""
Write a function to check if a nested list is a subset of another nested list.
Your code should satisfy these tests:
check_subset_list([[1, 2, 3]], [[1, 2]]) == False
check_subset_list([[4, 5, 6]], [[4, 7]]) == False
check_subset_list([[7, 8, 9, 10]], [[8, 9]]) == False
""""""
",check_subset_list,"def check(candidate):

    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False
    assert candidate([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True
    assert candidate([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False
","def check_subset_list(list1, list2):
    l1, l2 = list1[0], list2[0]
    exist = True
    for i in list2:
        if i not in list1:
            exist = False
    return exist ","[""check_subset_list([[1, 2, 3]], [[1, 2]]) == False"", ""check_subset_list([[4, 5, 6]], [[4, 7]]) == False"", ""check_subset_list([[7, 8, 9, 10]], [[8, 9]]) == False""]","@startuml
start
:Input list1, list2;
:Validate inputs;
if (list1 is empty?) then (true)
    :Return False;
    stop
endif
if (list2 is empty?) then (true)
    :Return False;
    stop
endif
:Initialize result as True;
repeat (for each sublist in list2)
    if (sublist is not in list1) then (true)
        :Set result as False;
        break;
    endif
endrepeat
:Return result;
stop
@enduml"
635,"def heap_sort(iterable):
""""""
Write a function to push all values into a heap and then pop off the smallest values one at a time.
Your code should satisfy these tests:
heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
heap_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
heap_sort([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]
""""""
",heap_sort,"def check(candidate):

    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]
    assert candidate( [7, 1, 9, 5])==[1,5,7,9]
","import heapq as hq
def heap_sort(iterable):
    h = []
    for value in iterable:
        hq.heappush(h, value)
    return [hq.heappop(h) for i in range(len(h))]","[""heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]"", ""heap_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"", ""heap_sort([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]""]","@startuml

title Heap Sort

start
:heapify(iterable);

if (len(iterable) == 0) then (no)
:return [];

else (yes)
:heapify(iterable);
:result = [];

while (len(iterable) > 0) do
:result.append(heappop(iterable));

return result;

@enduml"
75,"def find_tuples(test_list, K):
""""""
Write a function to find tuples which have all elements divisible by k from the given list of tuples.
Your code should satisfy these tests:
find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 3) == '[(6, 24, 12), (12, 18, 21)]'
find_tuples([(10, 20, 30), (15, 25, 35), (40, 50, 60)], 5) == '[(10, 20, 30), (15, 25, 35), (40, 50, 60)]'
find_tuples([(8, 16, 24), (9, 18, 27), (10, 20, 30)], 2) == '[(8, 16, 24), (10, 20, 30)]'
find_tuples([(3, 6, 9), (4, 8, 12), (5, 10, 15)], 1) == '[(3, 6, 9), (4, 8, 12), (5, 10, 15)]'
find_tuples([(14, 28, 42), (21, 35, 49), (56, 70, 84)], 7) == '[(14, 28, 42), (21, 35, 49), (56, 70, 84)]'
""""""
",find_tuples,"def check(candidate):

    assert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'
    assert candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'
    assert candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'
","def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return (str(res)) ","[""find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 3) == '[(6, 24, 12), (12, 18, 21)]'"", ""find_tuples([(10, 20, 30), (15, 25, 35), (40, 50, 60)], 5) == '[(10, 20, 30), (15, 25, 35), (40, 50, 60)]'"", ""find_tuples([(8, 16, 24), (9, 18, 27), (10, 20, 30)], 2) == '[(8, 16, 24), (10, 20, 30)]'"", ""find_tuples([(3, 6, 9), (4, 8, 12), (5, 10, 15)], 1) == '[(3, 6, 9), (4, 8, 12), (5, 10, 15)]'"", ""find_tuples([(14, 28, 42), (21, 35, 49), (56, 70, 84)], 7) == '[(14, 28, 42), (21, 35, 49), (56, 70, 84)]'""]","@startuml
start

:Input: List of tuples (test_list) and integer (K);
if (Is test_list empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize an empty list (result_list);
    :Iterate over each tuple in test_list;
    :Initialize a flag (all_divisible) as True;
    :Iterate over each element in the current tuple;
    if (Is element divisible by K?) then (yes)
        :Continue to next element;
    else (no)
        :Set all_divisible to False;
        :Break out of inner loop;
    endif
    if (all_divisible is True?) then (yes)
        :Add current tuple to result_list;
    else (no)
        :Continue to next tuple;
    endif
    :Check if all tuples have been processed;
    if (All tuples processed?) then (yes)
        :Return result_list;
        stop
    else (no)
        :Continue to next tuple;
    endif
endif
@enduml"
782,"def Odd_Length_Sum(arr):
""""""
Write a python function to find the sum of all odd length subarrays.
Your code should satisfy these tests:
Odd_Length_Sum([1, 4, 2, 5, 3]) == 58
Odd_Length_Sum([10, 20, 30]) == 120
Odd_Length_Sum([7, 1, 3, 4, 5, 6]) == 111
""""""
",Odd_Length_Sum,"def check(candidate):

    assert candidate([1,2,4]) == 14
    assert candidate([1,2,1,2]) == 15
    assert candidate([1,7]) == 8
","def Odd_Length_Sum(arr):
    Sum = 0
    l = len(arr)
    for i in range(l):
        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])
    return Sum","[""Odd_Length_Sum([1, 4, 2, 5, 3]) == 58"", ""Odd_Length_Sum([10, 20, 30]) == 120"", ""Odd_Length_Sum([7, 1, 3, 4, 5, 6]) == 111""]","@startuml
start
:Initialize sum as 0;
:Iterate over array;
if (Is Odd Length?) then (yes)
  :Calculate sum of subarray;
  :Add sum to total sum;
else (no)
  :Continue iteration;
endif
repeat
:Loop until end of array;
stop
@enduml"
838,"def min_Swaps(s1,s2):
""""""
Write a python function to find minimum number swaps required to make two binary strings equal.
Your code should satisfy these tests:
min_Swaps(""0101"", ""1010"") == 2
min_Swaps(""1100"", ""0011"") == 2
min_Swaps(""111000"", ""000111"") == 4
min_Swaps(""101010"", ""010101"") == 4
min_Swaps(""1001"", ""0110"") == 2
""""""
",min_Swaps,"def check(candidate):

    assert candidate(""0011"",""1111"") == 1
    assert candidate(""00011"",""01001"") == 2
    assert candidate(""111"",""111"") == 0
","def min_Swaps(s1,s2) :
    c0 = 0; c1 = 0;
    for i in range(len(s1)) :
        if (s1[i] == '0' and s2[i] == '1') :
            c0 += 1;
        elif (s1[i] == '1' and s2[i] == '0') :
            c1 += 1;
    result = c0 // 2 + c1 // 2;
    if (c0 % 2 == 0 and c1 % 2 == 0) :
        return result;
    elif ((c0 + c1) % 2 == 0) :
        return result + 2;
    else :
        return -1;  ","[""min_Swaps(\""0101\"", \""1010\"") == 2"", ""min_Swaps(\""1100\"", \""0011\"") == 2"", ""min_Swaps(\""111000\"", \""000111\"") == 4"", ""min_Swaps(\""101010\"", \""010101\"") == 4"", ""min_Swaps(\""1001\"", \""0110\"") == 2""]","@startuml
start
:Input Validation;
if (s1 and s2 are not equal in length?) then (yes)
    :Return -1;
    stop
endif
:Initialize count to 0;
:Initialize diff_count to 0;
:Calculate diff_count;
:For each character in s1 and s2;
if (character in s1 is not equal to character in s2?) then (yes)
    :Increment diff_count;
endif
:If diff_count is odd?) then (yes)
    :Return -1;
    stop
endif
:For each character in s1 and s2;
if (character in s1 is not equal to character in s2?) then (yes)
    :Increment count;
endif
:Return count/2;
stop
@enduml"
435,"def last_Digit(n):
""""""
Write a python function to find the last digit of a given number.
Your code should satisfy these tests:
last_Digit(123) == 3
last_Digit(4567) == 7
last_Digit(890) == 0
""""""
",last_Digit,"def check(candidate):

    assert candidate(123) == 3
    assert candidate(25) == 5
    assert candidate(30) == 0
","def last_Digit(n) :
    return (n % 10) ","[""last_Digit(123) == 3"", ""last_Digit(4567) == 7"", ""last_Digit(890) == 0""]","@startuml

title: last_Digit(n)

start
:last_Digit(n);

if (n < 0) then (no)
:n is negative;
:return -1;
else (yes)
:n is positive;
:return n % 10;

@enduml"
47,"def compute_Last_Digit(A,B):
""""""
Write a python function to find the last digit when factorial of a divides factorial of b.
Your code should satisfy these tests:
compute_Last_Digit(2, 6) == 0
compute_Last_Digit(3, 3) == 1
compute_Last_Digit(4, 8) == 0
""""""
",compute_Last_Digit,"def check(candidate):

    assert candidate(2,4) == 2
    assert candidate(6,8) == 6
    assert candidate(1,2) == 2
","def compute_Last_Digit(A,B):
    variable = 1
    if (A == B):
        return 1
    elif ((B - A) >= 5):
        return 0
    else:
        for i in range(A + 1,B + 1):
            variable = (variable * (i % 10)) % 10
        return variable % 10","[""compute_Last_Digit(2, 6) == 0"", ""compute_Last_Digit(3, 3) == 1"", ""compute_Last_Digit(4, 8) == 0""]","@startuml
start

:Input A and B;
if (A < 0 or B < 0) then (yes)
    :Print ""Inputs must be non-negative integers"";
    stop
else (no)
    if (A > B) then (yes)
        :Print ""A must be less than or equal to B"";
        stop
    else (no)
        :Compute factorial of A (factA);
        :Compute factorial of B (factB);
        :Compute division result (result = factB / factA);
        :Extract last digit of result (lastDigit = result % 10);
        :Return lastDigit;
    endif
endif

stop
@enduml"
742,"def area_tetrahedron(side):
""""""
Write a function to caluclate the area of a tetrahedron.
Your code should satisfy these tests:
area_tetrahedron(2) == 6.928203230275509
area_tetrahedron(5) == 43.30127018922193
area_tetrahedron(10) == 173.20508075688772
""""""
",area_tetrahedron,"def check(candidate):

    assert candidate(3)==15.588457268119894
    assert candidate(20)==692.8203230275509
    assert candidate(10)==173.20508075688772
","import math
def area_tetrahedron(side):
  area = math.sqrt(3)*(side*side)
  return area","[""area_tetrahedron(2) == 6.928203230275509"", ""area_tetrahedron(5) == 43.30127018922193"", ""area_tetrahedron(10) == 173.20508075688772""]","@startuml

start
:area_tetrahedron(side);
if (side <= 0) then (no)
:Invalid input;
:return -1;
else (yes)
:Calculate area of tetrahedron;
:return area;
endif

@enduml"
609,"def floor_Min(A,B,N):
""""""
Write a python function to find minimum possible value for the given periodic function.
Your code should satisfy these tests:
floor_Min(10, 5, 3) == 8
floor_Min(7, 3, 10) == 23
floor_Min(15, 4, 6) == 22
floor_Min(20, 10, 15) == 30
floor_Min(12, 7, 8) == 13
""""""
",floor_Min,"def check(candidate):

    assert candidate(10,20,30) == 15
    assert candidate(1,2,1) == 0
    assert candidate(11,10,9) == 9
","def floor_Min(A,B,N):
    x = max(B - 1,N)
    return (A*x) // B","[""floor_Min(10, 5, 3) == 8"", ""floor_Min(7, 3, 10) == 23"", ""floor_Min(15, 4, 6) == 22"", ""floor_Min(20, 10, 15) == 30"", ""floor_Min(12, 7, 8) == 13""]","@startuml
start

:Input A, B, N;
if (A <= 0 or B <= 0 or N <= 0) then (yes)
    :Invalid input: A, B, and N must be positive integers;
    stop
else (no)
    :Initialize min_value as infinity;
    :Initialize x as 0;
    while (x <= N) is (yes)
        :Compute current_value = floor((A * x) / B) - A * floor(x / B);
        if (current_value < min_value) then (yes)
            :Update min_value = current_value;
        else (no)
            :Do nothing;
        endif
        :Increment x by 1;
    endwhile (no)
    :Return min_value;
    stop
endif

@enduml"
235,"def even_bit_set_number(n):
""""""
Write a python function to set all even bits of a given number.
Your code should satisfy these tests:
even_bit_set_number(5) == 7
even_bit_set_number(10) == 10
even_bit_set_number(3) == 3
even_bit_set_number(7) == 7
even_bit_set_number(12) == 14
""""""
",even_bit_set_number,"def check(candidate):

    assert candidate(10) == 10
    assert candidate(20) == 30
    assert candidate(30) == 30
","def even_bit_set_number(n):
    count = 0;res = 0;temp = n
    while(temp > 0):
        if (count % 2 == 1):
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) ","[""even_bit_set_number(5) == 7"", ""even_bit_set_number(10) == 10"", ""even_bit_set_number(3) == 3"", ""even_bit_set_number(7) == 7"", ""even_bit_set_number(12) == 14""]","@startuml
start
:Input: n;
:Check if n is less than 0;
if (n < 0) then (return ""Invalid input"")
:Convert n to binary;
:Set all even bits to 1;
:Convert the binary back to decimal;
:Return the result;
stop
@enduml"
450,"def extract_string(str, l):
""""""
Write a function to extract specified size of strings from a give list of string values.
Your code should satisfy these tests:
extract_string([""hello"", ""world"", ""python"", ""code""], 5) == [""hello"", ""world""]
extract_string([""apple"", ""banana"", ""cherry"", ""date""], 6) == [""banana"", ""cherry""]
extract_string([""cat"", ""dog"", ""elephant"", ""fox""], 3) == [""cat"", ""dog"", ""fox""]
""""""
",extract_string,"def check(candidate):

    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']
    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']
    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']
","def extract_string(str, l):
    result = [e for e in str if len(e) == l]
    return result","[""extract_string([\""hello\"", \""world\"", \""python\"", \""code\""], 5) == [\""hello\"", \""world\""]"", ""extract_string([\""apple\"", \""banana\"", \""cherry\"", \""date\""], 6) == [\""banana\"", \""cherry\""]"", ""extract_string([\""cat\"", \""dog\"", \""elephant\"", \""fox\""], 3) == [\""cat\"", \""dog\"", \""fox\""]""]","@startuml
start
:Input List;
:Input Length;
if (Length of string is equal to L?) then (Yes)
  :Return String;
else (No)
  :Move to next string;
endif
repeat
stop
@enduml"
