task_id,prompt,entry_point,canonical_solution,test,generate_test_cases,plantuml
HumanEval/13,"

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
",greatest_common_divisor,"

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""

    while b:
        a, b = b, a % b
    return a
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12
","[""greatest_common_divisor(12, 18) == 6"", ""greatest_common_divisor(36, 48) == 12"", ""greatest_common_divisor(81, 27) == 27"", ""greatest_common_divisor(105, 140) == 35"", ""greatest_common_divisor(72, 144) == 72""]","@startuml
start

:Input integers a and b;
if (a < 0 or b < 0) then (yes)
    :Convert a and b to their absolute values;
else (no)
endif

:Set temp variable;
while (b != 0) is (yes)
    :Set temp = b;
    :Set b = a % b;
    :Set a = temp;
endwhile (no)

:Return a as the GCD;
stop
@enduml"
HumanEval/77,"
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
",iscube,"
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''

    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def check(candidate):

    # Check some simple cases
    assert candidate(1) == True, ""First test error: "" + str(candidate(1))
    assert candidate(2) == False, ""Second test error: "" + str(candidate(2))
    assert candidate(-1) == True, ""Third test error: "" + str(candidate(-1))
    assert candidate(64) == True, ""Fourth test error: "" + str(candidate(64))
    assert candidate(180) == False, ""Fifth test error: "" + str(candidate(180))
    assert candidate(1000) == True, ""Sixth test error: "" + str(candidate(1000))


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == True, ""1st edge test error: "" + str(candidate(0))
    assert candidate(1729) == False, ""2nd edge test error: "" + str(candidate(1728))

","[""iscube(1) == True"", ""iscube(2) == False"", ""iscube(-1) == True"", ""iscube(64) == True"", ""iscube(0) == True"", ""iscube(180) == False""]","@startuml
start
:Take input integer a;
if (a < 0) then (yes)
  :Return True;
elseif (a == 0) then (yes)
  :Return True;
else (no)
  :Find the cube root of a;
  :Round the cube root to the nearest integer;
  :Calculate the cube of the rounded integer;
  if (calculated cube equals a) then (yes)
    :Return True;
  else (no)
    :Return False;
  endif
endif
stop
@enduml"
HumanEval/119,"
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
",match_parens,"
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''

    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(candidate):

    # Check some simple cases
    assert candidate(['()(', ')']) == 'Yes'
    assert candidate([')', ')']) == 'No'
    assert candidate(['(()(())', '())())']) == 'No'
    assert candidate([')())', '(()()(']) == 'Yes'
    assert candidate(['(())))', '(()())((']) == 'Yes'
    assert candidate(['()', '())']) == 'No'
    assert candidate(['(()(', '()))()']) == 'Yes'
    assert candidate(['((((', '((())']) == 'No'
    assert candidate([')(()', '(()(']) == 'No'
    assert candidate([')(', ')(']) == 'No'
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(['(', ')']) == 'Yes'
    assert candidate([')', '(']) == 'Yes' 

","[""match_parens(['(', ')']) == 'Yes'"", ""match_parens(['((', '))']) == 'Yes'"", ""match_parens(['(((', ')))']) == 'Yes'"", ""match_parens(['(())', '()']) == 'Yes'"", ""match_parens(['()', '))']) == 'No'""]","@startuml
start
:Initialize stack;
:Initialize result as 'Yes';
:For each char in lst[0];
    :If char is '(';
        :Push char to stack;
    :Else;
        :If stack is not empty;
            :Pop from stack;
        :Else;
            :Set result as 'No';
            :break;
        :End if;
    :End if;
:End for;
:If stack is not empty;
    :Set result as 'No';
:Else;
    :For each char in lst[1];
        :If char is '(';
            :Push char to stack;
        :Else;
            :If stack is not empty;
                :Pop from stack;
            :Else;
                :Set result as 'No';
                :break;
            :End if;
        :End if;
    :End for;
    :If stack is not empty;
        :Set result as 'No';
    :End if;
:End if;
:Return result;
stop
@enduml"
HumanEval/31,"

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
",is_prime,"

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""

    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","

METADATA = {}


def check(candidate):
    assert candidate(6) == False
    assert candidate(101) == True
    assert candidate(11) == True
    assert candidate(13441) == True
    assert candidate(61) == True
    assert candidate(4) == False
    assert candidate(1) == False
    assert candidate(5) == True
    assert candidate(11) == True
    assert candidate(17) == True
    assert candidate(5 * 17) == False
    assert candidate(11 * 7) == False
    assert candidate(13441 * 19) == False

","[""is_prime(6) == False"", ""is_prime(101) == True"", ""is_prime(11) == True"", ""is_prime(13441) == True"", ""is_prime(61) == True"", ""is_prime(4) == False"", ""is_prime(1) == False""]","@startuml
start

:Input number n;
if (n <= 1?) then (yes)
    :Return False;
    stop
else (no)
    if (n == 2 or n == 3?) then (yes)
        :Return True;
        stop
    else (no)
        if (n % 2 == 0 or n % 3 == 0?) then (yes)
            :Return False;
            stop
        else (no)
            :Initialize i = 5;
            while (i * i <= n?) is (yes)
                if (n % i == 0 or n % (i + 2) == 0?) then (yes)
                    :Return False;
                    stop
                else (no)
                    :i = i + 6;
                endif
            endwhile (no)
            :Return True;
            stop
        endif
    endif
endif

@enduml"
HumanEval/148,"
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
",bf,"
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''

    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def check(candidate):

    # Check some simple cases
    assert candidate(""Jupiter"", ""Neptune"") == (""Saturn"", ""Uranus""), ""First test error: "" + str(len(candidate(""Jupiter"", ""Neptune"")))      
    assert candidate(""Earth"", ""Mercury"") == (""Venus"",), ""Second test error: "" + str(candidate(""Earth"", ""Mercury""))  
    assert candidate(""Mercury"", ""Uranus"") == (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""), ""Third test error: "" + str(candidate(""Mercury"", ""Uranus""))      
    assert candidate(""Neptune"", ""Venus"") == (""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""), ""Fourth test error: "" + str(candidate(""Neptune"", ""Venus""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Earth"", ""Earth"") == ()
    assert candidate(""Mars"", ""Earth"") == ()
    assert candidate(""Jupiter"", ""Makemake"") == ()

","[""bf(\""Mercury\"", \""Neptune\"") == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')"", ""bf(\""Earth\"", \""Uranus\"") == ('Mars', 'Jupiter', 'Saturn')"", ""bf(\""Venus\"", \""Jupiter\"") == ('Earth', 'Mars')"", ""bf(\""Mars\"", \""Saturn\"") == ('Jupiter',)"", ""bf(\""Neptune\"", \""Mercury\"") == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')""]","@startuml
start

:Input planet1 and planet2;
:Define planet order: Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune;

if (planet1 in planet order AND planet2 in planet order) then (yes)
    :Find indices of planet1 and planet2 in planet order;
    if (index of planet1 < index of planet2) then (yes)
        :Extract planets between planet1 and planet2;
    else (no)
        :Extract planets between planet2 and planet1;
    endif
    :Sort extracted planets by proximity to the Sun;
    :Return tuple of extracted planets;
else (no)
    :Return empty tuple;
endif

stop
@enduml"
HumanEval/38,"

def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
",decode_cyclic,"

def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""

    return encode_cyclic(encode_cyclic(s))
","

METADATA = {}


def check(candidate):
    from random import randint, choice
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_cyclic(str)
        assert candidate(encoded_str) == str

","[""decode_cyclic(\""bcaefd\"") == \""abcdef\"""", ""decode_cyclic(\""xyzabc\"") == \""zxycab\"""", ""decode_cyclic(\""pqrstu\"") == \""rpqust\""""]","@startuml
start
:Split string to groups of 3 characters;
while (More groups to process?)
  :Take the next group;
  if (Group has 3 characters?)
    :Rearrange characters cyclically;
  else
    :Do not rearrange;
  endif
endwhile
:Concatenate all groups;
stop
@enduml"
HumanEval/6,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
",parse_nested_parens,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""

    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
    assert candidate('(()(())((())))') == [4]
","[""parse_nested_parens('((()))') == [3]"", ""parse_nested_parens('() () ()') == [1, 1, 1]"", ""parse_nested_parens('((((())))') == [5]"", ""parse_nested_parens('(((())) ((((())))))') == [4, 5]"", ""parse_nested_parens('()()()() ()()()') == [1, 1]""]","@startuml
start

:Input string `paren_string`;
:Initialize empty list `result` to store depths;
:Split `paren_string` into groups using space as delimiter;
:Initialize `max_depth` and `current_depth` to 0;

while (For each group in groups) do
  :Reset `max_depth` and `current_depth` to 0;
  :Iterate through each character in the group;

  if (Character is '(') then (yes)
    :Increment `current_depth` by 1;
    if (`current_depth` > `max_depth`) then (yes)
      :Update `max_depth` to `current_depth`;
    endif
  else (no)
    if (Character is ')') then (yes)
      :Decrement `current_depth` by 1;
    endif
  endif

  :End of character iteration;
  :Append `max_depth` to `result` list;
endwhile

:Return `result` list;
stop
@enduml"
HumanEval/4,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
",mean_absolute_deviation,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""

    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

","[""mean_absolute_deviation([2.0, 2.0, 2.0, 2.0]) == 0.0"", ""mean_absolute_deviation([5.0, 10.0, 15.0, 20.0]) == 5.0"", ""mean_absolute_deviation([3.5, 3.5, 3.5, 3.5]) == 0.0"", ""mean_absolute_deviation([0.0, 5.0, 10.0, 15.0]) == 5.0"", ""mean_absolute_deviation([1.0, 3.0, 5.0, 7.0]) == 2.0""]","@startuml
start

:Input list of numbers;
if (Is list empty?) then (yes)
    :Return error or handle empty list;
    stop
else (no)
    :Calculate the mean (average) of the numbers;
    :Initialize sum of absolute differences to 0;
    :Initialize counter to 0;

    while (For each number in the list) is (yes)
        :Calculate absolute difference |number - mean|;
        :Add absolute difference to sum;
        :Increment counter;
    endwhile (no)

    :Calculate Mean Absolute Deviation (MAD) = sum / counter;
    :Return MAD;
endif

stop
@enduml"
HumanEval/10,"

def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
",make_palindrome,"

def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""

    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate('') == ''
    assert candidate('x') == 'x'
    assert candidate('xyz') == 'xyzyx'
    assert candidate('xyx') == 'xyx'
    assert candidate('jerry') == 'jerryrrej'
","[""make_palindrome('race') == 'racecar'"", ""make_palindrome('hello') == 'hellolleh'"", ""make_palindrome('madam') == 'madam'"", ""make_palindrome('python') == 'pythonohtyp'"", ""make_palindrome('level') == 'level'""]","@startuml
start
:Input string;
if (String is empty?) then (yes)
  :Return empty string;
  stop
else (no)
  :Find longest palindromic postfix;
  if (Palindromic postfix found?) then (yes)
    :Find reverse of prefix;
    :Append reverse to string;
    :Return palindrome;
    stop
  else (no)
    :Return empty string;
    stop
  endif
endif
@enduml"
HumanEval/45,"

def triangle_area(a, h):
    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""
",triangle_area,"

def triangle_area(a, h):
    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""

    return a * h / 2.0
","

METADATA = {}


def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0

","[""triangle_area(4, 6) == 12.0"", ""triangle_area(7, 2) == 7.0"", ""triangle_area(10, 5) == 25.0"", ""triangle_area(3, 9) == 13.5"", ""triangle_area(8, 4) == 16.0""]","@startuml
start

:Input side length (a) and height (h);
if (a > 0 and h > 0?) then (yes)
  :Calculate area = (a * h) / 2;
  :Output area;
else (no)
  :Output ""Invalid input: side length and height must be positive"";
endif

stop
@enduml"
HumanEval/130,"
def tri(n):
    """"""Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """"""
",tri,"
def tri(n):
    """"""Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """"""

    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def check(candidate):

    # Check some simple cases
    
    assert candidate(3) == [1, 3, 2.0, 8.0]
    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]
    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]
    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]

    # Check some edge cases that are easy to work out by hand.
    assert candidate(0) == [1]
    assert candidate(1) == [1, 3]
","[""tri(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]"", ""tri(0) == [1]"", ""tri(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]"", ""tri(10) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0]"", ""tri(2) == [1, 3, 2.0]""]","@startuml

start

:tri(n);

if (n is equal to 0 or 1) then (yes)
    :return [1];
elseif (n is equal to 2) then (yes)
    :return [1, 3];
elseif (n is greater than or equal to 3) then (yes)
    :initialize sequence list;
    :add 1 to sequence list;
    :add 3 to sequence list;
    :add 2 to sequence list;
    :add 8 to sequence list;
    :repeat until sequence list length is equal to n + 1
    repeat
        :calculate new element using the Tribonacci formula;
        :add new element to sequence list;
    repeat while (sequence list length is less than or equal to n)
    :return sequence list;
else (no)
    :print(""Invalid input"");

endif

stop

@enduml"
HumanEval/109,"
def move_one_ball(arr):
    """"""We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """"""
",move_one_ball,"
def move_one_ball(arr):
    """"""We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """"""

    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 4, 5, 1, 2])==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([3, 5, 10, 1, 2])==True
    assert candidate([4, 3, 1, 2])==False
    # Check some edge cases that are easy to work out by hand.
    assert candidate([3, 5, 4, 1, 2])==False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([])==True
","[""move_one_ball([]) == True"", ""move_one_ball([1, 2, 3, 4, 5]) == True"", ""move_one_ball([5, 4, 3, 2, 1]) == False"", ""move_one_ball([2, 4, 6, 8, 10]) == True"", ""move_one_ball([10, 7, 3, 1, 5]) == False""]","@startuml
start

:Input array 'arr';
if (Is array empty?) then (yes)
    :Return True;
    stop
else (no)
    :Initialize sorted_arr = sorted(arr);
    :Initialize n = length of arr;
    :Initialize possible = False;
    :Initialize shift_count = 0;

    while (shift_count < n and not possible) is (yes)
        :Check if arr equals sorted_arr;
        if (arr == sorted_arr) then (yes)
            :Set possible = True;
        else (no)
            :Perform right shift operation on arr;
            :Increment shift_count by 1;
        endif
    endwhile

    if (possible) then (yes)
        :Return True;
    else (no)
        :Return False;
    endif
endif

stop
@enduml"
HumanEval/21,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
",rescale_to_unit,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""

    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate([2.0, 49.9]) == [0.0, 1.0]
    assert candidate([100.0, 49.9]) == [1.0, 0.0]
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
","[""rescale_to_unit([2.0, 4.0, 6.0, 8.0, 10.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"", ""rescale_to_unit([10.0, 20.0, 30.0, 40.0, 50.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"", ""rescale_to_unit([1.0, 3.0, 5.0, 7.0, 9.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"", ""rescale_to_unit([5.0, 15.0, 25.0, 35.0, 45.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"", ""rescale_to_unit([0.5, 1.5, 2.5, 3.5, 4.5]) == [0.0, 0.25, 0.5, 0.75, 1.0]""]","@startuml
start

:Input list of numbers (List[float]);
if (Is list length >= 2?) then (yes)
  :Find the minimum value (min_val) in the list;
  :Find the maximum value (max_val) in the list;
  if (Is min_val == max_val?) then (yes)
    :Return list of zeros (all values are the same);
  else (no)
    :Initialize an empty result list;
    :Iterate over each number in the input list;
    :Apply linear transformation: (number - min_val) / (max_val - min_val);
    :Append transformed number to result list;
    :Return the result list;
  endif
else (no)
  :Raise ValueError(""List must contain at least two elements"");
endif

stop
@enduml"
HumanEval/62,"

def derivative(xs: list):
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
",derivative,"

def derivative(xs: list):
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""

    return [(i * x) for i, x in enumerate(xs)][1:]
","

METADATA = {}


def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
    assert candidate([1, 2, 3]) == [2, 6]
    assert candidate([3, 2, 1]) == [2, 2]
    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
    assert candidate([1]) == []

","[""derivative([4, 3, 2, 1]) == [3, 4, 3]"", ""derivative([1, 4, 6, 8, 10]) == [4, 12, 24, 40]"", ""derivative([2, 2, 2, 2, 2]) == [2, 4, 6, 8]"", ""derivative([5, 0, 3, 2]) == [0, 6, 6]"", ""derivative([1, 1, 1, 1, 1]) == [1, 2, 3, 4]""]","@startuml
start

:Input list of coefficients (xs);
if (Is xs empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize an empty list (derivative_coeffs);
    :Initialize index (i) to 1;
    while (i < length of xs) is (yes)
        :Calculate derivative coefficient: xs[i] * i;
        :Append the result to derivative_coeffs;
        :Increment i by 1;
    endwhile (no)
    :Return derivative_coeffs;
    stop
endif

@enduml"
HumanEval/76,"
def is_simple_power(x, n):
    """"""Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """"""
",is_simple_power,"
def is_simple_power(x, n):
    """"""Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """"""

    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def check(candidate):

    # Check some simple cases
    assert candidate(16, 2)== True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(143214, 16)== False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(4, 2)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(9, 3)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(16, 4)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(24, 2)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(128, 4)==False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(12, 6)==False, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1)==True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(1, 12)==True, ""This prints if this assert fails 2 (also good for debugging!)""

","[""is_simple_power(16, 2) == True"", ""is_simple_power(9, 3) == True"", ""is_simple_power(125, 5) == True"", ""is_simple_power(64, 4) == True"", ""is_simple_power(27, 3) == True""]","@startuml
start
:Check if x is 1;
if (x == 1) then (true)
  :Return true;
  stop
else (false)
  :Set power as n;
  :Set result as 1;
  while (x > result)
    :Multiply result by n;
  endwhile
  if (result == x) then (true)
    :Return true;
    stop
  else (false)
    :Return false;
    stop
  endif
endif
@enduml"
HumanEval/123,"
def get_odd_collatz(n):
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""
",get_odd_collatz,"
def get_odd_collatz(n):
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""

    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def check(candidate):

    # Check some simple cases
    assert candidate(14) == [1, 5, 7, 11, 13, 17]
    assert candidate(5) == [1, 5]
    assert candidate(12) == [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == [1], ""This prints if this assert fails 2 (also good for debugging!)""

","[""get_odd_collatz(6) == [1, 3, 5]"", ""get_odd_collatz(10) == [1, 5]"", ""get_odd_collatz(15) == [1, 5, 15, 23, 35, 53]"", ""get_odd_collatz(20) == [1, 5]"", ""get_odd_collatz(25) == [1, 5, 11, 13, 17, 19, 25, 29]""]","@startuml
start

:Start with positive integer n;
if (n is 1) then (yes)
  :Return [1];
  stop
else (no)
  :Initialize an empty list;
  while (n is not 1)
    if (n is odd) then (yes)
      :Add n to the list;
    endif
    if (n is even) then (yes)
      :Calculate next term as 3n + 1;
    else (no)
      :Calculate next term as n / 2;
    endif
    :Update n to be the next term;
  endwhile
  :Add 1 to the list;
  :Sort the list in increasing order;
  :Return the list;
  stop
endif
@enduml"
HumanEval/110,"
def exchange(lst1, lst2):
    """"""In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return ""YES"".
    Otherwise, return ""NO"".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""
    It is assumed that the input lists will be non-empty.
    """"""
",exchange,"
def exchange(lst1, lst2):
    """"""In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return ""YES"".
    Otherwise, return ""NO"".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""
    It is assumed that the input lists will be non-empty.
    """"""

    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == ""YES""
    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == ""NO""
    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == ""YES"" 
    assert candidate([5, 7, 3], [2, 6, 4]) == ""YES""
    assert candidate([5, 7, 3], [2, 6, 3]) == ""NO"" 
    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == ""NO""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([100, 200], [200, 200]) == ""YES""

","[""exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \""YES\"""", ""exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \""NO\"""", ""exchange([2, 4, 6, 8], [1, 1, 1, 1]) == \""YES\"""", ""exchange([1, 3, 5, 7], [2, 4, 6, 8]) == \""YES\"""", ""exchange([3, 3, 3, 3], [1, 2, 3, 4]) == \""NO\""""]","@startuml
start
:Initialize two input lists lst1, lst2;
:Initialize a counter variable to count the number of odd elements in lst1;
:Iterate over elements in lst1;
:Check if the element is odd;
if (Odd element?) then (yes)
    :Increment the counter;
else (no)
endif
:If the counter is 0, return ""YES"";
:If the counter is not 0, return ""NO"";
stop
@enduml"
HumanEval/44,"

def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
",change_base,"

def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""

    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","

METADATA = {}


def check(candidate):
    assert candidate(8, 3) == ""22""
    assert candidate(9, 3) == ""100""
    assert candidate(234, 2) == ""11101010""
    assert candidate(16, 2) == ""10000""
    assert candidate(8, 2) == ""1000""
    assert candidate(7, 2) == ""111""
    for x in range(2, 8):
        assert candidate(x, x + 1) == str(x)

","[""change_base(10, 5) == '20'"", ""change_base(15, 8) == '17'"", ""change_base(20, 4) == '110'"", ""change_base(25, 3) == '221'"", ""change_base(30, 6) == '50'""]","@startuml
start

:Input number x and base;
if (Is base < 2 or base >= 10?) then (yes)
    :Return ""Invalid base. Base must be between 2 and 9."";
    stop
else (no)
    :Initialize an empty string 'result';
    :Set 'x' to the absolute value of 'x';
    while (Is x > 0?) is (yes)
        :Calculate remainder = x % base;
        :Prepend remainder to 'result';
        :Set x = x // base;
    endwhile (no)
    :Return 'result';
    stop
endif

@enduml"
HumanEval/128,"
def prod_signs(arr):
    """"""
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
",prod_signs,"
def prod_signs(arr):
    """"""
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""

    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1, 2, 2, -4]) == -9
    assert candidate([0, 1]) == 0
    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
    assert candidate([]) == None
    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
    assert candidate([-1, 1, -1, 1]) == 4
    assert candidate([-1, 1, 1, 1]) == -4
    assert candidate([-1, 1, 1, 0]) == 0

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

","[""prod_signs([1, 2, 3, 4, -5]) == -15"", ""prod_signs([-1, -2, -3, -4, -5]) == -15"", ""prod_signs([0, 0, 0, 0]) == 0"", ""prod_signs([1, -2, 3, -4, 5]) == 15"", ""prod_signs([-1, 2, -3, 4, -5]) == -15""]","@startuml
start

:Input array **arr**;
if (Is **arr** empty?) then (yes)
    :Return **None**;
    stop
else (no)
    :Initialize **sum_magnitudes** = 0;
    :Initialize **product_signs** = 1;
    :Initialize **i** = 0;
    while (i < length of **arr**)
        :Get current element **num** = arr[i];
        :Add magnitude of **num** to **sum_magnitudes**;
        if (**num** > 0) then (yes)
            :Multiply **product_signs** by 1;
        else if (**num** < 0) then (yes)
            :Multiply **product_signs** by -1;
        else (no)
            :Multiply **product_signs** by 0;
        endif
        :Increment **i** by 1;
    endwhile
    :Calculate result = **sum_magnitudes** * **product_signs**;
    :Return **result**;
    stop
endif

@enduml"
HumanEval/142,"


def sum_squares(lst):
    """"""""
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """"""
",sum_squares,"


def sum_squares(lst):
    """"""""
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """"""

    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def check(candidate):

    # Check some simple cases
    
    assert candidate([1,2,3]) == 6
    assert candidate([1,4,9]) == 14
    assert candidate([]) == 0
    assert candidate([1,1,1,1,1,1,1,1,1]) == 9
    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3
    assert candidate([0]) == 0
    assert candidate([-1,-5,2,-1,-5]) == -126
    assert candidate([-56,-99,1,0,-2]) == 3030
    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0
    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196
    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448
    
    
    # Don't remove this line:
","[""sum_squares([1, 2, 3, 4, 5]) == 147"", ""sum_squares([0, 0, 0, 0, 0]) == 0"", ""sum_squares([-2, -4, -6, -8, -10]) == -942"", ""sum_squares([1, 1, 1, 1, 1]) == 5"", ""sum_squares([2, 4, 6, 8, 10]) == 1078""]","@startuml
start

if (Is lst empty?) then (yes)
  :Return 0;
  stop
else (no)
  :Initialize total_sum = 0;
  :Initialize index = 0;
  while (index < length of lst) is (true)
    :Check if index is a multiple of 3;
    if (yes)
      :Add lst[index] squared to total_sum;
    elseif (no)
      :Check if index is a multiple of 4 and not 3;
      if (yes)
        :Add lst[index] cubed to total_sum;
      else (no)
        :Skip current element;
      endif
    endif
    :Increment index;
  endwhile
  :Return total_sum;
  stop
endif
@enduml"
HumanEval/51,"

def remove_vowels(text):
    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
",remove_vowels,"

def remove_vowels(text):
    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""

    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","

METADATA = {}


def check(candidate):
    assert candidate('') == ''
    assert candidate(""abcdef\nghijklm"") == 'bcdf\nghjklm'
    assert candidate('fedcba') == 'fdcb'
    assert candidate('eeeee') == ''
    assert candidate('acBAA') == 'cB'
    assert candidate('EcBOO') == 'cB'
    assert candidate('ybcd') == 'ybcd'

","[""remove_vowels('') == ''"", ""remove_vowels(\""abcdef\\nghijklm\"") == 'bcdf\\nghjklm'"", ""remove_vowels('abcdef') == 'bcdf'"", ""remove_vowels('aaaaa') == ''"", ""remove_vowels('aaBAA') == 'B'"", ""remove_vowels('zbcd') == 'zbcd'""]","@startuml
start

:Input text;
if (Is text empty?) then (yes)
    :Return empty string;
    stop
else (no)
    :Initialize result as empty string;
    :Initialize index to 0;
    while (Is index < length of text?) is (yes)
        :Get current character from text;
        if (Is current character a vowel?) then (yes)
            :Skip the vowel;
        else (no)
            :Append character to result;
        endif
        :Increment index;
    endwhile (no)
    :Return result;
    stop
endif

@enduml"
HumanEval/74,"
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
",total_match,"
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''

    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([], []) == []
    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([], ['this']) == []
    assert candidate(['this'], []) == []

","[""total_match(['hi', 'hello'], ['python', 'java']) == ['hi', 'hello']"", ""total_match(['apple', 'banana'], ['orange']) == ['orange']"", ""total_match(['a', 'b', 'c'], ['abc', 'def']) == ['a', 'b', 'c']"", ""total_match(['python', 'java'], ['ruby', 'javascript']) == ['python', 'java']"", ""total_match(['hello'], ['world']) == ['hello']""]","@startuml
start

:Input two lists of strings: lst1 and lst2;

if (Are both lists empty?) then (yes)
    :Return empty list [];
    stop
else (no)
    :Calculate total characters in lst1;
    :Calculate total characters in lst2;

    if (Total characters in lst1 < Total characters in lst2?) then (yes)
        :Return lst1;
        stop
    else if (Total characters in lst1 > Total characters in lst2?) then (yes)
        :Return lst2;
        stop
    else (Total characters are equal)
        :Return lst1;
        stop
    endif
endif

@enduml"
HumanEval/122,"
def add_elements(arr, k):
    """"""
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """"""
",add_elements,"
def add_elements(arr, k):
    """"""
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """"""

    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def check(candidate):

    # Check some simple cases
    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
    assert candidate([111,121,3,4000,5,6], 2) == 0
    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1], 1) == 1, ""This prints if this assert fails 2 (also good for debugging!)""

","[""add_elements([10, 20, 30, 40, 50, 60, 70], 5) == 150"", ""add_elements([101, 202, 303, 404, 505], 3) == 0"", ""add_elements([25, 35, 45, 55, 65, 75, 85, 95], 6) == 300"", ""add_elements([8, 88, 888, 8888, 88888], 4) == 96"", ""add_elements([11, 22, 33, 44, 55, 66, 77], 7) == 308""]","@startuml
start

:Input: arr (array of integers), k (integer);
:Initialize sum = 0;
:Initialize index = 0;

if (index < k and index < len(arr)) then (yes)
    :Check if arr[index] has at most two digits;
    if (arr[index] >= -99 and arr[index] <= 99) then (yes)
        :Add arr[index] to sum;
    else (no)
        :Do not add to sum;
    endif
    :Increment index by 1;
    :Repeat loop;
else (no)
    :Return sum;
endif

stop
@enduml"
HumanEval/124,"
def valid_date(date):
    """"""You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """"""
",valid_date,"
def valid_date(date):
    """"""You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """"""

    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('03-11-2000') == True

    assert candidate('15-01-2012') == False

    assert candidate('04-0-2040') == False

    assert candidate('06-04-2020') == True

    assert candidate('01-01-2007') == True

    assert candidate('03-32-2011') == False

    assert candidate('') == False

    assert candidate('04-31-3000') == False

    assert candidate('06-06-2005') == True

    assert candidate('21-31-2000') == False

    assert candidate('04-12-2003') == True

    assert candidate('04122003') == False

    assert candidate('20030412') == False

    assert candidate('2003-04') == False

    assert candidate('2003-04-12') == False

    assert candidate('04-2003') == False
","[""valid_date('03-11-2000') == True"", ""valid_date('15-01-2012') == False"", ""valid_date('04-0-2040') == False"", ""valid_date('06-04-2020') == True"", ""valid_date('06/04/2020') == False""]","@startuml
start

:Input date string;
if (Is the date string empty?) then (yes)
    :Return False;
    stop
else (no)
    :Split the date string into month, day, year;
    if (Is the date format valid? (mm-dd-yyyy)) then (yes)
        :Convert month, day, year to integers;
        if (Is month < 1 or month > 12?) then (yes)
            :Return False;
            stop
        else (no)
            if (Is day < 1 or day > 31?) then (yes)
                :Return False;
                stop
            else (no)
                if (Is month in [4,6,9,11] and day > 30?) then (yes)
                    :Return False;
                    stop
                else (no)
                    if (Is month == 2 and day > 29?) then (yes)
                        :Return False;
                        stop
                    else (no)
                        :Return True;
                        stop
                    endif
                endif
            endif
        endif
    else (no)
        :Return False;
        stop
    endif
endif

@enduml"
HumanEval/155,"
def even_odd_count(num):
    """"""Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """"""
",even_odd_count,"
def even_odd_count(num):
    """"""Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """"""

    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(7) == (0, 1)
    assert candidate(-78) == (1, 1)
    assert candidate(3452) == (2, 2)
    assert candidate(346211) == (3, 3)
    assert candidate(-345821) == (3, 3)
    assert candidate(-2) == (1, 0)
    assert candidate(-45347) == (2, 3)
    assert candidate(0) == (1, 0)


    # Check some edge cases that are easy to work out by hand.
    assert True

","[""even_odd_count(-1234) == (2, 2)"", ""even_odd_count(0) == (1, 0)"", ""even_odd_count(-987654321) == (4, 5)"", ""even_odd_count(24680) == (5, 0)"", ""even_odd_count(-111111) == (0, 6)""]","@startuml
start

:Input integer **num**;
if (Is **num** an integer?) then (yes)
    :Convert **num** to absolute value;
    :Initialize counters: even_count = 0, odd_count = 0;
    :Convert **num** to string for iteration;
    :Iterate through each digit in **num**;
    if (Is digit even?) then (yes)
        :Increment even_count by 1;
    else (no)
        :Increment odd_count by 1;
    endif
    :Return tuple (even_count, odd_count);
else (no)
    :Raise ValueError(""Input must be an integer"");
endif

stop
@enduml"
HumanEval/121,"
def solution(lst):
    """"""Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """"""
",solution,"
def solution(lst):
    """"""Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """"""

    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def check(candidate):

    # Check some simple cases
    assert candidate([5, 8, 7, 1])    == 12
    assert candidate([3, 3, 3, 3, 3]) == 9
    assert candidate([30, 13, 24, 321]) == 0
    assert candidate([5, 9]) == 5
    assert candidate([2, 4, 8]) == 0
    assert candidate([30, 13, 23, 32]) == 23
    assert candidate([3, 13, 2, 9]) == 3

    # Check some edge cases that are easy to work out by hand.

","[""solution([1, 2, 3, 4, 5]) == 9"", ""solution([10, 11, 12, 13, 14]) == 0"", ""solution([6, 7, 8, 9, 10]) == 0"", ""solution([15, 16, 17, 18, 19]) == 51"", ""solution([20, 21, 22, 23, 24]) == 0""]","@startuml
start

:Input a non-empty list of integers (lst);
:Initialize sum = 0;
:Initialize index = 0;

while (index < length of lst?) is (yes)
    if (index is even?) then (yes)
        if (lst[index] is odd?) then (yes)
            :sum = sum + lst[index];
        else (no)
            :Do nothing;
        endif
    else (no)
        :Do nothing;
    endif
    :index = index + 1;
endwhile (no)

:Return sum;
stop
@enduml"
HumanEval/15,"

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
",string_sequence,"

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""

    return ' '.join([str(x) for x in range(n + 1)])
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate(0) == '0'
    assert candidate(3) == '0 1 2 3'
    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
","[""string_sequence(3) == '0 1 2 3'"", ""string_sequence(7) == '0 1 2 3 4 5 6 7'"", ""string_sequence(1) == '0 1'"", ""string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'"", ""string_sequence(0) == '0'"", ""string_sequence(6) == '0 1 2 3 4 5 6'""]","@startuml
start

:Input integer n;
if (n < 0) then (yes)
    :Return empty string or handle error;
    stop
else (no)
    :Initialize an empty string `result`;
    :Initialize counter `i` to 0;
    while (i <= n) is (yes)
        :Append `i` to `result`;
        if (i < n) then (yes)
            :Append a space to `result`;
        else (no)
        endif
        :Increment `i` by 1;
    endwhile (no)
    :Return `result`;
    stop
endif

@enduml"
HumanEval/154,"
def cycpattern_check(a , b):
    """"""You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check(""abcd"",""abd"") => False
    cycpattern_check(""hello"",""ell"") => True
    cycpattern_check(""whassup"",""psus"") => False
    cycpattern_check(""abab"",""baa"") => True
    cycpattern_check(""efef"",""eeff"") => False
    cycpattern_check(""himenss"",""simen"") => True

    """"""
",cycpattern_check,"
def cycpattern_check(a , b):
    """"""You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check(""abcd"",""abd"") => False
    cycpattern_check(""hello"",""ell"") => True
    cycpattern_check(""whassup"",""psus"") => False
    cycpattern_check(""abab"",""baa"") => True
    cycpattern_check(""efef"",""eeff"") => False
    cycpattern_check(""himenss"",""simen"") => True

    """"""

    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def check(candidate):

    # Check some simple cases
    #assert True, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    #assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert  candidate(""xyzw"",""xyw"") == False , ""test #0""
    assert  candidate(""yello"",""ell"") == True , ""test #1""
    assert  candidate(""whattup"",""ptut"") == False , ""test #2""
    assert  candidate(""efef"",""fee"") == True , ""test #3""
    assert  candidate(""abab"",""aabb"") == False , ""test #4""
    assert  candidate(""winemtt"",""tinem"") == True , ""test #5""

","[""cycpattern_check(\""abcd\"",\""abd\"") == False"", ""cycpattern_check(\""hello\"",\""ell\"") == True"", ""cycpattern_check(\""whassup\"",\""psus\"") == False"", ""cycpattern_check(\""abab\"",\""baa\"") == True"", ""cycpattern_check(\""efef\"",\""eeff\"") == False"", ""cycpattern_check(\""himenss\"",\""simen\"") == True""]","@startuml
start

:Input two words (a, b);
:Check if b is a substring of a;
if (b is a substring of a?) then (yes)
    :Return True;
    stop
else (no)
    :Generate all rotations of b;
    :For each rotation of b;
    if (rotation is a substring of a?) then (yes)
        :Return True;
        stop
    else (no)
        :Continue to next rotation;
    endif
endif
:Return False;
stop

@enduml"
HumanEval/14,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
",all_prefixes,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""

    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate('') == []
    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
    assert candidate('WWW') == ['W', 'WW', 'WWW']
","[""all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']"", ""all_prefixes('12345') == ['1', '12', '123', '1234', '12345']"", ""all_prefixes('python') == ['p', 'py', 'pyt', 'pyth', 'pytho', 'python']"", ""all_prefixes('racecar') == ['r', 'ra', 'rac', 'race', 'racec', 'raceca', 'racecar']"", ""all_prefixes('apple') == ['a', 'ap', 'app', 'appl', 'apple']""]","@startuml
start

:Input string;
if (Is string empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize an empty list to store prefixes;
    :Initialize a variable i to 0;
    while (i < length of string) is (yes)
        :Get the substring from start to i+1;
        :Add the substring to the prefixes list;
        :Increment i by 1;
    endwhile (no)
    :Return the list of prefixes;
    stop
endif

@enduml"
HumanEval/102,"
def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
",choose_num,"
def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""

    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def check(candidate):

    # Check some simple cases
    assert candidate(12, 15) == 14
    assert candidate(13, 12) == -1
    assert candidate(33, 12354) == 12354
    assert candidate(5234, 5233) == -1
    assert candidate(6, 29) == 28
    assert candidate(27, 10) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 7) == -1
    assert candidate(546, 546) == 546

","[""choose_num(3, 9) == 8"", ""choose_num(5, 10) == 10"", ""choose_num(7, 14) == 14"", ""choose_num(10, 15) == 14"", ""choose_num(16, 20) == 20""]","@startuml
start
:Start Function choose_num(x, y);
if (x > y or x is negative or y is negative) then (Invalid Input)
  :Return -1;
else
  while (x <= y) is (True)
    if (x is even) then (Even Number)
      :Set max_even = x;
    endif
    :Increment x;
  endwhile
  if (max_even is not set) then (No Even Number Found)
    :Return -1;
  else
    :Return max_even;
  endif
endif
stop
@enduml"
HumanEval/89,"
def encrypt(s):
    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """"""
",encrypt,"
def encrypt(s):
    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """"""

    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def check(candidate):

    # Check some simple cases
    assert candidate('hi') == 'lm', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('asdfghjkl') == 'ewhjklnop', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('gf') == 'kj', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('et') == 'ix', ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate('faewfawefaewg')=='jeiajeaijeiak', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('hellomyfriend')=='lippsqcjvmirh', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', ""This prints if this assert fails 3 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate('a')=='e', ""This prints if this assert fails 2 (also good for debugging!)""

","[""encrypt('hi') == 'lm'"", ""encrypt('asdfghjkl') == 'ewhjklnop'"", ""encrypt('gf') == 'kj'"", ""encrypt('et') == 'ix'""]","@startuml
start
:Input string s;
if (Length of s > 0) then (yes)
    :Create an empty result string;
    :Define a dictionary mapping each letter to its encrypted position;
    :For each character c in s {
        if (c is a letter) then (yes)
            :Find the encrypted position of c;
            :Add the encrypted letter to the result string;
        else (no)
            :Add c as it is to the result string;
        endif
    }
    :Return the result string as the encrypted output;
else (no)
    :Return an empty string as the output;
endif
stop
@enduml"
HumanEval/101,"
def words_string(s):
    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
",words_string,"
def words_string(s):
    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""

    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    assert candidate(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    assert candidate(""Hi, my name"") == [""Hi"", ""my"", ""name""]
    assert candidate(""One,, two, three, four, five, six,"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("""") == []
    assert candidate(""ahmed     , gamal"") == [""ahmed"", ""gamal""]

","[""words_string(\""Hello, world\"") == [\""Hello\"", \""world\""]"", ""words_string(\""Coding, is, fun\"") == [\""Coding\"", \""is\"", \""fun\""]"", ""words_string(\""Python is awesome\"") == [\""Python\"", \""is\"", \""awesome\""]"", ""words_string(\""Testing, test, case\"") == [\""Testing\"", \""test\"", \""case\""]"", ""words_string(\""Happy, coding, everyone\"") == [\""Happy\"", \""coding\"", \""everyone\""]""]","@startuml
start

:Receive input string;
:Initialize empty word_list array;

while (more words in string?) is (yes)
    :Find next word;
    :Add word to word_list;
endwhile (no)

:Return word_list;

stop
@enduml"
HumanEval/26,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
",remove_duplicates,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""

    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
","[""remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]"", ""remove_duplicates([1, 1, 1, 2, 2, 3, 4, 5, 5]) == [3, 4]"", ""remove_duplicates([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]"", ""remove_duplicates([1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1]"", ""remove_duplicates([]) == []""]","@startuml
start

:Initialize an empty dictionary;
:Initialize an empty list;

while (Iterate over each number in the input list) is (More numbers to process?)
  :Current number = current iteration number;
  if (Current number in dictionary?) then (Yes)
    :Increment the count of current number in dictionary;
  else (No)
    :Add current number to dictionary with count 1;
  endif
endwhile (No)

:Iterate over each number in the input list;
if (Number count in dictionary is 1?) then (Yes)
  :Add number to the result list;
endif
endwhile (No)

:Return the result list;

stop
@enduml"
HumanEval/58,"

def common(l1: list, l2: list):
    """"""Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
",common,"

def common(l1: list, l2: list):
    """"""Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""

    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","

METADATA = {}


def check(candidate):
    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
    assert candidate([4, 3, 2, 8], []) == []

","[""common([1, 4, 5, 6], [2, 3, 7]) == []"", ""common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]"", ""common([5, 6, 7], [8, 9]) == []"", ""common([10, 20, 30, 40], [30, 50, 70]) == [30]"", ""common([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []""]","@startuml
start

:Input two lists l1 and l2;
:Convert l1 and l2 to sets;
:Find intersection of the two sets;
:Convert the intersection to a sorted list;
:Return the sorted list;

stop
@enduml"
HumanEval/103,"
def rounded_avg(n, m):
    """"""You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => ""0b11""
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => ""0b1111""
    rounded_avg(20, 33) => ""0b11010""
    """"""
",rounded_avg,"
def rounded_avg(n, m):
    """"""You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => ""0b11""
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => ""0b1111""
    rounded_avg(20, 33) => ""0b11010""
    """"""

    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 5) == ""0b11""
    assert candidate(7, 13) == ""0b1010""
    assert candidate(964,977) == ""0b1111001010""
    assert candidate(996,997) == ""0b1111100100""
    assert candidate(560,851) == ""0b1011000010""
    assert candidate(185,546) == ""0b101101110""
    assert candidate(362,496) == ""0b110101101""
    assert candidate(350,902) == ""0b1001110010""
    assert candidate(197,233) == ""0b11010111""


    # Check some edge cases that are easy to work out by hand.
    assert candidate(7, 5) == -1
    assert candidate(5, 1) == -1
    assert candidate(5, 5) == ""0b101""

","[""rounded_avg(1, 5) == \""0b11\"""", ""rounded_avg(7, 5) == -1"", ""rounded_avg(10, 20) == \""0b1111\"""", ""rounded_avg(20, 33) == \""0b11010\""""]","@startuml
start
:Start;
if (n > m) then (yes)
  :Return -1;
else (no)
  :sum = 0;
  :count = 0;
  while (n <= m)
    :sum = sum + n;
    :count = count + 1;
    :n = n + 1;
  endwhile
  :avg = round(sum / count);
  :binary_avg = bin(avg);
  :Return binary_avg;
endif
stop
@enduml"
HumanEval/134,"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") ➞ False
    check_if_last_char_is_a_letter(""apple pi e"") ➞ True
    check_if_last_char_is_a_letter(""apple pi e "") ➞ False
    check_if_last_char_is_a_letter("""") ➞ False 
    '''
",check_if_last_char_is_a_letter,"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") ➞ False
    check_if_last_char_is_a_letter(""apple pi e"") ➞ True
    check_if_last_char_is_a_letter(""apple pi e "") ➞ False
    check_if_last_char_is_a_letter("""") ➞ False 
    '''

 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check(candidate):

    # Check some simple cases
    assert candidate(""apple"") == False
    assert candidate(""apple pi e"") == True
    assert candidate(""eeeee"") == False
    assert candidate(""A"") == True
    assert candidate(""Pumpkin pie "") == False
    assert candidate(""Pumpkin pie 1"") == False
    assert candidate("""") == False
    assert candidate(""eeeee e "") == False
    assert candidate(""apple pie"") == False
    assert candidate(""apple pi e "") == False

    # Check some edge cases that are easy to work out by hand.
    assert True

","[""check_if_last_char_is_a_letter(\""hello world\"") == False"", ""check_if_last_char_is_a_letter(\""apple pi e\"") == True"", ""check_if_last_char_is_a_letter(\""abc def\"") == False"", ""check_if_last_char_is_a_letter(\""xy z\"") == True"", ""check_if_last_char_is_a_letter(\""123 45\"") == False""]","@startuml

start

:Initialize txt;
if (txt is empty) then (yes)
  :Return False;
  stop
else (no)
  :Get last character of txt;
  if (last character is a letter) then (yes)
    if (last character is not part of a word) then (yes)
      :Return True;
      stop
    else (no)
      :Return False;
      stop
    endif
  else (no)
    :Return False;
    stop
  endif
endif

@enduml"
HumanEval/139,"
def special_factorial(n):
    """"""The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
",special_factorial,"
def special_factorial(n):
    """"""The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""

    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def check(candidate):

    # Check some simple cases
    assert candidate(4) == 288, ""Test 4""
    assert candidate(5) == 34560, ""Test 5""
    assert candidate(7) == 125411328000, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == 1, ""Test 1""

","[""special_factorial(1) == 1"", ""special_factorial(2) == 2"", ""special_factorial(3) == 12"", ""special_factorial(5) == 34560"", ""special_factorial(6) == 24883200"", ""special_factorial(10) == 6658606584104736522240000000""]","@startuml
start

:Input integer n;
if (n > 0?) then (yes)
  :Initialize result = 1;
  :Initialize i = n;
  while (i > 0?)
    :Calculate factorial of i;
    :Multiply result by factorial;
    :Decrement i by 1;
  endwhile
  :Return result;
else (no)
  :Return error or invalid input message;
endif

stop
@enduml"
HumanEval/40,"

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
",triples_sum_to_zero,"

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""

    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","

METADATA = {}


def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, 5, -1]) == False
    assert candidate([1, 3, -2, 1]) == True
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([1, 2, 5, 7]) == False
    assert candidate([2, 4, -5, 3, 9, 7]) == True
    assert candidate([1]) == False
    assert candidate([1, 3, 5, -100]) == False
    assert candidate([100, 3, 5, -100]) == False

","[""triples_sum_to_zero([1, 3, 5, 0]) == False"", ""triples_sum_to_zero([1, 3, -2, 1]) == True"", ""triples_sum_to_zero([1, 2, 3, 7]) == False"", ""triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True"", ""triples_sum_to_zero([1]) == False""]","@startuml
start

:Input list of integers (l);
if (Is list length < 3?) then (yes)
    :Return False;
    stop
else (no)
    :Sort the list (optional for optimization);
    :Initialize three pointers (i, j, k);
    :Loop through the list with pointer i;
    :Set j = i + 1, k = length of list - 1;
    while (j < k?) is (yes)
        :Calculate sum = l[i] + l[j] + l[k];
        if (sum == 0?) then (yes)
            :Return True;
            stop
        else if (sum < 0?) then (yes)
            :Increment j;
        else (no)
            :Decrement k;
        endif
    endwhile
    :Increment i;
    if (i < length of list - 2?) then (yes)
        :Continue loop;
    else (no)
        :Return False;
        stop
    endif
endif

stop
@enduml"
HumanEval/59,"

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
",largest_prime_factor,"

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""

    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","

METADATA = {}


def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29

","[""largest_prime_factor(100) == 5"", ""largest_prime_factor(120) == 5"", ""largest_prime_factor(200) == 5"", ""largest_prime_factor(315) == 7"", ""largest_prime_factor(500) == 5""]","@startuml
start

:Input integer n > 1 and not prime;
:Initialize largest_factor = 2;

while (n > 1) is (true)
    if (n % largest_factor == 0) then (yes)
        :Divide n by largest_factor;
        :Set n = n / largest_factor;
    else (no)
        :Increment largest_factor by 1;
    endif
endwhile (false)

:Return largest_factor as the largest prime factor;
stop
@enduml"
HumanEval/33,"

def sort_third(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
",sort_third,"

def sort_third(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""

    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","

METADATA = {}


def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

","[""sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"", ""sort_third([10, 20, 30, 40, 50, 60]) == [10, 20, 30, 40, 50, 60]"", ""sort_third([2, 4, 6, 8, 10, 12, 14]) == [2, 4, 6, 8, 10, 12, 14]"", ""sort_third([3, 6, 9, 12, 15, 18]) == [3, 6, 9, 12, 15, 18]"", ""sort_third([11, 22, 33, 44, 55]) == [11, 22, 33, 44, 55]""]","@startuml
start

:Input list l;
:Initialize an empty list l';
:Initialize an empty list third_indices_values;

partition ""Process list l"" {
    :For each index i in l;
    if (i % 3 == 0?) then (yes)
        :Add l[i] to third_indices_values;
        :Add placeholder (e.g., None) to l';
    else (no)
        :Add l[i] to l';
    endif
}

:Sort third_indices_values;

partition ""Update l' with sorted values"" {
    :Initialize counter j = 0;
    :For each index i in l';
    if (i % 3 == 0?) then (yes)
        :Replace l'[i] with third_indices_values[j];
        :Increment j by 1;
    else (no)
        :Keep l'[i] unchanged;
    endif
}

:Return l';

stop
@enduml"
HumanEval/11,"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
",string_xor,"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""

    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate('111000', '101010') == '010010'
    assert candidate('1', '1') == '0'
    assert candidate('0101', '0000') == '0101'
","[""string_xor('101', '010') == '111'"", ""string_xor('111', '000') == '111'"", ""string_xor('000', '111') == '111'"", ""string_xor('1001', '0110') == '1111'"", ""string_xor('0000', '1111') == '1111'""]","@startuml
start

:Input two binary strings a and b;
if (Are a and b valid binary strings?) then (yes)
    :Initialize an empty result string;
    :Initialize index i = 0;
    while (i < length of a and b?) is (yes)
        :Get the ith character of a and b;
        if (Are the characters '0' or '1'?) then (yes)
            :Perform XOR operation on the characters;
            :Append the result to the result string;
        else (no)
            :Return ""Invalid input: strings must contain only '0's and '1's"";
            stop
        endif
        :Increment i by 1;
    endwhile (no)
    :Return the result string;
else (no)
    :Return ""Invalid input: strings must contain only '0's and '1's"";
    stop
endif

stop
@enduml"
HumanEval/88,"
def sort_array(array):
    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """"""
",sort_array,"
def sort_array(array):
    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """"""

    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == [], ""Error""
    assert candidate([5]) == [5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], ""Error""
    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([2, 1]) == [1, 2], ""Error""
    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], ""Error""
    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], ""Error""

","[""sort_array([]) == []"", ""sort_array([5]) == [5]"", ""sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]"", ""sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]""]","@startuml
start

:Input array;
if (Is array empty?) then (yes)
    :Return empty array;
    stop
else (no)
    :Calculate sum of first and last index values;
    if (Is sum odd?) then (yes)
        :Sort array in ascending order;
    else (no)
        :Sort array in descending order;
    endif
    :Return sorted array;
    stop
endif

@enduml"
HumanEval/92,"
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
",any_int,"
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''

    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 3, 1)==True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(2.5, 2, 3)==False, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(1.5, 5, 3.5)==False, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate(2, 6, 2)==False, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(4, 2, 2)==True, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate(2.2, 2.2, 2.2)==False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate(-4, 6, 2)==True, ""This prints if this assert fails 7 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2,1,1)==True, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate(3,4,7)==True, ""This prints if this assert fails 9 (also good for debugging!)""
    assert candidate(3.0,4,7)==False, ""This prints if this assert fails 10 (also good for debugging!)""

","[""any_int(4, 5, 9) == True"", ""any_int(-3, 0, -3) == True"", ""any_int(10, 5, 15) == True"", ""any_int(2, 3, 6) == False"", ""any_int(0, -2, -2) == True""]","@startuml
start

:Input three numbers (x, y, z);
if (Are all inputs integers?) then (yes)
    if (Is x equal to y + z?) then (yes)
        :Return True;
    else (no)
        if (Is y equal to x + z?) then (yes)
            :Return True;
        else (no)
            if (Is z equal to x + y?) then (yes)
                :Return True;
            else (no)
                :Return False;
            endif
        endif
    endif
else (no)
    :Return False;
endif

stop
@enduml"
HumanEval/99,"
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
",closest_integer,"
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''

    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def check(candidate):

    # Check some simple cases
    assert candidate(""10"") == 10, ""Test 1""
    assert candidate(""14.5"") == 15, ""Test 2""
    assert candidate(""-15.5"") == -16, ""Test 3""
    assert candidate(""15.3"") == 15, ""Test 3""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""0"") == 0, ""Test 0""

","[""closest_integer(\""3.8\"") == 4"", ""closest_integer(\""6.2\"") == 6"", ""closest_integer(\""9.5\"") == 10"", ""closest_integer(\""-2.5\"") == -3"", ""closest_integer(\""-7.9\"") == -8""]","@startuml
start
:Get input value;
:Convert input value to float;
:Calculate floor value of input;
:Calculate ceil value of input;
:Calculate distance to floor;
:Calculate distance to ceil;
if (Distance to floor < Distance to ceil) then (true)
  :Return floor value;
else
  :Return ceil value;
endif
stop
@enduml"
HumanEval/117,"
def select_words(s, n):
    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words(""Mary had a little lamb"", 4) ==> [""little""]
    select_words(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
    select_words(""simple white space"", 2) ==> []
    select_words(""Hello world"", 4) ==> [""world""]
    select_words(""Uncle sam"", 3) ==> [""Uncle""]
    """"""
",select_words,"
def select_words(s, n):
    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words(""Mary had a little lamb"", 4) ==> [""little""]
    select_words(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
    select_words(""simple white space"", 2) ==> []
    select_words(""Hello world"", 4) ==> [""world""]
    select_words(""Uncle sam"", 3) ==> [""Uncle""]
    """"""

    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate(""Mary had a little lamb"", 4) == [""little""], ""First test error: "" + str(candidate(""Mary had a little lamb"", 4))      
    assert candidate(""Mary had a little lamb"", 3) == [""Mary"", ""lamb""], ""Second test error: "" + str(candidate(""Mary had a little lamb"", 3))  
    assert candidate(""simple white space"", 2) == [], ""Third test error: "" + str(candidate(""simple white space"", 2))      
    assert candidate(""Hello world"", 4) == [""world""], ""Fourth test error: "" + str(candidate(""Hello world"", 4))  
    assert candidate(""Uncle sam"", 3) == [""Uncle""], ""Fifth test error: "" + str(candidate(""Uncle sam"", 3))


    # Check some edge cases that are easy to work out by hand.
    assert candidate("""", 4) == [], ""1st edge test error: "" + str(candidate("""", 4))
    assert candidate(""a b c d e f"", 1) == [""b"", ""c"", ""d"", ""f""], ""2nd edge test error: "" + str(candidate(""a b c d e f"", 1))

","[""select_words(\""Mary had a little lamb\"", 4) == [\""little\""]"", ""select_words(\""Mary had a little lamb\"", 3) == [\""Mary\"", \""lamb\""]"", ""select_words(\""simple white space\"", 2) == []"", ""select_words(\""Hello world\"", 4) == [\""world\""]"", ""select_words(\""Uncle sam\"", 3) == [\""Uncle\""]""]","@startuml
start

:Input string s and integer n;
if (Is s empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Split s into words;
    :Initialize empty result list;
    :Initialize word index to 0;
    while (Is word index < number of words?) is (yes)
        :Get current word;
        :Initialize consonant count to 0;
        :Initialize character index to 0;
        while (Is character index < length of current word?) is (yes)
            :Get current character;
            if (Is current character a consonant?) then (yes)
                :Increment consonant count by 1;
            else (no)
                :Do nothing;
            endif
            :Increment character index by 1;
        endwhile (no)
        if (Is consonant count == n?) then (yes)
            :Add current word to result list;
        else (no)
            :Do nothing;
        endif
        :Increment word index by 1;
    endwhile (no)
    :Return result list;
    stop
endif

@enduml"
HumanEval/107,"
def even_odd_palindrome(n):
    """"""
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """"""
",even_odd_palindrome,"
def even_odd_palindrome(n):
    """"""
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """"""

    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def check(candidate):

    # Check some simple cases
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5), ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1) == (0, 1), ""This prints if this assert fails 2 (also good for debugging!)""

","[""even_odd_palindrome(5) == (2, 3)"", ""even_odd_palindrome(10) == (4, 5)"", ""even_odd_palindrome(15) == (4, 6)"", ""even_odd_palindrome(20) == (4, 6)"", ""even_odd_palindrome(25) == (5, 6)""]","@startuml
start

:Input positive integer n;
if (n < 1 or n > 1000) then (yes)
    :Invalid input: n must be between 1 and 1000;
    stop
else (no)
    :Initialize even_count = 0, odd_count = 0;
    :Initialize i = 1;
    while (i <= n) is (yes)
        :Check if i is a palindrome;
        if (i is a palindrome) then (yes)
            if (i is even) then (yes)
                :even_count += 1;
            else (no)
                :odd_count += 1;
            endif
        endif
        :i += 1;
    endwhile (no)
    :Return tuple (even_count, odd_count);
    stop
endif

@enduml"
HumanEval/95,"
def check_dict_case(dict):
    """"""
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({""a"":""apple"", ""b"":""banana""}) should return True.
    check_dict_case({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False.
    check_dict_case({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return False.
    check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False.
    check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }) should return True.
    """"""
",check_dict_case,"
def check_dict_case(dict):
    """"""
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({""a"":""apple"", ""b"":""banana""}) should return True.
    check_dict_case({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False.
    check_dict_case({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return False.
    check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False.
    check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }) should return True.
    """"""

    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check(candidate):

    # Check some simple cases
    assert candidate({""p"":""pineapple"", ""b"":""banana""}) == True, ""First test error: "" + str(candidate({""p"":""pineapple"", ""b"":""banana""}))
    assert candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) == False, ""Second test error: "" + str(candidate({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}))
    assert candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) == False, ""Third test error: "" + str(candidate({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}))
    assert candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) == False, ""Fourth test error: "" + str(candidate({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}))
    assert candidate({""STATE"":""NC"", ""ZIP"":""12345"" }) == True, ""Fifth test error: "" + str(candidate({""STATE"":""NC"", ""ZIP"":""12345"" }))      
    assert candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }) == True, ""Fourth test error: "" + str(candidate({""fruit"":""Orange"", ""taste"":""Sweet"" }))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate({}) == False, ""1st edge test error: "" + str(candidate({}))

","[""check_dict_case({\""a\"": \""apple\"", \""b\"": \""banana\""}) == True"", ""check_dict_case({\""Name\"": \""John\"", \""AGE\"": \""36\"", \""City\"": \""Houston\""}) == False"", ""check_dict_case({\""STATE\"": \""NC\"", \""ZIP\"": \""12345\""}) == True"", ""check_dict_case({\""Python\"": \""Programming\"", \""java\"": \""coding\""}) == False"", ""check_dict_case({\""1\"": \""one\"", \""2\"": \""two\"", \""3\"": \""three\""}) == False""]","@startuml
start
:Check if dictionary is empty?;
if (Yes) then (True)
  :Return False;
  stop
else (No)
  :Get all keys from the dictionary;
  :Check if all keys are lowercase or uppercase;
  if (All keys are lowercase or uppercase?) then (True)
    :Return True;
    stop
  else (False)
    :Return False;
    stop
  endif
endif
@enduml"
HumanEval/129,"
def minPath(grid, k):
    """"""
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """"""
",minPath,"
def minPath(grid, k):
    """"""
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """"""

    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def check(candidate):

    # Check some simple cases
    print
    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

","[""minPath([[1,2,3], [4,5,6], [7,8,9]], 4) == [1, 2, 1, 2]"", ""minPath([[5,9,3], [4,1,6], [7,8,2]], 2) == [1, 4]"", ""minPath([[3,6,1], [4,5,2], [7,8,9]], 3) == [1, 2, 1]"", ""minPath([[1,3,2], [5,4,6], [7,8,9]], 5) == [1, 3, 1, 3, 1]"", ""minPath([[2,6,3], [1,5,4], [8,7,9]], 3) == [1, 2, 1]""]","@startuml
start

:Initialize variables;
:Find all possible starting cells;
while (For each starting cell) is (not processed)
    :Initialize current path with starting cell;
    :Initialize visited cells set;
    :Add starting cell to visited set;
    :Initialize path list with starting cell value;
    while (Path length < k) is (yes)
        :Get current cell;
        :Find all valid neighboring cells;
        :Select the lexicographically smallest neighbor;
        :Add selected neighbor to path;
        :Add selected neighbor to visited set;
        :Update current cell to selected neighbor;
    endwhile (Path length >= k)
    :Compare current path with the minimum path found so far;
    if (Current path is lexicographically smaller) then (yes)
        :Update minimum path;
    else (no)
        :Do nothing;
    endif
endwhile (All starting cells processed)

:Return the minimum path;
stop
@enduml"
HumanEval/63,"

def fibfib(n: int):
    """"""The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
",fibfib,"

def fibfib(n: int):
    """"""The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""

    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","

METADATA = {}


def check(candidate):
    assert candidate(2) == 1
    assert candidate(1) == 0
    assert candidate(5) == 4
    assert candidate(8) == 24
    assert candidate(10) == 81
    assert candidate(12) == 274
    assert candidate(14) == 927

","[""fibfib(3) == 1"", ""fibfib(6) == 7"", ""fibfib(10) == 81"", ""fibfib(4) == 2"", ""fibfib(7) == 13""]","@startuml
start

:Input n;
if (n == 0 or n == 1) then (yes)
    :Return 0;
elseif (n == 2) then (yes)
    :Return 1;
else (no)
    :Initialize variables:
    a = 0, b = 0, c = 1;
    :Initialize counter:
    i = 3;
    while (i <= n) is (yes)
        :Calculate next FibFib number:
        next = a + b + c;
        :Update variables:
        a = b;
        b = c;
        c = next;
        :Increment counter:
        i = i + 1;
    endwhile (no)
    :Return c;
endif

stop
@enduml"
HumanEval/159,"
def eat(number, need, remaining):
    """"""
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """"""
",eat,"
def eat(number, need, remaining):
    """"""
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """"""

    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(5, 6, 10) == [11, 4], ""Error""
    assert candidate(4, 8, 9) == [12, 1], ""Error""
    assert candidate(1, 10, 10) == [11, 0], ""Error""
    assert candidate(2, 11, 5) == [7, 0], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(4, 5, 7) == [9, 2], ""Error""
    assert candidate(4, 5, 1) == [5, 0], ""Error""

","[""eat(5, 6, 10) == [11, 4]"", ""eat(4, 8, 9) == [12, 1]"", ""eat(1, 10, 10) == [11, 0]"", ""eat(2, 11, 5) == [7, 0]""]","@startuml
start

:Input: number, need, remaining;
:Validate inputs (0 <= number, need, remaining <= 1000);

if (remaining >= need) then (yes)
    :Calculate total eaten carrots: number + need;
    :Calculate remaining carrots: remaining - need;
else (no)
    :Calculate total eaten carrots: number + remaining;
    :Set remaining carrots to 0;
endif

:Return [total eaten carrots, remaining carrots];
stop
@enduml"
HumanEval/22,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
",filter_integers,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""

    return [x for x in values if isinstance(x, int)]
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate([]) == []
    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
","[""filter_integers(['a', 3.14, 5, 8.2]) == [5]"", ""filter_integers([1, 2, 3, 'abc', {}, [], 4]) == [1, 2, 3, 4]"", ""filter_integers([0, -1, 'xyz', 5.6, 7]) == [0, -1, 7]"", ""filter_integers([9, 'hello', 3.0, 4, -2]) == [9, 4, -2]"", ""filter_integers([6, 'world', 8, 10, 12]) == [6, 8, 10, 12]""]","@startuml
start

:Input List of values;
:Initialize empty result list;

while (For each value in the input list?) is (yes)
    :Check if the value is an instance of int;
    if (Is the value an integer?) then (yes)
        :Add the integer to the result list;
    else (no)
        :Skip the value;
    endif
endwhile (no)

:Return the filtered result list;

stop
@enduml"
HumanEval/115,"
def max_fill(grid, capacity):
    import math
    """"""
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """"""
",max_fill,"
def max_fill(grid, capacity):
    import math
    """"""
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """"""

    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def check(candidate):


    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, ""Error""
    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, ""Error""
    assert candidate([[0,0,0], [0,0,0]], 5) == 0, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, ""Error""
    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, ""Error""

","[""max_fill([[1, 0, 1], [0, 1, 0], [1, 1, 1]], 2) == 4"", ""max_fill([[0, 0, 0, 0], [1, 0, 0, 1], [0, 1, 1, 0]], 1) == 4"", ""max_fill([[1, 1, 1], [0, 0, 0], [1, 1, 0]], 3) == 2"", ""max_fill([[0, 0, 0, 0, 0], [1, 1, 1, 1, 0]], 2) == 2"", ""max_fill([[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]], 1) == 12""]","@startuml
start
:Initialize total_fills to 0;
:Iterate through each row in grid;
:Iterate through each well in row;
if (well == 1) then (yes)
    :Calculate needed_fills = well - bucket_capacity;
    if (needed_fills > 0) then (yes)
        :Increase total_fills by needed_fills;
        :Set well to bucket_capacity;
    else (no)
        :Set well to 0;
    endif
else (no)
    :Continue to next well;
endif
repeat while (There are more wells)
end repeat
:Return total_fills;
stop
@enduml"
HumanEval/27,"

def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
",flip_case,"

def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""

    return string.swapcase()
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate('') == ''
    assert candidate('Hello!') == 'hELLO!'
    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
","[""flip_case('Hello') == 'hELLO'"", ""flip_case('Python Programming') == 'pYTHON pROGRAMMING'"", ""flip_case('123aBcDeF456') == '123AbCdEf456'"", ""flip_case('lowerUPPER') == 'LOWERupper'"", ""flip_case('') == ''""]","@startuml
start

:Input string;
:Initialize an empty result string;

if (Is the string empty?) then (yes)
  :Return empty string;
  stop
else (no)
  :Iterate over each character in the string;
  :Check if the character is lowercase?;
  if (yes) then
    :Convert character to uppercase;
  else (no)
    :Check if the character is uppercase?;
    if (yes) then
      :Convert character to lowercase;
    else (no)
      :Keep the character as is;
    endif
  endif
  :Append the converted character to the result string;
  :Repeat until all characters are processed;
endif

:Return the result string;
stop

@enduml"
HumanEval/120,"
def maximum(arr, k):
    """"""
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """"""
",maximum,"
def maximum(arr, k):
    """"""
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """"""

    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
    assert candidate([4, -4, 4], 2) == [4, 4]
    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
    assert candidate([1, 0, 5, -7], 1) == [5]
    assert candidate([4, -4], 2) == [-4, 4]
    assert candidate([-10, 10], 2) == [-10, 10]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

","[""maximum([1, 2, 3, 4, 5], 3) == [3, 4, 5]"", ""maximum([-5, -7, -2, -1], 2) == [-2, -1]"", ""maximum([100, 200, 300, 400, 500], 4) == [200, 300, 400, 500]"", ""maximum([-10, -20, -30, -40, -50], 1) == [-10]"", ""maximum([7, -2, 9, -5, 3, 0], 4) == [0, 3, 7, 9]""]","@startuml

start

:Initialize empty list result;
:Sort array arr in descending order;
:Iterate over the first k elements in arr;
:   Add current element to result;
end

stop

@enduml"
HumanEval/39,"

def prime_fib(n: int):
    """"""
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
",prime_fib,"

def prime_fib(n: int):
    """"""
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""

    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","

METADATA = {}


def check(candidate):
    assert candidate(1) == 2
    assert candidate(2) == 3
    assert candidate(3) == 5
    assert candidate(4) == 13
    assert candidate(5) == 89
    assert candidate(6) == 233
    assert candidate(7) == 1597
    assert candidate(8) == 28657
    assert candidate(9) == 514229
    assert candidate(10) == 433494437

","[""prime_fib(1) == 2"", ""prime_fib(2) == 3"", ""prime_fib(3) == 5"", ""prime_fib(4) == 13"", ""prime_fib(5) == 89""]","@startuml
start
:Initialize n=2, count=0, i=1, fib=1, fib_prev=1;
:Check if count equals n;
while (count < n)
    :Calculate next Fibonacci number;
    :Check if the number is prime;
    if (is_prime)
        :Increment count;
        :Update fib_prev with current fib;
    else (not prime)
        :Increment i;
    endif
endwhile
:Return fib;
stop
@enduml"
HumanEval/73,"
def smallest_change(arr):
    """"""
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """"""
",smallest_change,"
def smallest_change(arr):
    """"""
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """"""

    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,5,4,7,9,6]) == 4
    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
    assert candidate([1, 4, 2]) == 1
    assert candidate([1, 4, 4, 2]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3, 2, 1]) == 0
    assert candidate([3, 1, 1, 3]) == 0
    assert candidate([1]) == 0
    assert candidate([0, 1]) == 1

","[""smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1"", ""smallest_change([1, 2, 3, 2, 1]) == 0"", ""smallest_change([5, 5, 5, 5, 5, 5]) == 0"", ""smallest_change([1, 2, 3, 4, 5, 6, 7]) == 3"", ""smallest_change([1, 2, 3, 4, 5, 6]) == 3""]","@startuml
start

:Input array **arr**;
:Initialize **left** = 0, **right** = len(arr) - 1, **changes** = 0;

while (**left** < **right**) is (yes)
    if (arr[left] == arr[right]?) then (yes)
        :No change needed;
    else (no)
        :Increment **changes** by 1;
    endif
    :Increment **left** by 1;
    :Decrement **right** by 1;
endwhile (no)

:Return **changes** as the minimum number of changes required;

stop
@enduml"
HumanEval/50,"

def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
",decode_shift,"

def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""

    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","

METADATA = {}


def check(candidate):
    from random import randint, choice
    import copy
    import string

    letters = string.ascii_lowercase
    for _ in range(100):
        str = ''.join(choice(letters) for i in range(randint(10, 20)))
        encoded_str = encode_shift(str)
        assert candidate(copy.deepcopy(encoded_str)) == str

","[""decode_shift(\""fgh\"") == \""abc\"""", ""decode_shift(\""xyz\"") == \""stu\"""", ""decode_shift(\""jkl\"") == \""efg\"""", ""decode_shift(\""qrs\"") == \""lmn\"""", ""decode_shift(\""uvw\"") == \""pqr\""""]","@startuml
start

:Input string **s**;
if (Is **s** a valid string?) then (yes)
    :Initialize empty result string;
    :Iterate over each character **ch** in **s**;
    if (Is **ch** a lowercase letter?) then (yes)
        :Calculate shifted character using formula:
        chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a""));
        :Append shifted character to result string;
    else (no)
        :Append original character **ch** to result string;
    endif
    :Return encoded/decoded result string;
else (no)
    :Raise ValueError(""Input must be a valid string"");
endif

stop
@enduml"
HumanEval/19,"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """"""
",sort_numbers,"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """"""

    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate('') == ''
    assert candidate('three') == 'three'
    assert candidate('three five nine') == 'three five nine'
    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
    assert candidate('six five four three two one zero') == 'zero one two three four five six'
","[""sort_numbers('one zero three') == 'zero one three'"", ""sort_numbers('nine seven six') == 'six seven nine'"", ""sort_numbers('eight five two') == 'two five eight'"", ""sort_numbers('four five six') == 'four five six'"", ""sort_numbers('nine eight one') == 'one eight nine'""]","@startuml
start

:Input space-delimited string of numerals;
:Validate input string;
if (Input is valid?) then (yes)
    :Split input string into list of number words;
    :Create mapping from number words to integers;
    :Convert number words to integers using mapping;
    :Sort integers in ascending order;
    :Convert sorted integers back to number words;
    :Join sorted number words into a single string;
    :Return sorted string;
else (no)
    :Handle invalid input (e.g., return error message);
endif

stop
@enduml"
HumanEval/126,"
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
",is_sorted,"
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def check(candidate):

    # Check some simple cases
    assert candidate([5]) == True
    assert candidate([1, 2, 3, 4, 5]) == True
    assert candidate([1, 3, 2, 4, 5]) == False
    assert candidate([1, 2, 3, 4, 5, 6]) == True
    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True
    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([]) == True, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([1]) == True, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([3, 2, 1]) == False, ""This prints if this assert fails 4 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 2, 2, 3, 4]) == False, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate([1, 2, 3, 3, 3, 4]) == False, ""This prints if this assert fails 6 (good for debugging!)""
    assert candidate([1, 2, 2, 3, 3, 4]) == True, ""This prints if this assert fails 7 (good for debugging!)""
    assert candidate([1, 2, 3, 4]) == True, ""This prints if this assert fails 8 (good for debugging!)""

","[""is_sorted([1, 2, 3, 4, 5]) == True"", ""is_sorted([3, 6, 9, 12, 15]) == True"", ""is_sorted([1, 2, 2, 3, 4]) == True"", ""is_sorted([8, 7, 6, 5, 4]) == False"", ""is_sorted([1, 2, 2, 2, 3, 4, 5]) == False""]","@startuml
start

:Input list (lst);
if (Is list empty or has only one element?) then (yes)
    :Return True;
    stop
else (no)
    :Initialize previous_element = lst[0];
    :Initialize duplicate_count = 1;
    :Initialize i = 1;
    while (i < length of lst) is (yes)
        if (lst[i] == previous_element) then (yes)
            :Increment duplicate_count by 1;
            if (duplicate_count > 2) then (yes)
                :Return False;
                stop
            else (no)
                :Continue;
            endif
        else (no)
            :Set duplicate_count = 1;
        endif
        if (lst[i] < previous_element) then (yes)
            :Return False;
            stop
        else (no)
            :Set previous_element = lst[i];
            :Increment i by 1;
        endif
    endwhile
    :Return True;
    stop
endif

@enduml"
HumanEval/2,"

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """"""
",truncate_number,"

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """"""

    return number % 1.0
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate(3.5) == 0.5
    assert abs(candidate(1.33) - 0.33) < 1e-6
    assert abs(candidate(123.456) - 0.456) < 1e-6
","[""truncate_number(9.8) == 0.8000000000000007"", ""truncate_number(25.63) == 0.629999999999999"", ""truncate_number(7.0) == 0.0"", ""truncate_number(123.456) == 0.45600000000000307"", ""truncate_number(0.333) == 0.333""]","@startuml
start

:Input a positive floating point number (number);
if (Is number >= 0?) then (yes)
    :Decompose number into integer part (int_part) and decimal part (decimal_part);
    :Return decimal_part;
else (no)
    :Handle invalid input (e.g., raise an error or return an error message);
endif

stop
@enduml"
HumanEval/72,"
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
",will_it_fly,"
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''

    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate([3, 2, 3], 9) is True
    assert candidate([1, 2], 5) is False
    assert candidate([3], 5) is True
    assert candidate([3, 2, 3], 1) is False


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1, 2, 3], 6) is False
    assert candidate([5], 5) is True

","[""will_it_fly([1, 1, 1, 1, 1], 5) == True"", ""will_it_fly([3, 5, 3], 11) == True"", ""will_it_fly([2, 4, 2], 7) == False"", ""will_it_fly([10, 20, 10], 40) == True"", ""will_it_fly([1, 2, 1, 2, 1], 5) == False""]","@startuml
start

:Input q (list) and w (max weight);
:Check if q is a palindromic list;
if (Is q a palindrome?) then (yes)
    :Calculate the sum of elements in q;
    if (Sum of q <= w?) then (yes)
        :Return True;
    else (no)
        :Return False;
    endif
else (no)
    :Return False;
endif

stop
@enduml"
HumanEval/146,"
def specialFilter(nums):
    """"""Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """"""
",specialFilter,"
def specialFilter(nums):
    """"""Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """"""

    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def check(candidate):

    # Check some simple cases
    assert candidate([5, -2, 1, -5]) == 0  
    assert candidate([15, -73, 14, -15]) == 1
    assert candidate([33, -2, -3, 45, 21, 109]) == 2
    assert candidate([43, -12, 93, 125, 121, 109]) == 4
    assert candidate([71, -2, -33, 75, 21, 19]) == 3


    # Check some edge cases that are easy to work out by hand.
    assert candidate([1]) == 0              
    assert candidate([]) == 0                   

","[""specialFilter([15, -73, 14, -15]) == 1"", ""specialFilter([33, -2, -3, 45, 21, 109]) == 2"", ""specialFilter([12, 33, 57, -91, 1001, 89]) == 3"", ""specialFilter([9, -19, 25, 88, 1007, -31]) == 1"", ""specialFilter([77, 3, 2, -113, 88, 99, 110]) == 2""]","@startuml
start

:Input array of numbers (nums);
:Initialize counter = 0;

while (For each number in nums) is (number exists?)
    :Get current number;
    if (number > 10?) then (yes)
        :Convert number to string;
        :Get first and last digits;
        if (first digit is odd AND last digit is odd?) then (yes)
            :Increment counter by 1;
        else (no)
            :Do nothing;
        endif
    else (no)
        :Do nothing;
    endif
endwhile

:Return counter;
stop
@enduml"
HumanEval/53,"

def add(x: int, y: int):
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
",add,"

def add(x: int, y: int):
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""

    return x + y
","

METADATA = {}


def check(candidate):
    import random

    assert candidate(0, 1) == 1
    assert candidate(1, 0) == 1
    assert candidate(2, 3) == 5
    assert candidate(5, 7) == 12
    assert candidate(7, 5) == 12

    for i in range(100):
        x, y = random.randint(0, 1000), random.randint(0, 1000)
        assert candidate(x, y) == x + y

","[""add(0, 0) == 0"", ""add(-5, 5) == 0"", ""add(100, 200) == 300"", ""add(-10, -20) == -30"", ""add(3, -7) == -4""]","@startuml
start

:Input two integers x and y;
if (Are x and y valid integers?) then (yes)
  :Calculate sum = x + y;
  :Output the result sum;
else (no)
  :Output ""Invalid input: x and y must be integers"";
endif

stop
@enduml"
HumanEval/34,"

def unique(l: list):
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
",unique,"

def unique(l: list):
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""

    return sorted(list(set(l)))
","

METADATA = {}


def check(candidate):
    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

","[""unique([1, 2, 3, 4, 5, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]"", ""unique([8, 8, 9, 9, 10, 10, 11]) == [8, 9, 10, 11]"", ""unique([0, 0, 0, 0, 0]) == [0]"", ""unique([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]"", ""unique([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]""]","@startuml
start

:Input list (l);
if (Is the input list empty?) then (yes)
    :Return an empty list;
    stop
else (no)
    :Convert the list to a set to remove duplicates;
    :Convert the set back to a list;
    :Sort the list in ascending order;
    :Return the sorted unique list;
    stop
endif

@enduml"
HumanEval/29,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
",filter_by_prefix,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""

    return [x for x in strings if x.startswith(prefix)]
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
","[""filter_by_prefix(['apple', 'banana', 'cherry', 'date'], 'b') == ['banana']"", ""filter_by_prefix(['cat', 'dog', 'elephant', 'frog'], 'c') == ['cat']"", ""filter_by_prefix(['green', 'blue', 'red', 'yellow'], 'g') == ['green']"", ""filter_by_prefix(['hello', 'world', 'python', 'programming'], 'p') == ['python', 'programming']"", ""filter_by_prefix(['alpha', 'beta', 'gamma', 'delta'], 'd') == ['delta']""]","@startuml
start

:Input: List of strings (strings) and prefix (prefix);
if (Is strings empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize empty result list (filtered_strings);
    :Iterate over each string in strings;
    while (For each string in strings) is (yes)
        if (Does string start with prefix?) then (yes)
            :Add string to filtered_strings;
        else (no)
            :Skip string;
        endif
    endwhile
    :Return filtered_strings;
    stop
endif

@enduml"
HumanEval/41,"

def car_race_collision(n: int):
    """"""
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """"""
",car_race_collision,"

def car_race_collision(n: int):
    """"""
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """"""

    return n**2
","

METADATA = {}


def check(candidate):
    assert candidate(2) == 4
    assert candidate(3) == 9
    assert candidate(4) == 16
    assert candidate(8) == 64
    assert candidate(10) == 100

","[""car_race_collision(0) == 0"", ""car_race_collision(1) == 1"", ""car_race_collision(2) == 4"", ""car_race_collision(3) == 9"", ""car_race_collision(5) == 25""]","@startuml
start

:Input number of cars (n);
if (n <= 0?) then (yes)
  :Output 0 collisions;
  stop
else (no)
  :Calculate number of collisions;
  :Output n collisions;
  stop
endif

@enduml"
HumanEval/71,"
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
",triangle_area,"
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''

    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == 6.00, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 10) == -1
    assert candidate(4, 8, 5) == 8.18
    assert candidate(2, 2, 2) == 1.73
    assert candidate(1, 2, 3) == -1
    assert candidate(10, 5, 7) == 16.25
    assert candidate(2, 6, 3) == -1

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == 0.43, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == -1

","[""triangle_area(4, 13, 15) == 24.0"", ""triangle_area(5, 12, 13) == 30.0"", ""triangle_area(7, 24, 25) == 84.0"", ""triangle_area(8, 15, 17) == 60.0"", ""triangle_area(9, 40, 41) == 180.0""]","@startuml
start

:Input side lengths a, b, c;

if (Is a + b > c?) then (yes)
    if (Is a + c > b?) then (yes)
        if (Is b + c > a?) then (yes)
            :Calculate semi-perimeter s = (a + b + c) / 2;
            :Calculate area using Heron's formula:
            area = sqrt(s * (s - a) * (s - b) * (s - c));
            :Round area to 2 decimal points;
            :Return rounded area;
        else (no)
            :Return -1;
        endif
    else (no)
        :Return -1;
    endif
else (no)
    :Return -1;
endif

stop
@enduml"
HumanEval/105,"
def by_length(arr):
    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """"""
",by_length,"
def by_length(arr):
    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """"""

    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([1, -1 , 55]) == ['One'], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, -1, 3, 2]) == [""Three"", ""Two"", ""One""]
    assert candidate([9, 4, 8]) == [""Nine"", ""Eight"", ""Four""]

","[""by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']"", ""by_length([9, 8, 7, 6, 5, 4, 3, 2, 1]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']"", ""by_length([5, 5, 5, 5, 5]) == ['Five', 'Five', 'Five', 'Five', 'Five']"", ""by_length([1, 3, 5, 7, 9]) == ['Nine', 'Seven', 'Five', 'Three', 'One']"", ""by_length([1, 2, 3, 4, 10, 20]) == ['Four', 'Three', 'Two', 'One']""]","@startuml
start

:Input array **arr**;
if (Is **arr** empty?) then (yes)
  :Return empty array;
  stop
else (no)
  :Filter integers between 1 and 9 inclusive;
  :Sort the filtered array in ascending order;
  :Reverse the sorted array;
  :Replace each digit with its corresponding name;
  :Return the resulting array;
  stop
endif

@enduml"
HumanEval/118,"
def get_closest_vowel(word):
    """"""You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel(""yogurt"") ==> ""u""
    get_closest_vowel(""FULL"") ==> ""U""
    get_closest_vowel(""quick"") ==> """"
    get_closest_vowel(""ab"") ==> """"
    """"""
",get_closest_vowel,"
def get_closest_vowel(word):
    """"""You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel(""yogurt"") ==> ""u""
    get_closest_vowel(""FULL"") ==> ""U""
    get_closest_vowel(""quick"") ==> """"
    get_closest_vowel(""ab"") ==> """"
    """"""

    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def check(candidate):

    # Check some simple cases
    assert candidate(""yogurt"") == ""u""
    assert candidate(""full"") == ""u""
    assert candidate(""easy"") == """"
    assert candidate(""eAsy"") == """"
    assert candidate(""ali"") == """"
    assert candidate(""bad"") == ""a""
    assert candidate(""most"") == ""o""
    assert candidate(""ab"") == """"
    assert candidate(""ba"") == """"
    assert candidate(""quick"") == """"
    assert candidate(""anime"") == ""i""
    assert candidate(""Asia"") == """"
    assert candidate(""Above"") == ""o""

    # Check some edge cases that are easy to work out by hand.
    assert True

","[""get_closest_vowel(\""yogurt\"") == \""u\"""", ""get_closest_vowel(\""FULL\"") == \""U\"""", ""get_closest_vowel(\""quick\"") == \""\"""", ""get_closest_vowel(\""ab\"") == \""\""""]","@startuml
start

:Input word;
:Initialize index to length of word - 2;

repeat
    :Check if index >= 1;
    if (Is character at index a vowel?) then (yes)
        :Check if characters at index-1 and index+1 are consonants?;
        if (yes) then (yes)
            :Return the vowel at index;
            stop
        else (no)
            :Decrement index by 1;
        endif
    else (no)
        :Decrement index by 1;
    endif
repeat while (index >= 1)

:Return empty string;
stop

@enduml"
HumanEval/28,"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
",concatenate,"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""

    return ''.join(strings)
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate([]) == ''
    assert candidate(['x', 'y', 'z']) == 'xyz'
    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
","[""concatenate(['hello', 'world']) == 'helloworld'"", ""concatenate(['123', '456', '789']) == '123456789'"", ""concatenate(['Python', 'Programming']) == 'PythonProgramming'"", ""concatenate(['cat', 'dog', 'rabbit']) == 'catdograbbit'"", ""concatenate(['', '']) == ''""]","@startuml
start

:Input: List of strings (strings);
if (Is strings empty?) then (yes)
    :Return an empty string ('');
    stop
else (no)
    :Initialize an empty result string (result = '');
    :Iterate over each string in the list;
    :Concatenate each string to the result;
    :Return the concatenated result;
    stop
endif

@enduml"
HumanEval/116,"
def sort_array(arr):
    """"""
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
",sort_array,"
def sort_array(arr):
    """"""
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""

    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
    assert candidate([]) == []
    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

","[""sort_array([7, 8, 9, 10]) == [8, 9, 10, 7]"", ""sort_array([15, 16, 17, 18]) == [16, 17, 18, 15]"", ""sort_array([31, 32, 33, 34]) == [32, 33, 34, 31]"", ""sort_array([63, 64, 65, 66]) == [64, 65, 66, 63]"", ""sort_array([127, 128, 129, 130]) == [128, 129, 130, 127]""]","@startuml
start

:Input array 'arr';
:Validate input array;
if (Is 'arr' empty or None?) then (yes)
    :Return empty array;
    stop
else (no)
    :Initialize an empty list 'sorted_arr';
    :Iterate over each element in 'arr';
    :Calculate the number of ones in binary representation;
    :Sort the array based on the number of ones;
    if (Number of ones is equal?) then (yes)
        :Sort based on decimal value;
    else (no)
        :Sort based on number of ones;
    endif
    :Store the sorted array in 'sorted_arr';
    :Return 'sorted_arr';
    stop
endif

@enduml"
HumanEval/98,"
def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
",count_upper,"
def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""

    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def check(candidate):

    # Check some simple cases
    assert candidate('aBCdEf')  == 1
    assert candidate('abcdefg') == 0
    assert candidate('dBBE') == 0
    assert candidate('B')  == 0
    assert candidate('U')  == 1
    assert candidate('') == 0
    assert candidate('EEEE') == 2

    # Check some edge cases that are easy to work out by hand.
    assert True

","[""count_upper(\""aBCdEf\"") == 1"", ""count_upper(\""abcdefg\"") == 0"", ""count_upper(\""dBBE\"") == 0"", ""count_upper(\""AaEeIiOoUu\"") == 5"", ""count_upper(\""bCdFg\"") == 0""]","@startuml
start

:Input string s;
:Initialize counter = 0;
:Initialize index = 0;

while (index < length of s?) is (yes)
    if (index is even?) then (yes)
        if (s[index] is an uppercase vowel?) then (yes)
            :Increment counter by 1;
        else (no)
            :Do nothing;
        endif
    else (no)
        :Do nothing;
    endif
    :Increment index by 1;
endwhile (no)

:Return counter;
stop

@enduml"
HumanEval/85,"
def add(lst):
    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """"""
",add,"
def add(lst):
    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """"""

    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def check(candidate):

    # Check some simple cases
    assert candidate([4, 88]) == 88
    assert candidate([4, 5, 6, 7, 2, 122]) == 122
    assert candidate([4, 0, 6, 7]) == 0
    assert candidate([4, 4, 6, 8]) == 12

    # Check some edge cases that are easy to work out by hand.
    
","[""add([1, 3, 5, 7, 9]) == 0"", ""add([2, 4, 6, 8, 10]) == 12"", ""add([1, 2, 3, 4, 5, 6, 7, 8]) == 20"", ""add([10, 20, 30, 40, 50]) == 60"", ""add([11, 22, 33, 44, 55]) == 66""]","@startuml
start

:Input a non-empty list of integers (lst);
if (Is lst empty?) then (yes)
    :Return error or handle empty list case;
    stop
else (no)
    :Initialize sum = 0;
    :Initialize index = 1;
    while (index < length of lst) is (yes)
        if (Is index odd?) then (yes)
            if (Is lst[index] even?) then (yes)
                :Add lst[index] to sum;
            else (no)
                :Do nothing;
            endif
        else (no)
            :Do nothing;
        endif
        :Increment index by 1;
    endwhile (no)
    :Return sum;
    stop
endif

@enduml"
HumanEval/52,"

def below_threshold(l: list, t: int):
    """"""Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
",below_threshold,"

def below_threshold(l: list, t: int):
    """"""Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""

    for e in l:
        if e >= t:
            return False
    return True
","

METADATA = {}


def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)

","[""below_threshold([0, 0, 0, 0], 5) == True"", ""below_threshold([5, 6, 7, 8], 5) == False"", ""below_threshold([10, 20, 30, 40], 50) == True"", ""below_threshold([100, 200, 300, 400], 500) == True"", ""below_threshold([2, 4, 6, 8], 2) == False""]","@startuml
start

:Input list l and threshold t;
:Initialize index i = 0;

while (i < length of list l?) is (yes)
    :Check if l[i] >= t;
    if (l[i] >= t?) then (yes)
        :Return False;
        stop
    else (no)
        :Increment i (i = i + 1);
    endif
endwhile (no)

:Return True;
stop

@enduml"
HumanEval/135,"
def can_arrange(arr):
    """"""Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """"""
",can_arrange,"
def can_arrange(arr):
    """"""Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """"""

    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,4,3,5])==3
    assert candidate([1,2,4,5])==-1
    assert candidate([1,4,2,5,6,7,8,9,10])==2
    assert candidate([4,8,5,7,3])==4

    # Check some edge cases that are easy to work out by hand.
    assert candidate([])==-1

","[""can_arrange([1,2,4,3,5]) == 3"", ""can_arrange([1,2,3,4,5]) == -1"", ""can_arrange([5,4,3,2,1]) == 4"", ""can_arrange([10,8,6,9,5]) == 4"", ""can_arrange([3,2,5,4,1]) == 4""]","@startuml

start

if (arr is empty) then (yes)
  :Return -1;
else (no)
  :Set max_index = -1;
  :Set prev = arr[0];
  :Set index = 1;

  while (index < len(arr)) is (true)
    if (arr[index] <= prev) then (yes)
      :Set max_index = index;
    endif
    :Set prev = arr[index];
    :Increment index;
  endwhile

  if (max_index equals -1) then (yes)
    :Return -1;
  else (no)
    :Return max_index;
  endif

endif

stop

@enduml"
HumanEval/67,"
def fruit_distribution(s,n):
    """"""
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
    fruit_distribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
    fruit_distribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
    fruit_distribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
    """"""
",fruit_distribution,"
def fruit_distribution(s,n):
    """"""
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
    fruit_distribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
    fruit_distribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
    fruit_distribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
    """"""

    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def check(candidate):

    # Check some simple cases
    assert candidate(""5 apples and 6 oranges"",19) == 8
    assert candidate(""5 apples and 6 oranges"",21) == 10
    assert candidate(""0 apples and 1 oranges"",3) == 2
    assert candidate(""1 apples and 0 oranges"",3) == 2
    assert candidate(""2 apples and 3 oranges"",100) == 95
    assert candidate(""2 apples and 3 oranges"",5) == 0
    assert candidate(""1 apples and 100 oranges"",120) == 19
","[""fruit_distribution(\""3 apples and 2 oranges\"", 10) == 5"", ""fruit_distribution(\""10 apples and 5 oranges\"", 50) == 35"", ""fruit_distribution(\""1 apples and 4 oranges\"", 15) == 10"", ""fruit_distribution(\""0 apples and 0 oranges\"", 5) == 5"", ""fruit_distribution(\""7 apples and 3 oranges\"", 20) == 10""]","@startuml
start

:Input string (s) and integer (n);
:Parse the input string to extract the number of apples and oranges;

if (Is the input string valid?) then (yes)
    :Extract the number of apples;
    :Extract the number of oranges;
    :Calculate the number of mangoes: n - apples - oranges;
    :Return the number of mangoes;
else (no)
    :Handle invalid input (e.g., return error or default value);
endif

stop
@enduml"
HumanEval/104,"
def unique_digits(x):
    """"""Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
",unique_digits,"
def unique_digits(x):
    """"""Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""

    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def check(candidate):

    # Check some simple cases
    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
    assert candidate([152, 323, 1422, 10]) == []
    assert candidate([12345, 2033, 111, 151]) == [111, 151]
    assert candidate([135, 103, 31]) == [31, 135]

    # Check some edge cases that are easy to work out by hand.
    assert True

","[""unique_digits([246, 802, 123, 1356, 59]) == [59]"", ""unique_digits([111, 333, 777, 999]) == [111, 333, 777, 999]"", ""unique_digits([2, 4, 6, 8, 10]) == []"", ""unique_digits([1111, 2222, 3333, 4444, 5555]) == [1111, 3333, 5555]"", ""unique_digits([123456789, 987654321, 13579, 24680]) == [13579]""]","@startuml
start

:Input list of positive integers x;
:Initialize an empty list called result;

while (For each number in x) is (yes)
    :Initialize a flag has_even_digit = False;
    :Convert the number to a string to iterate through digits;
    while (For each digit in the number) is (yes)
        if (Is the digit even?) then (yes)
            :Set has_even_digit = True;
            :Break out of the inner loop;
        else (no)
            :Continue to the next digit;
        endif
    endwhile
    if (has_even_digit == False?) then (yes)
        :Add the number to the result list;
    else (no)
        :Do not add the number to the result list;
    endif
endwhile

:Sort the result list in increasing order;
:Return the sorted result list;

stop
@enduml"
HumanEval/54,"

def same_chars(s0: str, s1: str):
    """"""
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
",same_chars,"

def same_chars(s0: str, s1: str):
    """"""
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""

    return set(s0) == set(s1)
","

METADATA = {}


def check(candidate):
    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
    assert candidate('abcd', 'dddddddabc') == True
    assert candidate('dddddddabc', 'abcd') == True
    assert candidate('eabcd', 'dddddddabc') == False
    assert candidate('abcd', 'dddddddabcf') == False
    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
    assert candidate('aabb', 'aaccc') == False

","[""same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True"", ""same_chars('abcd', 'dddddddabc') == True"", ""same_chars('dddddddabc', 'abcd') == True"", ""same_chars('eabcd', 'dddddddabc') == False"", ""same_chars('abcd', 'dddddddabce') == False"", ""same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False""]","@startuml
start

:Input two strings s0 and s1;
:Convert s0 and s1 to sets of characters;
:Check if the sets are equal;

if (Are the sets equal?) then (yes)
  :Return True;
else (no)
  :Return False;
endif

stop
@enduml"
HumanEval/47,"

def median(l: list):
    """"""Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
",median,"

def median(l: list):
    """"""Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""

    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","

METADATA = {}


def check(candidate):
    assert candidate([3, 1, 2, 4, 5]) == 3
    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0
    assert candidate([5]) == 5
    assert candidate([6, 5]) == 5.5
    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 

","[""median([1, 2, 3, 4]) == 2.5"", ""median([5, 5, 5, 5, 5, 5]) == 5"", ""median([10, 20, 30, 40, 50, 60, 70]) == 40"", ""median([100, 200, 300, 400]) == 250"", ""median([2, 4, 6, 8, 10, 12, 14]) == 8""]","@startuml
start

:Input list l;
if (Is l empty?) then (yes)
  :Raise ValueError(""List cannot be empty"");
  stop
else (no)
  :Sort the list l;
  :Calculate the length of the list (n);
  if (Is n odd?) then (yes)
    :Median = l[n//2];
  else (no)
    :Median = (l[n//2 - 1] + l[n//2]) / 2;
  endif
  :Return Median;
endif

stop
@enduml"
HumanEval/143,"
def words_in_sentence(sentence):
    """"""
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = ""This is a test""
        Output: ""is""

    Example 2:
        Input: sentence = ""lets go for swimming""
        Output: ""go for""

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """"""
",words_in_sentence,"
def words_in_sentence(sentence):
    """"""
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = ""This is a test""
        Output: ""is""

    Example 2:
        Input: sentence = ""lets go for swimming""
        Output: ""go for""

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """"""

    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def check(candidate):

    # Check some simple cases
    assert candidate(""This is a test"") == ""is""
    assert candidate(""lets go for swimming"") == ""go for""
    assert candidate(""there is no place available here"") == ""there is no place""
    assert candidate(""Hi I am Hussein"") == ""Hi am Hussein""
    assert candidate(""go for it"") == ""go for it""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""here"") == """"
    assert candidate(""here is"") == ""is""

","[""words_in_sentence(\""Hello world\"") == 'Hello world'"", ""words_in_sentence(\""The quick brown fox jumps over the lazy dog\"") == 'The quick brown fox jumps the dog'"", ""words_in_sentence(\""Prime numbers are fun\"") == 'Prime numbers are fun'""]","@startuml
start

:Input sentence;
if (sentence is valid) then (yes)
  :Split sentence into words;
  :Initialize result string;
  while (words left to process) is (yes)
    :Take next word;
    :Check if length is prime;
    if (length is prime) then (yes)
      :Add word to result string;
    else (no)
      :Continue;
    endif
  repeat
  :Output result string;
else (no)
  :Output ""Invalid input"";
endif

stop
@enduml"
HumanEval/65,"
def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
",circular_shift,"
def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""

    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def check(candidate):

    # Check some simple cases
    assert candidate(100, 2) == ""001""
    assert candidate(12, 2) == ""12""
    assert candidate(97, 8) == ""79""
    assert candidate(12, 1) == ""21"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(11, 101) == ""11"", ""This prints if this assert fails 2 (also good for debugging!)""

","[""circular_shift(12345, 2) == \""45123\"""", ""circular_shift(12345, 5) == \""12345\"""", ""circular_shift(987654, 3) == \""654987\"""", ""circular_shift(987654, 10) == \""456789\"""", ""circular_shift(1001, 2) == \""0110\""""]","@startuml
start

:Convert integer x to string;
:Calculate the number of digits in x;
if (shift > number of digits?) then (yes)
    :Reverse the digits of x;
    :Return the reversed digits as a string;
else (no)
    :Perform circular shift right by shift positions;
    :Return the shifted digits as a string;
endif

stop
@enduml"
HumanEval/17,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
",parse_music,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""

    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate('') == []
    assert candidate('o o o o') == [4, 4, 4, 4]
    assert candidate('.| .| .| .|') == [1, 1, 1, 1]
    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
","[""parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"", ""parse_music('o o| o| o| o| o| o| o| o| o o') == [4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4]"", ""parse_music('o| o| o| o| o| o| o| o| o o o o') == [2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4]"", ""parse_music('o o o o o o o o o .| .| .|') == [4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1]"", ""parse_music('o| .| o| .| o| .| o| .| o| .|') == [2, 1, 2, 1, 2, 1, 2, 1, 2, 1]""]","@startuml
start

:Input musical notes string;
:Initialize empty list for beats;
:Split the input string into individual notes;
:Initialize index for iteration;

while (Has more notes?) is (yes)
    :Get next note;
    if (Note == 'o') then (yes)
        :Append 4 to beats list;
    else (no)
        if (Note == 'o|') then (yes)
            :Append 2 to beats list;
        else (no)
            if (Note == '.|') then (yes)
                :Append 1 to beats list;
            else (no)
                :Handle invalid note (optional);
            endif
        endif
    endif
    :Increment index;
endwhile (no)

:Return beats list;
stop
@enduml"
HumanEval/91,"
def is_bored(S):
    """"""
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
",is_bored,"
def is_bored(S):
    """"""
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""

    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def check(candidate):

    # Check some simple cases
    assert candidate(""Hello world"") == 0, ""Test 1""
    assert candidate(""Is the sky blue?"") == 0, ""Test 2""
    assert candidate(""I love It !"") == 1, ""Test 3""
    assert candidate(""bIt"") == 0, ""Test 4""
    assert candidate(""I feel good today. I will be productive. will kill It"") == 2, ""Test 5""
    assert candidate(""You and I are going for a walk"") == 0, ""Test 6""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

","[""is_bored(\""I am bored. Let's do something fun!\"") == 1"", ""is_bored(\""What do you want to do today? I am thinking of going to the park.\"") == 1"", ""is_bored(\""I love Python. It's such a powerful language.\"") == 1"", ""is_bored(\""Why are you always late? I don't understand.\"") == 1"", ""is_bored(\""The quick brown fox jumps over the lazy dog.\"") == 0""]","@startuml
start
if (Check if input string is empty) then (yes)
  :Return 0;
  stop
else (no)
  :Split the input string by sentence delimiter;
  :Initialize boredom count to 0;
  while (Iterate through each sentence)
    :Split sentence by words;
    if (Check if first word is ""I"") then (yes)
      :Increment boredom count;
    else (no)
      :Continue to next sentence;
    endif
  endwhile
  :Return boredom count;
  stop
endif
@enduml"
HumanEval/161,"
def solve(s):
    """"""You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve(""1234"") = ""4321""
    solve(""ab"") = ""AB""
    solve(""#a@C"") = ""#A@c""
    """"""
",solve,"
def solve(s):
    """"""You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve(""1234"") = ""4321""
    solve(""ab"") = ""AB""
    solve(""#a@C"") = ""#A@c""
    """"""

    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def check(candidate):

    # Check some simple cases
    assert candidate(""AsDf"") == ""aSdF""
    assert candidate(""1234"") == ""4321""
    assert candidate(""ab"") == ""AB""
    assert candidate(""#a@C"") == ""#A@c""
    assert candidate(""#AsdfW^45"") == ""#aSDFw^45""
    assert candidate(""#6@2"") == ""2@6#""

    # Check some edge cases that are easy to work out by hand.
    assert candidate(""#$a^D"") == ""#$A^d""
    assert candidate(""#ccc"") == ""#CCC""

    # Don't remove this line:
","[""solve(\""1234\"") == \""4321\"""", ""solve(\""ab\"") == \""AB\"""", ""solve(\""#a@C\"") == \""#A@c\"""", ""solve(\""hello\"") == \""HELLO\"""", ""solve(\""12345\"") == \""54321\""""]","@startuml
start

:Input string s;
:Initialize result as empty string;
:Initialize has_letters as false;

while (Iterate through each character in s) is (More characters?)
    :Get current character c;
    if (Is c a letter?) then (yes)
        :Reverse the case of c;
        :Append modified c to result;
        :Set has_letters to true;
    else (no)
        :Append c to result as is;
    endif
endwhile

if (has_letters?) then (yes)
    :Return result;
else (no)
    :Reverse the string s;
    :Return reversed string;
endif

stop
@enduml"
HumanEval/163,"
def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""
",generate_integers,"
def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""

    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def check(candidate):

    # Check some simple cases
    assert candidate(2, 10) == [2, 4, 6, 8], ""Test 1""
    assert candidate(10, 2) == [2, 4, 6, 8], ""Test 2""
    assert candidate(132, 2) == [2, 4, 6, 8], ""Test 3""
    assert candidate(17,89) == [], ""Test 4""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

","[""generate_integers(2, 8) == [2, 4, 6, 8]"", ""generate_integers(8, 2) == [2, 4, 6, 8]"", ""generate_integers(10, 14) == []"", ""generate_integers(5, 11) == [6, 8]"", ""generate_integers(3, 7) == [4, 6]"", ""generate_integers(20, 24) == []"", ""generate_integers(1, 19) == [2, 4, 6, 8]"", ""generate_integers(30, 35) == []""]","@startuml
start

:Input two positive integers a and b;
if (a > b?) then (yes)
    :Swap a and b;
else (no)
endif

:Initialize an empty list 'result';
:Initialize current = a;

while (current <= b?) is (yes)
    if (current is even?) then (yes)
        :Add current to 'result';
    else (no)
    endif
    :Increment current by 1;
endwhile (no)

:Return 'result';

stop
@enduml"
HumanEval/49,"

def modp(n: int, p: int):
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
",modp,"

def modp(n: int, p: int):
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""

    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","

METADATA = {}


def check(candidate):
    assert candidate(3, 5) == 3
    assert candidate(1101, 101) == 2
    assert candidate(0, 101) == 1
    assert candidate(3, 11) == 8
    assert candidate(100, 101) == 1
    assert candidate(30, 5) == 4
    assert candidate(31, 5) == 3

","[""modp(3, 5) == 3"", ""modp(1101, 101) == 2"", ""modp(0, 101) == 1"", ""modp(3, 11) == 8"", ""modp(100, 101) == 1""]","@startuml
start

:Input n and p;
if (n < 0) then (yes)
    :Invalid input (n must be non-negative);
    stop
else (no)
    if (p <= 1) then (yes)
        :Invalid input (p must be greater than 1);
        stop
    else (no)
        :Initialize result = 1;
        :Initialize base = 2;
        while (n > 0) is (yes)
            if (n % 2 == 1) then (yes)
                :result = (result * base) % p;
            else (no)
            endif
            :base = (base * base) % p;
            :n = n // 2;
        endwhile (no)
        :Output result;
    endif
endif

stop
@enduml"
HumanEval/37,"

def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
",sort_even,"

def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""

    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","

METADATA = {}


def check(candidate):
    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

","[""sort_even([4, 3, 2, 1]) == [2, 3, 4, 1]"", ""sort_even([9, 8, 7, 6, 5]) == [5, 8, 7, 6, 9]"", ""sort_even([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]"", ""sort_even([5, 5, 5, 5]) == [5, 5, 5, 5]"", ""sort_even([1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == [1, 3, 4, 7, 5, 2, 8, 6, 9, 10]""]","@startuml
start
:Start with input list l;
if (Check if l is empty) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize empty lists l_odd and l_even;
    :Iterate over indices i of l;
    if (i is even) then (yes)
        :Append l[i] to l_even;
    else (no)
        :Append l[i] to l_odd;
    endif
end if
:Sort list l_even;
:Initialize empty list result;
:Iterate over indices i of l;
if (i is even) then (yes)
    :Append first element of l_even to result;
    :Remove first element from l_even;
else (no)
    :Append first element of l_odd to result;
    :Remove first element from l_odd;
endif
end if
:Return result;
stop
@enduml"
HumanEval/144,"
def simplify(x, n):
    """"""Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify(""1/5"", ""5/1"") = True
    simplify(""1/6"", ""2/1"") = False
    simplify(""7/10"", ""10/2"") = False
    """"""
",simplify,"
def simplify(x, n):
    """"""Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify(""1/5"", ""5/1"") = True
    simplify(""1/6"", ""2/1"") = False
    simplify(""7/10"", ""10/2"") = False
    """"""

    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def check(candidate):

    # Check some simple cases
    assert candidate(""1/5"", ""5/1"") == True, 'test1'
    assert candidate(""1/6"", ""2/1"") == False, 'test2'
    assert candidate(""5/1"", ""3/1"") == True, 'test3'
    assert candidate(""7/10"", ""10/2"") == False, 'test4'
    assert candidate(""2/10"", ""50/10"") == True, 'test5'
    assert candidate(""7/2"", ""4/2"") == True, 'test6'
    assert candidate(""11/6"", ""6/1"") == True, 'test7'
    assert candidate(""2/3"", ""5/2"") == False, 'test8'
    assert candidate(""5/2"", ""3/5"") == False, 'test9'
    assert candidate(""2/4"", ""8/4"") == True, 'test10'


    # Check some edge cases that are easy to work out by hand.
    assert candidate(""2/4"", ""4/2"") == True, 'test11'
    assert candidate(""1/5"", ""5/1"") == True, 'test12'
    assert candidate(""1/5"", ""1/5"") == False, 'test13'

","[""simplify(\""3/4\"", \""4/3\"") == True"", ""simplify(\""2/5\"", \""5/2\"") == True"", ""simplify(\""1/3\"", \""3/1\"") == True"", ""simplify(\""6/8\"", \""8/6\"") == True"", ""simplify(\""4/7\"", \""7/4\"") == True""]","@startuml
start

:Parse fractions x and n;
if (Validate fractions) then (Valid)
  :Extract numerators and denominators;
  :Compute x * n;
  if (Result is a whole number) then (Yes)
    :Return True;
  else (No)
    :Return False;
  endif
else (Invalid)
  :Return False;
endif

stop
@enduml"
HumanEval/112,"
def reverse_delete(s,c):
    """"""Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = ""abcde"", c = ""ae"", the result should be ('bcd',False)
    For s = ""abcdef"", c = ""b""  the result should be ('acdef',False)
    For s = ""abcdedcba"", c = ""ab"", the result should be ('cdedc',True)
    """"""
",reverse_delete,"
def reverse_delete(s,c):
    """"""Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = ""abcde"", c = ""ae"", the result should be ('bcd',False)
    For s = ""abcdef"", c = ""b""  the result should be ('acdef',False)
    For s = ""abcdedcba"", c = ""ab"", the result should be ('cdedc',True)
    """"""

    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def check(candidate):

    assert candidate(""abcde"",""ae"") == ('bcd',False)
    assert candidate(""abcdef"", ""b"") == ('acdef',False)
    assert candidate(""abcdedcba"",""ab"") == ('cdedc',True)
    assert candidate(""dwik"",""w"") == ('dik',False)
    assert candidate(""a"",""a"") == ('',True)
    assert candidate(""abcdedcba"","""") == ('abcdedcba',True)
    assert candidate(""abcdedcba"",""v"") == ('abcdedcba',True)
    assert candidate(""vabba"",""v"") == ('abba',True)
    assert candidate(""mamma"", ""mia"") == ("""", True)
","[""reverse_delete(\""abcde\"", \""ae\"") == ('bcd', False)"", ""reverse_delete(\""abcdef\"", \""b\"") == ('acdef', False)"", ""reverse_delete(\""abcdedcba\"", \""ab\"") == ('cdedc', True)"", ""reverse_delete(\""racecar\"", \""ae\"") == ('rccr', True)"", ""reverse_delete(\""level\"", \""ev\"") == ('ll', True)"", ""reverse_delete(\""python\"", \""th\"") == ('pyon', False)""]","@startuml

start

:Initialize result string as empty string;
:Loop through each character in s;
:    Check if the character is not in c;
:        Append the character to the result string;
:Check if the result string is a palindrome;
:    Return ('result string', True);
:Else;
:    Return ('result string', False);

stop

@enduml"
HumanEval/56,"

def correct_bracketing(brackets: str):
    """""" brackets is a string of ""<"" and "">"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
",correct_bracketing,"

def correct_bracketing(brackets: str):
    """""" brackets is a string of ""<"" and "">"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""

    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","

METADATA = {}


def check(candidate):
    assert candidate(""<>"")
    assert candidate(""<<><>>"")
    assert candidate(""<><><<><>><>"")
    assert candidate(""<><><<<><><>><>><<><><<>>>"")
    assert not candidate(""<<<><>>>>"")
    assert not candidate(""><<>"")
    assert not candidate(""<"")
    assert not candidate(""<<<<"")
    assert not candidate("">"")
    assert not candidate(""<<>"")
    assert not candidate(""<><><<><>><>><<>"")
    assert not candidate(""<><><<><>><>>><>"")

","[""correct_bracketing(\""<\"") == False"", ""correct_bracketing(\""<>\"") == True"", ""correct_bracketing(\""<<><>>\"") == True"", ""correct_bracketing(\""><<>\"") == False""]","@startuml
start

:Input string 'brackets';
:Initialize counter = 0;

while (Iterate through each character in 'brackets') is (not end of string)
    if (Character is '<') then (yes)
        :Increment counter by 1;
    else (no)
        :Decrement counter by 1;
    endif

    if (counter < 0) then (yes)
        :Return False;
        stop
    endif
endwhile

if (counter == 0) then (yes)
    :Return True;
else (no)
    :Return False;
endif

stop
@enduml"
HumanEval/43,"

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
",pairs_sum_to_zero,"

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""

    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","

METADATA = {}


def check(candidate):
    assert candidate([1, 3, 5, 0]) == False
    assert candidate([1, 3, -2, 1]) == False
    assert candidate([1, 2, 3, 7]) == False
    assert candidate([2, 4, -5, 3, 5, 7]) == True
    assert candidate([1]) == False

    assert candidate([-3, 9, -1, 3, 2, 30]) == True
    assert candidate([-3, 9, -1, 3, 2, 31]) == True
    assert candidate([-3, 9, -1, 4, 2, 30]) == False
    assert candidate([-3, 9, -1, 4, 2, 31]) == False

","[""pairs_sum_to_zero([1, 3, 5, 0]) == False"", ""pairs_sum_to_zero([1, 3, -2, 1]) == False"", ""pairs_sum_to_zero([1, 2, 3, 7]) == False"", ""pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True"", ""pairs_sum_to_zero([1]) == False""]","@startuml
start

:Input list of integers (l);
if (Is list length less than 2?) then (yes)
    :Return False;
    stop
else (no)
    :Initialize an empty set (seen);
    :Iterate over each element (num) in the list (l);
    :Check if the negative of the current element (-num) is in the set (seen);
    if (Is -num in seen?) then (yes)
        :Return True;
        stop
    else (no)
        :Add the current element (num) to the set (seen);
        :Continue to the next element;
    endif
endif

:Return False;
stop

@enduml"
HumanEval/153,"
def Strongest_Extension(class_name, extensions):
    """"""You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given ""Slices"" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """"""
",Strongest_Extension,"
def Strongest_Extension(class_name, extensions):
    """"""You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given ""Slices"" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """"""

    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def check(candidate):

    # Check some simple cases
    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'
    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'
    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'
    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'
    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'
    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'
    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'

    # Check some edge cases that are easy to work out by hand.
    assert candidate('_', ['Bb', '91245']) == '_.Bb'
    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'
    
","[""Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'"", ""Strongest_Extension('MyClass', ['HELLO', 'wORLD', 'Python']) == 'MyClass.HELLO'"", ""Strongest_Extension('Test', ['TESTING', 'cases', 'STRONG']) == 'Test.TESTING'"", ""Strongest_Extension('Example', ['aAbB', 'CcDd', 'EeFf']) == 'Example.aAbB'"", ""Strongest_Extension('Data', ['ANALYSIS', 'Data', 'STRATEGY']) == 'Data.ANALYSIS'""]","@startuml
start

:Input class_name and extensions list;
:Initialize variables:
max_strength = -infinity,
strongest_extension = """";

:For each extension in extensions list;

    :Calculate CAP (number of uppercase letters);
    :Calculate SM (number of lowercase letters);
    :Calculate strength = CAP - SM;

    if (strength > max_strength?) then (yes)
        :Update max_strength = strength;
        :Update strongest_extension = current extension;
    else (no)
        :Do nothing;
    endif

:End of loop;

:Return result as ""ClassName.StrongestExtensionName"";
stop
@enduml"
HumanEval/100,"
def make_a_pile(n):
    """"""
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
",make_a_pile,"
def make_a_pile(n):
    """"""
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""

    return [n + 2*i for i in range(n)]
","def check(candidate):

    # Check some simple cases
    assert candidate(3) == [3, 5, 7], ""Test 3""
    assert candidate(4) == [4,6,8,10], ""Test 4""
    assert candidate(5) == [5, 7, 9, 11, 13]
    assert candidate(6) == [6, 8, 10, 12, 14, 16]
    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

","[""make_a_pile(5) == [5, 7, 9, 11, 13]"", ""make_a_pile(1) == [1]"", ""make_a_pile(6) == [6, 8, 10, 12, 14, 16]"", ""make_a_pile(4) == [4, 6, 8, 10]"", ""make_a_pile(7) == [7, 9, 11, 13, 15, 17, 19]""]","@startuml
start

:Input positive integer n;
if (n <= 0?) then (yes)
    :Return empty list or error;
    stop
else (no)
    :Initialize an empty list to store stones in each level;
    :Initialize current_stones = n;
    :Initialize level = 1;

    while (level <= n?) is (yes)
        :Append current_stones to the list;
        if (current_stones is odd?) then (yes)
            :current_stones = current_stones + 2;
        else (no)
            :current_stones = current_stones + 2;
        endif
        :level = level + 1;
    endwhile (no)

    :Return the list of stones in each level;
    stop
endif

@enduml"
HumanEval/93,"
def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
",encode,"
def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""

    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def check(candidate):

    # Check some simple cases
    assert candidate('TEST') == 'tgst', ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('Mudasir') == 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('YES') == 'ygs', ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(""I DoNt KnOw WhAt tO WrItE"") == 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)""

","[""test test cases failed""]","@startuml
start

:Input message;
:Initialize encoded_message as an empty string;

while (For each character in message) is (Yes)
    :Get current character;
    if (Is the character a vowel?) then (Yes)
        :Replace vowel with the letter 2 places ahead in the alphabet;
        :Swap the case of the new character;
    else (No)
        :Swap the case of the character;
    endif
    :Append the modified character to encoded_message;
endwhile (No)

:Return encoded_message;
stop
@enduml"
HumanEval/131,"
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
",digits,"
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""

    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def check(candidate):

    # Check some simple cases
    assert candidate(5) == 5
    assert candidate(54) == 5
    assert candidate(120) ==1
    assert candidate(5014) == 5
    assert candidate(98765) == 315
    assert candidate(5576543) == 2625

    # Check some edge cases that are easy to work out by hand.
    assert candidate(2468) == 0

","[""digits(246) == 0"", ""digits(13579) == 945"", ""digits(46281) == 1"", ""digits(777) == 343"", ""digits(12345) == 15""]","@startuml
start

:Input positive integer n;
:Initialize product = 1;
:Initialize all_even = true;

while (n > 0)
    :digit = n % 10;
    if (digit is odd?) then (yes)
        :product = product * digit;
        :all_even = false;
    else (no)
        :Do nothing;
    endif
    :n = n // 10;
endwhile

if (all_even is true?) then (yes)
    :Return 0;
else (no)
    :Return product;
endif

stop
@enduml"
HumanEval/75,"
def is_multiply_prime(a):
    """"""Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """"""
",is_multiply_prime,"
def is_multiply_prime(a):
    """"""Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """"""

    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def check(candidate):

    assert candidate(5) == False
    assert candidate(30) == True
    assert candidate(8) == True
    assert candidate(10) == False
    assert candidate(125) == True
    assert candidate(3 * 5 * 7) == True
    assert candidate(3 * 6 * 7) == False
    assert candidate(9 * 9 * 9) == False
    assert candidate(11 * 9 * 9) == False
    assert candidate(11 * 13 * 7) == True

","[""is_multiply_prime(6) == False"", ""is_multiply_prime(14) == False"", ""is_multiply_prime(21) == False"", ""is_multiply_prime(42) == True"", ""is_multiply_prime(77) == False""]","@startuml
start

:Input number (a);
if (a < 2 or a >= 100?) then (yes)
    :Return False;
    stop
else (no)
    :Initialize list of primes less than 100;
    :Initialize counter for prime factors;
    :Initialize list to store prime factors;
    :Iterate through primes;
    while (Iterate through primes) is (not end of list)
        if (a % prime == 0?) then (yes)
            :Add prime to prime factors list;
            :Divide a by prime;
            :Increment prime factor counter;
            if (prime factor counter > 3?) then (yes)
                :Return False;
                stop
            else (no)
                :Continue;
            endif
        else (no)
            :Continue;
        endif
    endwhile
    if (prime factor counter == 3 and a == 1?) then (yes)
        :Return True;
        stop
    else (no)
        :Return False;
        stop
    endif
endif
@enduml"
HumanEval/97,"
def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
",multiply,"
def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""

    return abs(a % 10) * abs(b % 10)
","def check(candidate):

    # Check some simple cases
    assert candidate(148, 412) == 16, ""First test error: "" + str(candidate(148, 412))                    
    assert candidate(19, 28) == 72, ""Second test error: "" + str(candidate(19, 28))           
    assert candidate(2020, 1851) == 0, ""Third test error: "" + str(candidate(2020, 1851))
    assert candidate(14,-15) == 20, ""Fourth test error: "" + str(candidate(14,-15))      
    assert candidate(76, 67) == 42, ""Fifth test error: "" + str(candidate(76, 67))      
    assert candidate(17, 27) == 49, ""Sixth test error: "" + str(candidate(17, 27))      


    # Check some edge cases that are easy to work out by hand.
    assert candidate(0, 1) == 0, ""1st edge test error: "" + str(candidate(0, 1))
    assert candidate(0, 0) == 0, ""2nd edge test error: "" + str(candidate(0, 0))

","[""multiply(123, 456) == 18"", ""multiply(987, 654) == 28"", ""multiply(111, 222) == 2"", ""multiply(0, 999) == 0"", ""multiply(-12, -34) == 48""]","@startuml
start

:Input integers a and b;
:Extract unit digit of a (a_unit = abs(a) % 10);
:Extract unit digit of b (b_unit = abs(b) % 10);
:Calculate product of unit digits (product = a_unit * b_unit);
:Return product;

stop
@enduml"
HumanEval/137,"
def compare_one(a, b):
    """"""
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, ""2,3"") ➞ ""2,3""
    compare_one(""5,1"", ""6"") ➞ ""6""
    compare_one(""1"", 1) ➞ None
    """"""
",compare_one,"
def compare_one(a, b):
    """"""
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, ""2,3"") ➞ ""2,3""
    compare_one(""5,1"", ""6"") ➞ ""6""
    compare_one(""1"", 1) ➞ None
    """"""

    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def check(candidate):

    # Check some simple cases
    assert candidate(1, 2) == 2
    assert candidate(1, 2.5) == 2.5
    assert candidate(2, 3) == 3
    assert candidate(5, 6) == 6
    assert candidate(1, ""2,3"") == ""2,3""
    assert candidate(""5,1"", ""6"") == ""6""
    assert candidate(""1"", ""2"") == ""2""
    assert candidate(""1"", 1) == None

    # Check some edge cases that are easy to work out by hand.
    assert True

","[""compare_one(3, 5) == 5"", ""compare_one(2.5, 2) == 2.5"", ""compare_one(\""1.5\"", 1.5) == None"", ""compare_one(\""2.3\"", \""2.3\"") == None"", ""compare_one(\""3.5\"", \""3,5\"") == None""]","@startuml
start

:Input a and b;
:Convert a and b to float if they are strings;
if (a is string?) then (yes)
    :Replace ',' with '.' in a;
    :Convert a to float;
else (no)
    :Keep a as is;
endif

if (b is string?) then (yes)
    :Replace ',' with '.' in b;
    :Convert b to float;
else (no)
    :Keep b as is;
endif

if (a == b?) then (yes)
    :Return None;
else (no)
    if (a > b?) then (yes)
        :Return original a;
    else (no)
        :Return original b;
    endif
endif

stop
@enduml"
HumanEval/160,"
def do_algebra(operator, operand):
    """"""
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """"""
",do_algebra,"
def do_algebra(operator, operand):
    """"""
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """"""

    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def check(candidate):

    # Check some simple cases
    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
    assert candidate(['//', '*'], [7, 3, 4]) == 8, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

","[""do_algebra(['+', '-', '*'], [1, 2, 3, 4, 5]) == -9"", ""do_algebra(['*', '**', '-'], [2, 3, 4, 2, 1]) == 160"", ""do_algebra(['//', '+', '*'], [10, 2, 5, 3, 8]) == 20"", ""do_algebra(['-', '/', '*'], [20, 5, 4, 2, 3]) == 17.5"", ""do_algebra(['**', '+', '-'], [3, 2, 4, 1, 5]) == 12""]","@startuml
start

:Input operator list and operand list;
if (Is operator list length == operand list length - 1?) then (yes)
    :Initialize result with the first operand;
    :Initialize index for operator list;
    while (Are there operators left to process?) is (yes)
        :Get the next operator;
        :Get the next operand;
        if (Operator is '+') then (yes)
            :Add operand to result;
        elseif (Operator is '-') then (yes)
            :Subtract operand from result;
        elseif (Operator is '*') then (yes)
            :Multiply result by operand;
        elseif (Operator is '//') then (yes)
            :Perform floor division on result by operand;
        elseif (Operator is '**') then (yes)
            :Raise result to the power of operand;
        endif
        :Increment operator index;
    endwhile
    :Return the final result;
else (no)
    :Raise ValueError(""Invalid input lengths"");
endif

stop
@enduml"
HumanEval/81,"
def numerical_letter_grade(grades):
    """"""It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""
",numerical_letter_grade,"
def numerical_letter_grade(grades):
    """"""It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""


   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def check(candidate):

    # Check some simple cases
    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
    assert candidate([1.2]) == ['D+']
    assert candidate([0.5]) == ['D-']
    assert candidate([0.0]) == ['E']
    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
    assert candidate([0, 0.7]) == ['E', 'D-']

    # Check some edge cases that are easy to work out by hand.
    assert True

","[""numerical_letter_grade([4.0, 3.5, 2.8, 1.2, 0.5]) == ['A+', 'A-', 'B', 'D+', 'D-']"", ""numerical_letter_grade([2.1, 3.9, 1.6, 0.8, 2.5]) == ['C+', 'A', 'C-', 'D', 'B-']"", ""numerical_letter_grade([3.2, 0.9, 2.9, 1.7, 3.8]) == ['B+', 'D', 'B', 'C-', 'A']"", ""numerical_letter_grade([1.1, 0.3, 3.6, 2.6, 1.8]) == ['D+', 'D-', 'A-', 'B-', 'C']"", ""numerical_letter_grade([4.0, 2.2, 0.5, 3.4, 1.5]) == ['A+', 'C+', 'D-', 'A-', 'C-']""]","@startuml
start

:Input list of grades (GPAs);
if (Is input a list?) then (yes)
    :Initialize an empty list for letter grades;
    :Iterate through each GPA in the list;
    if (Is GPA valid (0.0 <= GPA <= 4.0)?) then (yes)
        if (GPA == 4.0) then (yes)
            :Add 'A+' to letter grades list;
        else (no)
            if (GPA > 3.7) then (yes)
                :Add 'A' to letter grades list;
            else (no)
                if (GPA > 3.3) then (yes)
                    :Add 'A-' to letter grades list;
                else (no)
                    if (GPA > 3.0) then (yes)
                        :Add 'B+' to letter grades list;
                    else (no)
                        if (GPA > 2.7) then (yes)
                            :Add 'B' to letter grades list;
                        else (no)
                            if (GPA > 2.3) then (yes)
                                :Add 'B-' to letter grades list;
                            else (no)
                                if (GPA > 2.0) then (yes)
                                    :Add 'C+' to letter grades list;
                                else (no)
                                    if (GPA > 1.7) then (yes)
                                        :Add 'C' to letter grades list;
                                    else (no)
                                        if (GPA > 1.3) then (yes)
                                            :Add 'C-' to letter grades list;
                                        else (no)
                                            if (GPA > 1.0) then (yes)
                                                :Add 'D+' to letter grades list;
                                            else (no)
                                                if (GPA > 0.7) then (yes)
                                                    :Add 'D' to letter grades list;
                                                else (no)
                                                    if (GPA > 0.0) then (yes)
                                                        :Add 'D-' to letter grades list;
                                                    else (no)
                                                        :Add 'E' to letter grades list;
                                                    endif
                                                endif
                                            endif
                                        endif
                                    endif
                                endif
                            endif
                        endif
                    endif
                endif
            endif
        endif
    else (no)
        :Add 'Invalid GPA' to letter grades list;
    endif
    :Check if all GPAs are processed;
    if (All GPAs processed?) then (yes)
        :Return the list of letter grades;
        stop
    else (no)
        :Continue to next GPA;
    endif
else (no)
    :Return 'Invalid input: Expected a list of GPAs';
    stop
endif
@enduml"
HumanEval/7,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
",filter_by_substring,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""

    return [x for x in strings if substring in x]
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate([], 'john') == []
    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
","[""filter_by_substring(['apple', 'banana', 'orange'], 'a') == ['apple', 'banana', 'orange']"", ""filter_by_substring(['hello', 'world', 'python'], 'z') == []"", ""filter_by_substring(['cat', 'dog', 'bird', 'elephant'], 'at') == ['cat']"", ""filter_by_substring(['123', '456', '789', '101112'], '12') == ['123', '101112']"", ""filter_by_substring(['programming', 'coding', 'debugging'], 'ing') == ['programming', 'coding', 'debugging']""]","@startuml
start

:Input list of strings (strings) and substring (substring);
:Initialize empty result list (filtered_strings);

if (Is strings list empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Iterate over each string in strings;
    :Check if substring is in current string;
    if (substring found?) then (yes)
        :Add current string to filtered_strings;
    else (no)
        :Continue to next string;
    endif
    :Repeat until all strings are processed;
    :Return filtered_strings;
    stop
endif

@enduml"
HumanEval/9,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
",rolling_max,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""

    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
","[""rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"", ""rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]"", ""rolling_max([10, 20, 15, 30, 25]) == [10, 20, 20, 30, 30]"", ""rolling_max([5, 10, 5, 10, 5]) == [5, 10, 10, 10, 10]"", ""rolling_max([100, 200, 150, 250, 200]) == [100, 200, 200, 250, 250]""]","@startuml
start

:Input list of integers (numbers);
:Initialize empty list (rolling_max_list);
:Initialize max_value as None;

if (Is numbers list empty?) then (yes)
  :Return empty list;
  stop
else (no)
  :Iterate over each number in numbers;
  :Set current_number as the current element;

  if (Is max_value None?) then (yes)
    :Set max_value to current_number;
  else (no)
    if (current_number > max_value?) then (yes)
      :Set max_value to current_number;
    else (no)
      :Keep max_value unchanged;
    endif
  endif

  :Append max_value to rolling_max_list;
  :Check if there are more numbers to process;

  if (More numbers to process?) then (yes)
    :Continue iteration;
  else (no)
    :Return rolling_max_list;
    stop
  endif
endif

@enduml"
HumanEval/147,"
def get_max_triples(n):
    """"""
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """"""
",get_max_triples,"
def get_max_triples(n):
    """"""
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """"""

    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def check(candidate):

    assert candidate(5) == 1
    assert candidate(6) == 4
    assert candidate(10) == 36
    assert candidate(100) == 53361
","[""get_max_triples(3) == 0"", ""get_max_triples(6) == 4"", ""get_max_triples(8) == 11"", ""get_max_triples(10) == 36"", ""get_max_triples(12) == 60""]","@startuml
start
:Initialize count = 0;
:Initialize a as an empty array;
:for i from 1 to n {
    :Calculate a[i] = i * i - i + 1;
}
:for i from 1 to n {
    :for j from i+1 to n {
        :for k from j+1 to n {
            :if (a[i] + a[j] + a[k] is a multiple of 3) {
                :Increment count;
            }
        }
    }
}
:Return count;
stop
@enduml"
HumanEval/25,"from typing import List


def factorize(n: int) -> List[int]:
    """""" Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
",factorize,"from typing import List


def factorize(n: int) -> List[int]:
    """""" Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""

    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate(2) == [2]
    assert candidate(4) == [2, 2]
    assert candidate(8) == [2, 2, 2]
    assert candidate(3 * 19) == [3, 19]
    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
    assert candidate(3 * 2 * 3) == [2, 3, 3]
","[""factorize(10) == [2, 5]"", ""factorize(36) == [2, 2, 3, 3]"", ""factorize(49) == [7, 7]"", ""factorize(96) == [2, 2, 2, 2, 2, 3]"", ""factorize(121) == [11, 11]""]","@startuml
start

:Input integer n;
if (n <= 1?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize empty list factors;
    :Initialize divisor = 2;
    while (n > 1?) is (yes)
        while (n % divisor == 0?) is (yes)
            :Add divisor to factors;
            :n = n / divisor;
        endwhile (no)
        :divisor = divisor + 1;
    endwhile (no)
    :Return factors;
    stop
endif

@enduml"
HumanEval/140,"
def fix_spaces(text):
    """"""
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces(""Example"") == ""Example""
    fix_spaces(""Example 1"") == ""Example_1""
    fix_spaces("" Example 2"") == ""_Example_2""
    fix_spaces("" Example   3"") == ""_Example-3""
    """"""
",fix_spaces,"
def fix_spaces(text):
    """"""
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces(""Example"") == ""Example""
    fix_spaces(""Example 1"") == ""Example_1""
    fix_spaces("" Example 2"") == ""_Example_2""
    fix_spaces("" Example   3"") == ""_Example-3""
    """"""

    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def check(candidate):

    # Check some simple cases
    assert candidate(""Example"") == ""Example"", ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(""Mudasir Hanif "") == ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate(""Yellow Yellow  Dirty  Fellow"") == ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate(""Exa   mple"") == ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate(""   Exa 1 2 2 mple"") == ""-Exa_1_2_2_mple"", ""This prints if this assert fails 4 (good for debugging!)""

","[""fix_spaces(\""Example\"") == \""Example\"""", ""fix_spaces(\""Example 1\"") == \""Example_1\"""", ""fix_spaces(\"" Example 2\"") == \""_Example_2\"""", ""fix_spaces(\"" Example   3\"") == \""_Example-3\""""]","@startuml

start

:Start with input text;
if (Text is empty) then (Yes)
  :Return empty string;
elseif (Text has spaces) then (Yes)
  :Replace spaces with underscores;
  if (Consecutive spaces > 2) then (Yes)
    :Replace consecutive spaces with -;
  else (No)
    :Continue;
  endif
else (No)
  :Return text as is;
endif

:End;

stop

@enduml"
HumanEval/64,"
FIX = """"""
Add more test cases.
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
",vowels_count,"
FIX = """"""
Add more test cases.
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""

    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def check(candidate):

    # Check some simple cases
    assert candidate(""abcde"") == 2, ""Test 1""
    assert candidate(""Alone"") == 3, ""Test 2""
    assert candidate(""key"") == 2, ""Test 3""
    assert candidate(""bye"") == 1, ""Test 4""
    assert candidate(""keY"") == 2, ""Test 5""
    assert candidate(""bYe"") == 1, ""Test 6""
    assert candidate(""ACEDY"") == 3, ""Test 7""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

","[""vowels_count(\""apple\"") == 2"", ""vowels_count(\""PYTHON\"") == 1"", ""vowels_count(\""banana\"") == 3"", ""vowels_count(\""elephant\"") == 3"", ""vowels_count(\""yummy\"") == 2""]","@startuml
start

:Input string s;
:Initialize vowel_count = 0;
:Convert string s to lowercase;
:Initialize i = 0;

while (i < length of s)
    :Get character c = s[i];
    if (c is 'a', 'e', 'i', 'o', or 'u') then (yes)
        :Increment vowel_count by 1;
    else (no)
        if (c is 'y' and i is the last index) then (yes)
            :Increment vowel_count by 1;
        else (no)
            :Do nothing;
        endif
    endif
    :Increment i by 1;
endwhile

:Return vowel_count;
stop
@enduml"
HumanEval/3,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
",below_zero,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""

    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate([]) == False
    assert candidate([1, 2, -3, 1, 2, -3]) == False
    assert candidate([1, 2, -4, 5, 6]) == True
    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
","[""below_zero([1, 2, 3, -6, 4]) == False"", ""below_zero([10, -10, 10, -10]) == False"", ""below_zero([5, 5, 5, 5, 5]) == False"", ""below_zero([-1, -2, -3, -4]) == True"", ""below_zero([100, 200, 300, -400, 500]) == False""]","@startuml
start

:Initialize balance = 0;
:Initialize index = 0;

while (index < length of operations?) is (yes)
    :balance += operations[index];
    if (balance < 0?) then (yes)
        :Return True;
        stop
    else (no)
        :index += 1;
    endif
endwhile

:Return False;
stop

@enduml"
HumanEval/82,"
def prime_length(string):
    """"""Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """"""
",prime_length,"
def prime_length(string):
    """"""Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """"""

    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello') == True
    assert candidate('abcdcba') == True
    assert candidate('kittens') == True
    assert candidate('orange') == False
    assert candidate('wow') == True
    assert candidate('world') == True
    assert candidate('MadaM') == True
    assert candidate('Wow') == True
    assert candidate('') == False
    assert candidate('HI') == True
    assert candidate('go') == True
    assert candidate('gogo') == False
    assert candidate('aaaaaaaaaaaaaaa') == False

    # Check some edge cases that are easy to work out by hand.
    assert candidate('Madam') == True
    assert candidate('M') == False
    assert candidate('0') == False

","[""prime_length('Hello') == True"", ""prime_length('abcdcba') == True"", ""prime_length('kittens') == True"", ""prime_length('orange') == False""]","@startuml
start

:Input string;
:Calculate length of the string (n);

if (n < 2) then (yes)
    :Return False;
    stop
else (no)
    :Set i = 2;
    while (i * i <= n) is (yes)
        if (n % i == 0) then (yes)
            :Return False;
            stop
        else (no)
            :Increment i by 1;
        endif
    endwhile
    :Return True;
    stop
endif

@enduml"
HumanEval/125,"
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
",split_words,"
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''

    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def check(candidate):

    assert candidate(""Hello world!"") == [""Hello"",""world!""]
    assert candidate(""Hello,world!"") == [""Hello"",""world!""]
    assert candidate(""Hello world,!"") == [""Hello"",""world,!""]
    assert candidate(""Hello,Hello,world !"") == [""Hello,Hello,world"",""!""]
    assert candidate(""abcdef"") == 3
    assert candidate(""aaabb"") == 2
    assert candidate(""aaaBb"") == 1
    assert candidate("""") == 0
","[""split_words(\""This is a test\"") == ['This', 'is', 'a', 'test']"", ""split_words(\""Python,Java,C++\"") == ['Python', 'Java', 'C++']"", ""split_words(\""12345\"") == 0"", ""split_words(\""a,b,c,d,e,f,g\"") == ['a', 'b', 'c', 'd', 'e', 'f', 'g']"", ""split_words(\""abcedfghijklmnopqrstuvwxyz\"") == 13""]","@startuml
start
:Receive input string txt;
if (txt contains whitespace) then (yes)
    :Split txt on whitespace;
    :Return list of words;
else (no)
    if (txt contains ',') then (yes)
        :Split txt on ',';
        :Return list of words;
    else (no)
        :Count lowercase letters with odd order in alphabet;
        :Return count;
    endif
endif
stop
@enduml"
HumanEval/136,"
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
",largest_smallest_integers,"
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''

    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
    assert candidate([]) == (None, None)
    assert candidate([0]) == (None, None)
    assert candidate([-1, -3, -5, -6]) == (-1, None)
    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

    # Check some edge cases that are easy to work out by hand.
    assert True
","[""largest_smallest_integers([1, 2, -3, 4, 5, -6, 7]) == (-3, 1)"", ""largest_smallest_integers([-9, -4, -7, -2]) == (-2, None)"", ""largest_smallest_integers([0, 0, 0, 0, 0]) == (None, None)"", ""largest_smallest_integers([10, 20, 30, -5, -10, -15]) == (-5, 10)"", ""largest_smallest_integers([-1, -2, -3, -4, -5]) == (-1, None)""]","@startuml
start
:Initialize largest_negative as None;
:Initialize smallest_positive as None;
if (lst is not empty) then (yes)
    :Filter negative integers from lst;
    if (negative integers exist) then (yes)
        :Find the largest negative integer;
        :Assign it to largest_negative;
    endif
    :Filter positive integers from lst;
    if (positive integers exist) then (yes)
        :Find the smallest positive integer;
        :Assign it to smallest_positive;
    endif
endif
:Return (largest_negative, smallest_positive);
stop
@enduml"
HumanEval/68,"
def pluck(arr):
    """"""
    ""Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """"""
",pluck,"
def pluck(arr):
    """"""
    ""Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """"""

    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([4,2,3]) == [2, 1], ""Error""
    assert candidate([1,2,3]) == [2, 1], ""Error""
    assert candidate([]) == [], ""Error""
    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], ""Error""
    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], ""Error""
    assert candidate([7, 6, 7, 1]) == [6, 1], ""Error""
    assert candidate([7, 9, 7, 1]) == [], ""Error""

","[""pluck([2, 4, 6, 8, 10]) == [2, 0]"", ""pluck([1, 3, 5, 7, 9]) == []"", ""pluck([0, 2, 4, 6, 8]) == [0, 0]"", ""pluck([1, 2, 4, 6, 8, 10]) == [2, 1]"", ""pluck([1, 3, 5, 7, 9, 11]) == []""]","@startuml
start

:Input array (arr);
if (Is arr empty?) then (yes)
    :Return [];
    stop
else (no)
    :Initialize smallest_even_value = None;
    :Initialize smallest_index = -1;
    :Initialize index = 0;

    while (index < length of arr) is (yes)
        :current_value = arr[index];
        if (current_value is even?) then (yes)
            if (smallest_even_value is None or current_value < smallest_even_value) then (yes)
                :smallest_even_value = current_value;
                :smallest_index = index;
            else (no)
                :Do nothing;
            endif
        else (no)
            :Do nothing;
        endif
        :index = index + 1;
    endwhile

    if (smallest_even_value is not None) then (yes)
        :Return [smallest_even_value, smallest_index];
    else (no)
        :Return [];
    endif
endif

stop
@enduml"
HumanEval/69,"
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
",search,"
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''

    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def check(candidate):

    # manually generated tests
    assert candidate([5, 5, 5, 5, 1]) == 1
    assert candidate([4, 1, 4, 1, 4, 4]) == 4
    assert candidate([3, 3]) == -1
    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
    assert candidate([2, 3, 3, 2, 2]) == 2

    # automatically generated tests
    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
    assert candidate([3, 2, 8, 2]) == 2
    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
    assert candidate([1, 9, 10, 1, 3]) == 1
    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
    assert candidate([1]) == 1
    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
    assert candidate([10]) == -1
    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
    assert candidate([3, 10, 10, 9, 2]) == -1

","[""search([2, 2, 3, 3, 3, 3, 4, 4, 4, 4]) == 4"", ""search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 2"", ""search([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == 3"", ""search([1, 2, 3, 4, 5]) == 1"", ""search([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]) == 3""]","@startuml
start
:Initialize empty dictionary freq_map;
:Iterate over each element in lst;
:    If element in freq_map;
:        Increment the frequency of the element in freq_map;
:    Else;
:        Add element to freq_map with frequency 1;
:Iterate over keys and values in freq_map;
:    If value >= key;
:        Update max_val to maximum of max_val and key;
:If max_val is not None;
:    return max_val;
:Else;
:    return -1;
stop
@enduml"
HumanEval/80,"
def is_happy(s):
    """"""You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """"""
",is_happy,"
def is_happy(s):
    """"""You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """"""

    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def check(candidate):

    # Check some simple cases
    assert candidate(""a"") == False , ""a""
    assert candidate(""aa"") == False , ""aa""
    assert candidate(""abcd"") == True , ""abcd""
    assert candidate(""aabb"") == False , ""aabb""
    assert candidate(""adb"") == True , ""adb""
    assert candidate(""xyy"") == False , ""xyy""
    assert candidate(""iopaxpoi"") == True , ""iopaxpoi""
    assert candidate(""iopaxioi"") == False , ""iopaxioi""
","[""is_happy('abc') == True"", ""is_happy('xyz') == True"", ""is_happy('aab') == False"", ""is_happy('def') == True"", ""is_happy('pqrr') == False""]","@startuml
start

:Input string s;
if (Length of s < 3?) then (yes)
    :Return False;
    stop
else (no)
    :Initialize index i = 0;
    while (i <= length of s - 3) is (yes)
        if (s[i] == s[i+1] OR s[i] == s[i+2] OR s[i+1] == s[i+2]?) then (yes)
            :Return False;
            stop
        else (no)
            :Increment i by 1;
        endif
    endwhile (no)
    :Return True;
    stop
endif

@enduml"
HumanEval/23,"

def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
",strlen,"

def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""

    return len(string)
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate('') == 0
    assert candidate('x') == 1
    assert candidate('asdasnakj') == 9
","[""strlen('hello') == 5"", ""strlen('python') == 6"", ""strlen('12345') == 5"", ""strlen('') == 0"", ""strlen('test case') == 9""]","@startuml
start

:Input string;
if (Is string empty?) then (yes)
    :Return 0;
else (no)
    :Calculate length of string;
    :Return length;
endif

stop
@enduml"
HumanEval/145,"
def order_by_points(nums):
    """"""
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
",order_by_points,"
def order_by_points(nums):
    """"""
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""

    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
    assert candidate([]) == []
    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

","[""order_by_points([123, 456, 789, 111]) == [111, 123, 456, 789]"", ""order_by_points([-1, 0, 1, 100, -100]) == [-1, -100, 0, 1, 100]"", ""order_by_points([12, 34, 56, 78, 90]) == [12, 34, 90, 56, 78]"", ""order_by_points([-123, -456, -789, -111]) == [-111, -123, -456, -789]"", ""order_by_points([9, 99, 999, 9999]) == [9, 99, 999, 9999]""]","@startuml
start

:Input list of integers (nums);
if (Is nums empty?) then (yes)
  :Return empty list;
  stop
else (no)
  :Initialize an empty list (result);
  :Initialize an empty list (sum_index_pairs);
  :Loop through each number in nums;
  :Calculate the sum of digits of the current number;
  :Store the sum and index as a tuple in sum_index_pairs;
  :Sort sum_index_pairs by sum, then by index;
  :Loop through sorted sum_index_pairs;
  :Append the corresponding number from nums to result;
  :Return result;
  stop
endif

@enduml"
HumanEval/133,"

def sum_squares(lst):
    """"""You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """"""
",sum_squares,"

def sum_squares(lst):
    """"""You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """"""

    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.0,2,3])==14, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,3,5,7])==84, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1.4,4.2,0])==29, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-2.4,1,1])==6, ""This prints if this assert fails 1 (good for debugging!)""

    assert candidate([100,1,15,2])==10230, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([10000,10000])==200000000, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,4.6,6.3])==75, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1.4,17.9,18.9,19.9])==1086, ""This prints if this assert fails 1 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([0])==0, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1])==1, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([-1,1,0])==2, ""This prints if this assert fails 2 (also good for debugging!)""

","[""sum_squares([2.5, 3.7, 5.2]) == 61"", ""sum_squares([0, -1, -2]) == 5"", ""sum_squares([-3.1, -4.9, -6.8]) == 61"", ""sum_squares([1, 1.5, 2.7, 3.3]) == 30"", ""sum_squares([4.1, 5.9, 6]) == 97""]","@startuml
start

:Input list of numbers (lst);
:Initialize sum = 0;

if (Is lst empty?) then (yes)
    :Return sum (0);
    stop
else (no)
    :Iterate over each element in lst;
    :Round each element to the nearest upper integer (Ceiling);
    :Square the rounded element;
    :Add the squared value to sum;
    if (More elements in lst?) then (yes)
        :Continue iteration;
    else (no)
        :Return sum;
        stop
    endif
endif

@enduml"
HumanEval/149,"
def sorted_list_sum(lst):
    """"""Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort([""aa"", ""a"", ""aaa""]) => [""aa""]
    assert list_sort([""ab"", ""a"", ""aaa"", ""cd""]) => [""ab"", ""cd""]
    """"""
",sorted_list_sum,"
def sorted_list_sum(lst):
    """"""Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort([""aa"", ""a"", ""aaa""]) => [""aa""]
    assert list_sort([""ab"", ""a"", ""aaa"", ""cd""]) => [""ab"", ""cd""]
    """"""

    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def check(candidate):

    # Check some simple cases
    assert candidate([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert candidate([""school"", ""AI"", ""asdf"", ""b""]) == [""AI"", ""asdf"", ""school""]
    assert candidate([""d"", ""b"", ""c"", ""a""]) == []
    assert candidate([""d"", ""dcba"", ""abcd"", ""a""]) == [""abcd"", ""dcba""]

    # Check some edge cases that are easy to work out by hand.
    assert candidate([""AI"", ""ai"", ""au""]) == [""AI"", ""ai"", ""au""]
    assert candidate([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]) == []
    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [""cc"", ""dd"", ""aaaa"", ""bbbb""]

","[""sorted_list_sum([\""a\"", \""bb\"", \""ccc\"", \""dddd\""]) == ['bb', 'dddd']"", ""sorted_list_sum([\""abc\"", \""def\"", \""ghij\"", \""klmno\""]) == ['ghij']"", ""sorted_list_sum([\""xy\"", \""z\"", \""uvw\"", \""rst\""]) == ['xy']"", ""sorted_list_sum([\""cat\"", \""dog\"", \""fish\"", \""bird\""]) == ['bird', 'fish']"", ""sorted_list_sum([\""apple\"", \""banana\"", \""pear\""]) == ['pear', 'banana']""]","@startuml
start
:Accept list of strings as input;
:Initialize an empty list for result;
:Iterate through each string in the input list;
if (String length is even?) then (yes)
  :Add string to the result list;
else (no)
  :Skip the string;
endif
endwhile (All strings processed)
:Sort the result list by length and then alphabetically;
:Return the sorted result list as output;
stop
@enduml"
HumanEval/87,"
def get_row(lst, x):
    """"""
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """"""
",get_row,"
def get_row(lst, x):
    """"""
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """"""

    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def check(candidate):

    # Check some simple cases
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,2,3,4,5,6]
    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
    assert candidate([
        [1,2,3,4,5,6],
        [1,2,3,4,5,6],
        [1,1,3,4,5,6],
        [1,2,1,4,5,6],
        [1,2,3,1,5,6],
        [1,2,3,4,1,6],
        [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
    assert candidate([], 1) == []
    assert candidate([[1]], 2) == []
    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

    # Check some edge cases that are easy to work out by hand.
    assert True

","[""get_row([[1, 2, 3], [4, 5], [6, 7, 8, 9]], 5) == [(1, 1)]"", ""get_row([[3, 3, 3, 3], [2, 2], [1, 1, 1, 1]], 3) == [(0, 3), (0, 2), (0, 1), (0, 0)]"", ""get_row([[0], [0, 0], [0, 0, 0]], 0) == [(0, 0), (1, 1), (1, 0), (2, 2), (2, 1), (2, 0)]"", ""get_row([[1, 2], [2, 3], [3, 4], [4, 5]], 2) == [(0, 1), (1, 0)]"", ""get_row([[1], [2], [3], [4]], 5) == []""]","@startuml
start

:Input: lst (nested list), x (integer);
if (Is lst empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize an empty list 'result';
    :Initialize row index 'i' to 0;
    while (i < number of rows in lst?) is (yes)
        :Initialize column index 'j' to 0;
        while (j < number of columns in row i?) is (yes)
            if (lst[i][j] == x?) then (yes)
                :Append (i, j) to 'result';
            else (no)
            endif
            :Increment j by 1;
        endwhile (no)
        :Increment i by 1;
    endwhile (no)
    :Sort 'result' by row in ascending order;
    :Sort 'result' by column in descending order for each row;
    :Return 'result';
    stop
endif

@enduml"
HumanEval/162,"
def string_to_md5(text):
    """"""
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
",string_to_md5,"
def string_to_md5(text):
    """"""
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""

    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def check(candidate):

    # Check some simple cases
    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    assert candidate('') == None
    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

    # Check some edge cases that are easy to work out by hand.
    assert True

","[""string_to_md5('Python') == 'a7f5f35426b927411fc9231b56382173'"", ""string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'"", ""string_to_md5('') == None""]","@startuml
start
if (Is text empty?) then (yes)
  :Return None;
  stop
else (no)
  :Calculate MD5 hash of text;
  :Return MD5 hash;
  stop
endif
@enduml"
HumanEval/156,"
def int_to_mini_roman(number):
    """"""
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
",int_to_mini_roman,"
def int_to_mini_roman(number):
    """"""
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""

    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def check(candidate):

    # Check some simple cases
    assert candidate(19) == 'xix'
    assert candidate(152) == 'clii'
    assert candidate(251) == 'ccli'
    assert candidate(426) == 'cdxxvi'
    assert candidate(500) == 'd'
    assert candidate(1) == 'i'
    assert candidate(4) == 'iv'
    assert candidate(43) == 'xliii'
    assert candidate(90) == 'xc'
    assert candidate(94) == 'xciv'
    assert candidate(532) == 'dxxxii'
    assert candidate(900) == 'cm'
    assert candidate(994) == 'cmxciv'
    assert candidate(1000) == 'm'

    # Check some edge cases that are easy to work out by hand.
    assert True

","[""int_to_mini_roman(893) == 'dcccxciii'"", ""int_to_mini_roman(345) == 'cccxlv'"", ""int_to_mini_roman(77) == 'lxxvii'"", ""int_to_mini_roman(500) == 'd'"", ""int_to_mini_roman(999) == 'cmxcix'""]","@startuml
start

:Input positive integer (number);
if (number >= 1 AND number <= 1000?) then (yes)
    :Initialize roman numeral string as empty;
    :Define integer to roman numeral mappings;
    :Iterate through the mappings in descending order;
    while (number > 0?) is (yes)
        :Subtract the largest possible value from the mappings;
        :Append the corresponding roman numeral to the string;
    endwhile (no)
    :Convert the roman numeral string to lowercase;
    :Return the lowercase roman numeral string;
else (no)
    :Handle invalid input (e.g., return error or None);
endif

stop
@enduml"
HumanEval/79,"
def decimal_to_binary(decimal):
    """"""You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns ""db1111db""
    decimal_to_binary(32)   # returns ""db100000db""
    """"""
",decimal_to_binary,"
def decimal_to_binary(decimal):
    """"""You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns ""db1111db""
    decimal_to_binary(32)   # returns ""db100000db""
    """"""

    return ""db"" + bin(decimal)[2:] + ""db""
","def check(candidate):

    # Check some simple cases
    assert candidate(0) == ""db0db""
    assert candidate(32) == ""db100000db""
    assert candidate(103) == ""db1100111db""
    assert candidate(15) == ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

","[""decimal_to_binary(0) == \""db0db\"""", ""decimal_to_binary(7) == \""db111db\"""", ""decimal_to_binary(25) == \""db11001db\"""", ""decimal_to_binary(63) == \""db111111db\"""", ""decimal_to_binary(128) == \""db10000000db\""""]","@startuml
start

:Input decimal number;
if (Is decimal number valid?) then (yes)
    :Initialize binary string as empty;
    :Convert decimal to binary;
    :Add 'db' prefix to binary string;
    :Add 'db' suffix to binary string;
    :Return formatted binary string;
else (no)
    :Handle invalid input (e.g., return error message);
endif

stop
@enduml"
HumanEval/60,"

def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
",sum_to_n,"

def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""

    return sum(range(n + 1))
","

METADATA = {}


def check(candidate):
    assert candidate(1) == 1
    assert candidate(6) == 21
    assert candidate(11) == 66
    assert candidate(30) == 465
    assert candidate(100) == 5050

","[""sum_to_n(30) == 465"", ""sum_to_n(100) == 5050"", ""sum_to_n(5) == 15"", ""sum_to_n(10) == 55"", ""sum_to_n(1) == 1""]","@startuml
start

:Input integer n;
if (Is n a positive integer?) then (yes)
    :Initialize sum = 0;
    :Initialize counter = 1;
    while (counter <= n) is (yes)
        :sum = sum + counter;
        :counter = counter + 1;
    endwhile (no)
    :Output sum;
else (no)
    :Output ""Invalid input: n must be a positive integer"";
endif

stop
@enduml"
HumanEval/106,"
def f(n):
    """""" Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """"""
",f,"
def f(n):
    """""" Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """"""

    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def check(candidate):

    assert candidate(5) == [1, 2, 6, 24, 15]
    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
    assert candidate(1) == [1]
    assert candidate(3) == [1, 2, 6]
","[""f(1) == [1]"", ""f(2) == [1, 2]"", ""f(3) == [1, 2, 6]"", ""f(4) == [1, 2, 6, 24]"", ""f(6) == [1, 2, 6, 24, 15, 720]""]","@startuml
start

:Input n;
if (n <= 0?) then (yes)
  :Return empty list;
  stop
else (no)
  :Initialize empty list result;
  :Initialize i = 1;
  while (i <= n?) is (yes)
    if (i is even?) then (yes)
      :Calculate factorial of i;
      :factorial = 1 * 2 * ... * i;
      :Append factorial to result;
    else (no)
      :Calculate sum of numbers from 1 to i;
      :sum = 1 + 2 + ... + i;
      :Append sum to result;
    endif
    :Increment i by 1;
  endwhile (no)
  :Return result;
  stop
endif

@enduml"
HumanEval/32,"import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
",find_zero,"import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""

    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","

METADATA = {}


def check(candidate):
    import math
    import random
    rng = random.Random(42)
    import copy
    for _ in range(100):
        ncoeff = 2 * rng.randint(1, 4)
        coeffs = []
        for _ in range(ncoeff):
            coeff = rng.randint(-10, 10)
            if coeff == 0:
                coeff = 1
            coeffs.append(coeff)
        solution = candidate(copy.deepcopy(coeffs))
        assert math.fabs(poly(coeffs, solution)) < 1e-4

","[""round(find_zero([1, 2]), 2) == -0.5"", ""round(find_zero([-6, 11, -6, 1]), 2) == 1.0""]","@startuml
start

:Input list of coefficients (xs);
if (Does xs have an even number of coefficients?) then (yes)
    if (Is the largest coefficient non-zero?) then (yes)
        :Initialize x (e.g., x = 0.0);
        :Evaluate polynomial at x using poly(xs, x);
        if (Is poly(xs, x) == 0?) then (yes)
            :Return x as the zero point;
        else (no)
            :Adjust x using a root-finding method (e.g., Newton-Raphson);
            :Re-evaluate polynomial at new x;
            :Repeat until poly(xs, x) is close to 0;
            :Return x as the zero point;
        endif
    else (no)
        :Error: Largest coefficient is zero;
    endif
else (no)
    :Error: List of coefficients must have an even number of elements;
endif

stop
@enduml"
HumanEval/108,"
def count_nums(arr):
    """"""
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
",count_nums,"
def count_nums(arr):
    """"""
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""

    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0
    assert candidate([-1, -2, 0]) == 0
    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
    assert candidate([1, 100, 98, -7, 1, -1]) == 4
    assert candidate([12, 23, 34, -45, -56, 0]) == 5
    assert candidate([-0, 1**0]) == 1
    assert candidate([1]) == 1

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

","[""count_nums([0, 0, 0, 0]) == 0"", ""count_nums([-100, -200, -300]) == 0"", ""count_nums([123, 456, 789]) == 3"", ""count_nums([-99, -88, -77]) == 0"", ""count_nums([456, -123, -789]) == 3""]","@startuml
start
if arr is empty then
    :Return 0;
else
    :Initialize count to 0;
    :For each num in arr do;
        if num < 0 then
            :Convert num to string;
            :For each char in num_str do;
                if char is not '-' then
                    :Increment count;
                endif
            endwhile
        else
            :Increment count by the length of num;
        endif
    endwhile
    :Return count;
endif
@enduml"
HumanEval/132,"
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
",is_nested,"
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''

    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def check(candidate):

    # Check some simple cases
    assert candidate('[[]]') == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('[]]]]]]][[[[[]') == False
    assert candidate('[][]') == False
    assert candidate(('[]')) == False
    assert candidate('[[[[]]]]') == True
    assert candidate('[]]]]]]]]]]') == False
    assert candidate('[][][[]]') == True
    assert candidate('[[]') == False
    assert candidate('[]]') == False
    assert candidate('[[]][[') == True
    assert candidate('[[][]]') == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate('[[[[[[[[') == False
    assert candidate(']]]]]]]]') == False

","[""is_nested('[[]]') == True"", ""is_nested('[[][]]') == True"", ""is_nested('[][[[]]]') == True"", ""is_nested('[[]][[]]') == True"", ""is_nested('[]][[]') == False""]","@startuml
start

:Input string containing only square brackets;
:Initialize stack = [];
:Initialize nested = False;

while (Iterate through each character in the string) is (More characters?)
    :Get current character;
    if (current character == '[') then (yes)
        :Push '[' to stack;
    else (no)
        if (stack is not empty) then (yes)
            :Pop from stack;
            if (stack is not empty) then (yes)
                :Set nested = True;
            endif
        endif
    endif
endwhile

if (nested == True) then (yes)
    :Return True;
else (no)
    :Return False;
endif

stop
@enduml"
HumanEval/84,"
def solve(N):
    """"""Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be ""1"".
        For N = 150, the sum of digits will be 6 the output should be ""110"".
        For N = 147, the sum of digits will be 12 the output should be ""1100"".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """"""
",solve,"
def solve(N):
    """"""Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be ""1"".
        For N = 150, the sum of digits will be 6 the output should be ""110"".
        For N = 147, the sum of digits will be 12 the output should be ""1100"".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """"""

    return bin(sum(int(i) for i in str(N)))[2:]
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1000) == ""1"", ""Error""
    assert candidate(150) == ""110"", ""Error""
    assert candidate(147) == ""1100"", ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(333) == ""1001"", ""Error""
    assert candidate(963) == ""10010"", ""Error""

","[""solve(0) == \""0\"""", ""solve(123) == \""110\"""", ""solve(9999) == \""100100\"""", ""solve(1024) == \""111\"""", ""solve(5555) == \""10100\""""]","@startuml
start
:Initialize sum as 0;
:Convert N to binary;
:Iterate through each digit in binary N;
if (Digit is 1?) then (yes)
    :Increment sum by 1;
else (no)
    :Continue to next digit;
endif
:Convert sum to binary;
stop
@enduml"
HumanEval/141,"
def file_name_check(file_name):
    """"""Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check(""example.txt"") # => 'Yes'
    file_name_check(""1example.dll"") # => 'No' (the name should start with a latin alphapet letter)
    """"""
",file_name_check,"
def file_name_check(file_name):
    """"""Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check(""example.txt"") # => 'Yes'
    file_name_check(""1example.dll"") # => 'No' (the name should start with a latin alphapet letter)
    """"""

    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def check(candidate):

    # Check some simple cases
    assert candidate(""example.txt"") == 'Yes'
    assert candidate(""1example.dll"") == 'No'
    assert candidate('s1sdf3.asd') == 'No'
    assert candidate('K.dll') == 'Yes'
    assert candidate('MY16FILE3.exe') == 'Yes'
    assert candidate('His12FILE94.exe') == 'No'
    assert candidate('_Y.txt') == 'No'
    assert candidate('?aREYA.exe') == 'No'
    assert candidate('/this_is_valid.dll') == 'No'
    assert candidate('this_is_valid.wow') == 'No'
    assert candidate('this_is_valid.txt') == 'Yes'
    assert candidate('this_is_valid.txtexe') == 'No'
    assert candidate('#this2_i4s_5valid.ten') == 'No'
    assert candidate('@this1_is6_valid.exe') == 'No'
    assert candidate('this_is_12valid.6exe4.txt') == 'No'
    assert candidate('all.exe.txt') == 'No'
    assert candidate('I563_No.exe') == 'Yes'
    assert candidate('Is3youfault.txt') == 'Yes'
    assert candidate('no_one#knows.dll') == 'Yes'
    assert candidate('1I563_Yes3.exe') == 'No'
    assert candidate('I563_Yes3.txtt') == 'No'
    assert candidate('final..txt') == 'No'
    assert candidate('final132') == 'No'
    assert candidate('_f4indsartal132.') == 'No'
    
        

    # Check some edge cases that are easy to work out by hand.
    assert candidate('.txt') == 'No'
    assert candidate('s.') == 'No'

","[""file_name_check(\""file123.txt\"") == 'Yes'"", ""file_name_check(\""my_file.exe\"") == 'Yes'"", ""file_name_check(\""3rd_file.exe\"") == 'No'"", ""file_name_check(\""important.dll\"") == 'Yes'"", ""file_name_check(\""invalid_file\"") == 'No'""]","@startuml
start

:Input file_name;
:Count digits in file_name;
if (Number of digits > 3?) then (yes)
    :Return 'No';
    stop
else (no)
    :Check if file_name contains exactly one dot;
    if (Number of dots != 1?) then (yes)
        :Return 'No';
        stop
    else (no)
        :Split file_name into [name_part, extension];
        :Check if name_part is not empty and starts with a letter;
        if (name_part is empty or does not start with a letter?) then (yes)
            :Return 'No';
            stop
        else (no)
            :Check if extension is one of ['txt', 'exe', 'dll'];
            if (extension is not in ['txt', 'exe', 'dll']?) then (yes)
                :Return 'No';
                stop
            else (no)
                :Return 'Yes';
                stop
            endif
        endif
    endif
endif

@enduml"
HumanEval/111,"
def histogram(test):
    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """"""
",histogram,"
def histogram(test):
    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """"""

    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def check(candidate):

    # Check some simple cases
    assert candidate('a b b a') == {'a':2,'b': 2}, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate('a b c a b') == {'a': 2, 'b': 2}, ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 4 (good for debugging!)""
    assert candidate('b b b b a') == {'b': 4}, ""This prints if this assert fails 5 (good for debugging!)""
    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, ""This prints if this assert fails 6 (good for debugging!)""
    
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate('') == {}, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate('a') == {'a': 1}, ""This prints if this assert fails 8 (also good for debugging!)""

","[""histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}"", ""histogram('a b b a') == {'a': 2, 'b': 2}"", ""histogram('a b c a b') == {'a': 2, 'b': 2}"", ""histogram('b b b b a') == {'b': 4}"", ""histogram('') == {}""]","@startuml
start

:Input string 'test';
if (Is 'test' empty?) then (yes)
    :Return empty dictionary {};
    stop
else (no)
    :Split 'test' into list of letters;
    :Initialize empty dictionary 'hist';
    :Initialize variable 'max_count' to 0;
    :Initialize empty list 'max_letters';

    :For each letter in the list;
    if (Letter exists in 'hist'?) then (yes)
        :Increment count of letter in 'hist';
    else (no)
        :Add letter to 'hist' with count 1;
    endif

    :Update 'max_count' if current letter count > 'max_count';
    :Clear 'max_letters' and add current letter if count == 'max_count';
    :Add current letter to 'max_letters' if count == 'max_count';

    :End of loop;

    :Create result dictionary with letters in 'max_letters' and their counts;
    :Return result dictionary;
    stop
endif

@enduml"
HumanEval/8,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
",sum_product,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""

    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate([]) == (0, 1)
    assert candidate([1, 1, 1]) == (3, 1)
    assert candidate([100, 0]) == (100, 0)
    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
    assert candidate([10]) == (10, 10)
","[""sum_product([5, 10, 15]) == (30, 750)"", ""sum_product([-2, 5, 7, 3, -1]) == (12, 210)"", ""sum_product([2, 2, 2, 2, 2]) == (10, 32)"", ""sum_product([0, 0, 0, 0]) == (0, 0)"", ""sum_product([1, 3, 5, 7, 9]) == (25, 945)""]","@startuml
start

:Input list of integers (numbers);
if (Is numbers empty?) then (yes)
    :Set sum = 0;
    :Set product = 1;
else (no)
    :Initialize sum = 0;
    :Initialize product = 1;
    :Iterate over each number in numbers;
    while (Is there another number?) is (yes)
        :Add current number to sum;
        :Multiply current number with product;
    endwhile (no)
endif

:Return tuple (sum, product);
stop
@enduml"
HumanEval/24,"

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
",largest_divisor,"

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""

    for i in reversed(range(n)):
        if n % i == 0:
            return i
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7
","[""largest_divisor(20) == 10"", ""largest_divisor(36) == 18"", ""largest_divisor(49) == 7"", ""largest_divisor(72) == 36"", ""largest_divisor(100) == 50""]","@startuml
start
:Start;
if (n <= 0) then (no)
  :Invalid input;
  stop
else
  :largest_divisor(n);
  :Set divisor = n - 1;
  while (divisor > 0)
    :Check if n % divisor == 0;
    if (yes)
      :Return divisor;
      stop
    else
      :decrement divisor by 1;
    endif
  endwhile
  :Return 1; (if no divisor found);
  stop
endif
@enduml"
HumanEval/46,"

def fib4(n: int):
    """"""The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
",fib4,"

def fib4(n: int):
    """"""The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""

    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","

METADATA = {}


def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386

","[""fib4(0) == 0"", ""fib4(8) == 28"", ""fib4(10) == 104"", ""fib4(12) == 386"", ""fib4(15) == 2764""]","@startuml
start

:Input n (integer);
if (n < 0) then (yes)
  :Raise ValueError(""Input must be a non-negative integer"");
  stop
else (no)
  if (n == 0) then (yes)
    :Return 0;
    stop
  else (no)
    if (n == 1) then (yes)
      :Return 0;
      stop
    else (no)
      if (n == 2) then (yes)
        :Return 2;
        stop
      else (no)
        if (n == 3) then (yes)
          :Return 0;
          stop
        else (no)
          :Initialize variables:
          a = 0, b = 0, c = 2, d = 0;
          :Initialize result variable:
          result = 0;
          :Loop from i = 4 to n;
          while (i <= n) is (yes)
            :result = a + b + c + d;
            :Update variables:
            a = b, b = c, c = d, d = result;
            :Increment i;
          endwhile (no)
          :Return result;
          stop
        endif
      endif
    endif
  endif
endif

@enduml"
HumanEval/150,"
def x_or_y(n, x, y):
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """"""
",x_or_y,"
def x_or_y(n, x, y):
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """"""

    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def check(candidate):

    # Check some simple cases
    assert candidate(7, 34, 12) == 34
    assert candidate(15, 8, 5) == 5
    assert candidate(3, 33, 5212) == 33
    assert candidate(1259, 3, 52) == 3
    assert candidate(7919, -1, 12) == -1
    assert candidate(3609, 1245, 583) == 583
    assert candidate(91, 56, 129) == 129
    assert candidate(6, 34, 1234) == 1234
    

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 2, 0) == 0
    assert candidate(2, 2, 0) == 2

","[""x_or_y(2, 10, 20) == 10"", ""x_or_y(3, 6, 9) == 6"", ""x_or_y(11, 4, 7) == 4"", ""x_or_y(17, 3, 8) == 3"", ""x_or_y(20, 15, 25) == 25""]","@startuml
start

:Input n, x, y;
if (n <= 1?) then (yes)
    :Return y;
    stop
else (no)
    :Set i = 2;
    while (i <= sqrt(n)) is (yes)
        if (n % i == 0?) then (yes)
            :Return y;
            stop
        else (no)
            :i = i + 1;
        endif
    endwhile (no)
    :Return x;
    stop
endif

@enduml"
HumanEval/151,"
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
",double_the_difference,"
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''

    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def check(candidate):

    # Check some simple cases
    assert candidate([]) == 0 , ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([5, 4]) == 25 , ""This prints if this assert fails 2 (good for debugging!)""
    assert candidate([0.1, 0.2, 0.3]) == 0 , ""This prints if this assert fails 3 (good for debugging!)""
    assert candidate([-10, -20, -30]) == 0 , ""This prints if this assert fails 4 (good for debugging!)""


    # Check some edge cases that are easy to work out by hand.
    assert candidate([-1, -2, 8]) == 0, ""This prints if this assert fails 5 (also good for debugging!)""
    assert candidate([0.2, 3, 5]) == 34, ""This prints if this assert fails 6 (also good for debugging!)""
    lst = list(range(-99, 100, 2))
    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
    assert candidate(lst) == odd_sum , ""This prints if this assert fails 7 (good for debugging!)""

","[""double_the_difference([5, 6, 7, -3, 2]) == 74"", ""double_the_difference([8, 9, -4, 0, 3]) == 90"", ""double_the_difference([-1, -5, 10, 11, 3, 6]) == 130"", ""double_the_difference([2.5, 7, 4, 1, -3]) == 50"", ""double_the_difference([12, -8, 5, 0, 3]) == 34""]","@startuml
start
if (Input list is empty?) then (yes)
  :Return 0;
  stop
else (no)
  :Set total_sum = 0;
  :Iterate over each element in the list;
  :Check if element is odd, non-negative, and an integer;
  if (Conditions met?) then (yes)
    :Calculate square of the element;
    :Add the square to total_sum;
  else (no)
    :Continue to next element;
  endif
  end
endif
:Return total_sum * 2;
stop
@enduml"
HumanEval/35,"

def max_element(l: list):
    """"""Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
",max_element,"

def max_element(l: list):
    """"""Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""

    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","

METADATA = {}


def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
","[""max_element([4, 6, 8]) == 8"", ""max_element([-2, -5, -8, -15, -6]) == -2"", ""max_element([100, 200, 150, 250, 180]) == 250"", ""max_element([0, 0, 0, 0, 0]) == 0"", ""max_element([-1, -2, -3, -4, -5]) == -1""]","@startuml
start

:Input list (l);
if (Is list empty?) then (yes)
  :Return None or raise error;
  stop
else (no)
  :Initialize max_value with the first element of the list;
  :Initialize index (i) to 1;
  while (i < length of list?) is (yes)
    if (l[i] > max_value?) then (yes)
      :Update max_value with l[i];
    else (no)
      :Do nothing;
    endif
    :Increment index (i++);
  endwhile (no)
  :Return max_value;
  stop
endif

@enduml"
HumanEval/96,"
def count_up_to(n):
    """"""Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """"""
",count_up_to,"
def count_up_to(n):
    """"""Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """"""

    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def check(candidate):

    assert candidate(5) == [2,3]
    assert candidate(6) == [2,3,5]
    assert candidate(7) == [2,3,5]
    assert candidate(10) == [2,3,5,7]
    assert candidate(0) == []
    assert candidate(22) == [2,3,5,7,11,13,17,19]
    assert candidate(1) == []
    assert candidate(18) == [2,3,5,7,11,13,17]
    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

","[""count_up_to(5) == [2,3]"", ""count_up_to(11) == [2,3,5,7]"", ""count_up_to(0) == []"", ""count_up_to(20) == [2,3,5,7,11,13,17,19]"", ""count_up_to(1) == []"", ""count_up_to(18) == [2,3,5,7,11,13,17]""]","@startuml
start

:Input non-negative integer n;
if (n <= 1?) then (yes)
    :Return empty list [];
    stop
else (no)
    :Initialize empty list primes;
    :Initialize i = 2;
    while (i < n?) is (yes)
        :Initialize is_prime = True;
        :Initialize j = 2;
        while (j * j <= i?) is (yes)
            if (i % j == 0?) then (yes)
                :Set is_prime = False;
                break;
            else (no)
                :Increment j by 1;
            endif
        endwhile (no)
        if (is_prime == True?) then (yes)
            :Append i to primes;
        else (no)
        endif
        :Increment i by 1;
    endwhile (no)
    :Return primes;
    stop
endif

@enduml"
HumanEval/127,"
def intersection(interval1, interval2):
    """"""You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return ""YES"",
    otherwise, return ""NO"".
    If the two intervals don't intersect, return ""NO"".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> ""NO""
    intersection((-1, 1), (0, 4)) ==> ""NO""
    intersection((-3, -1), (-5, 5)) ==> ""YES""
    """"""
",intersection,"
def intersection(interval1, interval2):
    """"""You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return ""YES"",
    otherwise, return ""NO"".
    If the two intervals don't intersect, return ""NO"".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> ""NO""
    intersection((-1, 1), (0, 4)) ==> ""NO""
    intersection((-3, -1), (-5, 5)) ==> ""YES""
    """"""

    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def check(candidate):

    # Check some simple cases
    assert candidate((1, 2), (2, 3)) == ""NO""
    assert candidate((-1, 1), (0, 4)) == ""NO""
    assert candidate((-3, -1), (-5, 5)) == ""YES""
    assert candidate((-2, 2), (-4, 0)) == ""YES""

    # Check some edge cases that are easy to work out by hand.
    assert candidate((-11, 2), (-1, -1)) == ""NO""
    assert candidate((1, 2), (3, 5)) == ""NO""
    assert candidate((1, 2), (1, 2)) == ""NO""
    assert candidate((-2, -2), (-3, -2)) == ""NO""

","[""intersection((3, 5), (4, 7)) == 'NO'"", ""intersection((10, 15), (16, 20)) == 'NO'"", ""intersection((-5, 0), (0, 5)) == 'NO'"", ""intersection((-10, -5), (-8, -3)) == 'YES'"", ""intersection((0, 10), (5, 15)) == 'YES'""]","@startuml

start

:Check if intervals intersect;
if (Intervals intersect?) then (yes)
    :Calculate intersection;
    :Check if length is prime;
    if (Length is prime?) then (yes)
        :Return ""YES"";
    else (no)
        :Return ""NO"";
    endif
else (no)
    :Return ""NO"";
endif

stop

@enduml"
HumanEval/113,"
def odd_count(lst):
    """"""Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
",odd_count,"
def odd_count(lst):
    """"""Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""

    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate(['1234567']) == [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1""
    assert candidate(['3',""11111111""]) == [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2""
    assert candidate(['271', '137', '314']) == [
        'the number of odd elements 2n the str2ng 2 of the 2nput.',
        'the number of odd elements 3n the str3ng 3 of the 3nput.',
        'the number of odd elements 2n the str2ng 2 of the 2nput.'
    ]

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

","[""odd_count(['13579']) == ['the number of odd elements 5n the str5ng 5 of the 5nput.']"", ""odd_count(['2468', '97531']) == ['the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 5n the str5ng 5 of the 5nput.']"", ""odd_count(['111', '999', '2468']) == ['the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.']"", ""odd_count(['2468', '13579', '11111']) == ['the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 5n the str5ng 5 of the 5nput.', 'the number of odd elements 5n the str5ng 5 of the 5nput.']"", ""odd_count(['0', '24', '1357', '2468']) == ['the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 4n the str4ng 4 of the 4nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.']""]","@startuml

start

:Take input list of strings;
if (List is empty?) then (yes)
  :Return empty list;
else (no)
  :Initialize an empty result list;
  :Iterate over each string in the input list;
    :Initialize count variable for odd digits;
    :Iterate over each character in the string;
      if (Character is odd digit?) then (yes)
        :Increment count;
      endif
    :Add count to result list;
  :Return the result list;
endif

stop

@enduml"
HumanEval/1,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
",separate_paren_groups,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""

    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate('(()()) ((())) () ((())()())') == [
        '(()())', '((()))', '()', '((())()())'
    ]
    assert candidate('() (()) ((())) (((())))') == [
        '()', '(())', '((()))', '(((())))'
    ]
    assert candidate('(()(())((())))') == [
        '(()(())((())))'
    ]
    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
","[""separate_paren_groups('((( ))) ( )(( ))') == ['((()))', '()', '(())']"", ""separate_paren_groups('(( )) (( ))(())()') == ['(())', '(())', '(())', '()']"", ""separate_paren_groups('( ) ( ) ( )') == ['()', '()', '()']"", ""separate_paren_groups('()()()()') == ['()', '()', '()', '()']"", ""separate_paren_groups('(())((()))') == ['(())', '((()))']""]","@startuml
start

:Initialize an empty list to store separated groups;
:Initialize an empty string to store the current group;
:Initialize a counter for open parentheses;

while (Iterate over each character in the input string)
    :Current character;

    if (Character is an open parenthesis)
        :Increment open parentheses counter;
    else if (Character is a close parenthesis)
        :Decrement open parentheses counter;

    if (Open parentheses counter is 0)
        :Add current group to the list;
        :Reset current group;
    else
        :Append character to current group;

endwhile

:Add the last group to the list;
:Return the list of separated groups;

stop
@enduml"
HumanEval/70,"
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
",strange_sort_list,"
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''

    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
    assert candidate([]) == []
    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
    assert candidate([111111]) == [111111]

    # Check some edge cases that are easy to work out by hand.
    assert True

","[""strange_sort_list([3, 5, 2, 7, 1, 9]) == [1, 9, 2, 7, 3, 5]"", ""strange_sort_list([8, 3, 6, 1, 9, 2, 7]) == [1, 9, 2, 8, 3, 7, 6]"", ""strange_sort_list([10, 20, 15, 5]) == [5, 20, 10, 15]"", ""strange_sort_list([100, 50, 75, 25]) == [25, 100, 50, 75]"", ""strange_sort_list([2, 4, 6, 8, 10]) == [2, 10, 4, 8, 6]""]","@startuml
start
if (List is empty?) then (yes)
  :Return empty list;
else (no)
  :Initialize sorted_list as empty list;
  :Sort the input list in ascending order;
  :Initialize min_index as 0;
  :Initialize max_index as the length of list - 1;
  while (min_index <= max_index)
    :Append list[min_index] to sorted_list;
    if (min_index < max_index) then (yes)
      :Append list[max_index] to sorted_list;
    endif
    :Increment min_index by 1;
    :Decrement max_index by 1;
  endwhile
  :Return sorted_list;
endif
stop
@enduml"
HumanEval/42,"

def incr_list(l: list):
    """"""Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
",incr_list,"

def incr_list(l: list):
    """"""Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""

    return [(e + 1) for e in l]
","

METADATA = {}


def check(candidate):
    assert candidate([]) == []
    assert candidate([3, 2, 1]) == [4, 3, 2]
    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

","[""incr_list([0, 0, 0]) == [1, 1, 1]"", ""incr_list([10, 20, 30, 40]) == [11, 21, 31, 41]"", ""incr_list([100, 200, 300, 400, 500]) == [101, 201, 301, 401, 501]"", ""incr_list([7, 14, 21, 28, 35, 42]) == [8, 15, 22, 29, 36, 43]"", ""incr_list([2, 4, 6, 8, 10, 12, 14]) == [3, 5, 7, 9, 11, 13, 15]""]","@startuml
start

:Input list (l);
if (Is list empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize an empty result list;
    :Iterate over each element in the input list;
    :Increment each element by 1;
    :Add the incremented element to the result list;
    :Return the result list;
    stop
endif

@enduml"
HumanEval/158,"
def find_max(words):
    """"""Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max([""name"", ""of"", ""string""]) == ""string""
    find_max([""name"", ""enam"", ""game""]) == ""enam""
    find_max([""aaaaaaa"", ""bb"" ,""cc""]) == """"aaaaaaa""
    """"""
",find_max,"
def find_max(words):
    """"""Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max([""name"", ""of"", ""string""]) == ""string""
    find_max([""name"", ""enam"", ""game""]) == ""enam""
    find_max([""aaaaaaa"", ""bb"" ,""cc""]) == """"aaaaaaa""
    """"""

    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def check(candidate):

    # Check some simple cases
    assert (candidate([""name"", ""of"", ""string""]) == ""string""), ""t1""
    assert (candidate([""name"", ""enam"", ""game""]) == ""enam""), 't2'
    assert (candidate([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa""), 't3'
    assert (candidate([""abc"", ""cba""]) == ""abc""), 't4'
    assert (candidate([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott""), 't5'
    assert (candidate([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna""), 't6'
    assert (candidate([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation""), 't7'
    assert (candidate([""this"", ""is"", ""a"", ""prrk""]) == ""this""), 't8'

    # Check some edge cases that are easy to work out by hand.
    assert (candidate([""b""]) == ""b""), 't9'
    assert (candidate([""play"", ""play"", ""play""]) == ""play""), 't10'

","[""find_max([\""python\"", \""java\"", \""ruby\"", \""javascript\""]) == \""javascript\"""", ""find_max([\""abcde\"", \""fghij\"", \""klmno\""]) == \""abcde\"""", ""find_max([\""apple\"", \""banana\"", \""orange\"", \""strawberry\""]) == \""strawberry\"""", ""find_max([\""hello\"", \""world\"", \""python\""]) == \""python\"""", ""find_max([\""alpha\"", \""beta\"", \""gamma\""]) == \""alpha\""""]","@startuml
start

:Input list of words;
:Initialize variables: max_unique = 0, result = """";

repeat
    :For each word in the list;
    :Calculate the number of unique characters in the word;
    if (Number of unique characters > max_unique) then (yes)
        :Update max_unique with the new value;
        :Set result to the current word;
    else if (Number of unique characters == max_unique) then (yes)
        if (Current word < result in lexicographical order) then (yes)
            :Set result to the current word;
        else (no)
            :Keep result unchanged;
        endif
    else (no)
        :Keep result unchanged;
    endif
repeat while (More words in the list?)

:Return result;
stop
@enduml"
HumanEval/48,"

def is_palindrome(text: str):
    """"""
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
",is_palindrome,"

def is_palindrome(text: str):
    """"""
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""

    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","

METADATA = {}


def check(candidate):
    assert candidate('') == True
    assert candidate('aba') == True
    assert candidate('aaaaa') == True
    assert candidate('zbcd') == False
    assert candidate('xywyx') == True
    assert candidate('xywyz') == False
    assert candidate('xywzx') == False

","[""is_palindrome('') == True"", ""is_palindrome('aba') == True"", ""is_palindrome('aaaaa') == True"", ""is_palindrome('zbcd') == False""]","@startuml
start

:Input text;
if (Is text empty?) then (yes)
    :Return True;
    stop
else (no)
    :Initialize left = 0, right = len(text) - 1;
    while (left < right) is (yes)
        if (text[left] == text[right]) then (yes)
            :Increment left;
            :Decrement right;
        else (no)
            :Return False;
            stop
        endif
    endwhile (no)
    :Return True;
    stop
endif

@enduml"
HumanEval/57,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
",monotonic,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""

    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","

METADATA = {}


def check(candidate):
    assert candidate([1, 2, 4, 10]) == True
    assert candidate([1, 2, 4, 20]) == True
    assert candidate([1, 20, 4, 10]) == False
    assert candidate([4, 1, 0, -10]) == True
    assert candidate([4, 1, 1, 0]) == True
    assert candidate([1, 2, 3, 2, 5, 60]) == False
    assert candidate([1, 2, 3, 4, 5, 60]) == True
    assert candidate([9, 9, 9, 9]) == True

","[""monotonic([1, 1, 1, 1]) == True"", ""monotonic([5, 4, 3, 2, 1]) == True"", ""monotonic([10, 20, 30, 40, 30]) == False"", ""monotonic([100, 100, 100, 100]) == True"", ""monotonic([0, -5, -10, -15]) == True""]","@startuml
start
:Start;
:Initialize list l;
if (Length of l <= 1) then (yes)
  :Return True;
else (no)
  :Set increasing = True;
  :Set decreasing = True;
  :Loop through each element i in l;
  if (i < i+1) then (yes)
    :Set decreasing = False;
  else (no)
    :Set increasing = False;
  endif
  end
  if (increasing or decreasing) then (yes)
    :Return True;
  else (no)
    :Return False;
  endif
endif
@enduml"
HumanEval/152,"
def compare(game,guess):
    """"""I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """"""
",compare,"
def compare(game,guess):
    """"""I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """"""

    return [abs(x-y) for x,y in zip(game,guess)]
","def check(candidate):

    # Check some simple cases
    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

","[""compare([0,0,0,0],[0,0,0,0]) == [0,0,0,0]"", ""compare([10,20,30,40,50],[10,20,30,40,55]) == [0,0,0,0,5]"", ""compare([5,5,5],[5,5,5]) == [0,0,0]"", ""compare([100,200,300,400],[99,201,298,401]) == [1,1,2,1]"", ""compare([1,3,5,7,9],[1,2,4,6,8]) == [0,1,1,1,1]""]","@startuml
start

:Input two arrays: game and guess;
:Initialize an empty list: result;

while (Iterate over each index in game and guess) is (not end of arrays)
    :Get current game score: game[i];
    :Get current guess: guess[i];
    if (game[i] == guess[i]) then (yes)
        :Append 0 to result;
    else (no)
        :Calculate absolute difference: |game[i] - guess[i]|;
        :Append the difference to result;
    endif
endwhile

:Return the result list;

stop
@enduml"
HumanEval/83,"
def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
",starts_one_ends,"
def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""

    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1) == 1
    assert candidate(2) == 18
    assert candidate(3) == 180
    assert candidate(4) == 1800
    assert candidate(5) == 18000

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""

","[""starts_one_ends(2) == 18"", ""starts_one_ends(3) == 180"", ""starts_one_ends(4) == 1800"", ""starts_one_ends(5) == 18000"", ""starts_one_ends(6) == 180000""]","@startuml
start

:Input positive integer n;
if (n <= 0?) then (yes)
    :Return 0 (invalid input);
    stop
else (no)
    :Initialize count = 0;
    :Calculate lower bound = 10^(n-1);
    :Calculate upper bound = 10^n - 1;
    :Iterate through numbers from lower bound to upper bound;
    while (Number <= upper bound?) is (yes)
        :Convert number to string;
        if (Number starts with '1' or ends with '1'?) then (yes)
            :Increment count by 1;
        else (no)
            :Do nothing;
        endif
        :Move to next number;
    endwhile (no)
    :Return count;
    stop
endif

@enduml"
HumanEval/30,"

def get_positive(l: list):
    """"""Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
",get_positive,"

def get_positive(l: list):
    """"""Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""

    return [e for e in l if e > 0]
","

METADATA = {}


def check(candidate):
    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
    assert candidate([-1, -2]) == []
    assert candidate([]) == []

","[""get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]"", ""get_positive([0, 1, 2, 3, -4, -5]) == [1, 2, 3]"", ""get_positive([-10, -20, -30, -5, 0, 5, 10]) == [5, 10]"", ""get_positive([100, -100, 200, -200, 300]) == [100, 200, 300]"", ""get_positive([-2, -4, -6, -8, -10]) == []""]","@startuml
start

:Input list l;
:Initialize empty list positive_numbers;

if (Is l empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Iterate through each element in l;
    :Check if element > 0;
    if (element > 0?) then (yes)
        :Add element to positive_numbers;
    else (no)
        :Skip element;
    endif
    :Check if all elements processed?;
    if (All elements processed?) then (yes)
        :Return positive_numbers;
        stop
    else (no)
        :Continue iteration;
    endif
endif
@enduml"
HumanEval/114,"
def minSubArraySum(nums):
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
",minSubArraySum,"
def minSubArraySum(nums):
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""

    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def check(candidate):

    # Check some simple cases
    assert candidate([2, 3, 4, 1, 2, 4]) == 1, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate([-1, -2, -3]) == -6
    assert candidate([-1, -2, -3, 2, -10]) == -14
    assert candidate([-9999999999999999]) == -9999999999999999
    assert candidate([0, 10, 20, 1000000]) == 0
    assert candidate([-1, -2, -3, 10, -5]) == -6
    assert candidate([100, -1, -2, -3, 10, -5]) == -6
    assert candidate([10, 11, 13, 8, 3, 4]) == 3
    assert candidate([100, -33, 32, -1, 0, -2]) == -33

    # Check some edge cases that are easy to work out by hand.
    assert candidate([-10]) == -10, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate([7]) == 7
    assert candidate([1, -1]) == -1
","[""minSubArraySum([1, 2, 3, 4, 5]) == 1"", ""minSubArraySum([-5, -3, -8, -2]) == -18"", ""minSubArraySum([0, 0, 0, 0, 0]) == 0"", ""minSubArraySum([-1, 1, -2, 2, -3, 3]) == -3"", ""minSubArraySum([-10, -5, 0, 5, 10]) == -15""]","@startuml
start

:Input array nums;
if (Is nums empty?) then (yes)
    :Return 0 or handle error;
    stop
else (no)
    :Initialize min_sum = nums[0];
    :Initialize current_sum = nums[0];
    :Initialize i = 1;
    while (i < length of nums) is (yes)
        :Update current_sum = min(nums[i], current_sum + nums[i]);
        :Update min_sum = min(min_sum, current_sum);
        :i = i + 1;
    endwhile (no)
    :Return min_sum;
    stop
endif

@enduml"
HumanEval/90,"
def next_smallest(lst):
    """"""
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""
",next_smallest,"
def next_smallest(lst):
    """"""
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""

    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def check(candidate):

    # Check some simple cases
    assert candidate([1, 2, 3, 4, 5]) == 2
    assert candidate([5, 1, 4, 3, 2]) == 2
    assert candidate([]) == None
    assert candidate([1, 1]) == None
    assert candidate([1,1,1,1,0]) == 1
    assert candidate([1, 0**0]) == None
    assert candidate([-35, 34, 12, -45]) == -35

    # Check some edge cases that are easy to work out by hand.
    assert True

","[""next_smallest([1, 2, 3, 4, 5]) == 2"", ""next_smallest([5, 1, 4, 3, 2]) == 2"", ""next_smallest([]) == None"", ""next_smallest([1, 1]) == None""]","@startuml
start

:Input list of integers (lst);
if (Is lst empty?) then (yes)
    :Return None;
    stop
else (no)
    :Sort the list in ascending order;
    :Remove duplicate elements from the list;
    if (Does the list have at least 2 unique elements?) then (yes)
        :Return the second element of the sorted list;
        stop
    else (no)
        :Return None;
        stop
    endif
endif

@enduml"
HumanEval/78,"
def hex_key(num):
    """"""You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = ""AB"" the output should be 1.
    For num = ""1077E"" the output should be 2.
    For num = ""ABED1A33"" the output should be 4.
    For num = ""123456789ABCDEF0"" the output should be 6.
    For num = ""2020"" the output should be 2.
    """"""
",hex_key,"
def hex_key(num):
    """"""You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = ""AB"" the output should be 1.
    For num = ""1077E"" the output should be 2.
    For num = ""ABED1A33"" the output should be 4.
    For num = ""123456789ABCDEF0"" the output should be 6.
    For num = ""2020"" the output should be 2.
    """"""

    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def check(candidate):

    # Check some simple cases
    assert candidate(""AB"") == 1, ""First test error: "" + str(candidate(""AB""))      
    assert candidate(""1077E"") == 2, ""Second test error: "" + str(candidate(""1077E""))  
    assert candidate(""ABED1A33"") == 4, ""Third test error: "" + str(candidate(""ABED1A33""))      
    assert candidate(""2020"") == 2, ""Fourth test error: "" + str(candidate(""2020""))  
    assert candidate(""123456789ABCDEF0"") == 6, ""Fifth test error: "" + str(candidate(""123456789ABCDEF0""))      
    assert candidate(""112233445566778899AABBCCDDEEFF00"") == 12, ""Sixth test error: "" + str(candidate(""112233445566778899AABBCCDDEEFF00""))  


    # Check some edge cases that are easy to work out by hand.
    assert candidate([]) == 0

","[""hex_key(\""1234\"") == 2"", ""hex_key(\""5F\"") == 1"", ""hex_key(\""777\"") == 3"", ""hex_key(\""ABCDE\"") == 2"", ""hex_key(\""9090\"") == 0"", ""hex_key(\""2D2D\"") == 4""]","@startuml
start

:Input hexadecimal number as string (num);
if (num is empty?) then (yes)
    :Return 0;
    stop
else (no)
    :Initialize count = 0;
    :Define prime digits = {'2', '3', '5', '7', 'B', 'D'};
    :Iterate over each character in num;
    while (More characters to process?) is (yes)
        :Get current character (digit);
        if (digit is in prime digits?) then (yes)
            :Increment count by 1;
        else (no)
            :Continue;
        endif
    endwhile
    :Return count;
    stop
endif

@enduml"
HumanEval/36,"

def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
",fizz_buzz,"

def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""

    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","

METADATA = {}


def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026

","[""fizz_buzz(100) == 3"", ""fizz_buzz(120) == 4"", ""fizz_buzz(150) == 4"", ""fizz_buzz(200) == 6"", ""fizz_buzz(99) == 3""]","@startuml
start
:Initialize count to 0;
:Initialize i to 1;
while (i < n) is divisible by 11 or 13
    if (i % 11 == 0) or (i % 13 == 0)
        :Check if i contains digit 7;
        if (i contains digit 7)
            :Increment count;
        endif
    endif
    :Increment i;
endwhile
:Return count;
stop
@enduml"
HumanEval/66,"
def digitSum(s):
    """"""Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("""") => 0
        digitSum(""abAB"") => 131
        digitSum(""abcCd"") => 67
        digitSum(""helloE"") => 69
        digitSum(""woArBld"") => 131
        digitSum(""aAaaaXa"") => 153
    """"""
",digitSum,"
def digitSum(s):
    """"""Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("""") => 0
        digitSum(""abAB"") => 131
        digitSum(""abcCd"") => 67
        digitSum(""helloE"") => 69
        digitSum(""woArBld"") => 131
        digitSum(""aAaaaXa"") => 153
    """"""

    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def check(candidate):

    # Check some simple cases
    assert True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate("""") == 0, ""Error""
    assert candidate(""abAB"") == 131, ""Error""
    assert candidate(""abcCd"") == 67, ""Error""
    assert candidate(""helloE"") == 69, ""Error""
    assert candidate(""woArBld"") == 131, ""Error""
    assert candidate(""aAaaaXa"") == 153, ""Error""

    # Check some edge cases that are easy to work out by hand.
    assert True, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate("" How are yOu?"") == 151, ""Error""
    assert candidate(""You arE Very Smart"") == 327, ""Error""

","[""digitSum(\""\"") == 0"", ""digitSum(\""abAB\"") == 131"", ""digitSum(\""abcCd\"") == 67"", ""digitSum(\""helloE\"") == 69"", ""digitSum(\""woArBld\"") == 131"", ""digitSum(\""aAaaaXa\"") == 153""]","@startuml
start

:Input string s;
if (Is s empty?) then (yes)
    :Return 0;
    stop
else (no)
    :Initialize sum = 0;
    :Initialize index = 0;
    while (index < length of s?) is (yes)
        :Get character c = s[index];
        if (Is c an uppercase letter?) then (yes)
            :Add ASCII value of c to sum;
        else (no)
            :Do nothing;
        endif
        :Increment index by 1;
    endwhile (no)
    :Return sum;
    stop
endif

@enduml"
HumanEval/12,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
",longest,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""

    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate([]) == None
    assert candidate(['x', 'y', 'z']) == 'x'
    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
","[""longest(['hello', 'world', 'python', 'programming']) == 'programming'"", ""longest(['apple', 'banana', 'kiwi']) == 'banana'"", ""longest(['cat', 'dog', 'elephant', 'lion']) == 'elephant'"", ""longest(['a', 'bb', 'ccc', 'dddd']) == 'dddd'"", ""longest(['coding', 'is', 'fun']) == 'coding'""]","@startuml
start

:Input list of strings (strings);
if (Is strings empty?) then (yes)
    :Return None;
    stop
else (no)
    :Initialize longest_string as None;
    :Initialize max_length as 0;
    :Iterate over each string in strings;
    while (More strings to process?) is (yes)
        :Get current string;
        if (Length of current string > max_length?) then (yes)
            :Update longest_string with current string;
            :Update max_length with length of current string;
        else (no)
            :Do nothing;
        endif
    endwhile
    :Return longest_string;
    stop
endif

@enduml"
HumanEval/20,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
",find_closest_elements,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""

    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

","[""find_closest_elements([3.5, 2.5, 6.7, 8.9, 3.6, 5.1]) == (3.5, 3.6)"", ""find_closest_elements([10.0, 20.0, 30.0, 40.0, 25.0, 18.0]) == (18.0, 20.0)"", ""find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.1]) == (0.1, 0.1)"", ""find_closest_elements([7.8, 9.2, 6.5, 11.3, 8.0, 10.0]) == (7.8, 8.0)"", ""find_closest_elements([4.4, 5.5, 6.6, 7.7, 8.8, 4.6]) == (4.4, 4.6)""]","@startuml
start

:Input list of numbers (numbers);
if (Is list length >= 2?) then (yes)
    :Sort the list (sorted_numbers);
    :Initialize min_diff to a large value;
    :Initialize closest_pair as (None, None);
    :Initialize i = 0;
    while (i < len(sorted_numbers) - 1) is (yes)
        :Calculate difference between sorted_numbers[i] and sorted_numbers[i+1];
        if (difference < min_diff?) then (yes)
            :Update min_diff to difference;
            :Update closest_pair to (sorted_numbers[i], sorted_numbers[i+1]);
        else (no)
        endif
        :Increment i by 1;
    endwhile
    :Return closest_pair;
else (no)
    :Raise ValueError(""List must contain at least two numbers"");
endif

stop
@enduml"
HumanEval/138,"
def is_equal_to_sum_even(n):
    """"""Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """"""
",is_equal_to_sum_even,"
def is_equal_to_sum_even(n):
    """"""Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """"""

    return n%2 == 0 and n >= 8
","def check(candidate):
    assert candidate(4) == False
    assert candidate(6) == False
    assert candidate(8) == True
    assert candidate(10) == True
    assert candidate(11) == False
    assert candidate(12) == True
    assert candidate(13) == False
    assert candidate(16) == True
","[""is_equal_to_sum_even(10) == True"", ""is_equal_to_sum_even(12) == True"", ""is_equal_to_sum_even(15) == False"", ""is_equal_to_sum_even(18) == True"", ""is_equal_to_sum_even(6) == False""]","@startuml
start

:Input number n;
if (n < 8 or n % 2 != 0) then (yes)
    :Return False;
    stop
else (no)
    :Check if n can be expressed as the sum of 4 positive even numbers;
    :Calculate the minimum possible sum of 4 positive even numbers (2 + 2 + 2 + 2 = 8);
    if (n == 8) then (yes)
        :Return True;
        stop
    else (no)
        :Check if n > 8 and n is even;
        if (n > 8 and n is even) then (yes)
            :Return True;
            stop
        else (no)
            :Return False;
            stop
        endif
    endif
endif

@enduml"
HumanEval/18,"

def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
",how_many_times,"

def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""

    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate('', 'x') == 0
    assert candidate('xyxyxyx', 'x') == 4
    assert candidate('cacacacac', 'cac') == 4
    assert candidate('john doe', 'john') == 1
","[""how_many_times('abcdefgh', 'cd') == 1"", ""how_many_times('abababab', 'ab') == 4"", ""how_many_times('banana', 'na') == 2"", ""how_many_times('mississippi', 'issi') == 2"", ""how_many_times('hellohellohello', 'hello') == 3""]","@startuml
start
:Initialize count to 0;
:Check if substring is empty;
if (Empty substring?) then (yes)
    :Return 0;
    stop
else (no)
    :Initialize index to 0;
    :Initialize count to 0;
    while (index <= len(string) - len(substring)) is (true)
        :Check if substring matches at current index;
        if (Match found?) then (yes)
            :Increment count;
        endif
        :Move index to the next position;
    endwhile
    :Return count;
    stop
endif
@enduml"
HumanEval/55,"

def fib(n: int):
    """"""Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
",fib,"

def fib(n: int):
    """"""Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""

    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","

METADATA = {}


def check(candidate):
    assert candidate(10) == 55
    assert candidate(1) == 1
    assert candidate(8) == 21
    assert candidate(11) == 89
    assert candidate(12) == 144

","[""fib(5) == 5"", ""fib(3) == 2"", ""fib(6) == 8"", ""fib(12) == 144"", ""fib(15) == 610""]","@startuml
start

:Input n (integer);
if (n < 0?) then (yes)
    :Invalid input: n must be >= 0;
    stop
else (no)
    if (n == 0?) then (yes)
        :Return 0;
        stop
    else (no)
        if (n == 1?) then (yes)
            :Return 1;
            stop
        else (no)
            :Initialize variables:
            a = 0, b = 1, i = 2;
            while (i <= n?) is (yes)
                :c = a + b;
                :a = b;
                :b = c;
                :i = i + 1;
            endwhile (no)
            :Return b;
            stop
        endif
    endif
endif

@enduml"
HumanEval/61,"

def correct_bracketing(brackets: str):
    """""" brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
",correct_bracketing,"

def correct_bracketing(brackets: str):
    """""" brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""

    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","

METADATA = {}


def check(candidate):
    assert candidate(""()"")
    assert candidate(""(()())"")
    assert candidate(""()()(()())()"")
    assert candidate(""()()((()()())())(()()(()))"")
    assert not candidate(""((()())))"")
    assert not candidate("")(()"")
    assert not candidate(""("")
    assert not candidate(""(((("")
    assert not candidate("")"")
    assert not candidate(""(()"")
    assert not candidate(""()()(()())())(()"")
    assert not candidate(""()()(()())()))()"")

","[""correct_bracketing(\""(\"") == False"", ""correct_bracketing(\""()\"") == True"", ""correct_bracketing(\""(()())\"") == True"", ""correct_bracketing(\"")(()\"") == False""]","@startuml
start

:Input brackets string;
:Initialize counter = 0;

if (Is brackets empty?) then (yes)
    :Return True;
    stop
else (no)
    :Iterate through each character in brackets;
    if (Character is '('?) then (yes)
        :Increment counter by 1;
    else (no)
        if (Character is ')'?) then (yes)
            :Decrement counter by 1;
        else (no)
            :Return False (invalid character);
            stop
        endif
    endif
    if (counter < 0) then (yes)
        :Return False (unmatched closing bracket);
        stop
    else (no)
        :Continue iteration;
    endif
endif

if (counter == 0) then (yes)
    :Return True (all brackets matched);
else (no)
    :Return False (unmatched opening brackets);
endif

stop
@enduml"
HumanEval/86,"
def anti_shuffle(s):
    """"""
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """"""
",anti_shuffle,"
def anti_shuffle(s):
    """"""
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """"""

    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def check(candidate):

    # Check some simple cases
    assert candidate('Hi') == 'Hi'
    assert candidate('hello') == 'ehllo'
    assert candidate('number') == 'bemnru'
    assert candidate('abcd') == 'abcd'
    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
    assert candidate('') == ''
    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
    # Check some edge cases that are easy to work out by hand.
    assert True

","[""anti_shuffle('Python is fun') == 'Phnoty is fnu'"", ""anti_shuffle('123 456 789') == '123 456 789'"", ""anti_shuffle('a b c d') == 'a b c d'"", ""anti_shuffle('xyz') == 'xyz'"", ""anti_shuffle('This is a test') == 'This is a estt'""]","@startuml
start

:Input string 's';
:Initialize an empty list 'result';
:Split 's' into words using space as delimiter;
:For each word in the split list;
    :Initialize an empty list 'sorted_chars';
    :For each character in the word;
        :Add character to 'sorted_chars';
    :End for;
    :Sort 'sorted_chars' based on ASCII value;
    :Join 'sorted_chars' to form a new word;
    :Add the new word to 'result';
:End for;
:Join 'result' with spaces to form the final string;
:Return the final string;

stop
@enduml"
HumanEval/5,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
",intersperse,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""

    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate([], 7) == []
    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
","[""intersperse([4, 5, 6], 9) == [4, 9, 5, 9, 6]"", ""intersperse([0, 1, 0, 1], 2) == [0, 2, 1, 2, 0, 2, 1]"", ""intersperse([-1, -2, -3, -4], -5) == [-1, -5, -2, -5, -3, -5, -4]"", ""intersperse([10, 20, 30, 40, 50], 100) == [10, 100, 20, 100, 30, 100, 40, 100, 50]"", ""intersperse([1000], 500) == [1000]""]","@startuml
start

:Input: List of integers (numbers) and integer (delimeter);
if (Is numbers list empty?) then (yes)
    :Return empty list;
    stop
else (no)
    :Initialize an empty result list;
    :Initialize index (i) to 0;
    while (i < length of numbers list?) is (yes)
        :Append numbers[i] to result list;
        if (i < length of numbers list - 1?) then (yes)
            :Append delimeter to result list;
        else (no)
        endif
        :Increment index (i) by 1;
    endwhile (no)
    :Return result list;
    stop
endif

@enduml"
HumanEval/94,"

def skjkasdkd(lst):
    """"""You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """"""
",skjkasdkd,"

def skjkasdkd(lst):
    """"""You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """"""

    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def check(candidate):

    # Check some simple cases
    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, ""This prints if this assert fails 1 (good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, ""This prints if this assert fails 2 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, ""This prints if this assert fails 3 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, ""This prints if this assert fails 4 (also good for debugging!)""
    
    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,81,12,3,1,21]) == 3, ""This prints if this assert fails 5 (also good for debugging!)""

    # Check some edge cases that are easy to work out by hand.
    assert candidate([0,8,1,2,1,7]) == 7, ""This prints if this assert fails 6 (also good for debugging!)""

    assert candidate([8191]) == 19, ""This prints if this assert fails 7 (also good for debugging!)""
    assert candidate([8191, 123456, 127, 7]) == 19, ""This prints if this assert fails 8 (also good for debugging!)""
    assert candidate([127, 97, 8192]) == 10, ""This prints if this assert fails 9 (also good for debugging!)""
","[""skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23]) == 5"", ""skjkasdkd([4, 6, 8, 9, 10, 15, 21, 25, 27]) == 0"", ""skjkasdkd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 2"", ""skjkasdkd([1, 2, 3, 5, 8, 13, 21, 34, 55, 89]) == 17"", ""skjkasdkd([17, 19, 23, 29, 31, 37, 41, 43, 47, 53]) == 8""]","@startuml
start

:Initialize largest prime value as 0;
:Initialize sum of digits as 0;

:Loop through each number in the list;
:Check if the number is prime;
if (Number is prime?) then (yes)
    :Update largest prime value if current number is greater;
else (no)
    :Continue to next number;
endif

:Calculate sum of digits of the largest prime number;

stop
@enduml"
HumanEval/157,"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
",right_angle_triangle,"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''

    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def check(candidate):

    # Check some simple cases
    assert candidate(3, 4, 5) == True, ""This prints if this assert fails 1 (good for debugging!)""
    assert candidate(1, 2, 3) == False
    assert candidate(10, 6, 8) == True
    assert candidate(2, 2, 2) == False
    assert candidate(7, 24, 25) == True
    assert candidate(10, 5, 7) == False
    assert candidate(5, 12, 13) == True
    assert candidate(15, 8, 17) == True
    assert candidate(48, 55, 73) == True

    # Check some edge cases that are easy to work out by hand.
    assert candidate(1, 1, 1) == False, ""This prints if this assert fails 2 (also good for debugging!)""
    assert candidate(2, 2, 10) == False

","[""right_angle_triangle(5, 12, 13) == True"", ""right_angle_triangle(6, 8, 10) == True"", ""right_angle_triangle(7, 24, 25) == True"", ""right_angle_triangle(9, 40, 41) == True"", ""right_angle_triangle(15, 36, 39) == True""]","@startuml
start
if (a^2 + b^2 == c^2) then (True)
  :Return True;
else (False)
  :Return False;
endif
stop
@enduml"
HumanEval/0,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
",has_close_elements,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

","[""has_close_elements([0.5, 1.5, 2.5, 3.5], 0.3) == False"", ""has_close_elements([10.5, 12.3, 15.8, 20.1], 2.0) == True"", ""has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], 0.1) == False"", ""has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5], 0.05) == False"", ""has_close_elements([7.8, 8.5, 9.1, 10.3], 0.4) == False""]","@startuml
start

:Input: List of numbers (numbers) and threshold (threshold);
:Sort the list of numbers (numbers);
:Initialize index i = 0;

while (i < length of numbers - 1?) is (yes)
    :Calculate difference between numbers[i+1] and numbers[i];
    if (difference < threshold?) is (yes) then
        :Return True;
        stop
    else (no)
        :Increment i by 1;
    endif
endwhile (no)

:Return False;
stop

@enduml"
HumanEval/16,"

def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
",count_distinct_characters,"

def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""

    return len(set(string.lower()))
","

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5
","[""count_distinct_characters('hello') == 4"", ""count_distinct_characters('Mississippi') == 4"", ""count_distinct_characters('12345') == 5"", ""count_distinct_characters('aAaAaA') == 1"", ""count_distinct_characters('PythonProgramming') == 11""]","@startuml
start

:Input string;
:Convert string to lowercase;
:Initialize an empty set to store distinct characters;

repeat
    :Iterate over each character in the string;
    :Add character to the set;
repeat while (More characters to process?) is (yes)
->no;

:Calculate the size of the set;
:Return the size of the set as the count of distinct characters;

stop
@enduml"
